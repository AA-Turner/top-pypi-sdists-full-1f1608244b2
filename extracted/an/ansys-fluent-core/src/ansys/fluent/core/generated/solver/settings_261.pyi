#
# This is an auto-generated file.  DO NOT EDIT!
#

from ansys.fluent.core.solver.flobject import *

from ansys.fluent.core.solver.flobject import (
    _ChildNamedObjectAccessorMixin,
    _NonCreatableNamedObjectMixin,
    _InputFile,
    _OutputFile,
    _InOutFile,
)

from typing import Any

class single_precision_coordinates(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class binary_legacy_files(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cff_files(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_merge_zones(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class convert_hanging_nodes_during_read(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class async_optimize(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class write_pdat(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class case_frequency(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class data_frequency(Real):
    _version: str
    fluent_name: str
    _python_name: str
class root_name(Filename, _OutputFile):
    _version: str
    fluent_name: str
    _python_name: str
class retain_most_recent_files(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_files(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class file_suffix_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class file_decimal_digit(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class append_file_name_with(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file_suffix_type: file_suffix_type
    file_decimal_digit: file_decimal_digit
class frequency_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class save_frequency(Real):
    _version: str
    fluent_name: str
    _python_name: str
class save_data_file_every(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    frequency_type: frequency_type
    save_frequency: save_frequency
class auto_save(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    case_frequency: case_frequency
    data_frequency: data_frequency
    root_name: root_name
    retain_most_recent_files: retain_most_recent_files
    max_files: max_files
    append_file_name_with: append_file_name_with
    save_data_file_every: save_data_file_every
class enable_auto_creation_of_scp_file(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sc_def_file_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable_auto_creation_of_scp_file: enable_auto_creation_of_scp_file
    def write_sc_file(self, file_name: str):
        """
        Write a Fluent Input File for System Coupling.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
        """
class cgns_export_filetype(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_mesh_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_polyhedral_cpu_threads(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_merge_ngons_to_single_ngon(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_default_cellsize_changes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_enhance_poly_export_performance(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_familyname(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cgns_separate_cellzones(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cgns_export_filetype: cgns_export_filetype
    cgns_mesh_type: cgns_mesh_type
    cgns_polyhedral_cpu_threads: cgns_polyhedral_cpu_threads
    cgns_merge_ngons_to_single_ngon: cgns_merge_ngons_to_single_ngon
    cgns_default_cellsize_changes: cgns_default_cellsize_changes
    cgns_enhance_poly_export_performance: cgns_enhance_poly_export_performance
    cgns_familyname: cgns_familyname
    cgns_separate_cellzones: cgns_separate_cellzones
class export(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    sc_def_file_settings: sc_def_file_settings
    settings: settings
    def abaqus(self, file_name: str, surface_name_list: list[str], structural_analysis: bool, write_loads: bool, loads: list[str]):
        """
        Write an ABAQUS file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surface_name_list : List
                List of surfaces to export.
            structural_analysis : bool
                Specifies whether structural analysis or not.
            write_loads : bool
                Specifies whether to write loads.
            loads : List
                The structural loads type to export.
        """
    def mechanical_apdl(self, file_name: str, thread_name_list: list[str]):
        """
        Write an Mechanical APDL file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            thread_name_list : List
                Cell zone name list.
        """
    def mechanical_apdl_input(self, file_name: str, surface_name_list: list[str], structural_analysis: bool, write_loads: bool, loads: list[str]):
        """
        Write an Mechanical APDL Input file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surface_name_list : List
                Surface.
            structural_analysis : bool
                Specifies whether structural analysis or not.
            write_loads : bool
                Specifies whether to write loads.
            loads : List
                The structural loads type to export.
        """
    def ascii(self, file_name: str, surface_name_list: list[str], delimiter: str, cell_func_domain: list[str], location: str):
        """
        Write an ASCII file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surface_name_list : List
                List of surfaces to export.
            delimiter : str
                The delimiter separating the fields.
            cell_func_domain : List
                The list of quantities to export.
            location : str
                The node or cell-center to export data values.
        """
    def avs(self, file_name: str, cell_func_domain_export: list[str]):
        """
        Write an AVS file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def ensight(self, file_name: str, cell_func_domain_export: list[str]):
        """
        Write EnSight 6 geometry, velocity, and scalar files.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def ensight_gold(self, file_name: str, cell_func_domain_export: list[str], binary_format: bool, cellzones: list[str], interior_zone_surfaces: list[str], cell_centered: bool):
        """
        Write EnSight Gold geometry, velocity, and scalar files.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
            binary_format : bool
                Specifies whether to export in binary format.
            cellzones : List
                List of cell zones to export.
            interior_zone_surfaces : List
                List of surfaces to export.
            cell_centered : bool
                Specifies whether export the cell center data values.
        """
    def ensight_gold_surface(self, file_name: str, cell_func_domain_export: list[str], binary_format: bool, surfaces: list[str], cell_centered: bool):
        """
        Write EnSight Gold geometry, velocity, and scalar files.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
            binary_format : bool
                Specifies whether to export in binary format.
            surfaces : List
                The list of surfaces to export.
            cell_centered : bool
                Specifies whether export the cell center data values.
        """
    def fieldview(self, file_name: str, cell_func_domain_export: list[str]):
        """
        Write Fieldview case and data files.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def fieldview_data(self, file_name: str, cell_func_domain_export: list[str]):
        """
        Write Fieldview case and data files.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def gambit(self, file_name: str, cell_func_domain_export: list[str]):
        """
        Write a Gambit neutral file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def cgns(self, file_name: str, scope: str, cell_zones: list[str], surfaces: list[str], cell_centered: bool, format_class: str, cgns_scalar: list[str]):
        """
        Write a CGNS file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            scope : str
                The scope of the export (volume, surface, full domain).
            cell_zones : List
                Cell zone name list.
            surfaces : List
                Surface.
            cell_centered : bool
                Specifies whether export the cell center data values.
            format_class : str
                The format to export.
            cgns_scalar : List
                The list of quantities to export.
        """
    def custom_heat_flux(self, file_name: str, wall_function: bool, surface_name_list: list[str]):
        """
        Write a generic file for heat transfer.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            wall_function : bool
                Specifies whether to include the wall function.
            surface_name_list : List
                The list of surfaces to export.
        """
    def dx(self, file_name: str, surfaces: list[str], tecplot_scalars: list[str]):
        """
        Write an IBM Data Explorer format file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                Surface.
            tecplot_scalars : List
                The list of quantities to export.
        """
    def ensight_gold_parallel_surfaces(self, file_name: str, binary_format: bool, surfaces: list[str], cell_centered: bool, cell_function: list[str]):
        """
        Write EnSight Gold geometry, velocity and scalar files for surfaces. Fluent will write files suitable for EnSight Parallel.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            binary_format : bool
                Specifies whether to export in binary format.
            surfaces : List
                Surface.
            cell_centered : bool
                Specifies whether export the cell center data values.
            cell_function : List
                The list of quantities to export.
        """
    def ensight_gold_parallel_volume(self, file_name: str, binary_format: bool, cellzones: list[str], cell_centered: bool, cell_function: list[str]):
        """
        Write EnSight Gold geometry, velocity and scalar files for cell zones and boundaries attached to them. Fluent will write files suitable for EnSight Parallel.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            binary_format : bool
                Specifies whether to export in binary format.
            cellzones : List
                Cell zone name list.
            cell_centered : bool
                Specifies whether export the cell center data values.
            cell_function : List
                The list of quantities to export.
        """
    def icemcfd_for_icepak(self, file_name: str):
        """
        Write a binary ICEMCFD domain file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
        """
    def fast_mesh(self, file_name: str):
        """
        Write a FAST/Plot3D unstructured mesh file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
        """
    def fast_solution(self, file_name: str):
        """
        Write a FAST/Plot3D unstructured solution file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
        """
    def fast_velocity(self, file_name: str):
        """
        Write a FAST/Plot3D unstructured vector function file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
        """
    def taitherm(self, file_name: str, surface_name_list: list[str], wall_function: bool, htc_on_walls: bool):
        """
        Write a TAITherm file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surface_name_list : List
                Surface.
            wall_function : bool
                Specifies whether to write the heat transfer coefficient from wall function.
            htc_on_walls : bool
                Specifies whether to write heat transfer coefficient on all the walls.
        """
    def fieldview_unstruct(self, file_name: str, surfaces: list[str], cellzones: list[str], cell_func_domain: list[str]):
        """
        Write a Fieldview unstructured combined file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                List of surfaces to export.
            cellzones : List
                List of cell zones to export.
            cell_func_domain : List
                The list of quantities to export.
        """
    def fieldview_unstruct_mesh(self, file_name: str, surfaces: list[str], cellzones: list[str], cell_func_domain: list[str]):
        """
        Write a Fieldview unstructured mesh only file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                List of surfaces to export.
            cellzones : List
                List of cell zones to export.
            cell_func_domain : List
                The list of quantities to export.
        """
    def fieldview_unstruct_data(self, file_name: str, surfaces: list[str], cellzones: list[str], cell_func_domain: list[str]):
        """
        Write a Fieldview unstructured results only file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                List of surfaces to export.
            cellzones : List
                List of cell zones to export.
            cell_func_domain : List
                The list of quantities to export.
        """
    def fieldview_unstruct_surfaces(self, option: str, file_name: str, surfaces: list[str], cell_func_domain: list[str]):
        """
        Write a Fieldview unstructured surface mesh, data.
        
        Parameters
        ----------
            option : str
                Specifies whether to export results, mesh or combined.
            file_name : str
                The desired file name to export.
            surfaces : List
                Surface.
            cell_func_domain : List
                The list of quantities to export.
        """
    def ideas(self, file_name: str, surfaces: list[str], structural_analysis: bool, write_loads: bool, loads: list[str], cell_func_domain_export: list[str]):
        """
        Write an IDEAS universal file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                List of surfaces to export.
            structural_analysis : bool
                Specifies whether structural analysis or not.
            write_loads : bool
                Specifies whether to write loads.
            loads : List
                The structural loads type to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def nastran(self, file_name: str, bndry_threads: list[str], surfaces: list[str], structural_analysis: bool, write_loads: bool, loads: list[str], cell_func_domain_export: list[str]):
        """
        Write a NASTRAN file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            bndry_threads : List
                Boundary zone name list.
            surfaces : List
                Surface.
            structural_analysis : bool
                Specifies whether structural analysis or not.
            write_loads : bool
                Specifies whether to write loads.
            loads : List
                The structural loads type to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def patran_neutral(self, file_name: str, surfaces: list[str], structural_analysis: bool, write_loads: bool, loads: list[str], cell_func_domain_export: list[str]):
        """
        Write a PATRAN neutral file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                Surface.
            structural_analysis : bool
                Specifies whether structural analysis or not.
            write_loads : bool
                Specifies whether to write loads.
            loads : List
                The structural loads type to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def patran_nodal(self, file_name: str, surfaces: list[str], cell_func_domain_export: list[str]):
        """
        Write a PATRAN nodal results file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                The list of surfaces to export.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def tecplot(self, file_name: str, surfaces: list[str], cell_func_domain_export: list[str]):
        """
        Write a Tecplot+3DV format file.
        
        Parameters
        ----------
            file_name : str
                The desired file name to export.
            surfaces : List
                Surface.
            cell_func_domain_export : List
                The list of quantities to export.
        """
    def outline_view_settings(self, outline_view_path: str, file_name: str, extension: str):
        """
        Export case settings by providing the location of those settings in the Outline View tree.
        
        Parameters
        ----------
            outline_view_path : str
                Export case settings by providing the location of those settings in the Outline View Tree.
         For example, "setup/models/viscous" will export the settings of the viscous turbulence model.
            file_name_1 : str
                Filename for exported file.
            extension : str
                Extension to export the file.
        """
class create_zones_from_ccl(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class import_(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    create_zones_from_ccl: create_zones_from_ccl
    def read(self, file_type: str, file_name: str):
        """
        Select the file type and import the file.
        
        Parameters
        ----------
            file_type : str
                The file type.
            file_name_1 : str
                The name of the file to be read.
        """
    def chemkin_report_each_line(self, report_each_line: bool):
        """
        Choose whether or not to report after reading each line.
        
        Parameters
        ----------
            report_each_line : bool
                Enable/disable reporting after reading each line.
        """
    def import_fmu(self, file_name: str):
        """
        Import a FMU file.
        
        Parameters
        ----------
            file_name_1 : str
                Import FMU file.
        """
class parametric_project(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def new(self, project_file_name: str):
        """
        Create New Project.
        
        Parameters
        ----------
            project_file_name : str
                The name of new parametric project file.
        """
    def open(self, project_file_name: str, load_case: bool):
        """
        Open project.
        
        Parameters
        ----------
            project_file_name_1 : str
                The name of new parametric project file.
            load_case : bool
                'load_case' child.
        """
    def save(self):
        """
        Save Project.
        """
    def save_as(self, project_file_name: str):
        """
        Save As Project.
        
        Parameters
        ----------
            project_file_name : str
                The name of parametric project file to open.
        """
    def save_as_copy(self, project_file_name: str, convert_to_managed: bool):
        """
        Save As Project.
        
        Parameters
        ----------
            project_file_name : str
                The name of parametric project file to save.
            convert_to_managed : bool
                'convert_to_managed' child.
        """
    def archive(self, archive_name: str):
        """
        Archive Project.
        
        Parameters
        ----------
            archive_name : str
                'archive_name' child.
        """
class io_mode(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class compression_level(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class single_precision_data(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cffio_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    io_mode: io_mode
    compression_level: compression_level
    single_precision_data: single_precision_data
class confirm_overwrite(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class exit_on_error(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class hide_answer(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class redisplay_question(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class batch_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    confirm_overwrite: confirm_overwrite
    exit_on_error: exit_on_error
    hide_answer: hide_answer
    redisplay_question: redisplay_question
class interpolate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def read_data(self, file_name: str, cell_zones: list[str], locations: Any):
        """
        Read and interpolate data.
        
        Parameters
        ----------
            file_name_1 : str
                Filename for interpolation.
            cell_zones : List
                List of cell zones to import.
            locations : Dict
                The object.
        """
    def write_data(self, file_name: str, cell_zones: list[str], locations: Any, fields: list[str], binary_format: bool):
        """
        Write data for interpolation.
        
        Parameters
        ----------
            file_name : str
                Filename for interpolation.
            cell_zones : List
                List of cell zones to export.
            locations : Dict
                The object.
            fields : List
                Field to interpolate.
            binary_format : bool
                Specifies whether to export in binary format.
        """
class table_file_manager(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def read_table_file(self, file_name: str, save_in_case_file: bool):
        """
        Read material table file.
        
        Parameters
        ----------
            file_name_1 : str
                Filename for table file.
            save_in_case_file : bool
                Specifies whether to store table file data in the case file.
        """
    def display_table(self, table_id: str):
        """
        Display table data.
        
        Parameters
        ----------
            table_id : str
                The table ID.
        """
    def get_table_info(self, table_id: str):
        """
        Query table data.
        
        Parameters
        ----------
            table_id : str
                The table ID.
        """
class file(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    single_precision_coordinates: single_precision_coordinates
    binary_legacy_files: binary_legacy_files
    cff_files: cff_files
    auto_merge_zones: auto_merge_zones
    convert_hanging_nodes_during_read: convert_hanging_nodes_during_read
    async_optimize: async_optimize
    write_pdat: write_pdat
    auto_save: auto_save
    export: export
    import_: import_
    parametric_project: parametric_project
    cffio_options: cffio_options
    batch_options: batch_options
    interpolate: interpolate
    table_file_manager: table_file_manager
    def define_macro(self, file_name: str):
        """
        Save input to a named macro.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def execute_macro(self, macro_file_name: str):
        """
        Run a previously defined macro.
        
        Parameters
        ----------
            macro_file_name : str
                The name of the macro to executes.
        """
    def read_macros(self, file_name: str):
        """
        Read macro definitions from a file.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read(self, file_type: str, file_name: str, pdf_file_name: str, lightweight_setup: bool):
        """
        'read' command.
        """
    def read_case(self, file_name: str, pdf_file_name: str):
        """
        'read_case' command.
        """
    def read_case_data(self, file_name: str, pdf_file_name: str):
        """
        'read_case_data' command.
        """
    def read_case_lightweight(self, file_name: str, pdf_file_name: str):
        """
        'read_case_lightweight' command.
        """
    def read_data(self, file_name: str):
        """
        'read_data' command.
        """
    def read_mesh(self, file_name: str):
        """
        'read_mesh' command.
        """
    def read_surface_mesh(self, file_name: str, unit: str):
        """
        Read surface meshes.
        
        Parameters
        ----------
            file_name_1 : str
                Path to surface mesh file.
            unit : str
                Unit in which the mesh was created.
        """
    def read_journal(self, file_name_list: list[str]):
        """
        Read a journal file.
        
        Parameters
        ----------
            file_name_list : List
                'file_name_list' child.
        """
    def start_journal(self, file_name: str):
        """
        Start recording all input in a file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def start_python_journal(self, file_name: str):
        """
        Start recording all input in a python file.
        
        Parameters
        ----------
            file_name : str
                Name of the Python journal file to write.
        """
    def stop_journal(self):
        """
        Stop recording input and close the journal file.
        """
    def replace_mesh(self, file_name: str):
        """
        'replace_mesh' command.
        """
    def write(self, file_type: str, file_name: str):
        """
        'write' command.
        """
    def write_case(self, file_name: str):
        """
        'write_case' command.
        """
    def write_data(self, file_name: str):
        """
        'write_data' command.
        """
    def write_case_data(self, file_name: str):
        """
        'write_case_data' command.
        """
    def read_settings(self, file_name: str):
        """
        Read and set boundary conditions from specified file.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read_field_functions(self, file_name: str):
        """
        Read custom field-function definitions from a file.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read_injections(self, file_name: str):
        """
        Read all DPM injections from a file.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read_profile(self, file_name: str):
        """
        Read boundary profile data (\\*.prof, \\*.csv). Default is \\*.prof.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read_pdf(self, file_name: str):
        """
        Read a PDF file.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def read_isat_table(self, file_name: str):
        """
        Read an ISAT table.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def show_configuration(self):
        """
        Display current release and version information.
        """
    def stop_macro(self):
        """
        Stop recording input to a macro.
        """
    def start_transcript(self, file_name: str):
        """
        Start recording input and output in a file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def stop_transcript(self):
        """
        Stop recording input and output and close the transcript file.
        """
    def data_file_options(self, reset_defined_derived_quantities: bool, derived_quantities: list[str]):
        """
        Set derived quantities to be written in data file.
        
        Parameters
        ----------
            reset_defined_derived_quantities : bool
                'reset_defined_derived_quantities' child.
            derived_quantities : List
                'derived_quantities' child.
        """
    def beta_settings(self, enable: bool):
        """
        Enable access to beta features in the interface.
        
        Parameters
        ----------
            enable : bool
                Enable or disable beta features.
        """
    _child_aliases: dict
class refinement_criteria(String):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_criteria(String):
    _version: str
    fluent_name: str
    _python_name: str
class manual_refinement_criteria(String):
    _version: str
    fluent_name: str
    _python_name: str
class manual_coarsening_criteria(String):
    _version: str
    fluent_name: str
    _python_name: str
class adaption_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class prismatic_boundary_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cell_zones_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_adaption_frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class encapsulate_children(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_refinement_level(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_edge_length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_cell_quality(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_cell_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class additional_refinement_layers(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class prismatic_adaption(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class prismatic_split_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class overset_adapt_dead_cells(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    adaption_method: adaption_method
    prismatic_boundary_zones: prismatic_boundary_zones
    cell_zones: cell_zones_3
    dynamic_adaption_frequency: dynamic_adaption_frequency
    verbosity: verbosity
    encapsulate_children: encapsulate_children
    maximum_refinement_level: maximum_refinement_level
    minimum_edge_length: minimum_edge_length
    minimum_cell_quality: minimum_cell_quality
    maximum_cell_count: maximum_cell_count
    additional_refinement_layers: additional_refinement_layers
    prismatic_adaption: prismatic_adaption
    prismatic_split_ratio: prismatic_split_ratio
    overset_adapt_dead_cells: overset_adapt_dead_cells
    def dynamic_adaption(self, enable: bool):
        """
        Adapt the mesh during solution.
        
        Parameters
        ----------
            enable : bool
                'enable' child.
        """
class profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def enable(self):
        """
        Enable adaption profiling.
        """
    def disable(self):
        """
        Disable adaption profiling.
        """
    def print(self):
        """
        Print adaption profiling results.
        """
    def clear(self):
        """
        Clear adaption profiling counters.
        """
class free_hierarchy(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class name_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class menu(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sync(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class index(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class option_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class predicate(Group):
    _version: str
    fluent_name: str
    _python_name: str
class refinement_expression(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_expression(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expression(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    refinement_expression: refinement_expression
    coarsening_expression: coarsening_expression
class type(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_1
    predicate: predicate
    expression: expression
class offset(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class manual(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class active(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skip_until(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class anisotropic(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class refinement_layers(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class predicates(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class manage_criteria_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_1
    menu: menu
    sync: sync
    index: index
    type: type
    offset: offset
    manual: manual
    active: active
    frequency: frequency
    skip_until: skip_until
    anisotropic: anisotropic
    refinement_layers: refinement_layers
    predicates: predicates
class manage_criteria(NamedObject[manage_criteria_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: manage_criteria_child
class option_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class growth_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class growth_ratio_refinement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    growth_ratio: growth_ratio
class type_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    growth_ratio_refinement: growth_ratio_refinement
class layer_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class multi_layer_refinement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    type: type_1
    layer_count: layer_count
    boundary_list: boundary_list
    def refine_mesh(self):
        """
        Refine the mesh for multiple boundary layers.
        """
class reconstruct_geometry(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reconstruct_geometry: reconstruct_geometry
class adapt(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    refinement_criteria: refinement_criteria
    coarsening_criteria: coarsening_criteria
    manual_refinement_criteria: manual_refinement_criteria
    manual_coarsening_criteria: manual_coarsening_criteria
    set: set
    profile: profile
    free_hierarchy: free_hierarchy
    manage_criteria: manage_criteria
    multi_layer_refinement: multi_layer_refinement
    geometry: geometry_2
    def adapt_mesh(self):
        """
        Adapt the mesh based on set refinement/coarsening criterion.
        """
    def display_adaption_cells(self):
        """
        Display cells marked for refinement/coarsening.
        """
    def list_adaption_cells(self):
        """
        List the number of cells marked for refinement/coarsening.
        """
class name_2(String):
    _version: str
    fluent_name: str
    _python_name: str
class option_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axis(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class origin(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class cone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis: axis
    radius: radius
    length: length
    origin: origin
class point(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class normal(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class compute(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class plane(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    point: point
    normal: normal
    compute: compute
class center(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radius_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    center: center
    radius: radius_1
class axis_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class lower(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upper(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class origin_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class frustum(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis: axis_1
    lower: lower
    upper: upper
    length: length_1
    origin: origin_1
class axis_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radius_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class origin_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class cylinder(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis: axis_2
    radius: radius_2
    length: length_2
    origin: origin_2
class primitive(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    cone: cone
    plane: plane
    sphere: sphere
    frustum: frustum
    cylinder: cylinder
class function_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_name: function_name
class background(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class file_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class unit_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file: file_1
    unit: unit_1
class delete_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class display(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class manage(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    read: read_2
    delete: delete_1
    display: display
class surface_mesh_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    background: background
    manage: manage
class zone_ids(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reconstruction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_ids: zone_ids
class type_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_3
    primitive: primitive
    user_defined: user_defined
    surface_mesh: surface_mesh_1
    reconstruction: reconstruction
class geometry_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_2
    type: type_2
class geometry_1(NamedObject[geometry_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: geometry_1_child
class coarsen(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class refine(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class swap(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class move(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class operations(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coarsen: coarsen
    refine: refine
    swap: swap
    move: move
class iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class indicator_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class single_scalar_fn(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class multi_scalar_fn(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class indicator(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    indicator_type: indicator_type
    single_scalar_fn: single_scalar_fn
    multi_scalar_fn: multi_scalar_fn
class target_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_cells(Real):
    _version: str
    fluent_name: str
    _python_name: str
class factor_of_cells(Real):
    _version: str
    fluent_name: str
    _python_name: str
class target(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    target_type: target_type
    number_of_cells: number_of_cells
    factor_of_cells: factor_of_cells
class maximum_anisotropic_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_edge_length_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_cell_quality_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anisotropic_adaption(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    operations: operations
    iterations: iterations
    fixed_zones: fixed_zones
    indicator: indicator
    target: target
    maximum_anisotropic_ratio: maximum_anisotropic_ratio
    minimum_edge_length: minimum_edge_length_1
    minimum_cell_quality: minimum_cell_quality_1
    def adapt_mesh(self):
        """
        Adapt the mesh based on specified anisotropic adaption setup.
        """
class check_before_solve(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class check_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_orthogonal_quality(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class matching_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class modify_zones(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def deactivate_cell_zone(self, cell_deactivate_list: list[str]):
        """
        Deactivate cell thread.
        
        Parameters
        ----------
            cell_deactivate_list : List
                Deactivate a cell zone.
        """
    def delete_cell_zone(self, cell_zones: list[str]):
        """
        Delete a cell thread.
        
        Parameters
        ----------
            cell_zones : List
                Delete a cell zone.
        """
    def copy_move_cell_zone(self, cell_zone_name: str, translate: bool, rotation_angle: float | str, offset: list[float | str], axis: list[float | str]):
        """
        Copy and translate or rotate a cell zone.
        
        Parameters
        ----------
            cell_zone_name : str
                The cell zone name.
            translate : bool
                Specifies whether copied zone should be translated (#t) or rotated (#f).
            rotation_angle : real
                'rotation_angle' child.
            offset : List
                'offset' child.
            axis : List
                'axis' child.
        """
    def copy_cell_zones_by_offsets(self, cell_zones: list[str], translate: bool, offsets: list[float | str], origin: list[float | str], axis: list[float | str], angles: list[float | str]):
        """
        Copy cell zones by specifying absolute translational or rotational offsets.
        
        Parameters
        ----------
            cell_zones : List
                Names or IDs of cell zones to be copied. If an empty list is given, all active cell zones will be copied.
            translate : bool
                Specifies whether the copying is translational or rotational.
            offsets : List
                The components of each offset vector for translational copying.
            origin : List
                The components of the origin vector for rotational copying.
            axis : List
                The components of the axis vector for rotational copying.
            angles : List
                The angular offsets for rotational copying.
        """
    def copy_cell_zones_by_delta(self, cell_zones: list[str], translate: bool, ncopies: int, offset: list[float | str], origin: list[float | str], axis: list[float | str], angle: float | str):
        """
        Copy cell zones by specifying an incremental translational or rotational offset.
        
        Parameters
        ----------
            cell_zones : List
                Names or IDs of cell zones to be copied. If an empty list is given, all active cell zones will be copied.
            translate : bool
                Specifies whether the copying is translational or rotational.
            ncopies : int
                How many copies to make.
            offset : List
                The components of the incremental offset vector for translational copying.
            origin : List
                The components of the origin vector for rotational copying.
            axis : List
                The components of the axis vector for rotational copying.
            angle : real
                The incremental angular offset for rotational copying.
        """
    def list_zones(self):
        """
        List zone IDs, types, kinds, and names.
        """
    def extrude_face_zone_delta(self, face_zone: str, distance_delta: list[float | str]):
        """
        Extrude a face thread a specified distance based on a list of deltas.
        
        Parameters
        ----------
            face_zone : str
                The zone name.
            distance_delta : List
                'distance_delta' child.
        """
    def extrude_face_zone_para(self, face_zone: str, normal_distance: float | str, parametric_coordinates: list[float | str]):
        """
        Extrude a face thread a specified distance based on a distance and a list of parametric locations between 0 and 1 (eg. 0 0.2 0.4 0.8 1.0).
        
        Parameters
        ----------
            face_zone : str
                The zone name.
            normal_distance : real
                'normal_distance' child.
            parametric_coordinates : List
                'parametric_coordinates' child.
        """
    def fuse_face_zones(self, zone_names: list[str], zone_name: str):
        """
        Attempt to fuse zones by removing duplicate faces and nodes.
        
        Parameters
        ----------
            zone_names : List
                Merge duplicate faces and nodes of zones in list.
            zone_name : str
                'zone_name' child.
        """
    def scale_zone(self, zone_names: list[str], scale: list[float | str]):
        """
        Scale nodal coordinates of input cell zones.
        
        Parameters
        ----------
            zone_names : List
                Scale specified cell zones.
            scale : List
                'scale' child.
        """
    def rotate_zone(self, zone_names: list[str], rotation_angle: float | str, origin: list[float | str], axis: list[float | str]):
        """
        Rotate nodal coordinates of input cell zones.
        
        Parameters
        ----------
            zone_names : List
                Rotate specified cell zones.
            rotation_angle : real
                'rotation_angle' child.
            origin : List
                'origin' child.
            axis : List
                'axis' child.
        """
    def translate_zone(self, zone_names: list[str], offset: list[float | str]):
        """
        Translate nodal coordinates of input cell zones.
        
        Parameters
        ----------
            zone_names : List
                Translate specified cell zones.
            offset : List
                'offset' child.
        """
    def merge_zones(self, zone_names: list[str]):
        """
        Merge zones of the same type and condition into one.
        
        Parameters
        ----------
            zone_names : List
                Zone name list.
        """
    def replace_zone(self, file_name: str, zone_1_name: str, zone_2_name: str, interpolate: bool):
        """
        Replace a cell zone.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
            zone_1_name : str
                The zone name.
            zone_2_name : str
                'zone_2_name' child.
            interpolate : bool
                'interpolate' child.
        """
    def append_mesh(self, file_name: str):
        """
        Append new mesh.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def append_mesh_data(self, file_name: str):
        """
        Append new mesh with data.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
    def sep_cell_zone_mark(self, cell_zone_name: str, register: str, move_faces: bool):
        """
        Separate a cell zone based on cell marking.
        
        Parameters
        ----------
            cell_zone_name : str
                The zone name.
            register : str
                'register' child.
            move_faces : bool
                'move_faces' child.
        """
    def sep_cell_zone_region(self, cell_zone_name: str, move_cells: bool):
        """
        Separate a cell zone based on contiguous regions.
        
        Parameters
        ----------
            cell_zone_name : str
                The zone name.
            move_cells : bool
                'move_cells' child.
        """
    def sep_face_zone_angle(self, face_zone_name: str, angle: float | str, move_faces: bool):
        """
        Separate a face zone based on significant angle.
        
        Parameters
        ----------
            face_zone_name : str
                The zone name.
            angle : real
                'angle' child.
            move_faces : bool
                'move_faces' child.
        """
    def sep_face_zone_face(self, face_zone_name: str, move_faces: bool):
        """
        Separate each face in a zone into unique zone.
        
        Parameters
        ----------
            face_zone_name : str
                The zone name.
            move_faces : bool
                'move_faces' child.
        """
    def sep_face_zone_mark(self, face_zone_name: str, register_name: str, move_faces: bool):
        """
        Separate a face zone based on cell marking.
        
        Parameters
        ----------
            face_zone_name : str
                The zone name.
            register_name : str
                'register_name' child.
            move_faces : bool
                'move_faces' child.
        """
    def sep_face_zone_region(self, face_zone_name: str, move_faces: bool):
        """
        Separate a face zone based on contiguous regions.
        
        Parameters
        ----------
            face_zone_name : str
                The zone name.
            move_faces : bool
                'move_faces' child.
        """
    def zone_name(self, zone_name: str, new_name: str):
        """
        Give a zone a new name.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
            new_name : str
                'new_name' child.
        """
    def change_zone_state(self, zone_name: str, domain: str, new_phase: int):
        """
        Change the realgas material state for a zone.
        
        Parameters
        ----------
            zone_name : str
                The fluid zone name.
            domain : str
                'domain' child.
            new_phase : int
                'new_phase' child.
        """
    def make_periodic(self, zone_name: str, shadow_zone_name: str, rotate_periodic: bool, create: bool, auto_translation: bool, direction: list[float | str]):
        """
        Attempt to establish conformal periodic face zone connectivity.
        
        Parameters
        ----------
            zone_name : str
                Id/name of zone to convert to periodic.
            shadow_zone_name : str
                Id/name of zone to convert to shadow.
            rotate_periodic : bool
                'rotate_periodic' child.
            create : bool
                'create' child.
            auto_translation : bool
                'auto_translation' child.
            direction : List
                'direction' child.
        """
    def create_periodic_interface(self, creation_method: str, interface_name: str, periodic_zone: str, shadow_zone: str, rotational_periodic: bool, update_origin: bool, origin: list[float | str], update_direction: bool, direction: list[float | str], auto_compute_offset: bool, angular_offset: float | str, translational_offset: list[float | str], create_periodic: bool, create_matching: bool):
        """
        Create a conformal or non-conformal periodic interface.
        
        Parameters
        ----------
            creation_method : str
                Method for creating periodic boundary.
            interface_name : str
                Name of periodic interface.
            periodic_zone : str
                Id/name of zone to convert to periodic.
            shadow_zone : str
                Id/name of shadow zone to convert to periodic shadow.
            rotational_periodic : bool
                Rotational or tranlational periodic boundary.
            update_origin : bool
                Use a new origin instead of the default origin.
            origin : List
                User specified origin of rotation.
            update_direction : bool
                Use a new rotational axis/direction instead of the default one.
            direction : List
                User specified axis/direction of rotation.
            auto_compute_offset : bool
                Automatically compute periodic offset.
            angular_offset : real
                Rotational periodic offset.
            translational_offset : List
                Translation offset vector.
            create_periodic : bool
                Create periodic boundary.
            create_matching : bool
                Create matching interface.
        """
    def slit_periodic(self, periodic_zone_name: str, slit_periodic: bool):
        """
        Slit a periodic zone into two symmetry zones.
        
        Parameters
        ----------
            periodic_zone_name : str
                Id/name of periodic zone to slit.
            slit_periodic : bool
                'slit_periodic' child.
        """
    def zone_type(self, zone_names: list[str], new_type: str):
        """
        Set a zone's type.
        
        Parameters
        ----------
            zone_names : List
                Zone id/name.
            new_type : str
                Give new zone type.
        """
    def del_cell_by_id(self, cellids: list[int], augment: bool):
        """
        Delete cells based on cell ids.
        
        Parameters
        ----------
            cellids : List
                Provide a list of cell ids.
            augment : bool
                Augment list of cells to meet nunerics requirement.
        """
    def del_cell_by_mark(self, register: str, augment: bool):
        """
        Delete cells based on a cell register.
        
        Parameters
        ----------
            register : str
                Provide the id or name of a register.
            augment : bool
                Augment list of cells to meet nunerics requirement.
        """
    def disconnect_cell_zones(self, cell_zones: list[str]):
        """
        Disconnect cell zones from all connected cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Names or IDs of cell zones to be disconnected.
        """
    def project_face_zones(self, face_zones: list[str], geom_name: str):
        """
        Project a list of face zones onto a geometry.
        
        Parameters
        ----------
            face_zones : List
                Names or IDs of the face zones to be projected.
            geom_name : str
                Name of the geometry.
        """
class show_periodic_shadow_zones(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reorder(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def band_width(self):
        """
        Print cell bandwidth.
        """
    def reorder_domain(self):
        """
        Reorder cells and faces by reverse Cuthill-McKee.
        """
    def reorder_zones(self):
        """
        Reorder zones by partition, type, and id.
        """
class allow_repair_at_boundaries(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class include_local_polyhedra_conversion_in_repair(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class repair_improve(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    allow_repair_at_boundaries: allow_repair_at_boundaries
    include_local_polyhedra_conversion_in_repair: include_local_polyhedra_conversion_in_repair
    def repair_poor_elements(self):
        """
        Report invalid and poor quality elements.
        """
    def improve_quality(self):
        """
        Tries to improve the mesh quality.
        """
    def repair(self):
        """
        Tries to repair mesh problems identified by mesh check.
        """
    def repair_face_handedness(self, repair: bool, disable_repair: bool):
        """
        Correct face handedness at left handed faces if possible.
        
        Parameters
        ----------
            repair : bool
                'repair' child.
            disable_repair : bool
                'disable_repair' child.
        """
    def repair_face_node_order(self):
        """
        Reverse order of face nodes if needed.
        """
    def repair_wall_distance(self, repair: bool):
        """
        Correct wall distance at very high aspect ratio hexahedral/polyhedral cells.
        
        Parameters
        ----------
            repair : bool
                'repair' child.
        """
    def repair_periodic(self, repair_angle: bool, periodic_input: str, angle_input: float | str, repair_periodic: bool):
        """
        Modify mesh to enforce specified periodic rotation angle.
        
        Parameters
        ----------
            repair_angle : bool
                'repair_angle' child.
            periodic_input : str
                Id/name of zone to repair.
            angle_input : real
                Desired angle of rotation in degrees.
            repair_periodic : bool
                'repair_periodic' child.
        """
class surface_mesh(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def delete(self, surface: str):
        """
        Delete surface mesh.
        
        Parameters
        ----------
            surface : str
                'surface' child.
        """
    def display(self):
        """
        Display surface meshes.
        """
    def read(self, file_name: str, unit: str):
        """
        Read surface meshes.
        
        Parameters
        ----------
            file_name_1 : str
                The case file name.
            unit : str
                'unit' child.
        """
class migrate_and_reorder(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class preserve_boundary_layer(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class preserve_interior_zones(String):
    _version: str
    fluent_name: str
    _python_name: str
class options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    migrate_and_reorder: migrate_and_reorder
    preserve_boundary_layer: preserve_boundary_layer
    preserve_interior_zones: preserve_interior_zones
class polyhedra(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    options: options
    def convert_domain(self, structured_mesh_option: bool, face_hierarchy_option: bool, reinitialize_option: bool, boundary_layer_option: str, dynamic_mesh_option: bool, heat_exchanger_option: bool, multiple_shadow_nodes_option: bool, inconsistent_periodic_option: bool):
        """
        Convert entire domain to polyhedra cells.
        
        Parameters
        ----------
            structured_mesh_option : bool
                Check polyhedra conversion for structured meshes.
            face_hierarchy_option : bool
                Check polyhedra conversion for adapted meshes.
            reinitialize_option : bool
                Check for data reinitialization after polyhedra conversion.
            boundary_layer_option : str
                Preserve boundary layers during polyhedra conversion.
            dynamic_mesh_option : bool
                Check polyhedra conversion for dynamic mesh model.
            heat_exchanger_option : bool
                Check polyhedra conversion for heat exchanger model.
            multiple_shadow_nodes_option : bool
                Check polyhedra conversion for mesh with multiple shadow nodes.
            inconsistent_periodic_option : bool
                Check polyhedra conversion for mesh with inconsistent periodic boundaries.
        """
    def convert_hanging_nodes(self):
        """
        Convert cells with hanging nodes and faces to polyhedra.
        """
    def convert_hanging_node_zones(self):
        """
        Convert selected cell zones with hanging nodes and faces to polyhedra. 
        The selected cell zones cannot be connected to other zones.
        """
    def convert_skewed_cells(self, cell_thread_list: list[str], max_cell_skewness: float | str, convert_skewed_cells: bool):
        """
        'convert_skewed_cells' command.
        """
class wall_distance_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mesh(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    adapt: adapt
    geometry: geometry_1
    anisotropic_adaption: anisotropic_adaption
    check_before_solve: check_before_solve
    check_verbosity: check_verbosity
    enhanced_orthogonal_quality: enhanced_orthogonal_quality
    matching_tolerance: matching_tolerance
    modify_zones: modify_zones
    show_periodic_shadow_zones: show_periodic_shadow_zones
    reorder: reorder
    repair_improve: repair_improve
    surface_mesh: surface_mesh
    polyhedra: polyhedra
    wall_distance_method: wall_distance_method
    def adjacency(self):
        """
        View and rename face zones adjacent to selected cell zones.
        """
    def check(self):
        """
        Perform various mesh consistency checks.
        """
    def memory_usage(self):
        """
        Report solver memory use.
        """
    def mesh_info(self, print_level: int):
        """
        Print zone information size.
        
        Parameters
        ----------
            print_level : int
                Print zone information size.
        """
    def quality(self):
        """
        Perform analysis of mesh quality.
        """
    def rotate(self, angle: float | str, origin: list[float | str], axis_components: list[float | str]):
        """
        Rotate the mesh.
        
        Parameters
        ----------
            angle : real
                'angle' child.
            origin : List
                'origin' child.
            axis_components : List
                'axis_components' child.
        """
    def scale(self, x_scale: float | str, y_scale: float | str, z_scale: float | str):
        """
        'scale' command.
        """
    def size_info(self):
        """
        Print mesh size.
        """
    def redistribute_boundary_layer(self, zone_name: str, growth_rate: float | str):
        """
        Enforce growth rate in boundary layer.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
            growth_rate : real
                'growth_rate' child.
        """
    def swap_mesh_faces(self):
        """
        Swap mesh faces.
        """
    def smooth_mesh(self, type_of_smoothing: str, number_of_iterations: int, relaxation_factor: float | str, percentage_of_cells: float | str, skewness_threshold: float | str):
        """
        Smooth the mesh using quality-based, Laplace or skewness methods.
        
        Parameters
        ----------
            type_of_smoothing : str
                The smoothing method.
            number_of_iterations : int
                The number of smoothing iterations.
            relaxation_factor : real
                The smoothing relaxation factor.
            percentage_of_cells : real
                The threhold percentage of cells above which smoothing is applied.
            skewness_threshold : real
                The threhold quality of cells above which smoothing is applied.
        """
    def replace(self, file_name: str, zones: bool):
        """
        Replace mesh and interpolate data.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
            zones : bool
                'zones' child.
        """
    def translate(self, offset: list[float | str]):
        """
        Translate the mesh.
        
        Parameters
        ----------
            offset : List
                'offset' child.
        """
class web_server(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def start(self, session_name: str, port: int, port_span: int, job_service_url: str, email_id: str):
        """
        Start the web server.
        
        Parameters
        ----------
            session_name : str
                Name for the web server.
            port : int
                Listening port for the web server.
            port_span : int
                Number of ports to try starting from given 'port' for the web server.
            job_service_url : str
                Job service URL to register Fluent.
            email_id : str
                The email address for email notification on job startup.
        """
    def stop(self):
        """
        Stop the web server.
        """
    def print_server_info(self):
        """
        Print the web server information.
        """
    def get_server_info(self):
        """
        Get the web server information.
        """
class grpc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def start(self, file_name: str):
        """
        Start gRPC server.
        
        Parameters
        ----------
            file_name : str
                Name of the file which will store gRPC server information.
        """
    def stop(self):
        """
        Shutdown gRPC server.
        """
    def print_address(self):
        """
        Print gRPC server address.
        """
    def print_connected_clients(self):
        """
        Print connected gRPC client addresses.
        """
    def write_or_reset_info(self, file_name: str, reset_info: bool):
        """
        Write or reset gRPC server file.
        
        Parameters
        ----------
            file_name : str
                Name of the file which will store gRPC server information.
            reset_info : bool
                Reset server info.
        """
class server(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    web_server: web_server
    grpc: grpc
class type_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class two_dim_space(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_formulation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solver(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_3
    two_dim_space: two_dim_space
    velocity_formulation: velocity_formulation
    time: time
class adjust_solver_defaults_based_on_setup(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class components(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class gravity_mrf_behavior(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gravity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_3
    components: components
    gravity_mrf_behavior: gravity_mrf_behavior
class real_gas_state(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class operating_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_pressure_location(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class reference_pressure_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enable_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class operating_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable: enable_4
    method: method
    value: value
    def print(self):
        """
        Print operating density value.
        """
class operating_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enable_5(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class zone_name_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_temperature_for_operating_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_5
    zone_name: zone_name_5
class operating_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    gravity: gravity
    real_gas_state: real_gas_state
    operating_pressure: operating_pressure
    reference_pressure_location: reference_pressure_location
    reference_pressure_method: reference_pressure_method
    operating_density: operating_density
    operating_temperature: operating_temperature
    inlet_temperature_for_operating_density: inlet_temperature_for_operating_density
    def used_ref_pressure_location(self):
        """
        See the actual coordinates of reference pressure used.
        """
class unit_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class offset_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class units_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    unit_name: unit_name
    scale_factor: scale_factor
    offset: offset_3
class units(NamedObject[units_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: units_child
class units_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    units: units
    def new_unit(self, quantity: str, units_name: str, scale_factor: float | str, offset: float | str):
        """
        Set unit conversion factors.
        
        Parameters
        ----------
            quantity : str
                Quanitity.
            units_name : str
                New Unit value for Quantity.
            scale_factor : real
                Update Scale Factor.
            offset : real
                Update Offset Factor.
        """
    def set_unit_system(self, system: str):
        """
        Apply standard set of units to all quantities.
        
        Parameters
        ----------
            system : str
                The unit system.
        """
    _child_aliases: dict
class general(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    solver: solver
    adjust_solver_defaults_based_on_setup: adjust_solver_defaults_based_on_setup
    operating_conditions: operating_conditions
    units_settings: units_settings
    _child_aliases: dict
class model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vaporization_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class non_condensable_gas(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_surface_tension(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bubble_number_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class level_set(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class weighting(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coupled_level_set(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    level_set: level_set
    weighting: weighting
class hybrid_models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coupled_level_set: coupled_level_set
class number_of_eulerian_phases(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_phases(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_eulerian_phases: number_of_eulerian_phases
class number_of_eulerian_discrete_phases(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class open_channel_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class open_channel_flow_wave_bc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vof_sub_models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    open_channel_flow: open_channel_flow
    open_channel_flow_wave_bc: open_channel_flow_wave_bc
class vof_formulation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vof_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class interface_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anti_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anti_diffusion_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_discretization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class phase_localized_discretization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class interface_modeling_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interface_type: interface_type
    anti_diffusion: anti_diffusion
    anti_diffusion_factor: anti_diffusion_factor
    zonal_discretization: zonal_discretization
    phase_localized_discretization: phase_localized_discretization
class vof_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    vof_formulation: vof_formulation
    vof_cutoff: vof_cutoff
    vof_courant_number: vof_courant_number
    interface_modeling_options: interface_modeling_options
class implicit_body_force(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sub_time_step_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solve_vof_every_iter(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_vof_filtering(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class filtering_options(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class filter_vof_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_filtering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_vof_filtering: enable_vof_filtering
    filtering_options: filtering_options
    filter_vof_cutoff: filter_vof_cutoff
class explicit_expert_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    sub_time_step_method: sub_time_step_method
    solve_vof_every_iter: solve_vof_every_iter
    vof_filtering: vof_filtering
class advanced_formulation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    implicit_body_force: implicit_body_force
    explicit_expert_options: explicit_expert_options
class name_3(String):
    _version: str
    fluent_name: str
    _python_name: str
class material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class phases_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_3
    material: material
class phases(NamedObject[phases_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phases_child
class option_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_tension_rgp(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class function_of(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coefficients(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class coefficients_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class range_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    minimum: minimum
    maximum: maximum
    coefficients: coefficients_1
class range(ListObject[range_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: range_child
class sf_piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class function_of_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class item(Real):
    _version: str
    fluent_name: str
    _python_name: str
class value_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class data_points_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    item: item
    value: value_1
class data_points(ListObject[data_points_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: data_points_child
class sf_piecewise_linear(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class surface_tension_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_4
    constant: constant
    user_defined: user_defined_2
    surface_tension_rgp: surface_tension_rgp
    polynomial: polynomial
    sf_piecewise_polynomial: sf_piecewise_polynomial
    sf_piecewise_linear: sf_piecewise_linear
class surface_tension_child(NamedObject[surface_tension_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: surface_tension_child_child
class surface_tension(NamedObject[surface_tension_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: surface_tension_child
class surface_tension_model(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surface_tension_model_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wall_adhesion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class jump_adhesion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class forces(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    surface_tension: surface_tension
    surface_tension_model: surface_tension_model
    surface_tension_model_type: surface_tension_model_type
    wall_adhesion: wall_adhesion
    jump_adhesion: jump_adhesion
class mt_from_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_from_phase_species(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_to_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_to_phase_species(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_constant_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_mod_opt(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_schnerr_bub_num_den(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_zwart_bub_dia(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_zwart_nuc_site_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_zwart_evap_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_zwart_cond_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_model_constants(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_cav_schnerr_bub_num_den: mt_cav_schnerr_bub_num_den
    mt_cav_zwart_bub_dia: mt_cav_zwart_bub_dia
    mt_cav_zwart_nuc_site_vof: mt_cav_zwart_nuc_site_vof
    mt_cav_zwart_evap_coeff: mt_cav_zwart_evap_coeff
    mt_cav_zwart_cond_coeff: mt_cav_zwart_cond_coeff
class mt_cav_turb_factor(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_turb_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_ptl_tabular_table_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_ptl_tabular_sat_temp(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_ptl_tabular_sat_press(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_ptl_tabular_lat_heat(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_rgp_data_set(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class mt_cav_p_vap_piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class mt_cav_p_vap_piecewise_linear(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class mt_cav_p_vap_taylor_sat_press(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_taylor_fs_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_p_vap_taylor_tcoeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_cav_prop(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_cav_p_vap: mt_cav_p_vap
    mt_cav_p_vap_constant: mt_cav_p_vap_constant
    mt_cav_p_vap_udf: mt_cav_p_vap_udf
    mt_cav_p_vap_ptl_tabular_table_name: mt_cav_p_vap_ptl_tabular_table_name
    mt_cav_p_vap_ptl_tabular_sat_temp: mt_cav_p_vap_ptl_tabular_sat_temp
    mt_cav_p_vap_ptl_tabular_sat_press: mt_cav_p_vap_ptl_tabular_sat_press
    mt_cav_p_vap_ptl_tabular_lat_heat: mt_cav_p_vap_ptl_tabular_lat_heat
    mt_cav_p_vap_rgp_data_set: mt_cav_p_vap_rgp_data_set
    mt_cav_p_vap_polynomial: mt_cav_p_vap_polynomial
    mt_cav_p_vap_piecewise_polynomial: mt_cav_p_vap_piecewise_polynomial
    mt_cav_p_vap_piecewise_linear: mt_cav_p_vap_piecewise_linear
    mt_cav_p_vap_taylor_sat_press: mt_cav_p_vap_taylor_sat_press
    mt_cav_p_vap_taylor_fs_temp: mt_cav_p_vap_taylor_fs_temp
    mt_cav_p_vap_taylor_tcoeff: mt_cav_p_vap_taylor_tcoeff
class mt_cav_group(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_cav_mod_opt: mt_cav_mod_opt
    mt_cav_model_constants: mt_cav_model_constants
    mt_cav_turb_factor: mt_cav_turb_factor
    mt_cav_turb_coeff: mt_cav_turb_coeff
    mt_cav_prop: mt_cav_prop
class mt_evap_cond_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_wall_evap_cond(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_evap_freq(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_evap_freq_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_evap_freq_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_cond_freq(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_cond_freq_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_lee_cond_freq_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_hk_from_freq(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_hk_to_freq(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_hk_wall_scaling_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_ihf_from_freq(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_ihf_to_freq(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_model_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_evap_cond_lee_evap_freq: mt_evap_cond_lee_evap_freq
    mt_evap_cond_lee_evap_freq_constant: mt_evap_cond_lee_evap_freq_constant
    mt_evap_cond_lee_evap_freq_udf: mt_evap_cond_lee_evap_freq_udf
    mt_evap_cond_lee_cond_freq: mt_evap_cond_lee_cond_freq
    mt_evap_cond_lee_cond_freq_constant: mt_evap_cond_lee_cond_freq_constant
    mt_evap_cond_lee_cond_freq_udf: mt_evap_cond_lee_cond_freq_udf
    mt_evap_cond_hk_from_freq: mt_evap_cond_hk_from_freq
    mt_evap_cond_hk_to_freq: mt_evap_cond_hk_to_freq
    mt_evap_cond_hk_wall_scaling_factor: mt_evap_cond_hk_wall_scaling_factor
    mt_evap_cond_ihf_from_freq: mt_evap_cond_ihf_from_freq
    mt_evap_cond_ihf_to_freq: mt_evap_cond_ihf_to_freq
class mt_evap_cond_sat_temp(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class mt_evap_cond_sat_temp_piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class mt_evap_cond_sat_temp_piecewise_linear(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class mt_evap_cond_sat_temp_ptl_tabular_table_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_ptl_tabular_sat_temp(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_ptl_tabular_sat_press(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_ptl_tabular_lat_heat(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_temp_rgp_data_set(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class mt_evap_cond_sat_press_piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class mt_evap_cond_sat_press_piecewise_linear(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class mt_evap_cond_sat_press_ptl_tabular_table_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_ptl_tabular_sat_temp(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_ptl_tabular_sat_press(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_ptl_tabular_lat_heat(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_press_rgp_data_set(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mt_evap_cond_sat_prop(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_evap_cond_sat_temp: mt_evap_cond_sat_temp
    mt_evap_cond_sat_temp_constant: mt_evap_cond_sat_temp_constant
    mt_evap_cond_sat_temp_udf: mt_evap_cond_sat_temp_udf
    mt_evap_cond_sat_temp_polynomial: mt_evap_cond_sat_temp_polynomial
    mt_evap_cond_sat_temp_piecewise_polynomial: mt_evap_cond_sat_temp_piecewise_polynomial
    mt_evap_cond_sat_temp_piecewise_linear: mt_evap_cond_sat_temp_piecewise_linear
    mt_evap_cond_sat_temp_ptl_tabular_table_name: mt_evap_cond_sat_temp_ptl_tabular_table_name
    mt_evap_cond_sat_temp_ptl_tabular_sat_temp: mt_evap_cond_sat_temp_ptl_tabular_sat_temp
    mt_evap_cond_sat_temp_ptl_tabular_sat_press: mt_evap_cond_sat_temp_ptl_tabular_sat_press
    mt_evap_cond_sat_temp_ptl_tabular_lat_heat: mt_evap_cond_sat_temp_ptl_tabular_lat_heat
    mt_evap_cond_sat_temp_rgp_data_set: mt_evap_cond_sat_temp_rgp_data_set
    mt_evap_cond_sat_press: mt_evap_cond_sat_press
    mt_evap_cond_sat_press_constant: mt_evap_cond_sat_press_constant
    mt_evap_cond_sat_press_udf: mt_evap_cond_sat_press_udf
    mt_evap_cond_sat_press_polynomial: mt_evap_cond_sat_press_polynomial
    mt_evap_cond_sat_press_piecewise_polynomial: mt_evap_cond_sat_press_piecewise_polynomial
    mt_evap_cond_sat_press_piecewise_linear: mt_evap_cond_sat_press_piecewise_linear
    mt_evap_cond_sat_press_ptl_tabular_table_name: mt_evap_cond_sat_press_ptl_tabular_table_name
    mt_evap_cond_sat_press_ptl_tabular_sat_temp: mt_evap_cond_sat_press_ptl_tabular_sat_temp
    mt_evap_cond_sat_press_ptl_tabular_sat_press: mt_evap_cond_sat_press_ptl_tabular_sat_press
    mt_evap_cond_sat_press_ptl_tabular_lat_heat: mt_evap_cond_sat_press_ptl_tabular_lat_heat
    mt_evap_cond_sat_press_rgp_data_set: mt_evap_cond_sat_press_rgp_data_set
class mt_evap_cond_group(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_evap_cond_model: mt_evap_cond_model
    mt_evap_cond_wall_evap_cond: mt_evap_cond_wall_evap_cond
    mt_evap_cond_model_coeff: mt_evap_cond_model_coeff
    mt_evap_cond_sat_prop: mt_evap_cond_sat_prop
class mass_transfer_list_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mt_from_phase: mt_from_phase
    mt_from_phase_species: mt_from_phase_species
    mt_to_phase: mt_to_phase
    mt_to_phase_species: mt_to_phase_species
    mt_method: mt_method
    mt_constant_rate: mt_constant_rate
    mt_udf: mt_udf
    mt_cav_group: mt_cav_group
    mt_evap_cond_group: mt_evap_cond_group
class mass_transfer_list(ListObject[mass_transfer_list_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: mass_transfer_list_child
class option_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class intf_area_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_5
    user_defined: user_defined_2
class intf_area_child(NamedObject[intf_area_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: intf_area_child_child
class intf_area(NamedObject[intf_area_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: intf_area_child
class phase_localized_compressive_scheme(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class slope_limiter_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_5
    constant: constant
    user_defined: user_defined_2
class slope_limiter_child(NamedObject[slope_limiter_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: slope_limiter_child_child
class slope_limiter(NamedObject[slope_limiter_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: slope_limiter_child
class interfacial_discretization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    phase_localized_compressive_scheme: phase_localized_compressive_scheme
    slope_limiter: slope_limiter
class phase_interaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    forces: forces
    mass_transfer_list: mass_transfer_list
    intf_area: intf_area
    interfacial_discretization: interfacial_discretization
class max_liquid_mass_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class virial_equation_of_state(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class young_alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class young_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class droplet_growth_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_6
    young_alpha: young_alpha
    young_beta: young_beta
class stagnation_conditions(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_source_linearization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wet_steam_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_liquid_mass_fraction: max_liquid_mass_fraction
    virial_equation_of_state: virial_equation_of_state
    droplet_growth_rate: droplet_growth_rate
    stagnation_conditions: stagnation_conditions
    enhanced_source_linearization: enhanced_source_linearization
class wet_steam_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model
    vaporization_pressure: vaporization_pressure
    non_condensable_gas: non_condensable_gas
    liquid_surface_tension: liquid_surface_tension
    bubble_number_density: bubble_number_density
    hybrid_models: hybrid_models
    number_of_phases: number_of_phases
    number_of_eulerian_discrete_phases: number_of_eulerian_discrete_phases
    vof_sub_models: vof_sub_models
    vof_parameters: vof_parameters
    advanced_formulation: advanced_formulation
    phases: phases
    phase_interaction: phase_interaction
    wet_steam_settings: wet_steam_settings
    wet_steam_enabled: wet_steam_enabled
    _child_aliases: dict
class enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscous_dissipation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_work(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class kinetic_energy(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_6(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class robustness_enhancement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class nasa9_enhancement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class model_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class species_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class species_2(String):
    _version: str
    fluent_name: str
    _python_name: str
class coefficient_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class coefficient_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expert_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    species_1: species_1
    species_2: species_2
    coefficient_1: coefficient_1
    coefficient_2: coefficient_2
class expert(ListObject[expert_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def list_all(self):
        """
        List all the constants used in the Park's model.
        """
    child_object_type: expert_child
class translational_vibrational_energy_relaxation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_1
    expert: expert
class two_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_6
    robustness_enhancement: robustness_enhancement
    nasa9_enhancement: nasa9_enhancement
    set_verbosity: set_verbosity
    translational_vibrational_energy_relaxation: translational_vibrational_energy_relaxation
class energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled
    viscous_dissipation: viscous_dissipation
    pressure_work: pressure_work
    kinetic_energy: kinetic_energy
    inlet_diffusion: inlet_diffusion
    two_temperature: two_temperature
class model_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class spalart_allmaras_production(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class k_epsilon_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class k_omega_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class k_omega_low_re_correction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class k_omega_shear_correction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class k_omega(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    k_omega_low_re_correction: k_omega_low_re_correction
    k_omega_shear_correction: k_omega_shear_correction
    _child_aliases: dict
class wall_distance_free(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class version(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expression_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class csep(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_7
    value: value_2
    expression: expression_1
    user_defined: user_defined_3
class option_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expression_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cnw(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_8
    value: value_3
    expression: expression_2
    user_defined: user_defined_4
class option_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expression_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cmix(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_9
    value: value_4
    expression: expression_3
    user_defined: user_defined_5
class cjet(Real):
    _version: str
    fluent_name: str
    _python_name: str
class option_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expression_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class blending_function(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_10
    expression: expression_4
    user_defined: user_defined_6
class creal(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cnw_sub(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cjet_aux(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cbf_lam(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cbf_tur(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auxiliary_constants(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    creal: creal
    cnw_sub: cnw_sub
    cjet_aux: cjet_aux
    cbf_lam: cbf_lam
    cbf_tur: cbf_tur
class geko(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    wall_distance_free: wall_distance_free
    version: version
    csep: csep
    cnw: cnw
    cmix: cmix
    cjet: cjet
    blending_function: blending_function
    auxiliary_constants: auxiliary_constants
    def geko_defaults(self):
        """
        Set GEKO options to default.
        """
    _child_aliases: dict
class differential_viscosity_model(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_dominated_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rng(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    differential_viscosity_model: differential_viscosity_model
    swirl_dominated_flow: swirl_dominated_flow
class wall_treatment(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_gradient_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_wall_treatment_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pressure_gradient_effects: pressure_gradient_effects
    thermal_effects: thermal_effects
class wall_omega_treatment(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class use_second_cell_off_a_wall_quantities(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class near_wall_treatment(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    wall_treatment: wall_treatment
    user_defined: user_defined_7
    enhanced_wall_treatment_options: enhanced_wall_treatment_options
    wall_omega_treatment: wall_omega_treatment
    use_second_cell_off_a_wall_quantities: use_second_cell_off_a_wall_quantities
class reynolds_stress(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class subgrid_scale_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_stress(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_energy_flux(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_scalar_flux(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class subgrid_dynamic_fvar(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cvreman(Real):
    _version: str
    fluent_name: str
    _python_name: str
class csigma(Real):
    _version: str
    fluent_name: str
    _python_name: str
class near_wall_rans_layer(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cw1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cw2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class les_model_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    dynamic_stress: dynamic_stress
    dynamic_energy_flux: dynamic_energy_flux
    dynamic_scalar_flux: dynamic_scalar_flux
    subgrid_dynamic_fvar: subgrid_dynamic_fvar
    cvreman: cvreman
    csigma: csigma
    near_wall_rans_layer: near_wall_rans_layer
    cw1: cw1
    cw2: cw2
class solve_tke(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wall_echo(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reynolds_stress_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    solve_tke: solve_tke
    wall_echo: wall_echo
class rans(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class all_len_modified(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class des_limiter(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class des(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    all_len_modified: all_len_modified
    des_limiter: des_limiter
    _child_aliases: dict
class transition_module(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hybrid_rans_les(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hybrid_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class update_interval_k_omega(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class les_subgrid_scale_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class les_subgrid_dynamic_fvar(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sbes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    hybrid_model: hybrid_model
    user_defined: user_defined_8
    update_interval_k_omega: update_interval_k_omega
    les_subgrid_scale_model: les_subgrid_scale_model
    les_subgrid_dynamic_fvar: les_subgrid_dynamic_fvar
class f_length(String):
    _version: str
    fluent_name: str
    _python_name: str
class re_theta_c(String):
    _version: str
    fluent_name: str
    _python_name: str
class re_theta_t(String):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_transition(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    f_length: f_length
    re_theta_c: re_theta_c
    re_theta_t: re_theta_t
class viscous_heating(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class low_pressure_boundary_slip(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expression_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ccurv(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_11
    value: value_5
    expression: expression_5
    user_defined: user_defined_9
class curvature_correction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_1
    ccurv: ccurv
class enabled_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_12(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expression_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ccorner(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_12
    value: value_6
    expression: expression_6
    user_defined: user_defined_10
class corner_flow_correction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_2
    ccorner: ccorner
class compressibility_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class production_kato_launder_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class clip_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class production_limiter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_3
    clip_factor: clip_factor
class turb_buoyancy_effects(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class kw_buoyancy_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_geko(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    viscous_heating: viscous_heating
    low_pressure_boundary_slip: low_pressure_boundary_slip
    curvature_correction: curvature_correction
    corner_flow_correction: corner_flow_correction
    compressibility_effects: compressibility_effects
    production_kato_launder_enabled: production_kato_launder_enabled
    production_limiter: production_limiter
    turb_buoyancy_effects: turb_buoyancy_effects
    kw_buoyancy_effects: kw_buoyancy_effects
    enable_geko: enable_geko
class dispersion_force_in_momentum(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dispersion_in_relative_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    dispersion_force_in_momentum: dispersion_force_in_momentum
    dispersion_in_relative_velocity: dispersion_in_relative_velocity
class turbulence_multiphase_models(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rsm_multiphase_models(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class subgrid_turbulence_contribution_aiad(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_turbulence(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    multiphase_options: multiphase_options
    turbulence_multiphase_models: turbulence_multiphase_models
    rsm_multiphase_models: rsm_multiphase_models
    subgrid_turbulence_contribution_aiad: subgrid_turbulence_contribution_aiad
class k_omega_vorticity_based_production(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class kw_add_sas(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class kw_add_des(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_turb_damping(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turb_damping_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence_damping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_turb_damping: enable_turb_damping
    turb_damping_factor: turb_damping_factor
class rke_cmu_rotation_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turb_non_newtonian(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class non_newtonian_modification(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turb_pk_compressible(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_p_function(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class restore_sst_v61(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence_expert(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    k_omega_vorticity_based_production: k_omega_vorticity_based_production
    kw_add_sas: kw_add_sas
    kw_add_des: kw_add_des
    turbulence_damping: turbulence_damping
    rke_cmu_rotation_term: rke_cmu_rotation_term
    turb_non_newtonian: turb_non_newtonian
    non_newtonian_modification: non_newtonian_modification
    turb_pk_compressible: turb_pk_compressible
    thermal_p_function: thermal_p_function
    restore_sst_v61: restore_sst_v61
    _child_aliases: dict
class crossflow_transition(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_13(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class critical_reynolds_number_correlation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_13
    user_defined: user_defined_11
class clambda_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class capg_hightu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cfpg_hightu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class capg_lowtu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cfpg_lowtu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ctu_hightu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ctu_lowtu(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rec_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rec_c1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rec_c2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cbubble_c1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cbubble_c2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rv1_switch(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transition(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    crossflow_transition: crossflow_transition
    critical_reynolds_number_correlation: critical_reynolds_number_correlation
    clambda_scale: clambda_scale
    capg_hightu: capg_hightu
    cfpg_hightu: cfpg_hightu
    capg_lowtu: capg_lowtu
    cfpg_lowtu: cfpg_lowtu
    ctu_hightu: ctu_hightu
    ctu_lowtu: ctu_lowtu
    rec_max: rec_max
    rec_c1: rec_c1
    rec_c2: rec_c2
    cbubble_c1: cbubble_c1
    cbubble_c2: cbubble_c2
    rv1_switch: rv1_switch
class enabled_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_14(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_12(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geometric_roughness_height(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_14
    value: value_7
    user_defined: user_defined_12
class roughness_correlation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_4
    geometric_roughness_height: geometric_roughness_height
class roughness_correlation_fcn(String, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class transition_sst(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    roughness_correlation: roughness_correlation
    roughness_correlation_fcn: roughness_correlation_fcn
    _child_aliases: dict
class subgrid_scale_turb_visc(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turb_visc_mf_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turb_visc_mf(NamedObject[turb_visc_mf_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: turb_visc_mf_child
class turb_visc(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tke_prandtl(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tdr_prandtl(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sdr_prandtl(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class energy_prandtl(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wall_prandtl(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_schmidt(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_functions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    subgrid_scale_turb_visc: subgrid_scale_turb_visc
    turb_visc_mf: turb_visc_mf
    turb_visc: turb_visc
    tke_prandtl: tke_prandtl
    tdr_prandtl: tdr_prandtl
    sdr_prandtl: sdr_prandtl
    energy_prandtl: energy_prandtl
    wall_prandtl: wall_prandtl
    turbulent_schmidt: turbulent_schmidt
    _child_aliases: dict
class sa_enhanced_wall_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sa_damping(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscous(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_2
    spalart_allmaras_production: spalart_allmaras_production
    k_epsilon_model: k_epsilon_model
    k_omega_model: k_omega_model
    k_omega: k_omega
    geko: geko
    rng: rng
    near_wall_treatment: near_wall_treatment
    reynolds_stress: reynolds_stress
    subgrid_scale_model: subgrid_scale_model
    les_model_options: les_model_options
    reynolds_stress_options: reynolds_stress_options
    rans: rans
    des: des
    transition_module: transition_module
    hybrid_rans_les: hybrid_rans_les
    sbes: sbes
    user_defined_transition: user_defined_transition
    options: options_1
    multiphase_turbulence: multiphase_turbulence
    turbulence_expert: turbulence_expert
    transition: transition
    transition_sst: transition_sst
    user_defined_functions: user_defined_functions
    sa_enhanced_wall_treatment: sa_enhanced_wall_treatment
    sa_damping: sa_damping
    _child_aliases: dict
class model_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class export_asd(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class export_cgns(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class write_frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class timesteps_per_asd_file(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class sources_fft(Group):
    _version: str
    fluent_name: str
    _python_name: str
class export_source_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    export_asd: export_asd
    export_cgns: export_cgns
    write_frequency: write_frequency
    timesteps_per_asd_file: timesteps_per_asd_file
    sources_fft: sources_fft
    def export_cgns_volumetric(self, export_fluid_zones: bool):
        """
        Enable export of volumetric acoustic source data in CGNS format for Simcenter 3D Acoustics.
        
        Parameters
        ----------
            export_fluid_zones : bool
                Enable export of volumetric acoustic source data in CGNS format for Simcenter 3D Acoustics.
        """
class on_the_fly(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class far_field_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class far_field_sound_speed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_acoustic_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class timesteps_per_revolution(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class revolutions(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class correlation_length_2d(Real):
    _version: str
    fluent_name: str
    _python_name: str
class convective_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class freestream_velocity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class freestream_direction(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class convection(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    convective_effects: convective_effects
    freestream_velocity: freestream_velocity
    freestream_direction: freestream_direction
class auto_prune(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fwh_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    on_the_fly: on_the_fly
    far_field_density: far_field_density
    far_field_sound_speed: far_field_sound_speed
    reference_acoustic_pressure: reference_acoustic_pressure
    timesteps_per_revolution: timesteps_per_revolution
    revolutions: revolutions
    correlation_length_2d: correlation_length_2d
    convection: convection
    auto_prune: auto_prune
class acoustics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    model: model_3
    export_source_data: export_source_data
    fwh_options: fwh_options
    def sources(self, source_zones: list[int]):
        """
        Specify source zones for FW-H model or for data export.
        
        Parameters
        ----------
            source_zones : List
                Source zones for FW-H model or for data export.
        """
class model_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class n_theta_divisions(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class n_phi_divisions(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class n_theta_pixels(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class n_phi_pixels(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class do_acceleration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partially_specular_wall_treatment_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fast_second_order_discrete_ordinate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blending_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enable_7(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solution_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class do_energy_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_7
    solution_method: solution_method
class discrete_ordinates(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    n_theta_divisions: n_theta_divisions
    n_phi_divisions: n_phi_divisions
    n_theta_pixels: n_theta_pixels
    n_phi_pixels: n_phi_pixels
    do_acceleration: do_acceleration
    partially_specular_wall_treatment_method: partially_specular_wall_treatment_method
    fast_second_order_discrete_ordinate: fast_second_order_discrete_ordinate
    blending_factor: blending_factor
    do_energy_coupling: do_energy_coupling
class number_of_histories(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class under_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class target_cells_per_volume_cluster(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    target_cells_per_volume_cluster: target_cells_per_volume_cluster
class monte_carlo(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_histories: number_of_histories
    under_relaxation: under_relaxation
    mesh_options: mesh_options
class basis(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smoothing(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class resolution(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class separation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class subdivide(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class non_participating_boundary_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class non_participating_zone_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class viewfactor_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    basis: basis
    method: method_1
    surfaces: surfaces_5
    smoothing: smoothing
    resolution: resolution
    separation: separation
    subdivide: subdivide
    non_participating_boundary_zones: non_participating_boundary_zones
    non_participating_zone_temperature: non_participating_zone_temperature
class enable_mesh_interface_clustering(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class split_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class clustering_algorithm(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enable_clustering(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_15(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class global_faces_per_surface_cluster(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_faces_per_surface_cluster(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class faces_per_cluster(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_15
    global_faces_per_surface_cluster: global_faces_per_surface_cluster
    maximum_faces_per_surface_cluster: maximum_faces_per_surface_cluster
class clustering_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable_mesh_interface_clustering: enable_mesh_interface_clustering
    split_angle: split_angle
    clustering_algorithm: clustering_algorithm
    enable_clustering: enable_clustering
    faces_per_cluster: faces_per_cluster
    def print_thread_clusters(self):
        """
        Prints the following for all boundary threads: thread-id, number of faces, faces per surface cluster, and the number of surface clusters.
        """
class maximum_radiation_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class residual_convergence_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radiosity_solver_control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    maximum_radiation_iterations: maximum_radiation_iterations
    residual_convergence_criteria: residual_convergence_criteria
class s2s(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    viewfactor_settings: viewfactor_settings
    clustering_settings: clustering_settings
    radiosity_solver_control: radiosity_solver_control
    def compute_write_vf(self, file_name: str):
        """
        Compute and write both surface clusters and view factors.
        
        Parameters
        ----------
            file_name : str
                Name of output file for updated surface clusters and view factors.
        """
    def compute_vf_accelerated(self, file_name: str):
        """
        Compute and write only view factors from existing surface clusters with GPU-acceleration.
        
        Parameters
        ----------
            file_name : str
                Name of output file for updated surface clusters and view factors.
        """
    def compute_vf_only(self, file_name: str):
        """
        Compute and write only view factors from existing surface clusters.
        
        Parameters
        ----------
            file_name : str
                Name of output file for updated surface clusters and view factors.
        """
    def read_vf_file(self, file_name: str):
        """
        Read an S2S file.
        
        Parameters
        ----------
            file_name_1 : str
                Name of input file containing view factors.
        """
class name_4(String):
    _version: str
    fluent_name: str
    _python_name: str
class start_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class end(Real):
    _version: str
    fluent_name: str
    _python_name: str
class multiband_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    start: start_2
    end: end
class multiband(NamedObject[multiband_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: multiband_child
class method_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_interval(Real):
    _version: str
    fluent_name: str
    _python_name: str
class iteration_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class solve_frequency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_2
    time_step_interval: time_step_interval
    time_interval: time_interval
    iteration_interval: iteration_interval
class solar_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class direction_from_solar_calculator(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sun_direction_vector(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class sun_direction_vector_definition(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_from_solar_calculator: direction_from_solar_calculator
    sun_direction_vector: sun_direction_vector
class option_16(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class piecewise_linear(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class polynomial_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class user_defined_13(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class direct_solar_irradiation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_16
    constant: constant
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_13
class option_17(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_14(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diffuse_solar_irradiation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_17
    constant: constant
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_14
class spectral_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class illumination_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direct_solar_irradiation: direct_solar_irradiation
    diffuse_solar_irradiation: diffuse_solar_irradiation
    spectral_fraction: spectral_fraction
class quad_tree_parameters(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class ground_reflectivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scattering_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solar_on_adjacent_fluid(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solar_load_frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class apply_full_solar_irradiation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solar_load(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    solar_model: solar_model
    sun_direction_vector_definition: sun_direction_vector_definition
    illumination_parameters: illumination_parameters
    quad_tree_parameters: quad_tree_parameters
    ground_reflectivity: ground_reflectivity
    scattering_fraction: scattering_fraction
    solar_on_adjacent_fluid: solar_on_adjacent_fluid
    solar_load_frequency: solar_load_frequency
    apply_full_solar_irradiation: apply_full_solar_irradiation
    def solar_on_demand(self):
        """
        Calculate solar load on demand.
        """
class longitude(Real):
    _version: str
    fluent_name: str
    _python_name: str
class latitude(Real):
    _version: str
    fluent_name: str
    _python_name: str
class timezone(Real):
    _version: str
    fluent_name: str
    _python_name: str
class north_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class north_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class north_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class north_direction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    north_x: north_x
    north_y: north_y
    north_z: north_z
class east_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class east_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class east_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class east_direction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    east_x: east_x
    east_y: east_y
    east_z: east_z
class mesh_orientation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    north_direction: north_direction
    east_direction: east_direction
class day(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class month(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class hour(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class minute(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class date_and_time(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    day: day
    month: month
    hour: hour
    minute: minute
class calculator_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sunshine_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solar_calculator(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    longitude: longitude
    latitude: latitude
    timezone: timezone
    mesh_orientation: mesh_orientation
    date_and_time: date_and_time
    calculator_method: calculator_method
    sunshine_factor: sunshine_factor
class solar_calculator_gui(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    longitude: longitude
    latitude: latitude
    timezone: timezone
    mesh_orientation: mesh_orientation
    date_and_time: date_and_time
    calculator_method: calculator_method
    sunshine_factor: sunshine_factor
    def calculate_solar_conditions(self):
        """
        Print solar conditions to console.
        """
class radiation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_4
    discrete_ordinates: discrete_ordinates
    monte_carlo: monte_carlo
    s2s: s2s
    multiband: multiband
    solve_frequency: solve_frequency
    solar_load: solar_load
    solar_calculator: solar_calculator
    solar_calculator_gui: solar_calculator_gui
class option_18(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class phase_material_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class phase_material(NamedObject[phase_material_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_material_child
class number_vol_spec(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class model_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_18
    material: material_1
    phase_material: phase_material
    number_vol_spec: number_vol_spec
class inlet_diffusion_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thickened_flame(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_energy_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multi_component_diffusion_mf_child(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multi_component_diffusion_mf(NamedObject[multi_component_diffusion_mf_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: multi_component_diffusion_mf_child
class multi_component_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_energy_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class save_gradients(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_migration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_transport_expert(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    inlet_diffusion: inlet_diffusion_1
    thermal_diffusion: thermal_diffusion
    thickened_flame: thickened_flame
    diffusion_energy_source: diffusion_energy_source
    multi_component_diffusion_mf: multi_component_diffusion_mf
    multi_component_diffusion: multi_component_diffusion
    liquid_energy_diffusion: liquid_energy_diffusion
    save_gradients: save_gradients
    species_migration: species_migration
    species_transport_expert: species_transport_expert
    _child_aliases: dict
class enable_volumetric_reactions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_wall_surface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_particle_reactions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_electrochemical_surface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reactions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_volumetric_reactions: enable_volumetric_reactions
    enable_wall_surface: enable_wall_surface
    enable_particle_reactions: enable_particle_reactions
    enable_electrochemical_surface: enable_electrochemical_surface
class heat_of_surface_reactions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mass_deposition_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction_diffusion_balance(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surface_reaction_aggressiveness_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class surface_reaction_rate_temperature_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class surface_reaction_solid_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_surface_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    heat_of_surface_reactions: heat_of_surface_reactions
    mass_deposition_source: mass_deposition_source
    reaction_diffusion_balance: reaction_diffusion_balance
    surface_reaction_aggressiveness_factor: surface_reaction_aggressiveness_factor
    surface_reaction_rate_temperature_factor: surface_reaction_rate_temperature_factor
    surface_reaction_solid_fraction: surface_reaction_solid_fraction
    _child_aliases: dict
class turb_chem_interaction(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class chemistry_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class aggressiveness_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transport_time_scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turb_chem_interaction_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    chemistry_iterations: chemistry_iterations
    aggressiveness_factor: aggressiveness_factor
    transport_time_scale_factor: transport_time_scale_factor
    min_temperature: min_temperature
    _child_aliases: dict
class linearize_convection_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class linearize_diffusion_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blending(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_cell_quality_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_transport_expert_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    linearize_convection_source: linearize_convection_source
    linearize_diffusion_source: linearize_diffusion_source
    blending: blending
    minimum_cell_quality_threshold: minimum_cell_quality_threshold
class edc_choice(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_fraction_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_scale_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class edc_constant_coefficient_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    volume_fraction_constant: volume_fraction_constant
    time_scale_constant: time_scale_constant
class edc_pasr_mixing_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mixing_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fractal_dimension(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pasr_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    edc_pasr_mixing_model: edc_pasr_mixing_model
    mixing_constant: mixing_constant
    fractal_dimension: fractal_dimension
class user_defined_edc_scales(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class edc_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    edc_choice: edc_choice
    edc_constant_coefficient_options: edc_constant_coefficient_options
    pasr_options: pasr_options
    user_defined_edc_scales: user_defined_edc_scales
    _child_aliases: dict
class efficiency_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class points_in_flame_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class integral_length_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sensor_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sensor_reaction_index(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class beta_factor_omega_equation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sensor_num_smooths(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class tfm_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    efficiency_function: efficiency_function
    points_in_flame_count: points_in_flame_count
    integral_length_scale: integral_length_scale
    sensor_method: sensor_method
    sensor_reaction_index: sensor_reaction_index
    beta_factor_omega_equation: beta_factor_omega_equation
    sensor_num_smooths: sensor_num_smooths
    _child_aliases: dict
class chemistry_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class absolute_ode_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relative_ode_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class integration_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    absolute_ode_tolerance: absolute_ode_tolerance
    relative_ode_tolerance: relative_ode_tolerance
class error_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class table_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class isat_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    error_tolerance: error_tolerance
    table_size: table_size
    verbosity: verbosity_1
    def clear_isat_table(self):
        """
        Clear the current ISAT table.
        """
    _child_aliases: dict
class chemistry_agglomeration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class error_tolerance_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_bin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class chemistry_agglomeration_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    error_tolerance: error_tolerance_1
    temperature_bin: temperature_bin
    _child_aliases: dict
class turbulent_rate_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class chemical_rate_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fuel_species(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_rich_flammability(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rich_equivalence_ratio_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exponential_factor_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_rich_flammability_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    rich_equivalence_ratio_limit: rich_equivalence_ratio_limit
    exponential_factor_beta: exponential_factor_beta
class relax_to_equilibrium_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulent_rate_constant: turbulent_rate_constant
    chemical_rate_constant: chemical_rate_constant
    fuel_species: fuel_species
    equilibrium_rich_flammability: equilibrium_rich_flammability
    equilibrium_rich_flammability_options: equilibrium_rich_flammability_options
class dynamic_mechanism_reduction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expert_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_target(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class target_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class targets(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_mechanism_reduction_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    tolerance: tolerance
    expert: expert_1
    min_target: min_target
    target_threshold: target_threshold
    targets: targets
    _child_aliases: dict
class dimension_reduction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_represented_species(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class full_mechanism_material_name(String):
    _version: str
    fluent_name: str
    _python_name: str
class fuel_oxidizer_species(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dimension_reduction_mixture_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_represented_species: number_of_represented_species
    full_mechanism_material_name: full_mechanism_material_name
    fuel_oxidizer_species: fuel_oxidizer_species
class integration_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_3
    integration_options: integration_options
    isat_options: isat_options
    chemistry_agglomeration: chemistry_agglomeration
    chemistry_agglomeration_options: chemistry_agglomeration_options
    relax_to_equilibrium_options: relax_to_equilibrium_options
    dynamic_mechanism_reduction: dynamic_mechanism_reduction
    dynamic_mechanism_reduction_options: dynamic_mechanism_reduction_options
    dimension_reduction: dimension_reduction
    dimension_reduction_mixture_options: dimension_reduction_mixture_options
    _child_aliases: dict
class energy_treatment(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class state_relation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_diffusion_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class compressibility(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_micro_mix(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stoichiometric_mixture_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class options_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    inlet_diffusion: inlet_diffusion_2
    compressibility: compressibility
    liquid_micro_mix: liquid_micro_mix
    stoichiometric_mixture_fraction: stoichiometric_mixture_fraction
class operating_pressure_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_operating_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    operating_pressure: operating_pressure_1
    equilibrium_operating_pressure: equilibrium_operating_pressure
class flamelet_options(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class file_type_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flamelet_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flamelet_solution_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class premixed_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class chemistry(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    energy_treatment: energy_treatment
    state_relation: state_relation
    options: options_3
    model_settings: model_settings
    flamelet_options: flamelet_options
    file_type: file_type_2
    flamelet_type: flamelet_type
    flamelet_solution_method: flamelet_solution_method
    premixed_model: premixed_model
    def import_standard_flamelet(self, standard_flamelet_file: list[str]):
        """
        Import Standard Flamelet.
        
        Parameters
        ----------
            standard_flamelet_file : List
                Import Standard Flamelet File.
        """
    def import_rif_flamelet(self, rif_prp_file: str, rif_flamelet_file: str):
        """
        Import CFX-RIF Flamelet.
        
        Parameters
        ----------
            rif_prp_file : str
                Import CFX-RIF Property PRP File.
            rif_flamelet_file : str
                Import RIF Flamelet File.
        """
class fuel_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class oxidizer_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fuel(Real):
    _version: str
    fluent_name: str
    _python_name: str
class oxidizer(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_boundary_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fuel: fuel
    oxidizer: oxidizer
class species_boundary(NamedObject[species_boundary_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_boundary_child
class specify_species_in(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class default_progress_variable(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class definition_of_progress_variable_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    weight: weight
class definition_of_progress_variable(NamedObject[definition_of_progress_variable_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: definition_of_progress_variable_child
class progress_variable_definition(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    default_progress_variable: default_progress_variable
    definition_of_progress_variable: definition_of_progress_variable
class boundary(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fuel_temperature: fuel_temperature
    oxidizer_temperature: oxidizer_temperature
    species_boundary: species_boundary
    specify_species_in: specify_species_in
    progress_variable_definition: progress_variable_definition
class initial_fourier_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fourier_number_multiplier(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relative_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class absolute_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class flamelet_convergence_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_integration_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initial_fourier_number: initial_fourier_number
    fourier_number_multiplier: fourier_number_multiplier
    relative_tolerance: relative_tolerance
    absolute_tolerance: absolute_tolerance
    flamelet_convergence_tolerance: flamelet_convergence_tolerance
    maximum_integration_time: maximum_integration_time
class number_grid_points_flamelet(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_mixture_fraction_space(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_progress_variable(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_number_of_flamelets(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class scalar_dissipation_stoichiometric(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_scalar_dissipation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_enthalpy(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class nonadiabatic_flamelet(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fully_premix_flamelet(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fully_premix_flamelet_mixture_fraction_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_scalar_dissipation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scalar_dissipation_multiplier(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scalar_dissipation_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class udf_flamelet(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_19(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    number_grid_points_flamelet: number_grid_points_flamelet
    number_grid_points_mixture_fraction_space: number_grid_points_mixture_fraction_space
    number_grid_points_progress_variable: number_grid_points_progress_variable
    maximum_number_of_flamelets: maximum_number_of_flamelets
    scalar_dissipation_stoichiometric: scalar_dissipation_stoichiometric
    minimum_scalar_dissipation: minimum_scalar_dissipation
    number_grid_points_enthalpy: number_grid_points_enthalpy
    nonadiabatic_flamelet: nonadiabatic_flamelet
    fully_premix_flamelet: fully_premix_flamelet
    fully_premix_flamelet_mixture_fraction_value: fully_premix_flamelet_mixture_fraction_value
    initial_scalar_dissipation: initial_scalar_dissipation
    scalar_dissipation_multiplier: scalar_dissipation_multiplier
    scalar_dissipation_step: scalar_dissipation_step
    udf_flamelet: udf_flamelet
    option: option_19
    def calc_fla(self):
        """
        Calculate Flamelets.
        """
    def write_flamelet_cmd(self, write_flamelet_file: str):
        """
        Write a flamelet file.
        
        Parameters
        ----------
            write_flamelet_file : str
                Name Flamelet File.
        """
class include_equilibrium(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pdf_include_equilibrium(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class automatic_refinement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class initial_number_grids(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_number_grids(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_change_value_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_change_solve_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class stoichiometric_mixture_fraction_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class user_mixture_fraction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class user_mixture_fraction_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class refine_based(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    stoichiometric_mixture_fraction: stoichiometric_mixture_fraction_1
    user_mixture_fraction: user_mixture_fraction
    user_mixture_fraction_value: user_mixture_fraction_value
class flamelet(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    parameters: parameters_1
    include_equilibrium: include_equilibrium
    pdf_include_equilibrium: pdf_include_equilibrium
    automatic_refinement: automatic_refinement
    initial_number_grids: initial_number_grids
    maximum_number_grids: maximum_number_grids
    maximum_change_value_ratio: maximum_change_value_ratio
    maximum_change_solve_ratio: maximum_change_solve_ratio
    refine_based: refine_based
    _child_aliases: dict
class number_grid_points_progress_variable_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_pdf(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_progress_variable_variance(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_grid_points_mixture_fraction_variance(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_grid_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_grid_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_change_slope_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_species(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mean_enthalpy_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class automatic_grid_refinement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_grid_points_progress_variable: number_grid_points_progress_variable_1
    number_grid_points_pdf: number_grid_points_pdf
    number_grid_points_progress_variable_variance: number_grid_points_progress_variable_variance
    number_grid_points_mixture_fraction_variance: number_grid_points_mixture_fraction_variance
    initial_grid_points: initial_grid_points
    maximum_grid_points: maximum_grid_points
    maximum_change_value_ratio: maximum_change_value_ratio
    maximum_change_slope_ratio: maximum_change_slope_ratio
    maximum_species: maximum_species
    mean_enthalpy_points: mean_enthalpy_points
    minimum_temperature: minimum_temperature
    automatic_grid_refinement: automatic_grid_refinement
class enable_8(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_name(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fgm_scalar_transport(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_8
    species_name: species_name
class table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    parameters: parameters_2
    fgm_scalar_transport: fgm_scalar_transport
    def calc_pdf(self):
        """
        Calculate PDF.
        """
    def write_pdf_cmd(self, binary: bool, write_pdf_file: str):
        """
        Write a PDF file.
        
        Parameters
        ----------
            binary : bool
                Write in binary format.
            write_pdf_file : str
                Name PDF File.
        """
    _child_aliases: dict
class option_20(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence_chemistry_interaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_20
class flame_speed(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_length_scale_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_flame_speed_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class stretch_factor_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_damping_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_schmidt_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_length_scale_constant_rans(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_flame_speed_constant_rans(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ewald_corrector(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blint_modifier(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flame_speed_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    flame_speed: flame_speed
    turbulent_length_scale_constant: turbulent_length_scale_constant
    turbulent_flame_speed_constant: turbulent_flame_speed_constant
    stretch_factor_coeff: stretch_factor_coeff
    wall_damping_coeff: wall_damping_coeff
    turbulent_schmidt_number: turbulent_schmidt_number
    turbulent_length_scale_constant_rans: turbulent_length_scale_constant_rans
    turbulent_flame_speed_constant_rans: turbulent_flame_speed_constant_rans
    ewald_corrector: ewald_corrector
    blint_modifier: blint_modifier
class variance_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class algebraic_variance_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class variance_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    variance_method: variance_method
    algebraic_variance_constant: algebraic_variance_constant
class premix(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulence_chemistry_interaction: turbulence_chemistry_interaction
    flame_speed_model: flame_speed_model
    variance_settings: variance_settings
class nonadiabatic_laminar_flame_speed(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class strained_flame_speed(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_heat_loss_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class property(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    nonadiabatic_laminar_flame_speed: nonadiabatic_laminar_flame_speed
    strained_flame_speed: strained_flame_speed
    number_heat_loss_points: number_heat_loss_points
    def recalculate_property(self):
        """
        Recalculate Properties.
        """
    def calculate_strain(self):
        """
        Calculate Strained Flamelets.
        """
    def recompute_strain(self):
        """
        Calculate Strained Flamelets.
        """
class partially_premixed_model_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    chemistry: chemistry
    boundary: boundary
    control: control
    flamelet: flamelet
    table: table
    premix: premix
    property: property
class reaction_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class water_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class total_gas_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class partial_gas_pressure_co2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class partial_gas_pressure_h2s(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_ph(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ph_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class phase_id(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class input_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    water_density: water_density
    temperature: temperature
    total_gas_pressure: total_gas_pressure
    partial_gas_pressure_co2: partial_gas_pressure_co2
    partial_gas_pressure_h2s: partial_gas_pressure_h2s
    fixed_ph: fixed_ph
    ph_value: ph_value
    phase_id: phase_id
class option_21(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class strong(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class co2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class h2s(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class mixed(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_results(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_21
    strong: strong
    co2: co2
    h2s: h2s
    mixed: mixed
    _child_aliases: dict
class water_corrosion_pre(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    reaction_type: reaction_type
    input_parameters: input_parameters
    equilibrium_results: equilibrium_results
    def water_equilibrium_calculation(self):
        """
        Compute equilibrium.
        """
    def create_mixture_and_reaction(self):
        """
        Create corrosion mixture and reactions.
        """
    _child_aliases: dict
class species(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    model: model_5
    options: options_2
    reactions: reactions
    wall_surface_options: wall_surface_options
    turb_chem_interaction: turb_chem_interaction
    turb_chem_interaction_options: turb_chem_interaction_options
    species_transport_expert_options: species_transport_expert_options
    edc_options: edc_options
    tfm_options: tfm_options
    chemistry_solver: chemistry_solver
    integration_parameters: integration_parameters
    partially_premixed_model_options: partially_premixed_model_options
    water_corrosion_pre: water_corrosion_pre
    def import_chemkin(self, kinetics_input_file: str, thermodb_input_file: str, surf_mech: bool, trans_prop: bool, trans_input_file: str, surfchem_input_file: str):
        """
        Import Mechanism.
        
        Parameters
        ----------
            kinetics_input_file : str
                Kinetics Input File.
            thermodb_input_file : str
                Thermodynamic Database Input File.
            surf_mech : bool
                Enable/Disable Import Surface Mechanism.
            trans_prop : bool
                Import CHEMKIN Transport Property Database.
            trans_input_file : str
                Transport Database File.
            surfchem_input_file : str
                Surface CHEMKIN Mechanism File.
        """
    _child_aliases: dict
class enabled_5(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class iteration_interval_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class update_sources_every_iteration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class interaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_5
    iteration_interval: iteration_interval_1
    update_sources_every_iteration: update_sources_every_iteration
    _child_aliases: dict
class enabled_6(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_22(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class create_particles_at(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dpm_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_time_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_tracking(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_6
    option: option_22
    create_particles_at: create_particles_at
    dpm_time_step_size: dpm_time_step_size
    number_of_time_steps: number_of_time_steps
    def clear_all_particles(self):
        """
        Clear all particles currently in the domain.
        """
    _child_aliases: dict
class contour_plotting(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class general_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interaction: interaction
    unsteady_tracking: unsteady_tracking
    contour_plotting: contour_plotting
class pressure_gradient_force(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    _child_aliases: dict
class saffman_lift_force_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_force_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_7(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class virtual_mass_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class virtual_mass_force(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_7
    virtual_mass_factor: virtual_mass_factor
class thermophoretic_force_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class particle_forces(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pressure_gradient_force: pressure_gradient_force
    saffman_lift_force_enabled: saffman_lift_force_enabled
    pressure_force_enabled: pressure_force_enabled
    virtual_mass_force: virtual_mass_force
    thermophoretic_force_enabled: thermophoretic_force_enabled
class erosion_accretion_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class twoway_turb_coupl_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class secondary_breakup_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_8(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blocking_max_vol_frac(Real):
    _version: str
    fluent_name: str
    _python_name: str
class drag_scaling_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mom_source_scaling_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class other_source_scaling_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class volume_displacement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_8
    blocking_max_vol_frac: blocking_max_vol_frac
    drag_scaling_enabled: drag_scaling_enabled
    mom_source_scaling_enabled: mom_source_scaling_enabled
    other_source_scaling_enabled: other_source_scaling_enabled
class enabled_9(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_approximation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class convective_heat_transfer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_9
    turbulent_approximation: turbulent_approximation
class include_convective_heat_transfer(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class condensing_film_stationary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class all_film_stationary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_movement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    condensing_film_stationary: condensing_film_stationary
    all_film_stationary: all_film_stationary
class film_adds_to_dpm_concentration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class leidenfrost_temp_postproc_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_10(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class temp_limit_rel_to_boil_point(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_limiter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    leidenfrost_temp_postproc_enabled: leidenfrost_temp_postproc_enabled
    enabled: enabled_10
    temp_limit_rel_to_boil_point: temp_limit_rel_to_boil_point
class enable_9(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_flow_stabilization_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radial_spreading_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_lwf_continuity_formulation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_9
    film_flow_stabilization_factor: film_flow_stabilization_factor
    radial_spreading_term: radial_spreading_term
class wall_film(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    convective_heat_transfer: convective_heat_transfer
    include_convective_heat_transfer: include_convective_heat_transfer
    film_movement: film_movement
    film_adds_to_dpm_concentration: film_adds_to_dpm_concentration
    temperature_limiter: temperature_limiter
    enable_lwf_continuity_formulation: enable_lwf_continuity_formulation
class physical_models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    particle_forces: particle_forces
    erosion_accretion_enabled: erosion_accretion_enabled
    twoway_turb_coupl_enabled: twoway_turb_coupl_enabled
    secondary_breakup_enabled: secondary_breakup_enabled
    volume_displacement: volume_displacement
    wall_film: wall_film
    _child_aliases: dict
class max_num_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class option_23(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class length_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class step_length_factor(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class step_size_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_23
    length_scale: length_scale
    step_length_factor: step_length_factor
class randomize_every_iteration(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class randomize_every_timestep(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tracking_statistics_format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frame(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expert_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    randomize_every_iteration: randomize_every_iteration
    randomize_every_timestep: randomize_every_timestep
    tracking_statistics_format: tracking_statistics_format
    verbosity: verbosity_2
    reference_frame: reference_frame
class tracking(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_num_steps: max_num_steps
    step_size_controls: step_size_controls
    expert: expert_2
    _child_aliases: dict
class enabled_11(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_num_refinements(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class step_size_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class accuracy_control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_11
    tolerance: tolerance_1
    max_num_refinements: max_num_refinements
    step_size_fraction: step_size_fraction
class option_24(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class low_order_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class high_order_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tracking_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    accuracy_control: accuracy_control
    option: option_24
    low_order_scheme: low_order_scheme
    high_order_scheme: high_order_scheme
    _child_aliases: dict
class enabled_12(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_formulation_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class constant_during_iterations(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class limiter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class linearization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_12
    enhanced_formulation_enabled: enhanced_formulation_enabled
    constant_during_iterations: constant_during_iterations
    limiter: limiter
    _child_aliases: dict
class impl_mom_cplg_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class impl_cplg_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class linear_change_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reset_sources_at_timestep(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class underrelaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_accurate_sources_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class source_term_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    linearization: linearization
    impl_mom_cplg_enabled: impl_mom_cplg_enabled
    impl_cplg_enabled: impl_cplg_enabled
    linear_change_enabled: linear_change_enabled
    reset_sources_at_timestep: reset_sources_at_timestep
    underrelaxation_factor: underrelaxation_factor
    time_accurate_sources_enabled: time_accurate_sources_enabled
class enabled_13(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class source_avg_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class average_every_step(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class kernel(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    _child_aliases: dict
class kernel_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class gaussian_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class node_based_averaging(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_13
    source_avg_enabled: source_avg_enabled
    average_every_step: average_every_step
    kernel: kernel
    kernel_type: kernel_type
    gaussian_factor: gaussian_factor
    _child_aliases: dict
class dynamic_interaction_range_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class across_injections_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_parcel_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class data_reduction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    across_injections_enabled: across_injections_enabled
    min_parcel_count: min_parcel_count
class parcel_count_control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    data_reduction: data_reduction
class enabled_14(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class always_use_face_centroid_with_periodics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class specific_heat_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class density_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gradients_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscosity_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wall_zero_vel_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flow_interpolation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    specific_heat_enabled: specific_heat_enabled
    density_enabled: density_enabled
    gradients_enabled: gradients_enabled
    viscosity_enabled: viscosity_enabled
    temperature_enabled: temperature_enabled
    wall_zero_vel_enabled: wall_zero_vel_enabled
class boundary_layer_tracking_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class subtet_validity_checking_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_intersect_tol_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class barycentric_intersection_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_method_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class support_for_std_track_data_read_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class overset_robustness_level(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class legacy_method_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class particle_relocation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enhanced_method_enabled: enhanced_method_enabled
    support_for_std_track_data_read_enabled: support_for_std_track_data_read_enabled
    overset_robustness_level: overset_robustness_level
    legacy_method_enabled: legacy_method_enabled
class stuck_particle_removal_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class barycentric_sampling_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class quad_face_centroid_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class high_res_tracking(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_14
    always_use_face_centroid_with_periodics: always_use_face_centroid_with_periodics
    flow_interpolation: flow_interpolation
    boundary_layer_tracking_enabled: boundary_layer_tracking_enabled
    subtet_validity_checking_enabled: subtet_validity_checking_enabled
    auto_intersect_tol_enabled: auto_intersect_tol_enabled
    barycentric_intersection_enabled: barycentric_intersection_enabled
    particle_relocation: particle_relocation
    stuck_particle_removal_enabled: stuck_particle_removal_enabled
    barycentric_sampling_enabled: barycentric_sampling_enabled
    quad_face_centroid_enabled: quad_face_centroid_enabled
class numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    tracking: tracking_1
    source_term_settings: source_term_settings
    node_based_averaging: node_based_averaging
    dynamic_interaction_range_enabled: dynamic_interaction_range_enabled
    parcel_count_control: parcel_count_control
    high_res_tracking: high_res_tracking
    _child_aliases: dict
class option_25(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ordered_accumulation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_15(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partitioning_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dpm_domain(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_15
    partitioning_method: partitioning_method
class hybrid(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ordered_accumulation: ordered_accumulation
    dpm_domain: dpm_domain
class parallel_verbosity_level(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class crossover_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expert_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    parallel_verbosity_level: parallel_verbosity_level
    crossover_tolerance: crossover_tolerance
class parallel_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_25
    hybrid: hybrid
    expert: expert_3
class body_force(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class source_terms(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class erosion_accretion(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class output(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scalar_update(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class collision(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dpm_time_step_size_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class impingement_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class film_regime(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class splashing_distribution(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_interpolation_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_scalars(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_num_udf_species(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_functions_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    body_force: body_force
    source_terms: source_terms
    erosion_accretion: erosion_accretion
    output: output
    scalar_update: scalar_update
    collision: collision
    dpm_time_step_size: dpm_time_step_size_1
    impingement_model: impingement_model
    film_regime: film_regime
    splashing_distribution: splashing_distribution
    flow_interpolation: flow_interpolation_1
    number_of_scalars: number_of_scalars
    max_num_udf_species: max_num_udf_species
    _child_aliases: dict
class particle_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class evaporating_species(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class continuous_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_16(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ddpm_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_displacement_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_16
    ddpm_phase: ddpm_phase
class interaction_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    evaporating_species: evaporating_species
    continuous_phase: continuous_phase
    volume_displacement: volume_displacement_1
class option_26(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cone_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flux_distribution(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inject_as_film(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class file_name_2_1(Filename, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class injection_type(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_26
    cone_type: cone_type
    mass_flux_distribution: mass_flux_distribution
    inject_as_film: inject_as_film
    file_name: file_name_2_1
    _child_aliases: dict
class reference_frame_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class start_time(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class stop_time(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class times(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    start_time: start_time
    stop_time: stop_time
class unsteady_ca_start(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_ca_stop(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class crank_angles(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    unsteady_ca_start: unsteady_ca_start
    unsteady_ca_stop: unsteady_ca_stop
class start_at_flow_time_in_unsteady_inj_file(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interval_to_repeat_in_unsteady_inj_file(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_inj_file(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    start_at_flow_time_in_unsteady_inj_file: start_at_flow_time_in_unsteady_inj_file
    interval_to_repeat_in_unsteady_inj_file: interval_to_repeat_in_unsteady_inj_file
class injection_surfaces(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class physics_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_6(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class from_location(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    physics: physics_2
    geometry: geometry_3
    surfaces: surfaces_6
class randomized_positions_enabled(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_streams(Integer, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class azimuthal_start_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class azimuthal_stop_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_17(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class radius_3(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class only_in_plane(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class spatial_staggering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_17
    radius: radius_3
    only_in_plane: only_in_plane
class location_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    injection_surfaces: injection_surfaces
    from_location: from_location
    randomized_positions_enabled: randomized_positions_enabled
    number_of_streams: number_of_streams
    x: x
    x_2: x_2
    y: y
    y_2: y_2
    z: z
    z_2: z_2
    azimuthal_start_angle: azimuthal_start_angle
    azimuthal_stop_angle: azimuthal_stop_angle
    spatial_staggering: spatial_staggering
    _child_aliases: dict
class half_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dispersion_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inner_radius(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class outer_radius(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_axis(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cone_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    half_angle: half_angle
    dispersion_angle: dispersion_angle
    inner_radius: inner_radius
    outer_radius: outer_radius
    x_axis: x_axis
    y_axis: y_axis
    z_axis: z_axis
class direction_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_axis: x_axis
    y_axis: y_axis
    z_axis: z_axis
class x_center(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_center(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_center(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_virtual_origin(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_virtual_origin(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_virtual_origin(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_fan_normal_vector(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_fan_normal_vector(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_fan_normal_vector(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vapor_pressure(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inner_diameter(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class outer_diameter(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class spray_half_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class orifice_length(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class radius_of_curvature(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constant_a(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class upstream_pressure(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class relative_velocity(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mixture_quality(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class saturation_temperature(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class orifice_width(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sheet_constant(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ligament_constant(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dsipersion_constant(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_half_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flaf_fan_sheet_constant(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class atomizer_dispersion_angle(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class atomizer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction: direction_2
    x_center: x_center
    y_center: y_center
    z_center: z_center
    x_virtual_origin: x_virtual_origin
    y_virtual_origin: y_virtual_origin
    z_virtual_origin: z_virtual_origin
    x_fan_normal_vector: x_fan_normal_vector
    y_fan_normal_vector: y_fan_normal_vector
    z_fan_normal_vector: z_fan_normal_vector
    vapor_pressure: vapor_pressure
    inner_diameter: inner_diameter
    outer_diameter: outer_diameter
    spray_half_angle: spray_half_angle
    orifice_length: orifice_length
    radius_of_curvature: radius_of_curvature
    constant_a: constant_a
    upstream_pressure: upstream_pressure
    relative_velocity: relative_velocity
    mixture_quality: mixture_quality
    saturation_temperature: saturation_temperature
    orifice_width: orifice_width
    sheet_constant: sheet_constant
    ligament_constant: ligament_constant
    dsipersion_constant: dsipersion_constant
    maximum_half_angle: maximum_half_angle
    flaf_fan_sheet_constant: flaf_fan_sheet_constant
    atomizer_dispersion_angle: atomizer_dispersion_angle
class scale_by_area(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_rate(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_rate_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class total_flow_rate(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flow_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    scale_by_area: scale_by_area
    flow_rate: flow_rate
    flow_rate_2: flow_rate_2
    total_flow_rate: total_flow_rate
class x_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class r(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_1
    y: y_1
    z: z_1
class x_3(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_3(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_3(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class u(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_3
    y: y_3
    z: z_3
class matrix(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    r: r
    u: u
class use_face_normal_direction(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_velocity(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_velocity_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_velocity(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_velocity_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_velocity(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_velocity_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class magnitude(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_fraction(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_face_normal_direction: use_face_normal_direction
    x_velocity: x_velocity
    x_velocity_2: x_velocity_2
    y_velocity: y_velocity
    y_velocity_2: y_velocity_2
    z_velocity: z_velocity
    z_velocity_2: z_velocity_2
    magnitude: magnitude
    swirl_fraction: swirl_fraction
class x_4(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_2_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_4(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_2_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_4(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_2_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class magnitude_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class angular_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_4
    x_2: x_2_1
    y: y_4
    y_2: y_2_1
    z: z_4
    z_2: z_2_1
    magnitude: magnitude_1
class option_27(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diameter(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_diam(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_diam(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mean_diam(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class spread(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_diameters(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rosin_rammler(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    min_diam: min_diam
    max_diam: max_diam
    mean_diam: mean_diam
    spread: spread
    number_of_diameters: number_of_diameters
class table_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class column_with_diameters(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class column_with_number_fractions(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class accumulated_number_fraction(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class column_with_mass_fractions(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class accumulated_mass_fraction(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interpolate_between_classes(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tabulated_size(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    table_name: table_name
    column_with_diameters: column_with_diameters
    column_with_number_fractions: column_with_number_fractions
    accumulated_number_fraction: accumulated_number_fraction
    column_with_mass_fractions: column_with_mass_fractions
    accumulated_mass_fraction: accumulated_mass_fraction
    interpolate_between_classes: interpolate_between_classes
class particle_size(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_27
    diameter: diameter
    diameter_2: diameter_2
    rosin_rammler: rosin_rammler
    tabulated_size: tabulated_size
class temperature_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class initial_values(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_1
    times: times
    crank_angles: crank_angles
    unsteady_inj_file: unsteady_inj_file
    location: location_1
    cone_settings: cone_settings
    atomizer: atomizer
    mass_flow_rate: mass_flow_rate
    matrix: matrix
    velocity: velocity
    angular_velocity: angular_velocity
    particle_size: particle_size
    temperature: temperature_1
    temperature_2: temperature_2
class enable_10(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_delay(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class particle_reinjector(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_10
    time_delay: time_delay
class option_28(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class shape_factor(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cunningham_factor(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class particle_drag(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_28
    shape_factor: shape_factor
    cunningham_factor: cunningham_factor
class enabled_18(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_29(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class random_eddy_lifetime(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_tries(Integer, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_scale_constant_1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class length_scale_constant(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_dispersion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_18
    option: option_29
    random_eddy_lifetime: random_eddy_lifetime
    number_of_tries: number_of_tries
    time_scale_constant: time_scale_constant_1
    length_scale_constant: length_scale_constant
class option_30(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class const_htc(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class const_nu(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class heat_exchange(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_30
    const_htc: const_htc
    const_nu: const_nu
class enabled_19(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_31(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y0(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_child_droplets(Integer, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class b1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class b0(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cl(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ctau(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class crt(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class critical_weber_number(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class core_b1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class xi(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class target_number_in_parcel(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class c0(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class column_drag_coeff(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ligament_factor(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class jet_diameter(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class k1(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class k2(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tb(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class droplet_breakup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_19
    option: option_31
    y0: y0
    number_of_child_droplets: number_of_child_droplets
    b1: b1
    b0: b0
    cl: cl
    ctau: ctau
    crt: crt
    critical_weber_number: critical_weber_number
    core_b1: core_b1
    xi: xi
    target_number_in_parcel: target_number_in_parcel
    c0: c0
    column_drag_coeff: column_drag_coeff
    ligament_factor: ligament_factor
    jet_diameter: jet_diameter
    k1: k1
    k2: k2
    tb: tb
class enabled_20(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class drag_law(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lift_law(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class particle_rotation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_20
    drag_law: drag_law
    lift_law: lift_law
class rough_wall_treatment_enabled(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_21(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class law_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class switch(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class custom_laws(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_21
    law_1: law_1
    law_2: law_2
    law_3: law_3
    law_4: law_4
    law_5: law_5
    law_6: law_6
    law_7: law_7
    law_8: law_8
    law_9: law_9
    law_10: law_10
    switch: switch
    def reset_laws(self):
        """
        Reset all particles laws to default.
        """
class physical_models_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    particle_drag: particle_drag
    turbulent_dispersion: turbulent_dispersion
    heat_exchange: heat_exchange
    droplet_breakup: droplet_breakup
    particle_rotation: particle_rotation
    rough_wall_treatment_enabled: rough_wall_treatment_enabled
    custom_laws: custom_laws
    _child_aliases: dict
class option_32(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class const_number_in_parcel(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class const_parcel_mass(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class const_parcel_diameter(Real, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parcel_method(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_32
    const_number_in_parcel: const_number_in_parcel
    const_parcel_mass: const_parcel_mass
    const_parcel_diameter: const_parcel_diameter
class injections_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    particle_type: particle_type
    material: material_2
    interaction: interaction_1
    injection_type: injection_type
    initial_values: initial_values
    particle_reinjector: particle_reinjector
    physical_models: physical_models_1
    parcel_method: parcel_method
    _child_aliases: dict
class injections(NamedObject[injections_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: injections_child
class discrete_phase(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general_settings: general_settings
    physical_models: physical_models
    tracking: tracking
    numerics: numerics
    parallel: parallel_1
    user_defined_functions: user_defined_functions_1
    injections: injections
    _child_aliases: dict
class enabled_22(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mode(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class name_5(String):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_blades(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class rotor_speed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tip_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class root_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class basic_info(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_blades: number_of_blades
    rotor_speed: rotor_speed
    tip_radius: tip_radius
    root_radius: root_radius
class disk_origin_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_origin_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_origin_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_origin(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    disk_origin_x: disk_origin_x
    disk_origin_y: disk_origin_y
    disk_origin_z: disk_origin_z
class terminology(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class disk_pitch_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_bank_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_normal_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_normal_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_normal_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class disk_orientation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    terminology: terminology
    disk_pitch_angle: disk_pitch_angle
    disk_bank_angle: disk_bank_angle
    disk_normal_x: disk_normal_x
    disk_normal_y: disk_normal_y
    disk_normal_z: disk_normal_z
class embedded_face_zone(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class floating_surface_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class embedded_face_id(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class floating_surface_index(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class disk_id(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    embedded_face_zone: embedded_face_zone
    floating_surface_name: floating_surface_name
    embedded_face_id: embedded_face_id
    floating_surface_index: floating_surface_index
class blade_pitch_collective(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_pitch_cyclic_sin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_pitch_cyclic_cos(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_pitch_angles(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    blade_pitch_collective: blade_pitch_collective
    blade_pitch_cyclic_sin: blade_pitch_cyclic_sin
    blade_pitch_cyclic_cos: blade_pitch_cyclic_cos
class blade_flapping_cone(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_flapping_cyclic_sin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_flapping_cyclic_cos(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blade_flap_angles(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    blade_flapping_cone: blade_flapping_cone
    blade_flapping_cyclic_sin: blade_flapping_cyclic_sin
    blade_flapping_cyclic_cos: blade_flapping_cyclic_cos
class model_tip_loss(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class tip_loss_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tip_loss_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class prandtl_tuning_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tip_loss(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model_tip_loss: model_tip_loss
    tip_loss_function: tip_loss_function
    tip_loss_limit: tip_loss_limit
    prandtl_tuning_coefficient: prandtl_tuning_coefficient
class general_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    basic_info: basic_info
    disk_origin: disk_origin
    disk_orientation: disk_orientation
    disk_id: disk_id
    blade_pitch_angles: blade_pitch_angles
    blade_flap_angles: blade_flap_angles
    tip_loss: tip_loss
class name_7(String):
    _version: str
    fluent_name: str
    _python_name: str
class radius_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class chord(Real):
    _version: str
    fluent_name: str
    _python_name: str
class twist(Real):
    _version: str
    fluent_name: str
    _python_name: str
class airfoil_data_file(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_7
    radius_ratio: radius_ratio
    chord: chord
    twist: twist
    airfoil_data_file: airfoil_data_file
class geometry_4(NamedObject[geometry_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the object names.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def add(self, name: str):
        """
        Add object.
        
        Parameters
        ----------
            name : str
                Object name to add.
        """
    child_object_type: geometry_4_child
class trim_option(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class update_frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class damping_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class thrust_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class roll_moment_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pitch_moment_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class trimming(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    trim_option: trim_option
    update_frequency: update_frequency
    damping_factor: damping_factor
    thrust_coef: thrust_coef
    roll_moment_coef: roll_moment_coef
    pitch_moment_coef: pitch_moment_coef
class rotor_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_5
    general: general_1
    geometry: geometry_4
    trimming: trimming
class rotor(NamedObject[rotor_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: rotor_child
class virtual_blade_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_22
    mode: mode
    rotor: rotor
    def apply(self):
        """
        Read and apply VBM setting.
        """
    _child_aliases: dict
class enable_11(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ap_face_zone_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class beams_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    ap_face_zone: ap_face_zone_1
    beam_length: beam_length
    ray_points_count: ray_points_count
    beam_vector: beam_vector
class beams(NamedObject[beams_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, ap_face_zone: str, beam_length: float | str, ray_points_count: int, beam_vector: list[float | str]):
        """
        Copy optical beam grid.
        
        Parameters
        ----------
            name : str
                A unique name for each optical beam.
            ap_face_zone : str
                The wall face zones to specify the optical aperture surface.
            beam_length : real
                The length of optical beam propagation.
            ray_points_count : int
                The number of grid point in each ray of the optical beam.
            beam_vector : List
                The components of the beam propagation vector.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def copy(self, orig_beam_name: str, beam_name: str, ap_face_zone: str, beam_length: float | str, ray_npoints: int, x_beam_vector: float | str, y_beam_vector: float | str, z_beam_vector: float | str):
        """
        Copy optical beam grid.
        
        Parameters
        ----------
            orig_beam_name : str
                The name for the optical beam to be copied.
            beam_name : str
                A unique name for each optical beam.
            ap_face_zone : str
                The wall face zones to specify the optical aperture surface.
            beam_length : real
                The length of optical beam propagation.
            ray_npoints : int
                The number of grid point in each ray of the optical beam.
            x_beam_vector : real
                The x-component of the beam propagation vector.
            y_beam_vector : real
                The y-component of the beam propagation vector.
            z_beam_vector : real
                The z-component of the beam propagation vector.
        """
    child_object_type: beams_child
class reset_statistics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class statistics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    reset_statistics: reset_statistics
    def statistics_controls(self, method: int, samp_time_period: float | str, samp_time_steps: int, avg_time_period: float | str, avg_time_steps: int):
        """
        Specify statistics parameters of sampling and averaging of flow and optical quantities.
        
        Parameters
        ----------
            method : int
                'method' child.
            samp_time_period : real
                'samp_time_period' child.
            samp_time_steps : int
                'samp_time_steps' child.
            avg_time_period : real
                'avg_time_period' child.
            avg_time_steps : int
                'avg_time_steps' child.
        """
class sampling_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class index_of_refraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class report(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class optics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_11
    beams: beams
    statistics: statistics
    sampling_iterations: sampling_iterations
    index_of_refraction: index_of_refraction
    report: report
    verbosity: verbosity_3
class model_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_effects_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thermal_effects: thermal_effects_1
class numerical_damping_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_strain(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_damping_rayleigh(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class amg_stabilization(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    numerical_damping_factor: numerical_damping_factor
    enhanced_strain: enhanced_strain
    unsteady_damping_rayleigh: unsteady_damping_rayleigh
    amg_stabilization: amg_stabilization
    max_iter: max_iter
class include_pop_in_fsi_force(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class steady_2way_fsi(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class include_viscous_fsi_force(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_fsi_force(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class starting_t_re_initialization(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expert_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    include_pop_in_fsi_force: include_pop_in_fsi_force
    steady_2way_fsi: steady_2way_fsi
    include_viscous_fsi_force: include_viscous_fsi_force
    explicit_fsi_force: explicit_fsi_force
    starting_t_re_initialization: starting_t_re_initialization
class structure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_6
    options: options_4
    controls: controls
    expert: expert_4
class enabled_23(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ablation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_23
class enabled_24(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class time_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sampling_begin_iteration(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class real_to_simulated_particle_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dsmc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_24
    time_step: time_step
    sampling_begin_iteration: sampling_begin_iteration
    real_to_simulated_particle_ratio: real_to_simulated_particle_ratio
class enabled_25(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class joule_heating(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class li_battery_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class echemistry_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class echem_heating_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class positive_electrode_zone(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_zone(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class negative_electrode_zone(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zone_assignment(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    positive_electrode_zone: positive_electrode_zone
    electrolyte_zone: electrolyte_zone
    negative_electrode_zone: negative_electrode_zone
class cathode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class method_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_15(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ocv(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_5
    value: value_8
    user_defined: user_defined_15
class anode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ocv(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_5
    value: value_8
    user_defined: user_defined_15
class linearized_bv_rate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class butler_volmer_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_i0: cathode_i0
    cathode_alpha1: cathode_alpha1
    cathode_alpha2: cathode_alpha2
    cathode_alpha3: cathode_alpha3
    cathode_alpha_a: cathode_alpha_a
    cathode_alpha_c: cathode_alpha_c
    cathode_ocv: cathode_ocv
    anode_i0: anode_i0
    anode_alpha1: anode_alpha1
    anode_alpha2: anode_alpha2
    anode_alpha3: anode_alpha3
    anode_alpha_a: anode_alpha_a
    anode_alpha_c: anode_alpha_c
    anode_ocv: anode_ocv
    linearized_bv_rate: linearized_bv_rate
class cathode_cmax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cmax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_c_init(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_c_init(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_c_init(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tplus(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_5
    value: value_8
    user_defined: user_defined_15
class activity_term(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_5
    value: value_8
    user_defined: user_defined_15
class material_property(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_cmax: cathode_cmax
    anode_cmax: anode_cmax
    cathode_c_init: cathode_c_init
    anode_c_init: anode_c_init
    electrolyte_c_init: electrolyte_c_init
    tplus: tplus
    activity_term: activity_term
class aging_model_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class li_plating_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_film_growth_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ec_concentration(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ec_diffusivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ionic_conductivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rate_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathodic_transfer_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_potential(Real):
    _version: str
    fluent_name: str
    _python_name: str
class molecular_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sei_growth(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ec_concentration: ec_concentration
    ec_diffusivity: ec_diffusivity
    ionic_conductivity: ionic_conductivity
    rate_constant: rate_constant
    cathodic_transfer_coefficient: cathodic_transfer_coefficient
    equilibrium_potential: equilibrium_potential
    molecular_weight: molecular_weight
    density: density
    _child_aliases: dict
class current_exchange_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class equilibrium_potential_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class molecular_weight_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spliting_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class li_plating(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    current_exchange_density: current_exchange_density
    cathodic_transfer_coefficient: cathodic_transfer_coefficient
    equilibrium_potential: equilibrium_potential_1
    molecular_weight: molecular_weight_1
    density: density_1
    spliting_coefficient: spliting_coefficient
    _child_aliases: dict
class rate_constant_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ionic_conductivity_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class molecular_weight_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_film_growth(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    rate_constant: rate_constant_1
    ionic_conductivity: ionic_conductivity_1
    molecular_weight: molecular_weight_2
    density: density_2
class aging_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    aging_model_enabled: aging_model_enabled
    li_plating_enabled: li_plating_enabled
    cathode_film_growth_enabled: cathode_film_growth_enabled
    sei_growth: sei_growth
    li_plating: li_plating
    cathode_film_growth: cathode_film_growth
class swelling_model_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class customize_strain_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class swell_coef_anode(Real):
    _version: str
    fluent_name: str
    _python_name: str
class swell_coef_cathode(Real):
    _version: str
    fluent_name: str
    _python_name: str
class c_ref_anode(Real):
    _version: str
    fluent_name: str
    _python_name: str
class c_ref_cathode(Real):
    _version: str
    fluent_name: str
    _python_name: str
class strain_udf_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class swelling_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    swelling_model_enabled: swelling_model_enabled
    customize_strain_enabled: customize_strain_enabled
    swell_coef_anode: swell_coef_anode
    swell_coef_cathode: swell_coef_cathode
    c_ref_anode: c_ref_anode
    c_ref_cathode: c_ref_cathode
    strain_udf_name: strain_udf_name
class lithium_battery(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    echem_heating_enabled: echem_heating_enabled
    zone_assignment: zone_assignment
    butler_volmer_rate: butler_volmer_rate
    material_property: material_property
    aging_model: aging_model
    swelling_model: swelling_model
class phases_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class device_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mea_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class source_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class butlervolmer_rate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multidiff_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class halfcell_voltage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class osmotic_drag(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class capillary_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction_heat(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class phase_change(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class water_content(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bc_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tot_voltage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tot_current(Real):
    _version: str
    fluent_name: str
    _python_name: str
class options_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    phases: phases_1
    device_type: device_type
    mea_model: mea_model
    source_enabled: source_enabled
    butlervolmer_rate: butlervolmer_rate
    multidiff_enabled: multidiff_enabled
    halfcell_voltage: halfcell_voltage
    osmotic_drag: osmotic_drag
    capillary_pressure: capillary_pressure
    reaction_heat: reaction_heat
    phase_change: phase_change
    water_content: water_content
    bc_type: bc_type
    tot_voltage: tot_voltage
    tot_current: tot_current
class anode_jref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_jea(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_tref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ex_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ex_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_jref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_jea(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_tref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ex_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ex_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_stde(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_stde(Real):
    _version: str
    fluent_name: str
    _python_name: str
class std_tem(Real):
    _version: str
    fluent_name: str
    _python_name: str
class std_pre(Real):
    _version: str
    fluent_name: str
    _python_name: str
class open_voltage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_entro(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_entro(Real):
    _version: str
    fluent_name: str
    _python_name: str
class evaporation_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class condensation_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class osmoticdrag_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_jref: anode_jref
    anode_jea: anode_jea
    anode_tref: anode_tref
    anode_cref: anode_cref
    anode_exp: anode_exp
    anode_ex_a: anode_ex_a
    anode_ex_c: anode_ex_c
    cathode_jref: cathode_jref
    cathode_jea: cathode_jea
    cathode_tref: cathode_tref
    cathode_cref: cathode_cref
    cathode_exp: cathode_exp
    cathode_ex_a: cathode_ex_a
    cathode_ex_c: cathode_ex_c
    anode_stde: anode_stde
    cathode_stde: cathode_stde
    std_tem: std_tem
    std_pre: std_pre
    open_voltage: open_voltage
    anode_entro: anode_entro
    cathode_entro: cathode_entro
    evaporation_rate: evaporation_rate
    condensation_rate: condensation_rate
    osmoticdrag_coeff: osmoticdrag_coeff
class anode_cc_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cc_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cc_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cc_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_cc_zone_list: anode_cc_zone_list
    anode_cc_update: anode_cc_update
    anode_cc_material: anode_cc_material
class anode_fc_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_fc_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_fc_zone_list: anode_fc_zone_list
class anode_pl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_kr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_cp_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_cp_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_pl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_pl_zone_list: anode_pl_zone_list
    anode_pl_update: anode_pl_update
    anode_pl_material: anode_pl_material
    anode_pl_porosity: anode_pl_porosity
    anode_pl_kr: anode_pl_kr
    anode_pl_cp_function: anode_pl_cp_function
    anode_pl_cp_udf: anode_pl_cp_udf
    anode_pl_angle: anode_pl_angle
    anode_pl_a: anode_pl_a
    anode_pl_b: anode_pl_b
    anode_pl_c: anode_pl_c
class anode_cl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_kr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_svratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_conductivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_cp_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_cp_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_cl_zone_list: anode_cl_zone_list
    anode_cl_update: anode_cl_update
    anode_cl_material: anode_cl_material
    anode_cl_porosity: anode_cl_porosity
    anode_cl_kr: anode_cl_kr
    anode_cl_svratio: anode_cl_svratio
    anode_cl_thickness: anode_cl_thickness
    anode_cl_conductivity: anode_cl_conductivity
    anode_cl_cp_function: anode_cl_cp_function
    anode_cl_cp_udf: anode_cl_cp_udf
    anode_cl_angle: anode_cl_angle
    anode_cl_a: anode_cl_a
    anode_cl_b: anode_cl_b
    anode_cl_c: anode_cl_c
class anode(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_cc_zone: anode_cc_zone
    anode_fc_zone: anode_fc_zone
    anode_pl_zone: anode_pl_zone
    anode_cl_zone: anode_cl_zone
class mem_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mem_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mem_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mem_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_kr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mem_zone_list: mem_zone_list
    mem_update: mem_update
    mem_material: mem_material
    mem_porosity: mem_porosity
    mem_kr: mem_kr
class permeation_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class permeation_n(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class permeation_name(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class permeation_rate(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class permeation_ea(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class species_permeation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    permeation_enabled: permeation_enabled
    permeation_n: permeation_n
    permeation_name: permeation_name
    permeation_rate: permeation_rate
    permeation_ea: permeation_ea
class mem_anode_interface(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mem_cathode_interface(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mem_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_cond(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mem_zone: mem_zone
    species_permeation: species_permeation
    mem_anode_interface: mem_anode_interface
    mem_cathode_interface: mem_cathode_interface
    mem_thickness: mem_thickness
    mem_cond: mem_cond
class cathode_cc_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cc_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cc_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cc_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_cc_zone_list: cathode_cc_zone_list
    cathode_cc_update: cathode_cc_update
    cathode_cc_material: cathode_cc_material
class cathode_fc_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_fc_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_fc_zone_list: cathode_fc_zone_list
class cathode_pl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_kr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_cp_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_cp_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_pl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_pl_zone_list: cathode_pl_zone_list
    cathode_pl_update: cathode_pl_update
    cathode_pl_material: cathode_pl_material
    cathode_pl_porosity: cathode_pl_porosity
    cathode_pl_kr: cathode_pl_kr
    cathode_pl_cp_function: cathode_pl_cp_function
    cathode_pl_cp_udf: cathode_pl_cp_udf
    cathode_pl_angle: cathode_pl_angle
    cathode_pl_a: cathode_pl_a
    cathode_pl_b: cathode_pl_b
    cathode_pl_c: cathode_pl_c
class cathode_cl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_kr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_svratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_conductivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_cp_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_cp_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_cl_zone_list: cathode_cl_zone_list
    cathode_cl_update: cathode_cl_update
    cathode_cl_material: cathode_cl_material
    cathode_cl_porosity: cathode_cl_porosity
    cathode_cl_kr: cathode_cl_kr
    cathode_cl_svratio: cathode_cl_svratio
    cathode_cl_thickness: cathode_cl_thickness
    cathode_cl_conductivity: cathode_cl_conductivity
    cathode_cl_cp_function: cathode_cl_cp_function
    cathode_cl_cp_udf: cathode_cl_cp_udf
    cathode_cl_angle: cathode_cl_angle
    cathode_cl_a: cathode_cl_a
    cathode_cl_b: cathode_cl_b
    cathode_cl_c: cathode_cl_c
class cathode(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_cc_zone: cathode_cc_zone
    cathode_fc_zone: cathode_fc_zone
    cathode_pl_zone: cathode_pl_zone
    cathode_cl_zone: cathode_cl_zone
class anode_tab(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_tab(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class electrical_tab(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_tab: anode_tab
    cathode_tab: cathode_tab
class echem_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class relative_permeability(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class customization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    echem_rate: echem_rate
    relative_permeability: relative_permeability
class zone_name_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_10(Real):
    _version: str
    fluent_name: str
    _python_name: str
class contact_resis_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class contact_resis(ListObject[contact_resis_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Pick a zone you want to delete.
        """
    child_object_type: contact_resis_child
class advanced(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    contact_resis: contact_resis
class electrolysis(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    options: options_5
    parameters: parameters_3
    anode: anode
    electrolyte: electrolyte
    cathode: cathode
    electrical_tab: electrical_tab
    customization: customization
    advanced: advanced
class echemistry(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_25
    joule_heating: joule_heating
    li_battery_enabled: li_battery_enabled
    echemistry_enabled: echemistry_enabled
    lithium_battery: lithium_battery
    electrolysis: electrolysis
    _child_aliases: dict
class enabled_26(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solution_method_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class echem_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class active_zone(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class passive_zone(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class passive_zone_tab(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class virtual_connection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class virtual_connection_file(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class positive_tab(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class negative_tab(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zone_assignment_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    active_zone: active_zone
    passive_zone: passive_zone
    passive_zone_tab: passive_zone_tab
    virtual_connection: virtual_connection
    virtual_connection_file: virtual_connection_file
    positive_tab: positive_tab
    negative_tab: negative_tab
    def print_battery_connection(self):
        """
        Print battery connection information.
        """
class initial_dod(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_capacity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class data_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class poly_u_function(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_y_function(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_t_dependence(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class interp_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class column_number(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class row_number(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class column_value(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class row_value(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class table_value(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class z_label(String):
    _version: str
    fluent_name: str
    _python_name: str
class table_label(String):
    _version: str
    fluent_name: str
    _python_name: str
class u_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class y_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class internal_resistance_table_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
class internal_resistance_table(ListObject[internal_resistance_table_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def write_table(self, file_name: str):
        """
        Writing 3D table command.
        """
    def read_table(self, file_name: str):
        """
        3D Reading table command.
        """
    def print_table(self):
        """
        3D table-printing command.
        """
    child_object_type: internal_resistance_table_child
class limit_current_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class provide_utable_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class limit_current_table_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
class limit_current_table(ListObject[limit_current_table_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def write_table(self, file_name: str):
        """
        Writing 3D table command.
        """
    def read_table(self, file_name: str):
        """
        3D Reading table command.
        """
    def print_table(self):
        """
        3D table-printing command.
        """
    child_object_type: limit_current_table_child
class monitor_names(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ntgk_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    initial_dod: initial_dod
    ref_capacity: ref_capacity
    data_type: data_type
    poly_u_function: poly_u_function
    poly_y_function: poly_y_function
    poly_t_dependence: poly_t_dependence
    u_table: u_table
    y_table: y_table
    internal_resistance_table: internal_resistance_table
    limit_current_enabled: limit_current_enabled
    provide_utable_enabled: provide_utable_enabled
    limit_current_table: limit_current_table
    monitor_names: monitor_names
    def raw_data(self, import_files_enabled: bool, number_of_files: int, files: list[str], capacify_fade_enabled: bool):
        """
        Specify U and Y parameters using raw data.
        
        Parameters
        ----------
            import_files_enabled : bool
                Import raw data in the NTGK model.
            number_of_files : int
                Total number of discharging files.
            files : List
                Discharging file names in the NTGK model.
            capacify_fade_enabled : bool
                Enable capacity fade model in the NTGK model.
        """
class initial_soc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_capacity_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class two_set_data(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class data_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class chen_rs(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_r1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_c1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_r2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_c2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_voc(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_rs_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_r1_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_c1_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_r2_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_c2_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class chen_voc_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_rs(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_r1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_c1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_r2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_c2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_voc(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_rs_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_r1_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_c1_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_r2_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_c2_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class poly_voc_c(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class table_rs(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_voc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_rs_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r1_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c1_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r2_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c2_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_r3_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_c3_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_voc_c(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class ecm_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    initial_soc: initial_soc
    ref_capacity: ref_capacity_1
    two_set_data: two_set_data
    data_type: data_type_1
    chen_rs: chen_rs
    chen_r1: chen_r1
    chen_c1: chen_c1
    chen_r2: chen_r2
    chen_c2: chen_c2
    chen_voc: chen_voc
    chen_rs_c: chen_rs_c
    chen_r1_c: chen_r1_c
    chen_c1_c: chen_c1_c
    chen_r2_c: chen_r2_c
    chen_c2_c: chen_c2_c
    chen_voc_c: chen_voc_c
    poly_rs: poly_rs
    poly_r1: poly_r1
    poly_c1: poly_c1
    poly_r2: poly_r2
    poly_c2: poly_c2
    poly_voc: poly_voc
    poly_rs_c: poly_rs_c
    poly_r1_c: poly_r1_c
    poly_c1_c: poly_c1_c
    poly_r2_c: poly_r2_c
    poly_c2_c: poly_c2_c
    poly_voc_c: poly_voc_c
    table_rs: table_rs
    table_r1: table_r1
    table_c1: table_c1
    table_r2: table_r2
    table_c2: table_c2
    table_r3: table_r3
    table_c3: table_c3
    table_voc: table_voc
    table_rs_c: table_rs_c
    table_r1_c: table_r1_c
    table_c1_c: table_c1_c
    table_r2_c: table_r2_c
    table_c2_c: table_c2_c
    table_r3_c: table_r3_c
    table_c3_c: table_c3_c
    table_voc_c: table_voc_c
    def read_all_data_table(self, enabled: bool, file_name: str):
        """
        Command to read all ECM data tables.
        
        Parameters
        ----------
            enabled : bool
                Read all ECM data tables.
            file_name_1 : str
                File name in reading ECM tables.
        """
    def write_all_data_table(self, enabled: bool, file_name: str):
        """
        Command to write all ECM data tables.
        
        Parameters
        ----------
            enabled : bool
                Write all ECM data tables.
            file_name : str
                File name in writing ECM tables.
        """
class initial_soc_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_capacity_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_n_grid(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class anode_size_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_p_diameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_n_sphere(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class anode_size_ratio_r(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_cs_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_stio_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_stio_100(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ce_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_filler_f(Real):
    _version: str
    fluent_name: str
    _python_name: str
class option_33(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ds(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class anode_ed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_brugg(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_sigma(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class anode_i0_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_er(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha_a_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha_c_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ocv_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class cathode_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_n_grid(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_size_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_p_diameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_n_sphere(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_size_ratio_r(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_cs_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_stio_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_stio_100(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ce_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_filler_f(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ds(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class cathode_ed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_brugg(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_sigma(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class cathode_i0_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_er(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_a_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_c_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ocv_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class electrolyte_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_n_grid(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_ce_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_brugg(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_de(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class electrolyte_t_plus(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class electrolyte_sigma(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class electrolyte_activity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_33
    value: value_8
    piecewise_linear: piecewise_linear
    polynomial: polynomial_1
    user_defined: user_defined_15
    _child_aliases: dict
class analytical_cs(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class analytical_cs_order(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class aging_model_enabled_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class aging_file(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class aging_profile(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p2d_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initial_soc: initial_soc_1
    ref_capacity: ref_capacity_2
    anode_thickness: anode_thickness
    anode_n_grid: anode_n_grid
    anode_size_ratio: anode_size_ratio
    anode_p_diameter: anode_p_diameter
    anode_n_sphere: anode_n_sphere
    anode_size_ratio_r: anode_size_ratio_r
    anode_cs_max: anode_cs_max
    anode_stio_0: anode_stio_0
    anode_stio_100: anode_stio_100
    anode_ce_0: anode_ce_0
    anode_vof: anode_vof
    anode_filler_f: anode_filler_f
    anode_ds: anode_ds
    anode_ed: anode_ed
    anode_brugg: anode_brugg
    anode_sigma: anode_sigma
    anode_i0: anode_i0_1
    anode_er: anode_er
    anode_alpha_a: anode_alpha_a_1
    anode_alpha_c: anode_alpha_c_1
    anode_ocv: anode_ocv_1
    cathode_thickness: cathode_thickness
    cathode_n_grid: cathode_n_grid
    cathode_size_ratio: cathode_size_ratio
    cathode_p_diameter: cathode_p_diameter
    cathode_n_sphere: cathode_n_sphere
    cathode_size_ratio_r: cathode_size_ratio_r
    cathode_cs_max: cathode_cs_max
    cathode_stio_0: cathode_stio_0
    cathode_stio_100: cathode_stio_100
    cathode_ce_0: cathode_ce_0
    cathode_vof: cathode_vof
    cathode_filler_f: cathode_filler_f
    cathode_ds: cathode_ds
    cathode_ed: cathode_ed
    cathode_brugg: cathode_brugg
    cathode_sigma: cathode_sigma
    cathode_i0: cathode_i0_1
    cathode_er: cathode_er
    cathode_alpha_a: cathode_alpha_a_1
    cathode_alpha_c: cathode_alpha_c_1
    cathode_ocv: cathode_ocv_1
    electrolyte_thickness: electrolyte_thickness
    electrolyte_n_grid: electrolyte_n_grid
    electrolyte_ce_0: electrolyte_ce_0
    electrolyte_vof: electrolyte_vof
    electrolyte_brugg: electrolyte_brugg
    electrolyte_de: electrolyte_de
    electrolyte_t_plus: electrolyte_t_plus
    electrolyte_sigma: electrolyte_sigma
    electrolyte_activity: electrolyte_activity
    analytical_cs: analytical_cs
    analytical_cs_order: analytical_cs_order
    aging_model_enabled: aging_model_enabled_1
    aging_file: aging_file
    aging_profile: aging_profile
class memory_num_per_cell(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_soc_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_capacity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class customized_echem_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    memory_num_per_cell: memory_num_per_cell
    initial_soc: initial_soc_2
    reference_capacity: reference_capacity
class same_for_active_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_34(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_11(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_1(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class energy_source_same_active(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_34
    value: value_11
    profile: profile_1
    _child_aliases: dict
class option_35(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_12(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_2(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class energy_source_active_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_35
    value: value_12
    profile: profile_2
    _child_aliases: dict
class energy_source_active(NamedObject[energy_source_active_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: energy_source_active_child
class option_36(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_13(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_3(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class tab_elec_current(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_36
    value: value_13
    profile: profile_3
    _child_aliases: dict
class cht_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    same_for_active_enabled: same_for_active_enabled
    energy_source_same_active: energy_source_same_active
    energy_source_active: energy_source_active
    tab_elec_current: tab_elec_current
class energy_source_active_1_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class energy_source_active_1(NamedObject[energy_source_active_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: energy_source_active_1_child
class option_37(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_14(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_4(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class tab_elec_current_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_37
    value: value_14
    profile: profile_4
    _child_aliases: dict
class fmu_model_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    energy_source_active: energy_source_active_1
    tab_elec_current: tab_elec_current_1
class nominal_capacity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class eload_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class crate_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class current_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class voltage_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class power_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class external_resistance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class profile_file(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class udf_profile_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fast_charging_table_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
class fast_charging_table(ListObject[fast_charging_table_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def write_table(self, file_name: str):
        """
        Writing 3D table command.
        """
    def read_table(self, file_name: str):
        """
        3D Reading table command.
        """
    def print_table(self):
        """
        3D table-printing command.
        """
    child_object_type: fast_charging_table_child
class monitor_names_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class eload_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    nominal_capacity: nominal_capacity
    eload_type: eload_type
    crate_value: crate_value
    current_value: current_value
    voltage_value: voltage_value
    power_value: power_value
    external_resistance: external_resistance
    profile_type: profile_type
    profile_file: profile_file
    udf_profile_name: udf_profile_name
    fast_charging_table: fast_charging_table
    monitor_names: monitor_names_1
class echem_stop_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_voltage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_voltage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_soc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_soc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class echem_stop_criterion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    echem_stop_type: echem_stop_type
    min_voltage: min_voltage
    max_voltage: max_voltage
    min_soc: min_soc
    max_soc: max_soc
class eload_condition(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    eload_settings: eload_settings
    echem_stop_criterion: echem_stop_criterion
class joule_heat_in_passive_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class joule_heat_in_active_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class echem_heat_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_substeps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class current_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class voltage_correction_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class q_correct_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class heat_correct_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class entropic_heat_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class data_type_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class two_tables(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class table_discharge(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class table_charge(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class udf_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class entropic_heat(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    entropic_heat_enabled: entropic_heat_enabled
    data_type: data_type_2
    two_tables: two_tables
    table_discharge: table_discharge
    table_charge: table_charge
    udf_name: udf_name
class option_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    joule_heat_in_passive_zone: joule_heat_in_passive_zone
    joule_heat_in_active_zone: joule_heat_in_active_zone
    echem_heat_enabled: echem_heat_enabled
    number_substeps: number_substeps
    current_urf: current_urf
    voltage_correction_urf: voltage_correction_urf
    q_correct_enabled: q_correct_enabled
    heat_correct_table: heat_correct_table
    entropic_heat: entropic_heat
class enabled_29(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class clustering_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nx(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class ny(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class nz(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cluster_number(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class target_variable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class udf_name_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cell_clustering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_29
    clustering_type: clustering_type
    nx: nx
    ny: ny
    nz: nz
    cluster_number: cluster_number
    target_variable: target_variable
    udf_name: udf_name_1
class solution_option(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option_settings: option_settings
    cell_clustering: cell_clustering
class contact_resistance_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class contact_resistance(ListObject[contact_resistance_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Object name when deleting a thread-real-pair object.
        """
    child_object_type: contact_resistance_child
class enabled_30(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cell_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cyl_axis_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class prism_axis_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class prism_vec2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class pouch_normal_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_conductivity(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class udf_name_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class orthotropic_k(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_30
    cell_type: cell_type
    cyl_axis_vec: cyl_axis_vec
    prism_axis_vec: prism_axis_vec
    prism_vec2: prism_vec2
    pouch_normal_vec: pouch_normal_vec
    thermal_conductivity: thermal_conductivity
    udf_name: udf_name_2
class enabled_31(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class only_abuse(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class data_type_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hw(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m(Real):
    _version: str
    fluent_name: str
    _python_name: str
class n(Real):
    _version: str
    fluent_name: str
    _python_name: str
class alpha0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rate_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class hw_table(Real):
    _version: str
    fluent_name: str
    _python_name: str
class hw_udf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class udf_name_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class one_equation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    data_type: data_type_3
    hw: hw
    a: a
    e: e
    m: m
    n: n
    alpha0: alpha0
    rate_table: rate_table
    hw_table: hw_table
    hw_udf: hw_udf
    udf_name: udf_name_3
class a_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class w_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sei0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class w_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ne0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ne_tsei_ref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ne_tsei0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m1_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m2_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class w_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pe0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class w_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class four_equation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    a_sei: a_sei
    e_sei: e_sei
    m_sei: m_sei
    h_sei: h_sei
    w_sei: w_sei
    sei0: sei0
    a_ne: a_ne
    e_ne: e_ne
    m_ne: m_ne
    h_ne: h_ne
    w_ne: w_ne
    ne0: ne0
    ne_tsei_ref: ne_tsei_ref
    ne_tsei0: ne_tsei0
    a_pe: a_pe
    e_pe: e_pe
    m1_pe: m1_pe
    m2_pe: m2_pe
    h_pe: h_pe
    w_pe: w_pe
    pe0: pe0
    a_e: a_e
    e_e: e_e
    m_e: m_e
    h_e: h_e
    w_e: w_e
    e0: e0
class abuse_rate_matrix_child(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class abuse_rate_matrix(ListObject[abuse_rate_matrix_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: abuse_rate_matrix_child
class n_equation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    abuse_rate_matrix: abuse_rate_matrix
    def read_abuse_rate_file(self, file_name: str):
        """
        Command object to read abuse rate in the N-eqn abuse model.
        
        Parameters
        ----------
            file_name_1 : str
                N-eqn abuse kinetics file name with its full path.
        """
    def write_abuse_rate_file(self, file_name: str):
        """
        Command object to write abuse rate file in the N-eqn abuse model.
        
        Parameters
        ----------
            file_name : str
                Write abuse reaction rate into a file in the N-eqn abuse model.
        """
class enabled_32(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class h(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class trigger_t(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e0_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class internal_short(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_32
    h: h
    a: a_1
    e: e_1
    trigger_t: trigger_t
    e0: e0_1
class thermal_abuse_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_31
    model_type: model_type
    only_abuse: only_abuse
    one_equation: one_equation
    four_equation: four_equation
    n_equation: n_equation
    internal_short: internal_short
class enabled_33(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class capacity_fade_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class capacity_fade_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_33
    capacity_fade_table: capacity_fade_table
class enabled_34(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class calendar_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cycle_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class operation_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pre_exp_fac(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exponent_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class calendar_life_params(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ref_temperature: ref_temperature
    pre_exp_fac: pre_exp_fac
    activation_e: activation_e
    exponent_value: exponent_value
class cycle_life_table(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interp_method: interp_method
    z_value: z_value
    column_number: column_number
    row_number: row_number
    column_value: column_value
    row_value: row_value
    table_value: table_value
    z_label: z_label
    table_label: table_label
    def write_table(self, file_name: str):
        """
        2D table writting command.
        """
    def read_table(self, file_name: str):
        """
        2D table reading command.
        """
    def print_table(self):
        """
        2D table printing command.
        """
class life_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_34
    calendar_time: calendar_time
    cycle_number: cycle_number
    operation_temperature: operation_temperature
    calendar_life_params: calendar_life_params
    cycle_life_table: cycle_life_table
class enabled_35(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class omega(Real):
    _version: str
    fluent_name: str
    _python_name: str
class omega_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class omega_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_elastic_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_elastic_sp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_elastic_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class soc_ref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cell_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axis_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class origin_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class normal_vec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class prism_axis_vec_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class prism_vec2_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class orientation_udf_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class customize_swelling_strain_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class strain_udf_name_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class swelling_model_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_35
    omega: omega
    omega_pe: omega_pe
    omega_ne: omega_ne
    e_elastic_pe: e_elastic_pe
    e_elastic_sp: e_elastic_sp
    e_elastic_ne: e_elastic_ne
    soc_ref: soc_ref
    cell_type: cell_type_1
    axis_vec: axis_vec
    origin_vec: origin_vec
    normal_vec: normal_vec
    prism_axis_vec: prism_axis_vec_1
    prism_vec2: prism_vec2_1
    orientation_udf_name: orientation_udf_name
    customize_swelling_strain_enabled: customize_swelling_strain_enabled
    strain_udf_name: strain_udf_name_1
class enabled_36(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class venting_gas_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class gas_release_faces(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reacting_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rate_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class one_mass(Real):
    _version: str
    fluent_name: str
    _python_name: str
class four_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class four_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class four_ne(Real):
    _version: str
    fluent_name: str
    _python_name: str
class four_e(Real):
    _version: str
    fluent_name: str
    _python_name: str
class n_eqn_mass(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class trigger_t_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rate_file(Filename):
    _version: str
    fluent_name: str
    _python_name: str
class gas_composition(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class venting_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_36
    venting_gas_phase: venting_gas_phase
    gas_release_faces: gas_release_faces
    reacting_model: reacting_model
    rate_method: rate_method
    one_mass: one_mass
    four_sei: four_sei
    four_pe: four_pe
    four_ne: four_ne
    four_e: four_e
    n_eqn_mass: n_eqn_mass
    trigger_t: trigger_t_1
    rate_file: rate_file
    gas_composition: gas_composition
class ntgk_model_parameter(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ecm_model_parameter(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_echem_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p2d_bv_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p2d_postprocessing(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p2d_porosity_p(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p2d_porosity_n(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class udf_hooks(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ntgk_model_parameter: ntgk_model_parameter
    ecm_model_parameter: ecm_model_parameter
    user_defined_echem_model: user_defined_echem_model
    p2d_bv_rate: p2d_bv_rate
    p2d_postprocessing: p2d_postprocessing
    p2d_porosity_p: p2d_porosity_p
    p2d_porosity_n: p2d_porosity_n
class advanced_models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    contact_resistance: contact_resistance
    orthotropic_k: orthotropic_k
    thermal_abuse_model: thermal_abuse_model
    capacity_fade_model: capacity_fade_model
    life_model: life_model
    swelling_model: swelling_model_1
    venting_model: venting_model
    udf_hooks: udf_hooks
class enabled_37(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class life_model_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class report_time_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class total_run_num_cycles(Real):
    _version: str
    fluent_name: str
    _python_name: str
class total_run_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class load_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class external_p(Real):
    _version: str
    fluent_name: str
    _python_name: str
class total_deformation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class external_stiff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ce_ec(Real):
    _version: str
    fluent_name: str
    _python_name: str
class diff_ec(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rho_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m_sei_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class kappa_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class k0_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ac_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class u_sei(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lithium_plating_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rho_li(Real):
    _version: str
    fluent_name: str
    _python_name: str
class m_li(Real):
    _version: str
    fluent_name: str
    _python_name: str
class i0_lpl(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ac_lpl(Real):
    _version: str
    fluent_name: str
    _python_name: str
class u_lpl(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class multiplier(Real):
    _version: str
    fluent_name: str
    _python_name: str
class save_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class restart_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class restart_file_name(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class restart_profile(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class standalone_echem_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_37
    life_model_enabled: life_model_enabled
    report_time_step: report_time_step
    total_run_num_cycles: total_run_num_cycles
    total_run_time: total_run_time
    ref_temp: ref_temp
    load_type: load_type
    external_p: external_p
    total_deformation: total_deformation
    external_stiff: external_stiff
    ce_ec: ce_ec
    diff_ec: diff_ec
    rho_sei: rho_sei
    m_sei: m_sei_1
    kappa_sei: kappa_sei
    k0_sei: k0_sei
    ac_sei: ac_sei
    u_sei: u_sei
    lithium_plating_enabled: lithium_plating_enabled
    rho_li: rho_li
    m_li: m_li
    i0_lpl: i0_lpl
    ac_lpl: ac_lpl
    u_lpl: u_lpl
    beta: beta
    multiplier: multiplier
    save_interval: save_interval
    restart_enabled: restart_enabled
    restart_file_name: restart_file_name
    restart_profile: restart_profile
    def run_echem_standalone(self):
        """
        Execute standalone echem model command.
        """
    _child_aliases: dict
class echem_model_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class file_name_1_15(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class initial_alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ambient_temp_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class external_ht_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enclosure_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class include_max_temp_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class range_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class test_data_sets_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file_name: file_name_1_15
    initial_alpha: initial_alpha
    initial_temp: initial_temp
    ambient_temp: ambient_temp_1
    external_ht_coeff: external_ht_coeff
    enclosure_temp: enclosure_temp
    include_max_temp_enabled: include_max_temp_enabled
    range_temp: range_temp
    _child_aliases: dict
class test_data_sets(ListObject[test_data_sets_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: test_data_sets_child
class rhocp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class area(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vol(Real):
    _version: str
    fluent_name: str
    _python_name: str
class epsilon(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fixm_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mvalue(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fixn_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class nvalue(Real):
    _version: str
    fluent_name: str
    _python_name: str
class file_name_1_14(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class ambient_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_abuse_fitting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    test_data_sets: test_data_sets
    rhocp: rhocp
    area: area
    vol: vol
    epsilon: epsilon
    fixm_enabled: fixm_enabled
    mvalue: mvalue
    fixn_enabled: fixn_enabled
    nvalue: nvalue
    file_name: file_name_1_14
    initial_temp: initial_temp
    ambient_temp: ambient_temp
    external_ht_coeff: external_ht_coeff
    enclosure_temp: enclosure_temp
    def abuse_curve_fitting(self):
        """
        Thermal abuse curve fitting.
        """
    def fine_tune_parameter(self, user_a: float | str, user_e: float | str, user_m: float | str, user_n: float | str):
        """
        Fine tune Arrhenius rate parameters.
        
        Parameters
        ----------
            user_a : real
                Fine-tuning parameter A in abuse model fitting.
            user_e : real
                Fine-tuning parameter E in abuse model fitting.
            user_m : real
                Fine-tuning parameter m in abuse model fitting.
            user_n : real
                Fine-tuning parameter n in abuse model fitting.
        """
    def use_fine_tune_parameter(self, apply: bool):
        """
        Command to use fine-tuned parameters.
        
        Parameters
        ----------
            apply : bool
                Use fine-tuned parameters.
        """
    _child_aliases: dict
class parameter_estimation_tool(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    echem_model: echem_model_1
    thermal_abuse_fitting: thermal_abuse_fitting
    def ntgk_curve_fitting(self, file_name: list[str], capacity: float | str, number_dod_level: int, min_dod: float | str, max_dod: float | str, capacity_fade_enabled: bool):
        """
        NTGK parameter estimation tool.
        
        Parameters
        ----------
            file_name : List
                File names used in the NTGK model fitting.
            capacity : real
                Battery capacity used in the NTGK model fitting.
            number_dod_level : int
                Number of DOD-levels used in the NTGK model fitting.
            min_dod : real
                Minimum DOD used in the NTGK model fitting.
            max_dod : real
                Maximum DOD used in the NTGK model fitting.
            capacity_fade_enabled : bool
                Include Capacity Fade Effect in the NTGK model fitting.
        """
    def ecm_curve_fitting(self, file_name: list[str], capacity: float | str, circuit_model: str, fitting_method: str, rs_fix: list[float | str], capacity_fade_enabled: bool, read_discharge_file_enabled: bool, number_discharge_file: int, discharge_filename: list[str]):
        """
        ECM parameter estimation tool.
        
        Parameters
        ----------
            file_name : List
                File names used in ECM model parameter fitting.
            capacity : real
                Battery capacity used in ECM model parameter fitting.
            circuit_model : str
                Circuit model used in ECM model parameter fitting.
            fitting_method : str
                Fitting method used in ECM model parameter fitting.
            rs_fix : List
                Fix-Rs used in ECM model parameter fitting.
            capacity_fade_enabled : bool
                Include capacity fade effect used in ECM model parameter fitting.
            read_discharge_file_enabled : bool
                Import discharging curves used in ECM model parameter fitting.
            number_discharge_file : int
                Number of total discharging files used in ECM model parameter fitting.
            discharge_filename : List
                File name for discharing curve used in ECM model parameter fitting.
        """
class rom_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_stepping_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dt_0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dt_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class increment_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class n_time_step_per_setting(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_n_per_time_step(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class file_name_1_16(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class stop_range_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transient_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    time_stepping_method: time_stepping_method
    max_time: max_time
    dt_0: dt_0
    dt_max: dt_max
    increment_factor: increment_factor
    n_time_step_per_setting: n_time_step_per_setting
    max_n_per_time_step: max_n_per_time_step
    file_name: file_name_1_16
    stop_range_fraction: stop_range_fraction
class volume_heat_run(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class face_heat_run(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class face_temperature_run(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class joule_heat_run(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class file_saving_frequency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    volume_heat_run: volume_heat_run
    face_heat_run: face_heat_run
    face_temperature_run: face_temperature_run
    joule_heat_run: joule_heat_run
class enabled_38(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class value_15(Real):
    _version: str
    fluent_name: str
    _python_name: str
class joule_heat_parameter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_38
    value: value_15
class rom_data_creator_tool(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    rom_type: rom_type
    transient_setup: transient_setup
    file_saving_frequency: file_saving_frequency
    joule_heat_parameter: joule_heat_parameter
    def add_rom_parameter(self, parameter_type: str, entity_list: list[str], group_value: float | str, individual_or_group: bool, individual_value: bool, value_list: list[float | str], allow_profile: bool, profile_file_name: str):
        """
        Add parameter command.
        """
    def rom_data_creator(self, rom_type: int):
        """
        ROM data creator.
        
        Parameters
        ----------
            rom_type : int
                ROM type in ROM-data creator.
        """
    def create_journal_file(self, rom_type: int):
        """
        Create journal file.
        
        Parameters
        ----------
            rom_type : int
                ROM type in the ROM simulation.
        """
    def list_rom_parameter(self):
        """
        Print all ROM-related paramters.
        """
    def delete_rom_parameter(self, parameter_names: list[str]):
        """
        Delete ROM-related paramters.
        
        Parameters
        ----------
            parameter_names : List
                Deleted parameter lists.
        """
class lti_folder_name(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class user_config(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_order(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_order(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class rel_error(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_0th_order(Real):
    _version: str
    fluent_name: str
    _python_name: str
class slope_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lti_rom_generation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    lti_folder_name: lti_folder_name
    user_config: user_config
    min_order: min_order
    max_order: max_order
    rel_error: rel_error
    tolerance_0th_order: tolerance_0th_order
    slope_method: slope_method
    def run_rom_generation(self):
        """
        Start LTI-ROM generation.
        """
class rom_tool_kit(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    rom_data_creator_tool: rom_data_creator_tool
    lti_rom_generation: lti_rom_generation
class module_case_file(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class cold_plate_file(String):
    _version: str
    fluent_name: str
    _python_name: str
class nci_face_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class translation_rotation_matrix_child(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class translation_rotation_matrix(ListObject[translation_rotation_matrix_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: translation_rotation_matrix_child
class pack_builder(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    module_case_file: module_case_file
    cold_plate_file: cold_plate_file
    nci_face_list: nci_face_list
    translation_rotation_matrix: translation_rotation_matrix
    def read_location_file(self, file_name: str):
        """
        Command object to read location file in the pack builder.
        
        Parameters
        ----------
            file_name_1 : str
                Module Location file name with its full path.
        """
    def write_location_file(self, file_name: str):
        """
        Command object to write location file in the pack builder.
        
        Parameters
        ----------
            file_name : str
                Write location information into a file in the pack builder.
        """
    def construct_battery_pack(self):
        """
        Construct battery pack.
        """
    def nci_pair_creation(self):
        """
        Non-conformal Interface Matching in the pack builder.
        """
class tool_kits(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    standalone_echem_model: standalone_echem_model
    parameter_estimation_tool: parameter_estimation_tool
    rom_tool_kit: rom_tool_kit
    pack_builder: pack_builder
class battery(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_26
    solution_method: solution_method_1
    echem_model: echem_model
    zone_assignment: zone_assignment_1
    ntgk_model_settings: ntgk_model_settings
    ecm_model_settings: ecm_model_settings
    p2d_model_settings: p2d_model_settings
    customized_echem_model_settings: customized_echem_model_settings
    cht_model_settings: cht_model_settings
    fmu_model_settings: fmu_model_settings
    eload_condition: eload_condition
    solution_option: solution_option
    advanced_models: advanced_models
    tool_kits: tool_kits
    def init_battery_model(self):
        """
        Initialize the battery model.
        """
class calculation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class htc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    calculation_method: calculation_method
class unsteady_statistics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def sc_enable_sub_stepping_option_per_coupling_step(self, enable_sub_stepping: bool, num_sub_stepping_coupling_itr: int):
        """
        Enable/disable sub stepping option per coupling step.
        
        Parameters
        ----------
            enable_sub_stepping : bool
                Enable or Disable sub stepping options for each coupling  steps.
            num_sub_stepping_coupling_itr : int
                The number of substeps for each coupling iterations (default = 1).
        """
class udm_index(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class zone_names_6(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class extensive(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class input(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class output_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class output_variable_name(String):
    _version: str
    fluent_name: str
    _python_name: str
class input_variable_name(String):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_coupling_variables_via_udm_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    udm_index: udm_index
    zone_names: zone_names_6
    extensive: extensive
    input: input
    output: output_1
    output_variable_name: output_variable_name
    input_variable_name: input_variable_name
class user_defined_coupling_variables_via_udm(ListObject[user_defined_coupling_variables_via_udm_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: user_defined_coupling_variables_via_udm_child
class use_face_or_element_based_data_transfer(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class activate_flow_boundary_coupling_model(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class specify_zones_to_activate(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class specify_zones_to_deactivate(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_boundary_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    activate_flow_boundary_coupling_model: activate_flow_boundary_coupling_model
    specify_zones_to_activate: specify_zones_to_activate
    specify_zones_to_deactivate: specify_zones_to_deactivate
class system_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    htc: htc
    unsteady_statistics: unsteady_statistics
    user_defined_coupling_variables_via_udm: user_defined_coupling_variables_via_udm
    use_face_or_element_based_data_transfer: use_face_or_element_based_data_transfer
    flow_boundary_coupling: flow_boundary_coupling
    def write_scp_file(self, file_name: str):
        """
        Write fluent input scp file for sc.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def connect_parallel(self, schost: str, scport: int, scname: str):
        """
        System coupling connection status.
        
        Parameters
        ----------
            schost : str
                Sc solver host input.
            scport : int
                Sc solver port input.
            scname : str
                Sc solver name input.
        """
    def init_and_solve(self):
        """
        System-coupling-solve-init-command.
        """
    def solve(self):
        """
        System-coupling-solve-command.
        """
    def get_analysis_type(self):
        """
        Get analysis type.
        """
    def get_all_regions(self):
        """
        Get all supported sc regions.
        """
    def get_topology(self, region_name: str):
        """
        Get topology.
        
        Parameters
        ----------
            region_name : str
                Sc region name.
        """
    def get_input_vars(self, region_name: str):
        """
        Get input variables for a given region.
        
        Parameters
        ----------
            region_name : str
                Provide region name.
        """
    def get_output_vars(self, region_name: str):
        """
        Get output variables for a given region.
        
        Parameters
        ----------
            region_name : str
                Provide region name.
        """
    def is_extensive_var(self, variable_name: str):
        """
        Check if given variable is of extensive type.
        
        Parameters
        ----------
            variable_name : str
                Provide variable name.
        """
    def get_data_location(self, variable_name: str):
        """
        Get data location.
        
        Parameters
        ----------
            variable_name : str
                Sc variable name.
        """
    def get_tensor_type(self, variable_name: str):
        """
        Get tensor type for given selected variable.
        
        Parameters
        ----------
            variable_name : str
                Provide variable name.
        """
    def get_parameters(self):
        """
        Get rigid body motion definition parameters.
        """
    def get_input_parameters(self):
        """
        Get rigid body motion definition input parameters.
        """
    def get_output_parameters(self):
        """
        Get rigid body motion definition output parameters.
        """
    def get_attributes(self):
        """
        Get rigid body motion definition attributes.
        """
    def get_attribute_value(self, attribute_name: str):
        """
        Get attribute value for a given attribute name.
        
        Parameters
        ----------
            attribute_name : str
                Provide attribute name.
        """
class enabled_39(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_submodel_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vol_energy_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surf_energy_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class knudsen_diff_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class electrolysis_mode_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class co_echemistry_disabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    electrolyte_submodel_enabled: electrolyte_submodel_enabled
    vol_energy_enabled: vol_energy_enabled
    surf_energy_enabled: surf_energy_enabled
    knudsen_diff_enabled: knudsen_diff_enabled
    species_enabled: species_enabled
    electrolysis_mode_enabled: electrolysis_mode_enabled
    co_echemistry_disabled: co_echemistry_disabled
class individual_bc_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class converg_voltage_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class system_voltage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class system_current(Real):
    _version: str
    fluent_name: str
    _python_name: str
class leakage_current_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_thickness_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class electrolyte_resistivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class current_urf_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fcycle_amg_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    options: options_6
    individual_bc_enabled: individual_bc_enabled
    converg_voltage_enabled: converg_voltage_enabled
    system_voltage: system_voltage
    system_current: system_current
    leakage_current_density: leakage_current_density
    electrolyte_thickness: electrolyte_thickness_1
    electrolyte_resistivity: electrolyte_resistivity
    current_urf: current_urf_1
    fcycle_amg_enabled: fcycle_amg_enabled
class temp_depend_anode_i0(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class temp_depend_cathode_i0(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_i0_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_i0_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_anode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class b_anode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class a_cathode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class b_cathode_i0(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exchange_current(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    temp_depend_anode_i0: temp_depend_anode_i0
    temp_depend_cathode_i0: temp_depend_cathode_i0
    anode_i0: anode_i0_2
    cathode_i0: cathode_i0_2
    a_anode_i0: a_anode_i0
    b_anode_i0: b_anode_i0
    a_cathode_i0: a_cathode_i0
    b_cathode_i0: b_cathode_i0
class molef_ref_h2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class molef_ref_o2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class molef_ref_h2o(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mole_fraction_ref(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    molef_ref_h2: molef_ref_h2
    molef_ref_o2: molef_ref_o2
    molef_ref_h2o: molef_ref_h2o
class exponent_h2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exponent_o2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exponent_h2o(Real):
    _version: str
    fluent_name: str
    _python_name: str
class concentration_exp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    exponent_h2: exponent_h2
    exponent_o2: exponent_o2
    exponent_h2o: exponent_h2o
class anode_alpha_a_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_alpha_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_a_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_alpha_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bv_symmetry_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_alpha_a: anode_alpha_a_2
    anode_alpha_b: anode_alpha_b
    cathode_alpha_a: cathode_alpha_a_2
    cathode_alpha_b: cathode_alpha_b
class electrochemistry(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    exchange_current: exchange_current
    mole_fraction_ref: mole_fraction_ref
    concentration_exp: concentration_exp
    bv_symmetry_factor: bv_symmetry_factor
class anode_interface(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_interface(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class tortuosity_interface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class tortuosity_interface(ListObject[tortuosity_interface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Pick a zone you want to delete.
        """
    child_object_type: tortuosity_interface_child
class pore_size_interface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class pore_size_interface(ListObject[pore_size_interface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Pick a zone you want to delete.
        """
    child_object_type: pore_size_interface_child
class electrolyte_porous(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_interface: anode_interface
    cathode_interface: cathode_interface
    tortuosity_interface: tortuosity_interface
    pore_size_interface: pore_size_interface
class voltage_tap(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class current_tap(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class conductive_regions_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class conductive_regions(ListObject[conductive_regions_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Pick a zone you want to delete.
        """
    child_object_type: conductive_regions_child
class contact_resistance_regions_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zone_name: zone_name_7
    value: value_10
class contact_resistance_regions(ListObject[contact_resistance_regions_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    def add_zone(self, zone_name: str, value: float | str):
        """
        Add thread-real-pair object.
        
        Parameters
        ----------
            zone_name : str
                Zone name in add-zone operation.
            value : real
                Value in add-zone operation.
        """
    def list_zone(self):
        """
        List thread-real-pair object.
        """
    def delete_zone(self, face_name: str):
        """
        Delete thread-real-pair object.
        
        Parameters
        ----------
            face_name : str
                Pick a zone you want to delete.
        """
    child_object_type: contact_resistance_regions_child
class electric_field(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    voltage_tap: voltage_tap
    current_tap: current_tap
    conductive_regions: conductive_regions
    contact_resistance_regions: contact_resistance_regions
class enabled_40(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class source_file(Filename, _InputFile):
    _version: str
    fluent_name: str
    _python_name: str
class customized_udf(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_40
    source_file: source_file
    def create_customized_addon_lib(self):
        """
        Create customized addon library.
        """
    def copy_user_source_file(self):
        """
        Copy user modifiable file to the working directory.
        """
class sofc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_39
    model_parameters: model_parameters
    electrochemistry: electrochemistry
    electrolyte_porous: electrolyte_porous
    electric_field: electric_field
    customized_udf: customized_udf
class enabled_41(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class joule_heat(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction_heat_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class electrochemistry_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class butlervolmer(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multidiff(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anisotropic_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pconductivity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class halfcell(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class particlemodel(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_phase(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_in_channel(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_head(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class knudsen_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class temp_jref(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class n2_crossover(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ice_phase(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dissolved_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class osmotic_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class phasechange_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquidremoval_urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_amg(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wdiff_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class options_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    joule_heat: joule_heat
    reaction_heat: reaction_heat_1
    electrochemistry: electrochemistry_1
    butlervolmer: butlervolmer
    multidiff: multidiff
    anisotropic: anisotropic_1
    pconductivity: pconductivity
    halfcell: halfcell
    particlemodel: particlemodel
    liquid_phase: liquid_phase
    liquid_pressure: liquid_pressure
    liquid_in_channel: liquid_in_channel
    dynamic_head: dynamic_head
    knudsen_diffusion: knudsen_diffusion
    temp_jref: temp_jref
    n2_crossover: n2_crossover
    ice_phase: ice_phase
    dissolved_urf: dissolved_urf
    osmotic_urf: osmotic_urf
    phasechange_urf: phasechange_urf
    liquidremoval_urf: liquidremoval_urf
    auto_amg: auto_amg
    wdiff_model: wdiff_model
    bc_type: bc_type
    tot_voltage: tot_voltage
    tot_current: tot_current
    _child_aliases: dict
class leak_current(Real):
    _version: str
    fluent_name: str
    _python_name: str
class std_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h2_diff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class o2_diff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class h2o_diff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class other_diff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class gas_diff_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transfer_current_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rk_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_cov_exp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_diss_const(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_rho(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_k(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upper_liq_pre(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lower_liq_pre(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liq_diff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class gas_diss_const(Real):
    _version: str
    fluent_name: str
    _python_name: str
class osmotic_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lam_a1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lam_s1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class n2_cross_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class desublimation_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sublimation_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_jref: anode_jref
    anode_cref: anode_cref
    anode_exp: anode_exp
    anode_ex_a: anode_ex_a
    anode_ex_c: anode_ex_c
    cathode_jref: cathode_jref
    cathode_cref: cathode_cref
    cathode_exp: cathode_exp
    cathode_ex_a: cathode_ex_a
    cathode_ex_c: cathode_ex_c
    leak_current: leak_current
    anode_stde: anode_stde
    cathode_stde: cathode_stde
    std_temp: std_temp
    std_pre: std_pre
    open_voltage: open_voltage
    anode_entro: anode_entro
    cathode_entro: cathode_entro
    h2_diff: h2_diff
    o2_diff: o2_diff
    h2o_diff: h2o_diff
    other_diff: other_diff
    gas_diff_exp: gas_diff_exp
    transfer_current_exp: transfer_current_exp
    rk_exp: rk_exp
    liquid_cov_exp: liquid_cov_exp
    liquid_diss_const: liquid_diss_const
    liquid_rho: liquid_rho
    liquid_k: liquid_k
    upper_liq_pre: upper_liq_pre
    lower_liq_pre: lower_liq_pre
    liq_diff: liq_diff
    velocity_ratio: velocity_ratio
    gas_diss_const: gas_diss_const
    osmotic_coeff: osmotic_coeff
    lam_a1: lam_a1
    lam_s1: lam_s1
    n2_cross_coeff: n2_cross_coeff
    desublimation_rate: desublimation_rate
    sublimation_rate: sublimation_rate
    _child_aliases: dict
class anode_fc_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_fc_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_fc_zone_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_fc_zone_list: anode_fc_zone_list
    anode_fc_condensation: anode_fc_condensation
    anode_fc_evaporation: anode_fc_evaporation
class anode_gdl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_waterremoval(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_gdl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_gdl_zone_list: anode_gdl_zone_list
    anode_gdl_update: anode_gdl_update
    anode_gdl_material: anode_gdl_material
    anode_gdl_porosity: anode_gdl_porosity
    anode_gdl_permeability: anode_gdl_permeability
    anode_gdl_angle: anode_gdl_angle
    anode_gdl_angle_hi: anode_gdl_angle_hi
    anode_gdl_fraction: anode_gdl_fraction
    anode_gdl_waterremoval: anode_gdl_waterremoval
    anode_gdl_brugg_coeff: anode_gdl_brugg_coeff
    anode_gdl_a: anode_gdl_a
    anode_gdl_b: anode_gdl_b
    anode_gdl_c: anode_gdl_c
    anode_gdl_condensation: anode_gdl_condensation
    anode_gdl_evaporation: anode_gdl_evaporation
    anode_gdl_poresize: anode_gdl_poresize
    _child_aliases: dict
class anode_mpl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_mpl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_mpl_zone_list: anode_mpl_zone_list
    anode_mpl_update: anode_mpl_update
    anode_mpl_material: anode_mpl_material
    anode_mpl_porosity: anode_mpl_porosity
    anode_mpl_permeability: anode_mpl_permeability
    anode_mpl_angle: anode_mpl_angle
    anode_mpl_angle_hi: anode_mpl_angle_hi
    anode_mpl_fraction: anode_mpl_fraction
    anode_mpl_brugg_coeff: anode_mpl_brugg_coeff
    anode_mpl_a: anode_mpl_a
    anode_mpl_b: anode_mpl_b
    anode_mpl_c: anode_mpl_c
    anode_mpl_condensation: anode_mpl_condensation
    anode_mpl_evaporation: anode_mpl_evaporation
    anode_mpl_poresize: anode_mpl_poresize
    _child_aliases: dict
class anode_ca_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_sv_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_ion_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_act(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_tortuosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_jref_act(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_jref_t(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anode_ca_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_ca_zone_list: anode_ca_zone_list
    anode_ca_update: anode_ca_update
    anode_ca_material: anode_ca_material
    anode_ca_porosity: anode_ca_porosity
    anode_ca_permeability: anode_ca_permeability
    anode_ca_sv_ratio: anode_ca_sv_ratio
    anode_ca_alpha: anode_ca_alpha
    anode_ca_beta: anode_ca_beta
    anode_ca_ion_vof: anode_ca_ion_vof
    anode_ca_act: anode_ca_act
    anode_ca_tortuosity: anode_ca_tortuosity
    anode_ca_jref_act: anode_ca_jref_act
    anode_ca_jref_t: anode_ca_jref_t
    anode_ca_angle: anode_ca_angle
    anode_ca_angle_hi: anode_ca_angle_hi
    anode_ca_brugg_coeff: anode_ca_brugg_coeff
    anode_ca_fraction: anode_ca_fraction
    anode_ca_a: anode_ca_a
    anode_ca_b: anode_ca_b
    anode_ca_c: anode_ca_c
    anode_ca_condensation: anode_ca_condensation
    anode_ca_evaporation: anode_ca_evaporation
    anode_ca_poresize: anode_ca_poresize
    _child_aliases: dict
class anode_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    anode_cc_zone: anode_cc_zone
    anode_fc_zone: anode_fc_zone_1
    anode_gdl_zone: anode_gdl_zone
    anode_mpl_zone: anode_mpl_zone
    anode_ca_zone: anode_ca_zone
class mem_zone_list_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mem_eqv_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_diff_corr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mem_act(Real):
    _version: str
    fluent_name: str
    _python_name: str
class membrane(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mem_zone_list: mem_zone_list_1
    mem_update: mem_update
    mem_material: mem_material
    mem_eqv_weight: mem_eqv_weight
    mem_alpha: mem_alpha
    mem_beta: mem_beta
    mem_diff_corr: mem_diff_corr
    mem_permeability: mem_permeability
    mem_act: mem_act
class cathode_fc_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_fc_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_fc_zone_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_fc_zone_list: cathode_fc_zone_list
    cathode_fc_condensation: cathode_fc_condensation
    cathode_fc_evaporation: cathode_fc_evaporation
class cathode_gdl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_waterremoval(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_gdl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_gdl_zone_list: cathode_gdl_zone_list
    cathode_gdl_update: cathode_gdl_update
    cathode_gdl_material: cathode_gdl_material
    cathode_gdl_porosity: cathode_gdl_porosity
    cathode_gdl_permeability: cathode_gdl_permeability
    cathode_gdl_angle: cathode_gdl_angle
    cathode_gdl_angle_hi: cathode_gdl_angle_hi
    cathode_gdl_fraction: cathode_gdl_fraction
    cathode_gdl_brugg_coeff: cathode_gdl_brugg_coeff
    cathode_gdl_waterremoval: cathode_gdl_waterremoval
    cathode_gdl_a: cathode_gdl_a
    cathode_gdl_b: cathode_gdl_b
    cathode_gdl_c: cathode_gdl_c
    cathode_gdl_condensation: cathode_gdl_condensation
    cathode_gdl_evaporation: cathode_gdl_evaporation
    cathode_gdl_poresize: cathode_gdl_poresize
    _child_aliases: dict
class cathode_mpl_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_mpl_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_mpl_zone_list: cathode_mpl_zone_list
    cathode_mpl_update: cathode_mpl_update
    cathode_mpl_material: cathode_mpl_material
    cathode_mpl_porosity: cathode_mpl_porosity
    cathode_mpl_permeability: cathode_mpl_permeability
    cathode_mpl_angle: cathode_mpl_angle
    cathode_mpl_angle_hi: cathode_mpl_angle_hi
    cathode_mpl_fraction: cathode_mpl_fraction
    cathode_mpl_brugg_coeff: cathode_mpl_brugg_coeff
    cathode_mpl_a: cathode_mpl_a
    cathode_mpl_b: cathode_mpl_b
    cathode_mpl_c: cathode_mpl_c
    cathode_mpl_condensation: cathode_mpl_condensation
    cathode_mpl_evaporation: cathode_mpl_evaporation
    cathode_mpl_poresize: cathode_mpl_poresize
    _child_aliases: dict
class cathode_ca_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_permeability(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_sv_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_ion_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_act(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_tortuosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_jref_act(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_jref_t(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_resistance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_kwdw(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_angle_hi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_brugg_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_condensation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_evaporation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_poresize(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cathode_ca_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_ca_zone_list: cathode_ca_zone_list
    cathode_ca_update: cathode_ca_update
    cathode_ca_material: cathode_ca_material
    cathode_ca_porosity: cathode_ca_porosity
    cathode_ca_permeability: cathode_ca_permeability
    cathode_ca_sv_ratio: cathode_ca_sv_ratio
    cathode_ca_alpha: cathode_ca_alpha
    cathode_ca_beta: cathode_ca_beta
    cathode_ca_ion_vof: cathode_ca_ion_vof
    cathode_ca_act: cathode_ca_act
    cathode_ca_tortuosity: cathode_ca_tortuosity
    cathode_ca_jref_act: cathode_ca_jref_act
    cathode_ca_jref_t: cathode_ca_jref_t
    cathode_ca_radius: cathode_ca_radius
    cathode_ca_resistance: cathode_ca_resistance
    cathode_ca_kwdw: cathode_ca_kwdw
    cathode_ca_angle: cathode_ca_angle
    cathode_ca_angle_hi: cathode_ca_angle_hi
    cathode_ca_fraction: cathode_ca_fraction
    cathode_ca_brugg_coeff: cathode_ca_brugg_coeff
    cathode_ca_a: cathode_ca_a
    cathode_ca_b: cathode_ca_b
    cathode_ca_c: cathode_ca_c
    cathode_ca_condensation: cathode_ca_condensation
    cathode_ca_evaporation: cathode_ca_evaporation
    cathode_ca_poresize: cathode_ca_poresize
    _child_aliases: dict
class cathode_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cathode_cc_zone: cathode_cc_zone
    cathode_fc_zone: cathode_fc_zone_1
    cathode_gdl_zone: cathode_gdl_zone
    cathode_mpl_zone: cathode_mpl_zone
    cathode_ca_zone: cathode_ca_zone
class enabled_42(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coolant_zone_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coolant_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class coolant_channel(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_42
    coolant_zone_list: coolant_zone_list
    coolant_density: coolant_density
class stack_management(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_fc_units(self):
        """
        List fuel cell units.
        """
    def stack_create_fcu(self, fcu_name: str, cellzones: list[str]):
        """
        Create stack units.
        
        Parameters
        ----------
            fcu_name : str
                Name of fcu.
            cellzones : List
                Cell zones.
        """
    def stack_modify_fcu(self, fcu_name: str, cellzones: list[str]):
        """
        Modify stack units.
        
        Parameters
        ----------
            fcu_name : str
                Name of fcu.
            cellzones : List
                Cell zones.
        """
    def stack_delete_fcu(self, fcu_name: str):
        """
        Delete stack units.
        
        Parameters
        ----------
            fcu_name : str
                Name of fcu.
        """
    def stack_reset_fcu(self, reset: bool):
        """
        Reset stack units.
        
        Parameters
        ----------
            reset : bool
                Reset stack setup from saved value.
        """
    def stack_submit_fcu(self, submit: bool):
        """
        Apply stack units settings.
        
        Parameters
        ----------
            submit : bool
                Submit new stack setup.
        """
class enabled_43(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class num_init_iter(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class predefined_workflow(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_43
    num_init_iter: num_init_iter
class advanced_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    contact_resis: contact_resis
    coolant_channel: coolant_channel
    stack_management: stack_management
    predefined_workflow: predefined_workflow
class electrolyte_area(Real):
    _version: str
    fluent_name: str
    _python_name: str
class monitor_enable(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class monitor_frequency(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class report_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    electrolyte_area: electrolyte_area
    monitor_enable: monitor_enable
    monitor_frequency: monitor_frequency
class enabled_44(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class customized_udf_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_44
    source_file: source_file
    def create_customized_addon_lib(self):
        """
        Create customized addon library.
        """
    def copy_user_source_file(self):
        """
        Copy user modifiable file to the working directory.
        """
class pemfc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_41
    options: options_7
    parameters: parameters_4
    anode: anode_1
    membrane: membrane
    cathode: cathode_1
    electrical_tab: electrical_tab
    advanced: advanced_1
    report: report_1
    customized_udf: customized_udf_1
class models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    multiphase: multiphase
    energy: energy
    viscous: viscous
    acoustics: acoustics
    radiation: radiation
    species: species
    discrete_phase: discrete_phase
    virtual_blade_model: virtual_blade_model
    optics: optics
    structure: structure
    ablation: ablation
    dsmc: dsmc
    echemistry: echemistry
    battery: battery
    system_coupling: system_coupling
    sofc: sofc
    pemfc: pemfc
class database_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class database(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    database_type: database_type
    def copy_by_formula(self, type: str, formula: str, new_name: str, new_formula: str):
        """
        Copy database material by formula.
        
        Parameters
        ----------
            type : str
                'type' child.
            formula : str
                'formula' child.
            new_name : str
                Material with same name exist. Please select new material name.
            new_formula : str
                Material with same chemical formula exist. Please select new chemical formula.
        """
    def copy_by_name(self, type: str, name: str, new_name: str, new_formula: str):
        """
        Copy database material by name.
        
        Parameters
        ----------
            type : str
                'type' child.
            name : str
                'name' child.
            new_name : str
                Material with same name exist. Please select new material name.
            new_formula : str
                Material with same chemical formula exist. Please select new chemical formula.
        """
    def list_materials(self):
        """
        List database materials.
        """
    def list_properties(self, name: str):
        """
        List database material properties.
        
        Parameters
        ----------
            name : str
                'name' child.
        """
class name_10(String):
    _version: str
    fluent_name: str
    _python_name: str
class chemical_formula(String):
    _version: str
    fluent_name: str
    _python_name: str
class option_38(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nist_fluid(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lookup_table(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class saturation_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class real_gas_nist(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    nist_fluid: nist_fluid
    lookup_table: lookup_table
    pressure_points: pressure_points
    pressure_minimum: pressure_minimum
    pressure_maximum: pressure_maximum
    temperature_points: temperature_points
    temperature_minimum: temperature_minimum
    temperature_maximum: temperature_maximum
    saturation_points: saturation_points
class value_16(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_bulk_modulus(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density_exponent(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_density_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_density_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class compressible_liquid(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_pressure: reference_pressure
    reference_density: reference_density
    reference_bulk_modulus: reference_bulk_modulus
    density_exponent: density_exponent
    maximum_density_ratio: maximum_density_ratio
    minimum_density_ratio: minimum_density_ratio
class piecewise_linear_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class polynomial_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class user_defined_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rgp_table(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class density_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    real_gas_nist: real_gas_nist
    value: value_16
    compressible_liquid: compressible_liquid
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    rgp_table: rgp_table
    _child_aliases: dict
class option_39(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_viscosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_temperature_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_exponent(Real):
    _version: str
    fluent_name: str
    _python_name: str
class power_law(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_39
    b: b
    reference_viscosity: reference_viscosity
    reference_temperature: reference_temperature_1
    temperature_exponent: temperature_exponent
class a_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class blottner_curve_fit(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    a: a_2
    b: b
    c: c
class gupta_curve_fit_viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    a: a_2
    b: b
    c: c
class c1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class c2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class effective_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sutherland(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_39
    c1: c1
    c2: c2
    reference_viscosity: reference_viscosity
    reference_temperature: reference_temperature_1
    effective_temperature: effective_temperature
class option_40(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zero_shear_viscosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class power_law_index(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_temperature_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_energy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cross(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_40
    zero_shear_viscosity: zero_shear_viscosity
    power_law_index: power_law_index
    time_constant: time_constant
    reference_temperature: reference_temperature_2
    activation_energy: activation_energy
class consistency_index(Real):
    _version: str
    fluent_name: str
    _python_name: str
class power_law_index_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class yield_stress_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class critical_shear_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_temperature_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_energy_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class herschel_bulkley(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_40
    consistency_index: consistency_index
    power_law_index: power_law_index_1
    yield_stress_threshold: yield_stress_threshold
    critical_shear_rate: critical_shear_rate
    reference_temperature: reference_temperature_3
    activation_energy: activation_energy_1
class shape_parameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class infinite_shear_viscosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class carreau(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_40
    time_constant: time_constant
    power_law_index: power_law_index
    shape_parameter: shape_parameter
    zero_shear_viscosity: zero_shear_viscosity
    infinite_shear_viscosity: infinite_shear_viscosity
    reference_temperature: reference_temperature_2
    activation_energy: activation_energy
class power_law_index_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_viscosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_viscosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_energy_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class non_newtonian_power_law(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_40
    consistency_index: consistency_index
    power_law_index: power_law_index_2
    minimum_viscosity: minimum_viscosity
    maximum_viscosity: maximum_viscosity
    reference_temperature: reference_temperature_2
    activation_energy: activation_energy_2
class viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    power_law: power_law
    blottner_curve_fit: blottner_curve_fit
    gupta_curve_fit_viscosity: gupta_curve_fit_viscosity
    sutherland: sutherland
    cross: cross
    herschel_bulkley: herschel_bulkley
    carreau: carreau
    non_newtonian_power_law: non_newtonian_power_law
    user_defined_function: user_defined_function
    rgp_table: rgp_table
    real_gas_nist: real_gas_nist
    _child_aliases: dict
class nasa_9_piecewise_polynomial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class specific_heat(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    nasa_9_piecewise_polynomial: nasa_9_piecewise_polynomial
    user_defined_function: user_defined_function
    rgp_table: rgp_table
    real_gas_nist: real_gas_nist
    _child_aliases: dict
class d(Real):
    _version: str
    fluent_name: str
    _python_name: str
class e_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class gupta_curve_fit_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    a: a_2
    b: b
    c: c
    d: d
    e: e_2
class thermal_conductivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    gupta_curve_fit_conductivity: gupta_curve_fit_conductivity
    user_defined_function: user_defined_function
    rgp_table: rgp_table
    real_gas_nist: real_gas_nist
    _child_aliases: dict
class molecular_weight_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    rgp_table: rgp_table
    _child_aliases: dict
class combustion_mixture(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class premix_laminar_speed(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    combustion_mixture: combustion_mixture
    _child_aliases: dict
class premix_critical_strain(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_unburnt_temp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class premix_unburnt_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class premix_heat_trans_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class premix_heat_of_comb(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class premix_unburnt_fuel_mf(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_adiabatic_temp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class therm_exp_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class vibrational_temperature_mode_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_degeneracy_mode_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_temperature_mode_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_degeneracy_mode_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_temperature_mode_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_degeneracy_mode_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_modes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    vibrational_temperature_mode_1: vibrational_temperature_mode_1
    vibrational_degeneracy_mode_1: vibrational_degeneracy_mode_1
    vibrational_temperature_mode_2: vibrational_temperature_mode_2
    vibrational_degeneracy_mode_2: vibrational_degeneracy_mode_2
    vibrational_temperature_mode_3: vibrational_temperature_mode_3
    vibrational_degeneracy_mode_3: vibrational_degeneracy_mode_3
class characteristic_vibrational_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    vibrational_modes: vibrational_modes
    value: value_16
    _child_aliases: dict
class reference_diameter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class viscosity_reference_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class viscosity_temperature_index(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class gray_band_coefficients(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class absorption_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    gray_band_coefficients: gray_band_coefficients
    user_defined_function: user_defined_function
    _child_aliases: dict
class melting_heat(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class tsolidus(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class tliqidus(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class liquidus_slope(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class partition_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class eutectic_mf(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class solid_diffusion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class solut_exp_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class scattering_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class forward_scattering_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class asymmetry_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class delta_eddington(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    forward_scattering_factor: forward_scattering_factor
    asymmetry_factor: asymmetry_factor
class scattering_phase_function(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    delta_eddington: delta_eddington
    user_defined_function: user_defined_function
    _child_aliases: dict
class refractive_index(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    gray_band_coefficients: gray_band_coefficients
    _child_aliases: dict
class formation_entropy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class formation_enthalpy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class reference_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class lennard_jones_length(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class lennard_jones_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class thermal_accom_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class velocity_accom_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class degrees_of_freedom(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class electric_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class dual_electric_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class lithium_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class magnetic_permeability(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class speed_of_sound(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class critical_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class critical_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class critical_volume(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class acentric_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class latent_heat(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class saturation_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class vaporization_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class charge(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class option_41(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class matrix_component(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class anisotropic_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    matrix_component: matrix_component
    diffusivity: diffusivity
class direction_0(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class direction_1_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class diffusivity_0(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class diffusivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class diffusivity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class orthotropic(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_0: direction_0
    direction_1: direction_1_1
    diffusivity_0: diffusivity_0
    diffusivity_1: diffusivity_1
    diffusivity_2: diffusivity_2
class axis_origin(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radial_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class tangential_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class axial_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class cyl_orthotropic(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_origin: axis_origin
    axis_direction: axis_direction
    radial_diffusivity: radial_diffusivity
    tangential_diffusivity: tangential_diffusivity
    axial_diffusivity: axial_diffusivity
class uds_diffusivities_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_41
    value: value_16
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    anisotropic: anisotropic_2
    orthotropic: orthotropic
    cyl_orthotropic: cyl_orthotropic
class uds_diffusivities(NamedObject[uds_diffusivities_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: uds_diffusivities_child
class uds_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    uds_diffusivities: uds_diffusivities
    user_defined_function: user_defined_function
    _child_aliases: dict
class fluid_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_3
    viscosity: viscosity
    specific_heat: specific_heat
    thermal_conductivity: thermal_conductivity_1
    molecular_weight: molecular_weight_3
    premix_laminar_speed: premix_laminar_speed
    premix_critical_strain: premix_critical_strain
    premix_unburnt_temp: premix_unburnt_temp
    premix_unburnt_density: premix_unburnt_density
    premix_heat_trans_coeff: premix_heat_trans_coeff
    premix_heat_of_comb: premix_heat_of_comb
    premix_unburnt_fuel_mf: premix_unburnt_fuel_mf
    premix_adiabatic_temp: premix_adiabatic_temp
    therm_exp_coeff: therm_exp_coeff
    characteristic_vibrational_temperature: characteristic_vibrational_temperature
    reference_diameter: reference_diameter
    viscosity_reference_temperature: viscosity_reference_temperature
    viscosity_temperature_index: viscosity_temperature_index
    absorption_coefficient: absorption_coefficient
    melting_heat: melting_heat
    tsolidus: tsolidus
    tliqidus: tliqidus
    liquidus_slope: liquidus_slope
    partition_coeff: partition_coeff
    eutectic_mf: eutectic_mf
    solid_diffusion: solid_diffusion
    solut_exp_coeff: solut_exp_coeff
    scattering_coefficient: scattering_coefficient
    scattering_phase_function: scattering_phase_function
    refractive_index: refractive_index
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
    lennard_jones_length: lennard_jones_length
    lennard_jones_energy: lennard_jones_energy
    thermal_accom_coefficient: thermal_accom_coefficient
    velocity_accom_coefficient: velocity_accom_coefficient
    degrees_of_freedom: degrees_of_freedom
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    lithium_diffusivity: lithium_diffusivity
    magnetic_permeability: magnetic_permeability
    speed_of_sound: speed_of_sound
    critical_temperature: critical_temperature
    critical_pressure: critical_pressure
    critical_volume: critical_volume
    acentric_factor: acentric_factor
    latent_heat: latent_heat
    saturation_pressure: saturation_pressure
    vaporization_temperature: vaporization_temperature
    charge: charge
    uds_diffusivity: uds_diffusivity
class fluid(NamedObject[fluid_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fluid_child
class density_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    value: value_16
    _child_aliases: dict
class specific_heat_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    nasa_9_piecewise_polynomial: nasa_9_piecewise_polynomial
    _child_aliases: dict
class planar_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class transverse_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class biaxial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    planar_conductivity: planar_conductivity
    transverse_conductivity: transverse_conductivity
class radial_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class tangential_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class axial_conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class cyl_orthotropic_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_origin: axis_origin
    axis_direction: axis_direction
    radial_conductivity: radial_conductivity
    tangential_conductivity: tangential_conductivity
    axial_conductivity: axial_conductivity
class conductivity_0(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class conductivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class conductivity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class orthotropic_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_0: direction_0
    direction_1: direction_1_1
    conductivity_0: conductivity_0
    conductivity_1: conductivity_1
    conductivity_2: conductivity_2
class principal_axes(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class principal_values(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class conductivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class principal_axes_values(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    principal_axes: principal_axes
    principal_values: principal_values
    conductivity: conductivity
class anisotropic_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    matrix_component: matrix_component
    conductivity: conductivity
class thermal_conductivity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    biaxial: biaxial
    cyl_orthotropic: cyl_orthotropic_1
    orthotropic: orthotropic_1
    principal_axes_values: principal_axes_values
    anisotropic: anisotropic_3
    user_defined_function: user_defined_function
    _child_aliases: dict
class atomic_number(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class electric_conductivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    cyl_orthotropic: cyl_orthotropic_1
    orthotropic: orthotropic_1
    anisotropic: anisotropic_3
    user_defined_function: user_defined_function
    _child_aliases: dict
class direction_0_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class direction_1_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class option_42(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class youngs_modulus_0(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class youngs_modulus_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class youngs_modulus_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class shear_modulus_01(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class shear_modulus_12(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class shear_modulus_02(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class orthotropic_structure_ym(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_0: direction_0_1
    direction_1: direction_1_2
    youngs_modulus_0: youngs_modulus_0
    youngs_modulus_1: youngs_modulus_1
    youngs_modulus_2: youngs_modulus_2
    shear_modulus_01: shear_modulus_01
    shear_modulus_12: shear_modulus_12
    shear_modulus_02: shear_modulus_02
class struct_youngs_modulus(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    orthotropic_structure_ym: orthotropic_structure_ym
    user_defined_function: user_defined_function
    _child_aliases: dict
class poisson_ratio_01(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class poisson_ratio_12(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class poisson_ratio_02(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class orthotropic_structure_nu(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    poisson_ratio_01: poisson_ratio_01
    poisson_ratio_12: poisson_ratio_12
    poisson_ratio_02: poisson_ratio_02
class struct_poisson_ratio(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    orthotropic_structure_nu: orthotropic_structure_nu
    user_defined_function: user_defined_function
    _child_aliases: dict
class struct_start_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class thermal_expansion_0(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class thermal_expansion_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class thermal_expansion_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_42
    value: value_16
class orthotropic_structure_te(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thermal_expansion_0: thermal_expansion_0
    thermal_expansion_1: thermal_expansion_1
    thermal_expansion_2: thermal_expansion_2
class struct_thermal_expansion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    orthotropic_structure_te: orthotropic_structure_te
    user_defined_function: user_defined_function
    _child_aliases: dict
class struct_damping_alpha(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class struct_damping_beta(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class solid_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_4
    specific_heat: specific_heat_1
    thermal_conductivity: thermal_conductivity_2
    atomic_number: atomic_number
    absorption_coefficient: absorption_coefficient
    scattering_coefficient: scattering_coefficient
    scattering_phase_function: scattering_phase_function
    refractive_index: refractive_index
    electric_conductivity: electric_conductivity_1
    dual_electric_conductivity: dual_electric_conductivity
    lithium_diffusivity: lithium_diffusivity
    magnetic_permeability: magnetic_permeability
    struct_youngs_modulus: struct_youngs_modulus
    struct_poisson_ratio: struct_poisson_ratio
    struct_start_temperature: struct_start_temperature
    struct_thermal_expansion: struct_thermal_expansion
    struct_damping_alpha: struct_damping_alpha
    struct_damping_beta: struct_damping_beta
    uds_diffusivity: uds_diffusivity
class solid(NamedObject[solid_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: solid_child
class volumetric_species_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_3
    viscosity: viscosity
    specific_heat: specific_heat
    thermal_conductivity: thermal_conductivity_1
    molecular_weight: molecular_weight_3
    premix_laminar_speed: premix_laminar_speed
    premix_critical_strain: premix_critical_strain
    premix_unburnt_temp: premix_unburnt_temp
    premix_unburnt_density: premix_unburnt_density
    premix_heat_trans_coeff: premix_heat_trans_coeff
    premix_heat_of_comb: premix_heat_of_comb
    premix_unburnt_fuel_mf: premix_unburnt_fuel_mf
    premix_adiabatic_temp: premix_adiabatic_temp
    therm_exp_coeff: therm_exp_coeff
    characteristic_vibrational_temperature: characteristic_vibrational_temperature
    reference_diameter: reference_diameter
    viscosity_reference_temperature: viscosity_reference_temperature
    viscosity_temperature_index: viscosity_temperature_index
    absorption_coefficient: absorption_coefficient
    melting_heat: melting_heat
    tsolidus: tsolidus
    tliqidus: tliqidus
    liquidus_slope: liquidus_slope
    partition_coeff: partition_coeff
    eutectic_mf: eutectic_mf
    solid_diffusion: solid_diffusion
    solut_exp_coeff: solut_exp_coeff
    scattering_coefficient: scattering_coefficient
    scattering_phase_function: scattering_phase_function
    refractive_index: refractive_index
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
    lennard_jones_length: lennard_jones_length
    lennard_jones_energy: lennard_jones_energy
    thermal_accom_coefficient: thermal_accom_coefficient
    velocity_accom_coefficient: velocity_accom_coefficient
    degrees_of_freedom: degrees_of_freedom
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    lithium_diffusivity: lithium_diffusivity
    magnetic_permeability: magnetic_permeability
    speed_of_sound: speed_of_sound
    critical_temperature: critical_temperature
    critical_pressure: critical_pressure
    critical_volume: critical_volume
    acentric_factor: acentric_factor
    latent_heat: latent_heat
    saturation_pressure: saturation_pressure
    vaporization_temperature: vaporization_temperature
    charge: charge
    uds_diffusivity: uds_diffusivity
class volumetric_species(NamedObject[volumetric_species_child]):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: volumetric_species_child
class volumetric(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class site(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solid_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class last_species(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_3
    viscosity: viscosity
    specific_heat: specific_heat
    thermal_conductivity: thermal_conductivity_1
    molecular_weight: molecular_weight_3
    premix_laminar_speed: premix_laminar_speed
    premix_critical_strain: premix_critical_strain
    premix_unburnt_temp: premix_unburnt_temp
    premix_unburnt_density: premix_unburnt_density
    premix_heat_trans_coeff: premix_heat_trans_coeff
    premix_heat_of_comb: premix_heat_of_comb
    premix_unburnt_fuel_mf: premix_unburnt_fuel_mf
    premix_adiabatic_temp: premix_adiabatic_temp
    therm_exp_coeff: therm_exp_coeff
    characteristic_vibrational_temperature: characteristic_vibrational_temperature
    reference_diameter: reference_diameter
    viscosity_reference_temperature: viscosity_reference_temperature
    viscosity_temperature_index: viscosity_temperature_index
    absorption_coefficient: absorption_coefficient
    melting_heat: melting_heat
    tsolidus: tsolidus
    tliqidus: tliqidus
    liquidus_slope: liquidus_slope
    partition_coeff: partition_coeff
    eutectic_mf: eutectic_mf
    solid_diffusion: solid_diffusion
    solut_exp_coeff: solut_exp_coeff
    scattering_coefficient: scattering_coefficient
    scattering_phase_function: scattering_phase_function
    refractive_index: refractive_index
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
    lennard_jones_length: lennard_jones_length
    lennard_jones_energy: lennard_jones_energy
    thermal_accom_coefficient: thermal_accom_coefficient
    velocity_accom_coefficient: velocity_accom_coefficient
    degrees_of_freedom: degrees_of_freedom
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    lithium_diffusivity: lithium_diffusivity
    magnetic_permeability: magnetic_permeability
    speed_of_sound: speed_of_sound
    critical_temperature: critical_temperature
    critical_pressure: critical_pressure
    critical_volume: critical_volume
    acentric_factor: acentric_factor
    latent_heat: latent_heat
    saturation_pressure: saturation_pressure
    vaporization_temperature: vaporization_temperature
    charge: charge
    uds_diffusivity: uds_diffusivity
class material_3(NamedObject[material_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: material_3_child
class species_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    volumetric_species: volumetric_species
    volumetric: volumetric
    site: site
    solid: solid_1
    last_species: last_species
    material: material_3
class reactions_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    _child_aliases: dict
class reaction_mechs(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    _child_aliases: dict
class composition_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class species_fractions(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class real_gas_nist_mixture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    lookup_table: lookup_table
    composition_type: composition_type
    species_fractions: species_fractions
    pressure_points: pressure_points
    pressure_minimum: pressure_minimum
    pressure_maximum: pressure_maximum
    temperature_points: temperature_points
    temperature_minimum: temperature_minimum
    temperature_maximum: temperature_maximum
class density_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    real_gas_nist_mixture: real_gas_nist_mixture
    user_defined_function: user_defined_function
    _child_aliases: dict
class viscosity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    power_law: power_law
    sutherland: sutherland
    user_defined_function: user_defined_function
    real_gas_nist_mixture: real_gas_nist_mixture
    _child_aliases: dict
class specific_heat_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    nasa_9_piecewise_polynomial: nasa_9_piecewise_polynomial
    real_gas_nist_mixture: real_gas_nist_mixture
    user_defined_function: user_defined_function
    _child_aliases: dict
class thermal_conductivity_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    real_gas_nist_mixture: real_gas_nist_mixture
    _child_aliases: dict
class premix_laminar_thickness(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_unburnt_temp_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_unburnt_cp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_unburnt_density_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    _child_aliases: dict
class premix_heat_trans_coeff_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    _child_aliases: dict
class path_length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class absorption_coefficient_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    path_length: path_length
    gray_band_coefficients: gray_band_coefficients
    user_defined_function: user_defined_function
    _child_aliases: dict
class lewis_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constant_mass_diffusivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_diffusivity_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    polynomial: polynomial_2
class species_diffusivity(NamedObject[species_diffusivity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_diffusivity_child
class multicomponent_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    polynomial: polynomial_2
class multicomponent_child(NamedObject[multicomponent_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: multicomponent_child_child
class multicomponent(NamedObject[multicomponent_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: multicomponent_child
class mass_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    lewis_number: lewis_number
    constant_mass_diffusivity: constant_mass_diffusivity
    species_diffusivity: species_diffusivity
    multicomponent: multicomponent
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class thermal_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    species_diffusivity: species_diffusivity
    user_defined_function: user_defined_function
    _child_aliases: dict
class tmelt(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class eutectic_temp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class diffusion_collision_integral(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class viscosity_collision_integral(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class neutral_involved_interaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffusion_collision_integral: diffusion_collision_integral
    viscosity_collision_integral: viscosity_collision_integral
class charged_particle_interaction(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cross_section_multicomponent_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    neutral_involved_interaction: neutral_involved_interaction
    charged_particle_interaction: charged_particle_interaction
class cross_section_multicomponent_child(NamedObject[cross_section_multicomponent_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: cross_section_multicomponent_child_child
class cross_section_multicomponent(NamedObject[cross_section_multicomponent_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: cross_section_multicomponent_child
class collision_cross_section(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    cross_section_multicomponent: cross_section_multicomponent
    _child_aliases: dict
class mixture_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    species: species_3
    reactions: reactions_1
    reaction_mechs: reaction_mechs
    density: density_5
    viscosity: viscosity_1
    specific_heat: specific_heat_2
    thermal_conductivity: thermal_conductivity_3
    premix_laminar_speed: premix_laminar_speed
    premix_laminar_thickness: premix_laminar_thickness
    premix_unburnt_temp: premix_unburnt_temp_1
    premix_unburnt_cp: premix_unburnt_cp
    premix_unburnt_density: premix_unburnt_density_1
    premix_heat_trans_coeff: premix_heat_trans_coeff_1
    premix_critical_strain: premix_critical_strain
    therm_exp_coeff: therm_exp_coeff
    absorption_coefficient: absorption_coefficient_1
    scattering_coefficient: scattering_coefficient
    scattering_phase_function: scattering_phase_function
    refractive_index: refractive_index
    mass_diffusivity: mass_diffusivity
    thermal_diffusivity: thermal_diffusivity
    tmelt: tmelt
    melting_heat: melting_heat
    eutectic_temp: eutectic_temp
    speed_of_sound: speed_of_sound
    critical_temperature: critical_temperature
    critical_pressure: critical_pressure
    critical_volume: critical_volume
    acentric_factor: acentric_factor
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    lithium_diffusivity: lithium_diffusivity
    collision_cross_section: collision_cross_section
    uds_diffusivity: uds_diffusivity
class mixture(NamedObject[mixture_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mixture_child
class density_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    compressible_liquid: compressible_liquid
    user_defined_function: user_defined_function
    _child_aliases: dict
class viscosity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class specific_heat_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    nasa_9_piecewise_polynomial: nasa_9_piecewise_polynomial
    user_defined_function: user_defined_function
    _child_aliases: dict
class thermal_conductivity_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class thermophoretic_co(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class scattering_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class emissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class dpm_surften(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class charge_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class inert_particle_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_6
    viscosity: viscosity_2
    specific_heat: specific_heat_3
    thermal_conductivity: thermal_conductivity_4
    thermophoretic_co: thermophoretic_co
    scattering_factor: scattering_factor
    emissivity: emissivity
    dpm_surften: dpm_surften
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    magnetic_permeability: magnetic_permeability
    charge_density: charge_density
class inert_particle(NamedObject[inert_particle_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: inert_particle_child
class use_vapor_species_heat_capacity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_controlled(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_vapor_species_heat_capacity: use_vapor_species_heat_capacity
class variable_lewis_number(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class convection_diffusion_controlled(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    variable_lewis_number: variable_lewis_number
    use_vapor_species_heat_capacity: use_vapor_species_heat_capacity
class vaporization_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    diffusion_controlled: diffusion_controlled
    convection_diffusion_controlled: convection_diffusion_controlled
    _child_aliases: dict
class pre_exponential_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_energy_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class single_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_exponential_factor: pre_exponential_factor
    activation_energy: activation_energy_3
class particle_thermolysis_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_exponential_factor: pre_exponential_factor
    activation_energy: activation_energy_3
class film_thermolysis_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_exponential_factor: pre_exponential_factor
    activation_energy: activation_energy_3
class secondary_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    particle_thermolysis_rate: particle_thermolysis_rate
    film_thermolysis_rate: film_thermolysis_rate
class thermolysis_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    single_rate: single_rate
    secondary_rate: secondary_rate
    value: value_16
    _child_aliases: dict
class latent_heat_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class volatile_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class heat_of_pyrolysis(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class averaging_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class binary_diffusivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
class film_averaged(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    averaging_coefficient: averaging_coefficient
    binary_diffusivity: binary_diffusivity_1
class binary_diffusivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    film_averaged: film_averaged
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class diffusivity_reference_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class averaging_coefficient_t(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class averaging_coefficient_y(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class vapor_pressure_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    value: value_16
    rgp_table: rgp_table
    user_defined_function: user_defined_function
    _child_aliases: dict
class molecular_weight_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class boiling_point(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class scattering_factor_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class emissivity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class dpm_surften_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    rgp_table: rgp_table
    user_defined_function: user_defined_function
    _child_aliases: dict
class droplet_particle_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_6
    viscosity: viscosity_2
    specific_heat: specific_heat_3
    thermal_conductivity: thermal_conductivity_4
    vaporization_model: vaporization_model
    thermolysis_model: thermolysis_model
    latent_heat: latent_heat_1
    volatile_fraction: volatile_fraction
    heat_of_pyrolysis: heat_of_pyrolysis
    binary_diffusivity: binary_diffusivity
    diffusivity_reference_pressure: diffusivity_reference_pressure
    averaging_coefficient_t: averaging_coefficient_t
    averaging_coefficient_y: averaging_coefficient_y
    vapor_pressure: vapor_pressure_1
    molecular_weight: molecular_weight_4
    vaporization_temperature: vaporization_temperature
    boiling_point: boiling_point
    thermophoretic_co: thermophoretic_co
    scattering_factor: scattering_factor_1
    emissivity: emissivity_1
    dpm_surften: dpm_surften_1
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    magnetic_permeability: magnetic_permeability
    charge_density: charge_density
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
class droplet_particle(NamedObject[droplet_particle_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: droplet_particle_child
class density_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class combustible_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class swelling_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    user_defined_function: user_defined_function
    _child_aliases: dict
class burn_stoichiometry(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class binary_diffusivity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    piecewise_linear: piecewise_linear_1
    piecewise_polynomial: piecewise_polynomial
    polynomial: polynomial_2
    user_defined_function: user_defined_function
    _child_aliases: dict
class burn_hreact(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class burn_hreact_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    _child_aliases: dict
class weighting_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class first_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_exponential_factor: pre_exponential_factor
    activation_energy: activation_energy_3
    weighting_factor: weighting_factor
class second_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_exponential_factor: pre_exponential_factor
    activation_energy: activation_energy_3
    weighting_factor: weighting_factor
class two_competing_rates(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    first_rate: first_rate
    second_rate: second_rate
class initial_fraction_of_bridges_in_coal_lattice(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_fraction_of_char_bridges(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lattice_coordination_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cluster_molecular_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class side_chain_molecular_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpd_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initial_fraction_of_bridges_in_coal_lattice: initial_fraction_of_bridges_in_coal_lattice
    initial_fraction_of_char_bridges: initial_fraction_of_char_bridges
    lattice_coordination_number: lattice_coordination_number
    cluster_molecular_weight: cluster_molecular_weight
    side_chain_molecular_weight: side_chain_molecular_weight
class devolatilization_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    value: value_16
    single_rate: single_rate
    two_competing_rates: two_competing_rates
    cpd_model: cpd_model
    _child_aliases: dict
class option_43(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class char_intrinsic_reactivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class carbon_content_percentage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cbk(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_43
    char_intrinsic_reactivity: char_intrinsic_reactivity
    carbon_content_percentage: carbon_content_percentage
class diffusion_rate_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pre_exponential_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class activation_energy_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class kinetics_diffusion_limited(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffusion_rate_constant: diffusion_rate_constant
    pre_exponential_factor: pre_exponential_factor_1
    activation_energy: activation_energy_4
class char_porosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mean_pore_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class specific_internal_surface_area(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tortuosity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class burning_mode(Real):
    _version: str
    fluent_name: str
    _python_name: str
class intrinsic_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffusion_rate_constant: diffusion_rate_constant
    pre_exponential_factor: pre_exponential_factor_1
    activation_energy: activation_energy_4
    char_porosity: char_porosity
    mean_pore_radius: mean_pore_radius
    specific_internal_surface_area: specific_internal_surface_area
    tortuosity: tortuosity
    burning_mode: burning_mode
class composition_dependent_specific_heat(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class composition_dependent_density(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multiple_surface_reactions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    composition_dependent_specific_heat: composition_dependent_specific_heat
    composition_dependent_density: composition_dependent_density
class combustion_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    cbk: cbk
    kinetics_diffusion_limited: kinetics_diffusion_limited
    intrinsic_model: intrinsic_model
    multiple_surface_reactions: multiple_surface_reactions
    _child_aliases: dict
class combusting_particle_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_7
    specific_heat: specific_heat_3
    thermal_conductivity: thermal_conductivity_4
    latent_heat: latent_heat_1
    volatile_fraction: volatile_fraction
    combustible_fraction: combustible_fraction
    swelling_coefficient: swelling_coefficient
    burn_stoichiometry: burn_stoichiometry
    binary_diffusivity: binary_diffusivity_2
    diffusivity_reference_pressure: diffusivity_reference_pressure
    vaporization_temperature: vaporization_temperature
    thermophoretic_co: thermophoretic_co
    burn_hreact: burn_hreact
    burn_hreact_fraction: burn_hreact_fraction
    devolatilization_model: devolatilization_model
    combustion_model: combustion_model
    scattering_factor: scattering_factor_1
    emissivity: emissivity_1
class combusting_particle(NamedObject[combusting_particle_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: combusting_particle_child
class particle_species_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_6
    viscosity: viscosity_2
    specific_heat: specific_heat_3
    thermal_conductivity: thermal_conductivity_4
    vaporization_model: vaporization_model
    thermolysis_model: thermolysis_model
    latent_heat: latent_heat_1
    volatile_fraction: volatile_fraction
    heat_of_pyrolysis: heat_of_pyrolysis
    binary_diffusivity: binary_diffusivity
    diffusivity_reference_pressure: diffusivity_reference_pressure
    averaging_coefficient_t: averaging_coefficient_t
    averaging_coefficient_y: averaging_coefficient_y
    vapor_pressure: vapor_pressure_1
    molecular_weight: molecular_weight_4
    vaporization_temperature: vaporization_temperature
    boiling_point: boiling_point
    thermophoretic_co: thermophoretic_co
    scattering_factor: scattering_factor_1
    emissivity: emissivity_1
    dpm_surften: dpm_surften_1
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    magnetic_permeability: magnetic_permeability
    charge_density: charge_density
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
class particle_species(NamedObject[particle_species_child]):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: particle_species_child
class particle(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    density: density_6
    viscosity: viscosity_2
    specific_heat: specific_heat_3
    thermal_conductivity: thermal_conductivity_4
    vaporization_model: vaporization_model
    thermolysis_model: thermolysis_model
    latent_heat: latent_heat_1
    volatile_fraction: volatile_fraction
    heat_of_pyrolysis: heat_of_pyrolysis
    binary_diffusivity: binary_diffusivity
    diffusivity_reference_pressure: diffusivity_reference_pressure
    averaging_coefficient_t: averaging_coefficient_t
    averaging_coefficient_y: averaging_coefficient_y
    vapor_pressure: vapor_pressure_1
    molecular_weight: molecular_weight_4
    vaporization_temperature: vaporization_temperature
    boiling_point: boiling_point
    thermophoretic_co: thermophoretic_co
    scattering_factor: scattering_factor_1
    emissivity: emissivity_1
    dpm_surften: dpm_surften_1
    electric_conductivity: electric_conductivity
    dual_electric_conductivity: dual_electric_conductivity
    magnetic_permeability: magnetic_permeability
    charge_density: charge_density
    formation_entropy: formation_entropy
    formation_enthalpy: formation_enthalpy
    reference_temperature: reference_temperature
class material_4(NamedObject[material_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: material_4_child
class species_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    particle_species: particle_species
    particle: particle
    last_species: last_species
    material: material_4
class density_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    compressible_liquid: compressible_liquid
    user_defined_function: user_defined_function
    value: value_16
    _child_aliases: dict
class specific_heat_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    value: value_16
    _child_aliases: dict
class vp_equilib(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    user_defined_function: user_defined_function
    _child_aliases: dict
class emissivity_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    _child_aliases: dict
class scattering_factor_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    _child_aliases: dict
class reaction_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_38
    _child_aliases: dict
class particle_mixture_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_10
    chemical_formula: chemical_formula
    species: species_4
    density: density_8
    viscosity: viscosity_2
    specific_heat: specific_heat_4
    thermal_conductivity: thermal_conductivity_4
    vp_equilib: vp_equilib
    dpm_surften: dpm_surften
    emissivity: emissivity_2
    scattering_factor: scattering_factor_2
    vaporization_model: vaporization_model
    averaging_coefficient_t: averaging_coefficient_t
    averaging_coefficient_y: averaging_coefficient_y
    thermophoretic_co: thermophoretic_co
    reaction_model: reaction_model
class particle_mixture(NamedObject[particle_mixture_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: particle_mixture_child
class materials(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    database: database
    fluid: fluid
    solid: solid
    mixture: mixture
    inert_particle: inert_particle
    droplet_particle: droplet_particle
    combusting_particle: combusting_particle
    particle_mixture: particle_mixture
    def list_materials(self):
        """
        List case materials.
        """
    def list_properties(self, name: str):
        """
        List case material properties.
        
        Parameters
        ----------
            name : str
                'name' child.
        """
class material_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class participates_in_radiation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class glass(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class laminar(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vapor_phase_realgas(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class active_wetsteam_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class contact_property(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class general_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    material: material_5
    participates_in_radiation: participates_in_radiation
    glass: glass
    laminar: laminar
    vapor_phase_realgas: vapor_phase_realgas
    active_wetsteam_zone: active_wetsteam_zone
    contact_property: contact_property
    _child_aliases: dict
class conical(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class frame_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mrf_relative_to_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_44(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_17(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mrf_omega(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reference_frame_velocity_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reference_frame_velocity(ListObject[reference_frame_velocity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: reference_frame_velocity_child
class reference_frame_axis_origin_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reference_frame_axis_origin(ListObject[reference_frame_axis_origin_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: reference_frame_axis_origin_child
class reference_frame_axis_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reference_frame_axis_direction(ListObject[reference_frame_axis_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: reference_frame_axis_direction_child
class reference_frame_zone_motion_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frame_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    frame_motion: frame_motion
    mrf_relative_to_thread: mrf_relative_to_thread
    mrf_omega: mrf_omega
    reference_frame_velocity: reference_frame_velocity
    reference_frame_axis_origin: reference_frame_axis_origin
    reference_frame_axis_direction: reference_frame_axis_direction
    reference_frame_zone_motion_function: reference_frame_zone_motion_function
    def mrf_toggle_mrf_mgrid_ui(self):
        """
        Copy to Mesh Motion.
        """
    _child_aliases: dict
class enable_12(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mgrid_enable_transient(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mgrid_relative_to_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mgrid_omega(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_mesh_velocity_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_mesh_velocity(ListObject[moving_mesh_velocity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: moving_mesh_velocity_child
class moving_mesh_axis_origin_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_mesh_axis_origin(ListObject[moving_mesh_axis_origin_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: moving_mesh_axis_origin_child
class moving_mesh_axis_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_mesh_axis_direction(ListObject[moving_mesh_axis_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: moving_mesh_axis_direction_child
class moving_mesh_zone_motion_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_motion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable: enable_12
    mgrid_enable_transient: mgrid_enable_transient
    mgrid_relative_to_thread: mgrid_relative_to_thread
    mgrid_omega: mgrid_omega
    moving_mesh_velocity: moving_mesh_velocity
    moving_mesh_axis_origin: moving_mesh_axis_origin
    moving_mesh_axis_direction: moving_mesh_axis_direction
    moving_mesh_zone_motion_function: moving_mesh_zone_motion_function
    def mgrid_toggle_mrf_mgrid_ui(self):
        """
        Copy to Frame Motion.
        """
    _child_aliases: dict
class zonal_models_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_flow_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_pseudo_time_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_time_advancement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_physical_dt_ratio(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class zonal_models(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zonal_models: zonal_models_1
    zonal_flow: zonal_flow
    zonal_flow_spec: zonal_flow_spec
    zonal_pseudo_time_spec: zonal_pseudo_time_spec
    zonal_time_advancement: zonal_time_advancement
    zonal_physical_dt_ratio: zonal_physical_dt_ratio
class porous(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dir_spec_cond(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cursys_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class direction_1_vector_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direction_1_vector(ListObject[direction_1_vector_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: direction_1_vector_child
class direction_2_vector_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direction_2_vector(ListObject[direction_2_vector_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: direction_2_vector_child
class cone_axis_vector_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cone_axis_vector(ListObject[cone_axis_vector_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: cone_axis_vector_child
class point_on_cone_axis_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class point_on_cone_axis(ListObject[point_on_cone_axis_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: point_on_cone_axis_child
class cone_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rel_vel_resistance(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscous_resistance_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class viscous_resistance(ListObject[viscous_resistance_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: viscous_resistance_child
class alt_inertial_form(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inertial_resistance_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class inertial_resistance(ListObject[inertial_resistance_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: inertial_resistance_child
class power_law_model_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class power_law_model(ListObject[power_law_model_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: power_law_model_child
class porosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class option_45(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class function_of_2(String, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class udf_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class piecewise_polynomial_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    range: range
class piecewise_linear_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of_1
    data_points: data_points
class polynomial_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    function_of: function_of
    coefficients: coefficients
class relative_viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class relative_permeability_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class corey(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stone_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stone_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_limit_p1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_limit_p2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_perm_p1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exp_p1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class res_sat_p1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_perm_p2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exp_p2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class res_sat_p2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_perm_p3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exp_p3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class res_sat_p3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class capillary_pressure_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class max_capillary_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class van_genuchten_pg(Real):
    _version: str
    fluent_name: str
    _python_name: str
class van_genuchten_ng(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skjaeveland_nw_pc_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skjaeveland_nw_pc_pwr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skjaeveland_wet_pc_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skjaeveland_wet_pc_pwr(Real):
    _version: str
    fluent_name: str
    _python_name: str
class brooks_corey_pe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class brooks_corey_ng(Real):
    _version: str
    fluent_name: str
    _python_name: str
class leverett_con_ang(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rp_cbox_p1(String):
    _version: str
    fluent_name: str
    _python_name: str
class rp_edit_p1(String):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_tabular_p1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_table_p1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_satw_p1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_rp_p1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rp_cbox_p2(String):
    _version: str
    fluent_name: str
    _python_name: str
class rp_edit_p2(String):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_tabular_p2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_table_p2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_satw_p2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rel_perm_rp_p2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wetting_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class non_wetting_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class equib_thermal(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class non_equib_thermal(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solid_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class area_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class heat_transfer_coeff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class porous_structure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class structure_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anisotropic_spe_diff(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_xx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_xy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_xz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_yx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_yy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_yz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_zx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_zy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spe_diff_zz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_treatment_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rad_porous_wall(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rad_porous_wall_in_emiss(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class rad_porous_wall_diffuse_fraction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class porous_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous: porous
    dir_spec_cond: dir_spec_cond
    cursys_name: cursys_name
    direction_1_vector: direction_1_vector
    direction_2_vector: direction_2_vector
    cone_axis_vector: cone_axis_vector
    point_on_cone_axis: point_on_cone_axis
    cone_angle: cone_angle
    rel_vel_resistance: rel_vel_resistance
    viscous_resistance: viscous_resistance
    alt_inertial_form: alt_inertial_form
    inertial_resistance: inertial_resistance
    power_law_model: power_law_model
    porosity: porosity
    relative_viscosity: relative_viscosity
    relative_permeability: relative_permeability_1
    corey: corey
    stone_1: stone_1
    stone_2: stone_2
    rel_perm_limit_p1: rel_perm_limit_p1
    rel_perm_limit_p2: rel_perm_limit_p2
    ref_perm_p1: ref_perm_p1
    exp_p1: exp_p1
    res_sat_p1: res_sat_p1
    ref_perm_p2: ref_perm_p2
    exp_p2: exp_p2
    res_sat_p2: res_sat_p2
    ref_perm_p3: ref_perm_p3
    exp_p3: exp_p3
    res_sat_p3: res_sat_p3
    capillary_pressure: capillary_pressure_1
    max_capillary_pressure: max_capillary_pressure
    van_genuchten_pg: van_genuchten_pg
    van_genuchten_ng: van_genuchten_ng
    skjaeveland_nw_pc_coef: skjaeveland_nw_pc_coef
    skjaeveland_nw_pc_pwr: skjaeveland_nw_pc_pwr
    skjaeveland_wet_pc_coef: skjaeveland_wet_pc_coef
    skjaeveland_wet_pc_pwr: skjaeveland_wet_pc_pwr
    brooks_corey_pe: brooks_corey_pe
    brooks_corey_ng: brooks_corey_ng
    leverett_con_ang: leverett_con_ang
    rp_cbox_p1: rp_cbox_p1
    rp_edit_p1: rp_edit_p1
    rel_perm_tabular_p1: rel_perm_tabular_p1
    rel_perm_table_p1: rel_perm_table_p1
    rel_perm_satw_p1: rel_perm_satw_p1
    rel_perm_rp_p1: rel_perm_rp_p1
    rp_cbox_p2: rp_cbox_p2
    rp_edit_p2: rp_edit_p2
    rel_perm_tabular_p2: rel_perm_tabular_p2
    rel_perm_table_p2: rel_perm_table_p2
    rel_perm_satw_p2: rel_perm_satw_p2
    rel_perm_rp_p2: rel_perm_rp_p2
    wetting_phase: wetting_phase
    non_wetting_phase: non_wetting_phase
    equib_thermal: equib_thermal
    non_equib_thermal: non_equib_thermal
    solid_material: solid_material
    area_density: area_density
    heat_transfer_coeff: heat_transfer_coeff
    porous_structure: porous_structure
    structure_material: structure_material
    anisotropic_spe_diff: anisotropic_spe_diff
    spe_diff_xx: spe_diff_xx
    spe_diff_xy: spe_diff_xy
    spe_diff_xz: spe_diff_xz
    spe_diff_yx: spe_diff_yx
    spe_diff_yy: spe_diff_yy
    spe_diff_yz: spe_diff_yz
    spe_diff_zx: spe_diff_zx
    spe_diff_zy: spe_diff_zy
    spe_diff_zz: spe_diff_zz
    wall_treatment: wall_treatment_1
    rad_porous_wall: rad_porous_wall
    rad_porous_wall_in_emiss: rad_porous_wall_in_emiss
    rad_porous_wall_diffuse_fraction: rad_porous_wall_diffuse_fraction
    _child_aliases: dict
class fan_zone_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_fan_zone(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fan_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_hub_rad(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_tip_rad(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_origin_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_origin(ListObject[fan_origin_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: fan_origin_child
class fan_rot_dir(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fan_opert_angvel(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_inflection_point(Real):
    _version: str
    fluent_name: str
    _python_name: str
class limit_flow_fan(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_flow_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_flow_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tan_source_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rad_source_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class axial_source_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fan_axial_source_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fan_pre_jump(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_curve_fit(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fan_poly_order(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_ini_flow(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_test_angvel(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_test_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_curve_filename(Filename):
    _version: str
    fluent_name: str
    _python_name: str
class read_fan_curve(String):
    _version: str
    fluent_name: str
    _python_name: str
class fan_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fan_zone: fan_zone_1
    inlet_fan_zone: inlet_fan_zone
    fan_thickness: fan_thickness
    fan_hub_rad: fan_hub_rad
    fan_tip_rad: fan_tip_rad
    fan_origin: fan_origin
    fan_rot_dir: fan_rot_dir
    fan_opert_angvel: fan_opert_angvel
    fan_inflection_point: fan_inflection_point
    limit_flow_fan: limit_flow_fan
    max_flow_rate: max_flow_rate
    min_flow_rate: min_flow_rate
    tan_source_term: tan_source_term
    rad_source_term: rad_source_term
    axial_source_term: axial_source_term
    fan_axial_source_method: fan_axial_source_method
    fan_pre_jump: fan_pre_jump
    fan_curve_fit: fan_curve_fit
    fan_poly_order: fan_poly_order
    fan_ini_flow: fan_ini_flow
    fan_test_angvel: fan_test_angvel
    fan_test_temp: fan_test_temp
    fan_curve_filename: fan_curve_filename
    read_fan_curve: read_fan_curve
    _child_aliases: dict
class les_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class laminar_mut_zero(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class les_embedded_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class les_embedded_mom_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class les_embedded_c_wale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class les_embedded_c_smag(Real):
    _version: str
    fluent_name: str
    _python_name: str
class embedded_les(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    les_zone: les_zone
    laminar_mut_zero: laminar_mut_zero
    les_embedded_spec: les_embedded_spec
    les_embedded_mom_scheme: les_embedded_mom_scheme
    les_embedded_c_wale: les_embedded_c_wale
    les_embedded_c_smag: les_embedded_c_smag
    _child_aliases: dict
class react(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction_mechs_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_volume_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class faradaic_heat(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    react: react
    reaction_mechs: reaction_mechs_1
    surface_volume_ratio: surface_volume_ratio
    faradaic_heat: faradaic_heat
class enable_13(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class terms_child_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class terms_child(ListObject[terms_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: terms_child_child
class terms(NamedObject[terms_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: terms_child
class sources_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_13
    terms: terms
    _child_aliases: dict
class enable_14(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cylindrical_fixed_var(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class variables_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class variables(NamedObject[variables_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: variables_child
class fixed_values(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_14
    cylindrical_fixed_var: cylindrical_fixed_var
    variables: variables
    _child_aliases: dict
class mp_compressive_beta_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mp_boiling_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class numerical_beach(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class beach_id(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class beach_multi_dir(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class beach_damp_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class beach_inlet_bndr(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class beach_fs_level(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_bottom_level(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_dir_ni(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_dir_nj(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_dir_nk(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_damp_len_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class beach_end_point(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_wave_len(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_len_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_start_point(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ni(Real):
    _version: str
    fluent_name: str
    _python_name: str
class nj(Real):
    _version: str
    fluent_name: str
    _python_name: str
class nk(Real):
    _version: str
    fluent_name: str
    _python_name: str
class xe(Real):
    _version: str
    fluent_name: str
    _python_name: str
class len(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_dir_list_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ni: ni
    nj: nj
    nk: nk
    xe: xe
    len: len
class beach_dir_list(ListObject[beach_dir_list_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: beach_dir_list_child
class beach_damp_relative(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class beach_damp_resist_lin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beach_damp_resist(Real):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mp_compressive_beta_max: mp_compressive_beta_max
    mp_boiling_zone: mp_boiling_zone
    numerical_beach: numerical_beach
    beach_id: beach_id
    beach_multi_dir: beach_multi_dir
    beach_damp_type: beach_damp_type
    beach_inlet_bndr: beach_inlet_bndr
    beach_fs_level: beach_fs_level
    beach_bottom_level: beach_bottom_level
    beach_dir_ni: beach_dir_ni
    beach_dir_nj: beach_dir_nj
    beach_dir_nk: beach_dir_nk
    beach_damp_len_spec: beach_damp_len_spec
    beach_end_point: beach_end_point
    beach_wave_len: beach_wave_len
    beach_len_factor: beach_len_factor
    beach_start_point: beach_start_point
    beach_dir_list: beach_dir_list
    beach_damp_relative: beach_damp_relative
    beach_damp_resist_lin: beach_damp_resist_lin
    beach_damp_resist: beach_damp_resist
class udf_zmotion_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class axis_direction_1(ListObject[axis_direction_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_direction_1_child
class axis_origin_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class axis_origin_1(ListObject[axis_origin_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_origin_1_child
class cursys(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solid_omega(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class solid_relative_to_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enable_15(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solid_motion_axis_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class solid_motion_axis_direction(ListObject[solid_motion_axis_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: solid_motion_axis_direction_child
class solid_motion_axis_origin_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class solid_motion_axis_origin(ListObject[solid_motion_axis_origin_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: solid_motion_axis_origin_child
class solid_motion_velocity_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class solid_motion_velocity(ListObject[solid_motion_velocity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: solid_motion_velocity_child
class solid_motion_zone_motion_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class omega_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class relative_to_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class motion_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class disabled(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    udf_zmotion_name: udf_zmotion_name
    axis_direction: axis_direction_1
    axis_origin: axis_origin_1
    cursys: cursys
    solid_omega: solid_omega
    solid_relative_to_thread: solid_relative_to_thread
    enable: enable_15
    solid_motion_axis_direction: solid_motion_axis_direction
    solid_motion_axis_origin: solid_motion_axis_origin
    solid_motion_velocity: solid_motion_velocity
    solid_motion_zone_motion_function: solid_motion_zone_motion_function
    omega: omega_1
    relative_to_thread: relative_to_thread
    motion_spec: motion_spec
    _child_aliases: dict
class phase_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    general: general_2
    conical: conical
    reference_frame: reference_frame_2
    mesh_motion: mesh_motion
    zonal_models: zonal_models
    porous_zone: porous_zone
    fan_zone: fan_zone
    embedded_les: embedded_les
    reaction: reaction
    sources: sources_1
    fixed_values: fixed_values
    multiphase: multiphase_1
    disabled: disabled
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase(NamedObject[phase_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_child
class fluid_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase
    general: general_2
    conical: conical
    reference_frame: reference_frame_2
    mesh_motion: mesh_motion
    zonal_models: zonal_models
    porous_zone: porous_zone
    fan_zone: fan_zone
    embedded_les: embedded_les
    reaction: reaction
    sources: sources_1
    fixed_values: fixed_values
    multiphase: multiphase_1
    disabled: disabled
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class fluid_1(NamedObject[fluid_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fluid_1_child
class general_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    material: material_5
    participates_in_radiation: participates_in_radiation
    _child_aliases: dict
class reference_frame_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    frame_motion: frame_motion
    mrf_relative_to_thread: mrf_relative_to_thread
    mrf_omega: mrf_omega
    reference_frame_velocity: reference_frame_velocity
    reference_frame_axis_origin: reference_frame_axis_origin
    reference_frame_axis_direction: reference_frame_axis_direction
    reference_frame_zone_motion_function: reference_frame_zone_motion_function
    _child_aliases: dict
class mesh_motion_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_12
    mgrid_enable_transient: mgrid_enable_transient
    mgrid_relative_to_thread: mgrid_relative_to_thread
    mgrid_omega: mgrid_omega
    moving_mesh_velocity: moving_mesh_velocity
    moving_mesh_axis_origin: moving_mesh_axis_origin
    moving_mesh_axis_direction: moving_mesh_axis_direction
    moving_mesh_zone_motion_function: moving_mesh_zone_motion_function
    _child_aliases: dict
class solid_motion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable: enable_15
    solid_relative_to_thread: solid_relative_to_thread
    solid_omega: solid_omega
    solid_motion_velocity: solid_motion_velocity
    solid_motion_axis_origin: solid_motion_axis_origin
    solid_motion_axis_direction: solid_motion_axis_direction
    solid_motion_zone_motion_function: solid_motion_zone_motion_function
    def solid_toggle_mrf_mgrid_ui(self):
        """
        Copy to Mesh Motion.
        """
    _child_aliases: dict
class cursys_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class material_orientation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cursys: cursys_1
    cursys_name: cursys_name
class les_zone_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class disabled_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    les_zone: les_zone_1
    udf_zmotion_name: udf_zmotion_name
    axis_origin: axis_origin_1
    axis_direction: axis_direction_1
    omega: omega_1
    relative_to_thread: relative_to_thread
    motion_spec: motion_spec
    cylindrical_fixed_var: cylindrical_fixed_var
    _child_aliases: dict
class ecad_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class choice(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rows(Real):
    _version: str
    fluent_name: str
    _python_name: str
class columns(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ref_frame(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pwr_names(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pcb_zone_info(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ecad_name: ecad_name
    choice: choice
    rows: rows
    columns: columns
    ref_frame: ref_frame
    pwr_names: pwr_names
class pcb_model(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class internal(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pcb_zone_info: pcb_zone_info
    pcb_model: pcb_model
    vapor_phase_realgas: vapor_phase_realgas
    active_wetsteam_zone: active_wetsteam_zone
    contact_property: contact_property
    _child_aliases: dict
class phase_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    general: general_3
    reference_frame: reference_frame_3
    mesh_motion: mesh_motion_1
    solid_motion: solid_motion
    sources: sources_1
    fixed_values: fixed_values
    material_orientation: material_orientation
    disabled: disabled_1
    internal: internal
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_1(NamedObject[phase_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_1_child
class solid_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_1
    general: general_3
    reference_frame: reference_frame_3
    mesh_motion: mesh_motion_1
    solid_motion: solid_motion
    sources: sources_1
    fixed_values: fixed_values
    material_orientation: material_orientation
    disabled: disabled_1
    internal: internal
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class solid_2(NamedObject[solid_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: solid_2_child
class cell_zone_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    fluid: fluid_1
    solid: solid_2
    def copy(self, from_: str, to: list[str], verbosity: bool):
        """
        Copy boundary conditions to another zone.
        
        Parameters
        ----------
            from_ : str
                Copy boundary conditions from zone.
            to : List
                Copy boundary conditions to zone.
            verbosity : bool
                Copy boundary conditions: Print more information.
        """
    def set_zone_type(self, zone_list: list[str], new_type: str):
        """
        Set a zone's type.
        
        Parameters
        ----------
            zone_list : List
                Zone name list.
            new_type : str
                Give new zone type.
        """
    def activate_cell_zone(self, cell_zone_list: list[str]):
        """
        Activate a cell thread.
        
        Parameters
        ----------
            cell_zone_list : List
                Id/name of cell-zones to activate.
        """
    def mrf_to_sliding_mesh(self, cell_zone_name: str):
        """
        Change motion specification from MRF to moving mesh.
        
        Parameters
        ----------
            cell_zone_name : str
                The cell zone name.
        """
    def convert_all_solid_mrf_to_solid_motion(self):
        """
        Change all solid zones motion specification from MRF to solid motion.
        """
    def copy_mrf_to_mesh_motion(self, zone_name: str, overwrite: bool):
        """
        Copy motion variable values for origin, axis and velocities from Frame Motion to Mesh Motion.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
            overwrite : bool
                Specifies whether you want to overwrite the motion variables.
        """
    def copy_mesh_to_mrf_motion(self, zone_name: str, overwrite: bool):
        """
        Copy motion variable values for origin, axis and velocities from Mesh Motion to Frame Motion.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
            overwrite : bool
                Specifies whether you want to overwrite the motion variables.
        """
    def dual_potential_zone(self, detect_type: str, dual_zone: list[str], exclusion_zone: list[str], electrode_zone: list[str], electrolyte_zone: list[str]):
        """
        Dual-potential zone assignment.
        
        Parameters
        ----------
            detect_type : str
                Zone selection method.
            dual_zone : List
                Dual-potential zones.
            exclusion_zone : List
                Exclusion zones.
            electrode_zone : List
                Electrode zones.
            electrolyte_zone : List
                Electrolyte zones.
        """
class name_11(String):
    _version: str
    fluent_name: str
    _python_name: str
class faces_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_11
class faces(NamedObject[faces_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: faces_child
class bodies_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_11
    faces: faces
    def create_baffle_face(self, name: str):
        """
        Create 2-sided baffle or shared face.
        
        Parameters
        ----------
            name : str
                Input new baffle name.
        """
class bodies(NamedObject[bodies_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: bodies_child
class components_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class groups_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    components: components_1
class groups(NamedObject[groups_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: groups_child
class parts_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_11
    bodies: bodies
    groups: groups
    def display(self, locations: list[str]):
        """
        Display topology part command.
        """
class parts(NamedObject[parts_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: parts_child
class model_topology(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    parts: parts
    def list_topology(self):
        """
        List topology model information.
        """
class locations_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geom_disable(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class geom_dir_spec(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class geom_dir_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class geom_dir_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class geom_dir_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class geom_levels(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class geom_bgthread(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    geom_disable: geom_disable
    geom_dir_spec: geom_dir_spec
    geom_dir_x: geom_dir_x
    geom_dir_y: geom_dir_y
    geom_dir_z: geom_dir_z
    geom_levels: geom_levels
    geom_bgthread: geom_bgthread
class phase_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    geometry: geometry_6
class phase_3(NamedObject[phase_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_3_child
class settings_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    geometry: geometry_6
    phase: phase_3
class axis_5_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class axis_5(NamedObject[axis_5_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: axis_5_child
class degassing_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class degassing(NamedObject[degassing_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: degassing_child
class system_coupling_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_reference_frame(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_spec_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class gauge_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pressure_profile_multiplier(Real):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_dir_spec_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coordinate_system(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flow_direction(ListObject[flow_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: flow_direction_child
class backflow_pressure_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_pressure_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_2_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_2(ListObject[axis_direction_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_direction_2_child
class axis_origin_2_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_origin_2(ListObject[axis_origin_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_origin_2_child
class prevent_reverse_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radial_equ_pressure_distribution(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radial_equ_reference_position(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class radial_equ_specified_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radial_equ_specified_span(Real):
    _version: str
    fluent_name: str
    _python_name: str
class avg_pressure_spec(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class avg_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class target_mass_flow_rate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class target_mass_flow(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class upper_limit_of_abs_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class lower_limit_of_abs_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class acoustic_wave_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class exit_pressure_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class impedance_zero_order_term(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pole(Real):
    _version: str
    fluent_name: str
    _python_name: str
class amplitude(Real):
    _version: str
    fluent_name: str
    _python_name: str
class real_pole_series_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pole: pole
    amplitude: amplitude
class real_pole_series(ListObject[real_pole_series_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: real_pole_series_child
class pole_real(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pole_imag(Real):
    _version: str
    fluent_name: str
    _python_name: str
class amplitude_real(Real):
    _version: str
    fluent_name: str
    _python_name: str
class amplitude_imag(Real):
    _version: str
    fluent_name: str
    _python_name: str
class complex_pole_series_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pole_real: pole_real
    pole_imag: pole_imag
    amplitude_real: amplitude_real
    amplitude_imag: amplitude_imag
class complex_pole_series(ListObject[complex_pole_series_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: complex_pole_series_child
class incoming_wave(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pressure_jump(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class strength(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class new_fan_definition(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class momentum(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    system_coupling: system_coupling_1
    backflow_reference_frame: backflow_reference_frame
    pressure_spec: pressure_spec
    pressure_spec_method: pressure_spec_method
    gauge_pressure: gauge_pressure
    pressure_profile_multiplier: pressure_profile_multiplier
    backflow_dir_spec_method: backflow_dir_spec_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    backflow_pressure_spec: backflow_pressure_spec
    backflow_pressure_specification: backflow_pressure_specification
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow
    radial_equ_pressure_distribution: radial_equ_pressure_distribution
    radial_equ_reference_position: radial_equ_reference_position
    radial_equ_specified_radius: radial_equ_specified_radius
    radial_equ_specified_span: radial_equ_specified_span
    avg_pressure_spec: avg_pressure_spec
    avg_method: avg_method
    target_mass_flow_rate: target_mass_flow_rate
    target_mass_flow: target_mass_flow
    upper_limit_of_abs_pressure: upper_limit_of_abs_pressure
    lower_limit_of_abs_pressure: lower_limit_of_abs_pressure
    acoustic_wave_model: acoustic_wave_model
    exit_pressure_spec: exit_pressure_spec
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    pressure_jump: pressure_jump
    strength: strength
    new_fan_definition: new_fan_definition
    _child_aliases: dict
class turbulence_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_modified_turbulent_viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_laminar_kinetic_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_intermittency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_turbulent_kinetic_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_turbulent_dissipation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_specific_dissipation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_velocity_variance_scale(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_turbulent_intensity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_turbulent_length_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_hydraulic_diameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_turbulent_viscosity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_turbulent_viscosity_ratio_profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reynolds_stress_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_uu_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_vv_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_ww_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_uv_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_vw_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_uw_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class subgrid_kinetic_energy_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class subgrid_kinetic_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class subgrid_turbulent_intensity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulence_specification: turbulence_specification
    backflow_modified_turbulent_viscosity: backflow_modified_turbulent_viscosity
    backflow_laminar_kinetic_energy: backflow_laminar_kinetic_energy
    backflow_intermittency: backflow_intermittency
    backflow_turbulent_kinetic_energy: backflow_turbulent_kinetic_energy
    backflow_turbulent_dissipation_rate: backflow_turbulent_dissipation_rate
    backflow_specific_dissipation_rate: backflow_specific_dissipation_rate
    backflow_velocity_variance_scale: backflow_velocity_variance_scale
    backflow_turbulent_intensity: backflow_turbulent_intensity
    backflow_turbulent_length_scale: backflow_turbulent_length_scale
    backflow_hydraulic_diameter: backflow_hydraulic_diameter
    backflow_turbulent_viscosity_ratio: backflow_turbulent_viscosity_ratio
    backflow_turbulent_viscosity_ratio_profile: backflow_turbulent_viscosity_ratio_profile
    reynolds_stress_specification: reynolds_stress_specification
    backflow_uu_reynolds_stresses: backflow_uu_reynolds_stresses
    backflow_vv_reynolds_stresses: backflow_vv_reynolds_stresses
    backflow_ww_reynolds_stresses: backflow_ww_reynolds_stresses
    backflow_uv_reynolds_stresses: backflow_uv_reynolds_stresses
    backflow_vw_reynolds_stresses: backflow_vw_reynolds_stresses
    backflow_uw_reynolds_stresses: backflow_uw_reynolds_stresses
    subgrid_kinetic_energy_specification: subgrid_kinetic_energy_specification
    subgrid_kinetic_energy: subgrid_kinetic_energy
    subgrid_turbulent_intensity: subgrid_turbulent_intensity
    _child_aliases: dict
class backflow_total_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    backflow_total_temperature: backflow_total_temperature
    _child_aliases: dict
class radiation_bc(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class theta_width_of_beam(Real):
    _version: str
    fluent_name: str
    _python_name: str
class phi_width_of_beam(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beam_width(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    theta_width_of_beam: theta_width_of_beam
    phi_width_of_beam: phi_width_of_beam
    _child_aliases: dict
class use_beeam_direction_from_solar_load_model_settings(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_irradiation_from_solar_soad_model_settings(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class direct_irradiation_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direct_irradiation(NamedObject[direct_irradiation_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: direct_irradiation_child
class parallel_collimated_beam(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class beam_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class beam_direction(ListObject[beam_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: beam_direction_child
class direct_irradiation_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direct_irradiation: direct_irradiation
    parallel_collimated_beam: parallel_collimated_beam
    beam_direction: beam_direction
    _child_aliases: dict
class diffuse_irradiation_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class diffuse_irradiation(NamedObject[diffuse_irradiation_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: diffuse_irradiation_child
class diffuse_irradiation_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffuse_irradiation: diffuse_irradiation
    _child_aliases: dict
class external_black_body_temperature_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class black_body_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class internal_emissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class participates_in_view_factor_calculation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class participates_in_solar_ray_tracing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solar_transmissivity_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radiation_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    internal_emissivity: internal_emissivity
    participates_in_view_factor_calculation: participates_in_view_factor_calculation
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class mean_mixture_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class secondary_mean_mixture_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class mixture_fraction_variance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class secondary_mixture_fraction_variance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class specify_species_in_mole_fractions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_species_mass_fraction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_species_mass_fraction(NamedObject[backflow_species_mass_fraction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: backflow_species_mass_fraction_child
class species_mole_fraction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_mole_fraction(NamedObject[species_mole_fraction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_mole_fraction_child
class backflow_mixture_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_mode_2_probability(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_mode_3_probability(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_progress_variable(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_progress_variable_variance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_flame_area_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_inert_stream(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_no_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hcn_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_nh3_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_n2o_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_urea_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hnco_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_nco_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_so2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_h2s_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_so3_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_sh_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_so_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_soot_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_nuclei(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_tar_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hg_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hgcl2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hcl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hgo_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_cl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_cl2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hgcl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_pollutant_hocl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class tss_scalar_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class tss_scalar(NamedObject[tss_scalar_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: tss_scalar_child
class species_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mean_mixture_fraction: mean_mixture_fraction
    secondary_mean_mixture_fraction: secondary_mean_mixture_fraction
    mixture_fraction_variance: mixture_fraction_variance
    secondary_mixture_fraction_variance: secondary_mixture_fraction_variance
    specify_species_in_mole_fractions: specify_species_in_mole_fractions
    backflow_species_mass_fraction: backflow_species_mass_fraction
    species_mole_fraction: species_mole_fraction
    backflow_mixture_fraction: backflow_mixture_fraction
    backflow_mode_2_probability: backflow_mode_2_probability
    backflow_mode_3_probability: backflow_mode_3_probability
    backflow_progress_variable: backflow_progress_variable
    backflow_progress_variable_variance: backflow_progress_variable_variance
    backflow_flame_area_density: backflow_flame_area_density
    backflow_inert_stream: backflow_inert_stream
    backflow_pollutant_no_mass_fraction: backflow_pollutant_no_mass_fraction
    backflow_pollutant_hcn_mass_fraction: backflow_pollutant_hcn_mass_fraction
    backflow_pollutant_nh3_mass_fraction: backflow_pollutant_nh3_mass_fraction
    backflow_pollutant_n2o_mass_fraction: backflow_pollutant_n2o_mass_fraction
    backflow_pollutant_urea_mass_fraction: backflow_pollutant_urea_mass_fraction
    backflow_pollutant_hnco_mass_fraction: backflow_pollutant_hnco_mass_fraction
    backflow_pollutant_nco_mass_fraction: backflow_pollutant_nco_mass_fraction
    backflow_pollutant_so2_mass_fraction: backflow_pollutant_so2_mass_fraction
    backflow_pollutant_h2s_mass_fraction: backflow_pollutant_h2s_mass_fraction
    backflow_pollutant_so3_mass_fraction: backflow_pollutant_so3_mass_fraction
    backflow_pollutant_sh_mass_fraction: backflow_pollutant_sh_mass_fraction
    backflow_pollutant_so_mass_fraction: backflow_pollutant_so_mass_fraction
    backflow_soot_mass_fraction: backflow_soot_mass_fraction
    backflow_nuclei: backflow_nuclei
    backflow_tar_mass_fraction: backflow_tar_mass_fraction
    backflow_pollutant_hg_mass_fraction: backflow_pollutant_hg_mass_fraction
    backflow_pollutant_hgcl2_mass_fraction: backflow_pollutant_hgcl2_mass_fraction
    backflow_pollutant_hcl_mass_fraction: backflow_pollutant_hcl_mass_fraction
    backflow_pollutant_hgo_mass_fraction: backflow_pollutant_hgo_mass_fraction
    backflow_pollutant_cl_mass_fraction: backflow_pollutant_cl_mass_fraction
    backflow_pollutant_cl2_mass_fraction: backflow_pollutant_cl2_mass_fraction
    backflow_pollutant_hgcl_mass_fraction: backflow_pollutant_hgcl_mass_fraction
    backflow_pollutant_hocl_mass_fraction: backflow_pollutant_hocl_mass_fraction
    tss_scalar: tss_scalar
    _child_aliases: dict
class bc_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reinject_using_injection(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class bc_user_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dem_collision_partner(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mixing_plane_thread(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class discrete_phase_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bc_type: bc_type_1
    reinject_using_injection: reinject_using_injection
    bc_user_function: bc_user_function
    dem_collision_partner: dem_collision_partner
    mixing_plane_thread: mixing_plane_thread
    _child_aliases: dict
class open_channel(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class outlet_group_id(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class phase_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class free_surface_level(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class bottom_level(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class density_interpolation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_granular_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_interfacial_area_concentration(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_level_set_function_flux(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class volume_frac_spec_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class backflow_volume_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class discrete_boundary_condition_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class discrete_boundary_condition(NamedObject[discrete_boundary_condition_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: discrete_boundary_condition_child
class discrete_boundary_value_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class discrete_boundary_value(NamedObject[discrete_boundary_value_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: discrete_boundary_value_child
class quadrature_moment_boundary_condition_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class quadrature_moment_boundary_condition(NamedObject[quadrature_moment_boundary_condition_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: quadrature_moment_boundary_condition_child
class quadrature_moment_boundary_value_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class quadrature_moment_boundary_value(NamedObject[quadrature_moment_boundary_value_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: quadrature_moment_boundary_value_child
class qbmm_boundary_condition_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class qbmm_boundary_condition(NamedObject[qbmm_boundary_condition_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: qbmm_boundary_condition_child
class qbmm_boundary_value_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class qbmm_boundary_value(NamedObject[qbmm_boundary_value_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: qbmm_boundary_value_child
class std_moment_boundary_condition_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class std_moment_boundary_condition(NamedObject[std_moment_boundary_condition_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: std_moment_boundary_condition_child
class std_moment_boundary_value_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class std_moment_boundary_value(NamedObject[std_moment_boundary_value_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: std_moment_boundary_value_child
class dqmom_boundary_condition_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dqmom_boundary_condition(NamedObject[dqmom_boundary_condition_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: dqmom_boundary_condition_child
class dqmom_boundary_value_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class dqmom_boundary_value(NamedObject[dqmom_boundary_value_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: dqmom_boundary_value_child
class population_balance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    discrete_boundary_condition: discrete_boundary_condition
    discrete_boundary_value: discrete_boundary_value
    quadrature_moment_boundary_condition: quadrature_moment_boundary_condition
    quadrature_moment_boundary_value: quadrature_moment_boundary_value
    qbmm_boundary_condition: qbmm_boundary_condition
    qbmm_boundary_value: qbmm_boundary_value
    std_moment_boundary_condition: std_moment_boundary_condition
    std_moment_boundary_value: std_moment_boundary_value
    dqmom_boundary_condition: dqmom_boundary_condition
    dqmom_boundary_value: dqmom_boundary_value
    _child_aliases: dict
class backflow_relative_humidity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_liquid_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class backflow_log10_droplets_per_unit_volume(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class multiphase_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    open_channel: open_channel
    outlet_group_id: outlet_group_id
    phase_spec: phase_spec
    free_surface_level: free_surface_level
    bottom_level: bottom_level
    density_interpolation_method: density_interpolation_method
    backflow_granular_temperature: backflow_granular_temperature
    backflow_interfacial_area_concentration: backflow_interfacial_area_concentration
    backflow_level_set_function_flux: backflow_level_set_function_flux
    volume_frac_spec_method: volume_frac_spec_method
    backflow_volume_fraction: backflow_volume_fraction
    population_balance: population_balance
    backflow_relative_humidity: backflow_relative_humidity
    backflow_liquid_mass_fraction: backflow_liquid_mass_fraction
    backflow_log10_droplets_per_unit_volume: backflow_log10_droplets_per_unit_volume
    _child_aliases: dict
class potential_boundary_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class potential_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class electrolyte_potential_boundary_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class current_density_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class potential(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    potential_boundary_condition: potential_boundary_condition
    potential_boundary_value: potential_boundary_value
    electrolyte_potential_boundary_condition: electrolyte_potential_boundary_condition
    current_density_boundary_value: current_density_boundary_value
    _child_aliases: dict
class x_disp_boundary_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_disp_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class y_disp_boundary_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_disp_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class z_disp_boundary_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_disp_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class structure_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_disp_boundary_condition: x_disp_boundary_condition
    x_disp_boundary_value: x_disp_boundary_value
    y_disp_boundary_condition: y_disp_boundary_condition
    y_disp_boundary_value: y_disp_boundary_value
    z_disp_boundary_condition: z_disp_boundary_condition
    z_disp_boundary_value: z_disp_boundary_value
    _child_aliases: dict
class uds_bc_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class uds_bc(NamedObject[uds_bc_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: uds_bc_child
class uds_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class uds_1(NamedObject[uds_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: uds_1_child
class uds(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    uds_bc: uds_bc
    uds: uds_1
class fensapice_flow_bc_subtype(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_outlet_condition(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_rh_mode(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_vrh(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_vc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class icing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fensapice_flow_bc_subtype: fensapice_flow_bc_subtype
    fensapice_dpm_outlet_condition: fensapice_dpm_outlet_condition
    fensapice_dpm_rh_mode: fensapice_dpm_rh_mode
    fensapice_drop_vrh: fensapice_drop_vrh
    fensapice_drop_vc: fensapice_drop_vc
class phase_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
class phase_4(NamedObject[phase_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_4_child
class settings_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_4
class exhaust_fan_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_2
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class exhaust_fan(NamedObject[exhaust_fan_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: exhaust_fan_child
class porous_jump_turb_wall_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reverse_fan_direction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dir_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dir_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dir_z(Real):
    _version: str
    fluent_name: str
    _python_name: str
class zone_average_direction_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class zone_average_direction(ListObject[zone_average_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: zone_average_direction_child
class profile_specification_of_pressure_jump(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_jump_profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class limit_polynomial_velocity_range(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_velocity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_velocity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cal_pressure_jump_from_avg_conditions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_jump_specification(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_jump_turb_wall_treatment: porous_jump_turb_wall_treatment
    reverse_fan_direction: reverse_fan_direction
    dir_x: dir_x
    dir_y: dir_y
    dir_z: dir_z
    zone_average_direction: zone_average_direction
    profile_specification_of_pressure_jump: profile_specification_of_pressure_jump
    pressure_jump: pressure_jump
    pressure_jump_profile: pressure_jump_profile
    limit_polynomial_velocity_range: limit_polynomial_velocity_range
    min_velocity: min_velocity
    max_velocity: max_velocity
    strength: strength
    cal_pressure_jump_from_avg_conditions: cal_pressure_jump_from_avg_conditions
    new_fan_definition: new_fan_definition
    _child_aliases: dict
class specify_swirl_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fan_axis_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_axis(ListObject[fan_axis_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: fan_axis_child
class fan_origin_1_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fan_origin_1(ListObject[fan_origin_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: fan_origin_1_child
class fan_hub_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class profile_specification_of_tangential_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tangential_velocity_profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class tangential_velocity_polynomial_coeff(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class profile_specification_of_radial_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radial_velocity_profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class radial_velocity_polynomial_coeff(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_velocity_specification(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    specify_swirl_velocity: specify_swirl_velocity
    fan_axis: fan_axis
    fan_origin: fan_origin_1
    fan_hub_radius: fan_hub_radius
    profile_specification_of_tangential_velocity: profile_specification_of_tangential_velocity
    tangential_velocity_profile: tangential_velocity_profile
    tangential_velocity_polynomial_coeff: tangential_velocity_polynomial_coeff
    profile_specification_of_radial_velocity: profile_specification_of_radial_velocity
    radial_velocity_profile: radial_velocity_profile
    radial_velocity_polynomial_coeff: radial_velocity_polynomial_coeff
    swirl_factor: swirl_factor
    _child_aliases: dict
class discrete_phase_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bc_type: bc_type_1
    reinject_using_injection: reinject_using_injection
    bc_user_function: bc_user_function
    dem_collision_partner: dem_collision_partner
    _child_aliases: dict
class phase_5_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pressure_jump_specification: pressure_jump_specification
    swirl_velocity_specification: swirl_velocity_specification
    discrete_phase: discrete_phase_2
    geometry: geometry_6
class phase_5(NamedObject[phase_5_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_5_child
class settings_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pressure_jump_specification: pressure_jump_specification
    swirl_velocity_specification: swirl_velocity_specification
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_5
class fan_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_3
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class fan(NamedObject[fan_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fan_child
class geometry_5_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class geometry_5(NamedObject[geometry_5_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: geometry_5_child
class reference_frame_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class gauge_total_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class supersonic_or_initial_gauge_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direction_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class direction_vector_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direction_vector(ListObject[direction_vector_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: direction_vector_child
class prevent_reverse_flow_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class loss_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class momentum_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_4
    gauge_total_pressure: gauge_total_pressure
    supersonic_or_initial_gauge_pressure: supersonic_or_initial_gauge_pressure
    direction_specification_method: direction_specification_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    direction_vector: direction_vector
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow_1
    acoustic_wave_model: acoustic_wave_model
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    loss_coefficient: loss_coefficient
    strength: strength
    _child_aliases: dict
class number_of_vortices(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class streamwise_fluctuations(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class satisfy_mass_conservation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scale_search_limiter(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class stg_turbulent_intensity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class stg_turbulent_viscosity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class volumetric_forcing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class forcing_zone_thickness(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volumetric_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class les_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fluctuating_velocity_algorithm(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class modified_turbulent_viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class laminar_kinetic_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class intermittency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class turbulent_kinetic_energy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class turbulent_dissipation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class specific_dissipation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class velocity_variance_scale(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class turbulent_intensity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_length_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class hydraulic_diameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_viscosity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_viscosity_ratio_profile(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class number_of_fourier_modes(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class uu_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class vv_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ww_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class uv_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class vw_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class uw_reynolds_stresses(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class turbulence_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_vortices: number_of_vortices
    streamwise_fluctuations: streamwise_fluctuations
    satisfy_mass_conservation: satisfy_mass_conservation
    scale_search_limiter: scale_search_limiter
    stg_turbulent_intensity: stg_turbulent_intensity
    stg_turbulent_viscosity_ratio: stg_turbulent_viscosity_ratio
    wall_distance: wall_distance
    volumetric_forcing: volumetric_forcing
    forcing_zone_thickness: forcing_zone_thickness
    volumetric_thickness: volumetric_thickness
    les_spec: les_spec
    fluctuating_velocity_algorithm: fluctuating_velocity_algorithm
    turbulence_specification: turbulence_specification
    modified_turbulent_viscosity: modified_turbulent_viscosity
    laminar_kinetic_energy: laminar_kinetic_energy
    intermittency: intermittency
    turbulent_kinetic_energy: turbulent_kinetic_energy
    turbulent_dissipation_rate: turbulent_dissipation_rate
    specific_dissipation_rate: specific_dissipation_rate
    velocity_variance_scale: velocity_variance_scale
    turbulent_intensity: turbulent_intensity
    turbulent_length_scale: turbulent_length_scale
    hydraulic_diameter: hydraulic_diameter
    turbulent_viscosity_ratio: turbulent_viscosity_ratio
    turbulent_viscosity_ratio_profile: turbulent_viscosity_ratio_profile
    subgrid_kinetic_energy_specification: subgrid_kinetic_energy_specification
    subgrid_kinetic_energy: subgrid_kinetic_energy
    subgrid_turbulent_intensity: subgrid_turbulent_intensity
    number_of_fourier_modes: number_of_fourier_modes
    reynolds_stress_specification: reynolds_stress_specification
    uu_reynolds_stresses: uu_reynolds_stresses
    vv_reynolds_stresses: vv_reynolds_stresses
    ww_reynolds_stresses: ww_reynolds_stresses
    uv_reynolds_stresses: uv_reynolds_stresses
    vw_reynolds_stresses: vw_reynolds_stresses
    uw_reynolds_stresses: uw_reynolds_stresses
    _child_aliases: dict
class total_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    total_temperature: total_temperature
    _child_aliases: dict
class radiating_s2s_surface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radiation_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    internal_emissivity: internal_emissivity
    radiating_s2s_surface: radiating_s2s_surface
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class mixture_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class mode_2_probability(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class mode_3_probability(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class equilibrate_inlet_stream(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_mass_fraction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_mass_fraction(NamedObject[species_mass_fraction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_mass_fraction_child
class progress_variable(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class progress_variable_variance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flame_area_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class inert_stream(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_no_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hcn_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_nh3_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_n2o_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_urea_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hnco_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_nco_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_so2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_h2s_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_so3_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_sh_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_so_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class soot_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class nuclei(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class tar_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hg_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hgcl2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hcl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hgo_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_cl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_cl2_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hgcl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pollutant_hocl_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mixture_fraction: mixture_fraction
    mode_2_probability: mode_2_probability
    mode_3_probability: mode_3_probability
    equilibrate_inlet_stream: equilibrate_inlet_stream
    mean_mixture_fraction: mean_mixture_fraction
    mixture_fraction_variance: mixture_fraction_variance
    secondary_mean_mixture_fraction: secondary_mean_mixture_fraction
    secondary_mixture_fraction_variance: secondary_mixture_fraction_variance
    specify_species_in_mole_fractions: specify_species_in_mole_fractions
    species_mass_fraction: species_mass_fraction
    species_mole_fraction: species_mole_fraction
    progress_variable: progress_variable
    progress_variable_variance: progress_variable_variance
    flame_area_density: flame_area_density
    inert_stream: inert_stream
    pollutant_no_mass_fraction: pollutant_no_mass_fraction
    pollutant_hcn_mass_fraction: pollutant_hcn_mass_fraction
    pollutant_nh3_mass_fraction: pollutant_nh3_mass_fraction
    pollutant_n2o_mass_fraction: pollutant_n2o_mass_fraction
    pollutant_urea_mass_fraction: pollutant_urea_mass_fraction
    pollutant_hnco_mass_fraction: pollutant_hnco_mass_fraction
    pollutant_nco_mass_fraction: pollutant_nco_mass_fraction
    pollutant_so2_mass_fraction: pollutant_so2_mass_fraction
    pollutant_h2s_mass_fraction: pollutant_h2s_mass_fraction
    pollutant_so3_mass_fraction: pollutant_so3_mass_fraction
    pollutant_sh_mass_fraction: pollutant_sh_mass_fraction
    pollutant_so_mass_fraction: pollutant_so_mass_fraction
    soot_mass_fraction: soot_mass_fraction
    nuclei: nuclei
    tar_mass_fraction: tar_mass_fraction
    pollutant_hg_mass_fraction: pollutant_hg_mass_fraction
    pollutant_hgcl2_mass_fraction: pollutant_hgcl2_mass_fraction
    pollutant_hcl_mass_fraction: pollutant_hcl_mass_fraction
    pollutant_hgo_mass_fraction: pollutant_hgo_mass_fraction
    pollutant_cl_mass_fraction: pollutant_cl_mass_fraction
    pollutant_cl2_mass_fraction: pollutant_cl2_mass_fraction
    pollutant_hgcl_mass_fraction: pollutant_hgcl_mass_fraction
    pollutant_hocl_mass_fraction: pollutant_hocl_mass_fraction
    tss_scalar: tss_scalar
    _child_aliases: dict
class open_channel_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_number(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class phase_spec_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flow_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ht_bottom(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ht_total(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class vmag(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class den_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class granular_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class interfacial_area_concentration(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class level_set_function_flux(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class volume_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class relative_humidity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class liquid_mass_fraction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class log10_droplets_per_unit_volume(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class multiphase_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    open_channel: open_channel_1
    inlet_number: inlet_number
    phase_spec: phase_spec_1
    flow_spec: flow_spec
    free_surface_level: free_surface_level
    ht_bottom: ht_bottom
    ht_total: ht_total
    vmag: vmag
    den_spec: den_spec
    granular_temperature: granular_temperature
    interfacial_area_concentration: interfacial_area_concentration
    level_set_function_flux: level_set_function_flux
    volume_fraction: volume_fraction
    population_balance: population_balance
    relative_humidity: relative_humidity
    liquid_mass_fraction: liquid_mass_fraction
    log10_droplets_per_unit_volume: log10_droplets_per_unit_volume
    _child_aliases: dict
class fensapice_drop_bccustom(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_lwc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_dtemp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_ddiam(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_dv(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_dx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_dy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_dz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_surface_injection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_inj_nstream(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_icc(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_ctemp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cmelt(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cdiam(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cv(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_cz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_vrh_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_vrh_1_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class icing_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fensapice_flow_bc_subtype: fensapice_flow_bc_subtype
    fensapice_drop_bccustom: fensapice_drop_bccustom
    fensapice_drop_lwc: fensapice_drop_lwc
    fensapice_drop_dtemp: fensapice_drop_dtemp
    fensapice_drop_ddiam: fensapice_drop_ddiam
    fensapice_drop_dv: fensapice_drop_dv
    fensapice_drop_dx: fensapice_drop_dx
    fensapice_drop_dy: fensapice_drop_dy
    fensapice_drop_dz: fensapice_drop_dz
    fensapice_dpm_surface_injection: fensapice_dpm_surface_injection
    fensapice_dpm_inj_nstream: fensapice_dpm_inj_nstream
    fensapice_dpm_rh_mode: fensapice_dpm_rh_mode
    fensapice_drop_icc: fensapice_drop_icc
    fensapice_drop_ctemp: fensapice_drop_ctemp
    fensapice_drop_cmelt: fensapice_drop_cmelt
    fensapice_drop_cdiam: fensapice_drop_cdiam
    fensapice_drop_cv: fensapice_drop_cv
    fensapice_drop_cx: fensapice_drop_cx
    fensapice_drop_cy: fensapice_drop_cy
    fensapice_drop_cz: fensapice_drop_cz
    fensapice_drop_vrh: fensapice_drop_vrh_1
    fensapice_drop_vrh_1: fensapice_drop_vrh_1_1
    fensapice_drop_vc: fensapice_drop_vc
class phase_6_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_1
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_6(NamedObject[phase_6_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_6_child
class settings_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_1
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_6
class inlet_vent_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_4
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class inlet_vent(NamedObject[inlet_vent_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: inlet_vent_child
class swirl_velocity_specification_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fan_rotation_speed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class momentum_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_4
    gauge_total_pressure: gauge_total_pressure
    supersonic_or_initial_gauge_pressure: supersonic_or_initial_gauge_pressure
    direction_specification_method: direction_specification_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    direction_vector: direction_vector
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow_1
    acoustic_wave_model: acoustic_wave_model
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    pressure_jump: pressure_jump
    swirl_velocity_specification: swirl_velocity_specification_1
    swirl_factor: swirl_factor
    fan_rotation_speed: fan_rotation_speed
    fan_origin: fan_origin
    strength: strength
    new_fan_definition: new_fan_definition
    _child_aliases: dict
class phase_7_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_2
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_7(NamedObject[phase_7_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_7_child
class settings_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_2
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_7
class intake_fan_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_5
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class intake_fan(NamedObject[intake_fan_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: intake_fan_child
class non_overlap_zone_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interface_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    non_overlap_zone_name: non_overlap_zone_name
class phase_8_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interface: interface_1
    geometry: geometry_6
class phase_8(NamedObject[phase_8_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_8_child
class settings_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interface: interface_1
    geometry: geometry_6
    phase: phase_8
class interface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_6
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class interface(NamedObject[interface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interface_child
class is_not_a_rans_les_interface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class interior_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    is_not_a_rans_les_interface: is_not_a_rans_les_interface
class phase_9_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interior: interior_1
class phase_9(NamedObject[phase_9_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_9_child
class settings_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    interior: interior_1
    phase: phase_9
class interior_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_7
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class interior(NamedObject[interior_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interior_child
class mass_flow_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flow_rate_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class exit_corrected_mass_flow_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class mass_flux(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class average_mass_flux(Real):
    _version: str
    fluent_name: str
    _python_name: str
class supersonic_gauge_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class direction_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ecmf_reference_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ecmf_reference_gauge_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class momentum_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_4
    system_coupling: system_coupling_1
    mass_flow_specification: mass_flow_specification
    mass_flow_rate: mass_flow_rate_1
    exit_corrected_mass_flow_rate: exit_corrected_mass_flow_rate
    mass_flux: mass_flux
    average_mass_flux: average_mass_flux
    supersonic_gauge_pressure: supersonic_gauge_pressure
    direction_specification: direction_specification
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    direction_vector: direction_vector
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    swirl_velocity_specification: swirl_velocity_specification_1
    swirl_factor: swirl_factor
    fan_origin: fan_origin
    ecmf_reference_temperature: ecmf_reference_temperature
    ecmf_reference_gauge_pressure: ecmf_reference_gauge_pressure
    acoustic_wave_model: acoustic_wave_model
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    _child_aliases: dict
class turbulence_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulence_specification: turbulence_specification
    modified_turbulent_viscosity: modified_turbulent_viscosity
    laminar_kinetic_energy: laminar_kinetic_energy
    intermittency: intermittency
    turbulent_kinetic_energy: turbulent_kinetic_energy
    turbulent_dissipation_rate: turbulent_dissipation_rate
    specific_dissipation_rate: specific_dissipation_rate
    velocity_variance_scale: velocity_variance_scale
    turbulent_intensity: turbulent_intensity
    turbulent_length_scale: turbulent_length_scale
    hydraulic_diameter: hydraulic_diameter
    turbulent_viscosity_ratio: turbulent_viscosity_ratio
    turbulent_viscosity_ratio_profile: turbulent_viscosity_ratio_profile
    reynolds_stress_specification: reynolds_stress_specification
    uu_reynolds_stresses: uu_reynolds_stresses
    vv_reynolds_stresses: vv_reynolds_stresses
    ww_reynolds_stresses: ww_reynolds_stresses
    uv_reynolds_stresses: uv_reynolds_stresses
    vw_reynolds_stresses: vw_reynolds_stresses
    uw_reynolds_stresses: uw_reynolds_stresses
    subgrid_kinetic_energy_specification: subgrid_kinetic_energy_specification
    subgrid_kinetic_energy: subgrid_kinetic_energy
    subgrid_turbulent_intensity: subgrid_turbulent_intensity
    _child_aliases: dict
class total_temperature_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    total_temperature: total_temperature_1
    _child_aliases: dict
class radiation_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    internal_emissivity: internal_emissivity
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    participates_in_view_factor_calculation: participates_in_view_factor_calculation
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class species_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    specify_species_in_mole_fractions: specify_species_in_mole_fractions
    species_mass_fraction: species_mass_fraction
    species_mole_fraction: species_mole_fraction
    mixture_fraction: mixture_fraction
    mode_2_probability: mode_2_probability
    mode_3_probability: mode_3_probability
    equilibrate_inlet_stream: equilibrate_inlet_stream
    progress_variable: progress_variable
    progress_variable_variance: progress_variable_variance
    flame_area_density: flame_area_density
    inert_stream: inert_stream
    pollutant_no_mass_fraction: pollutant_no_mass_fraction
    pollutant_hcn_mass_fraction: pollutant_hcn_mass_fraction
    pollutant_nh3_mass_fraction: pollutant_nh3_mass_fraction
    pollutant_n2o_mass_fraction: pollutant_n2o_mass_fraction
    pollutant_urea_mass_fraction: pollutant_urea_mass_fraction
    pollutant_hnco_mass_fraction: pollutant_hnco_mass_fraction
    pollutant_nco_mass_fraction: pollutant_nco_mass_fraction
    pollutant_so2_mass_fraction: pollutant_so2_mass_fraction
    pollutant_h2s_mass_fraction: pollutant_h2s_mass_fraction
    pollutant_so3_mass_fraction: pollutant_so3_mass_fraction
    pollutant_sh_mass_fraction: pollutant_sh_mass_fraction
    pollutant_so_mass_fraction: pollutant_so_mass_fraction
    soot_mass_fraction: soot_mass_fraction
    nuclei: nuclei
    tar_mass_fraction: tar_mass_fraction
    pollutant_hg_mass_fraction: pollutant_hg_mass_fraction
    pollutant_hgcl2_mass_fraction: pollutant_hgcl2_mass_fraction
    pollutant_hcl_mass_fraction: pollutant_hcl_mass_fraction
    pollutant_hgo_mass_fraction: pollutant_hgo_mass_fraction
    pollutant_cl_mass_fraction: pollutant_cl_mass_fraction
    pollutant_cl2_mass_fraction: pollutant_cl2_mass_fraction
    pollutant_hgcl_mass_fraction: pollutant_hgcl_mass_fraction
    pollutant_hocl_mass_fraction: pollutant_hocl_mass_fraction
    mean_mixture_fraction: mean_mixture_fraction
    mixture_fraction_variance: mixture_fraction_variance
    secondary_mean_mixture_fraction: secondary_mean_mixture_fraction
    secondary_mixture_fraction_variance: secondary_mixture_fraction_variance
    tss_scalar: tss_scalar
    _child_aliases: dict
class upstream_torque_integral(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upstream_total_enthalpy_integral(Real):
    _version: str
    fluent_name: str
    _python_name: str
class discrete_phase_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    upstream_torque_integral: upstream_torque_integral
    upstream_total_enthalpy_integral: upstream_total_enthalpy_integral
    bc_type: bc_type_1
    reinject_using_injection: reinject_using_injection
    bc_user_function: bc_user_function
    dem_collision_partner: dem_collision_partner
    mixing_plane_thread: mixing_plane_thread
    _child_aliases: dict
class open_channel_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class secondary_phase_for_inlet(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class slip_velocity_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class phase_velocity_ratio(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class multiphase_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    open_channel: open_channel_2
    inlet_number: inlet_number
    secondary_phase_for_inlet: secondary_phase_for_inlet
    free_surface_level: free_surface_level
    bottom_level: bottom_level
    density_interpolation_method: density_interpolation_method
    population_balance: population_balance
    slip_velocity_specification: slip_velocity_specification
    phase_velocity_ratio: phase_velocity_ratio
    volume_fraction: volume_fraction
    granular_temperature: granular_temperature
    interfacial_area_concentration: interfacial_area_concentration
    relative_humidity: relative_humidity
    liquid_mass_fraction: liquid_mass_fraction
    log10_droplets_per_unit_volume: log10_droplets_per_unit_volume
    _child_aliases: dict
class phase_10_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_3
    turbulence: turbulence_2
    thermal: thermal_2
    radiation: radiation_3
    species: species_7
    discrete_phase: discrete_phase_3
    multiphase: multiphase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_10(NamedObject[phase_10_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_10_child
class settings_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_3
    turbulence: turbulence_2
    thermal: thermal_2
    radiation: radiation_3
    species: species_7
    discrete_phase: discrete_phase_3
    multiphase: multiphase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_10
class mass_flow_inlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_8
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class mass_flow_inlet(NamedObject[mass_flow_inlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_inlet_child
class momentum_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_4
    mass_flow_specification: mass_flow_specification
    mass_flow_rate: mass_flow_rate_1
    exit_corrected_mass_flow_rate: exit_corrected_mass_flow_rate
    mass_flux: mass_flux
    average_mass_flux: average_mass_flux
    ecmf_reference_temperature: ecmf_reference_temperature
    ecmf_reference_gauge_pressure: ecmf_reference_gauge_pressure
    _child_aliases: dict
class turbulence_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
class radiation_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    internal_emissivity: internal_emissivity
    participates_in_view_factor_calculation: participates_in_view_factor_calculation
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class species_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    slip_velocity_specification: slip_velocity_specification
    phase_velocity_ratio: phase_velocity_ratio
    volume_fraction: volume_fraction
    granular_temperature: granular_temperature
    interfacial_area_concentration: interfacial_area_concentration
    _child_aliases: dict
class potential_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
class phase_11_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_4
    turbulence: turbulence_3
    thermal: thermal_3
    radiation: radiation_4
    species: species_8
    discrete_phase: discrete_phase_3
    multiphase: multiphase_5
    potential: potential_1
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_11(NamedObject[phase_11_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_11_child
class settings_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_4
    turbulence: turbulence_3
    thermal: thermal_3
    radiation: radiation_4
    species: species_8
    discrete_phase: discrete_phase_3
    multiphase: multiphase_5
    potential: potential_1
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_11
class mass_flow_outlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_9
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class mass_flow_outlet(NamedObject[mass_flow_outlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_outlet_child
class phase_12_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
class phase_12(NamedObject[phase_12_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_12_child
class settings_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    phase: phase_12
class network_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_10
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class network(NamedObject[network_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_child
class thermal_bc(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class q(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class network_end_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thermal_bc: thermal_bc
    temperature: temperature_3
    q: q
class phase_13_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    network_end: network_end_1
class phase_13(NamedObject[phase_13_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_13_child
class settings_11(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    network_end: network_end_1
    phase: phase_13
class network_end_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_11
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class network_end(NamedObject[network_end_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_end_child
class flowrate_frac(Real):
    _version: str
    fluent_name: str
    _python_name: str
class momentum_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    flowrate_frac: flowrate_frac
class uds_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    uds_bc: uds_bc
    uds: uds_1
class discrete_phase_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bc_type: bc_type_1
    reinject_using_injection: reinject_using_injection
    bc_user_function: bc_user_function
    dem_collision_partner: dem_collision_partner
    _child_aliases: dict
class phase_14_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_5
    potential: potential
    structure: structure_1
    uds: uds_2
    radiation: radiation_2
    discrete_phase: discrete_phase_4
    geometry: geometry_6
class phase_14(NamedObject[phase_14_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_14_child
class settings_12(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_5
    potential: potential
    structure: structure_1
    uds: uds_2
    radiation: radiation_2
    discrete_phase: discrete_phase_4
    geometry: geometry_6
    phase: phase_14
class outflow_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_12
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class outflow(NamedObject[outflow_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outflow_child
class momentum_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    system_coupling: system_coupling_1
    backflow_reference_frame: backflow_reference_frame
    pressure_spec: pressure_spec
    pressure_spec_method: pressure_spec_method
    gauge_pressure: gauge_pressure
    pressure_profile_multiplier: pressure_profile_multiplier
    backflow_dir_spec_method: backflow_dir_spec_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    backflow_pressure_spec: backflow_pressure_spec
    backflow_pressure_specification: backflow_pressure_specification
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow
    radial_equ_pressure_distribution: radial_equ_pressure_distribution
    radial_equ_reference_position: radial_equ_reference_position
    radial_equ_specified_radius: radial_equ_specified_radius
    radial_equ_specified_span: radial_equ_specified_span
    avg_pressure_spec: avg_pressure_spec
    avg_method: avg_method
    target_mass_flow_rate: target_mass_flow_rate
    target_mass_flow: target_mass_flow
    upper_limit_of_abs_pressure: upper_limit_of_abs_pressure
    lower_limit_of_abs_pressure: lower_limit_of_abs_pressure
    acoustic_wave_model: acoustic_wave_model
    exit_pressure_spec: exit_pressure_spec
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    loss_coefficient: loss_coefficient
    strength: strength
    _child_aliases: dict
class phase_15_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_6
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
class phase_15(NamedObject[phase_15_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_15_child
class settings_13(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_6
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_15
class outlet_vent_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_13
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class outlet_vent(NamedObject[outlet_vent_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outlet_vent_child
class overset_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class overset(NamedObject[overset_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: overset_child
class rotationally_periodic(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class p_jump(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_3_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_3(ListObject[axis_direction_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_direction_3_child
class axis_origin_3_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_origin_3(ListObject[axis_origin_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: axis_origin_3_child
class shift_component_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class shift_component(ListObject[shift_component_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: shift_component_child
class per_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class periodic_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    rotationally_periodic: rotationally_periodic
    p_jump: p_jump
    axis_direction: axis_direction_3
    axis_origin: axis_origin_3
    shift_component: shift_component
    per_angle: per_angle
    _child_aliases: dict
class geometry_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    geom_disable: geom_disable
    geom_dir_spec: geom_dir_spec
    geom_dir_x: geom_dir_x
    geom_dir_y: geom_dir_y
    geom_dir_z: geom_dir_z
    geom_levels: geom_levels
    geom_bgthread: geom_bgthread
class phase_16_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    periodic: periodic_1
    geometry: geometry_7
class phase_16(NamedObject[phase_16_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_16_child
class settings_14(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    periodic: periodic_1
    geometry: geometry_7
    phase: phase_16
class periodic_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_14
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class periodic(NamedObject[periodic_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: periodic_child
class alpha(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dm(Real):
    _version: str
    fluent_name: str
    _python_name: str
class c2_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_ctk(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solar_fluxes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class v_absp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ir_absp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ir_trans(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class v_trans(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class jump_adhesion_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class adhesion_constrained(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class contact_angles_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class contact_angles(NamedObject[contact_angles_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: contact_angles_child
class porous_jump_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_jump_turb_wall_treatment: porous_jump_turb_wall_treatment
    alpha: alpha
    dm: dm
    c2: c2_1
    thermal_ctk: thermal_ctk
    solar_fluxes: solar_fluxes
    v_absp: v_absp
    ir_absp: ir_absp
    ir_trans: ir_trans
    v_trans: v_trans
    strength: strength
    jump_adhesion: jump_adhesion_1
    adhesion_constrained: adhesion_constrained
    contact_angles: contact_angles
    x_disp_boundary_condition: x_disp_boundary_condition
    x_disp_boundary_value: x_disp_boundary_value
    y_disp_boundary_condition: y_disp_boundary_condition
    y_disp_boundary_value: y_disp_boundary_value
    z_disp_boundary_condition: z_disp_boundary_condition
    z_disp_boundary_value: z_disp_boundary_value
    _child_aliases: dict
class phase_17_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_jump: porous_jump_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
class phase_17(NamedObject[phase_17_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_17_child
class settings_15(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_jump: porous_jump_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_17
class porous_jump_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_15
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class porous_jump(NamedObject[porous_jump_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: porous_jump_child
class mach_number(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class non_equil_boundary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class momentum_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    gauge_pressure: gauge_pressure
    mach_number: mach_number
    non_equil_boundary: non_equil_boundary
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    _child_aliases: dict
class vibrational_electronic_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    temperature: temperature_3
    vibrational_electronic_temperature: vibrational_electronic_temperature
    _child_aliases: dict
class radiation_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    internal_emissivity: internal_emissivity
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    radiating_s2s_surface: radiating_s2s_surface
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class species_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mean_mixture_fraction: mean_mixture_fraction
    mixture_fraction_variance: mixture_fraction_variance
    secondary_mean_mixture_fraction: secondary_mean_mixture_fraction
    secondary_mixture_fraction_variance: secondary_mixture_fraction_variance
    specify_species_in_mole_fractions: specify_species_in_mole_fractions
    species_mass_fraction: species_mass_fraction
    species_mole_fraction: species_mole_fraction
    mixture_fraction: mixture_fraction
    mode_2_probability: mode_2_probability
    mode_3_probability: mode_3_probability
    pollutant_no_mass_fraction: pollutant_no_mass_fraction
    pollutant_hcn_mass_fraction: pollutant_hcn_mass_fraction
    pollutant_nh3_mass_fraction: pollutant_nh3_mass_fraction
    pollutant_n2o_mass_fraction: pollutant_n2o_mass_fraction
    pollutant_urea_mass_fraction: pollutant_urea_mass_fraction
    pollutant_hnco_mass_fraction: pollutant_hnco_mass_fraction
    pollutant_nco_mass_fraction: pollutant_nco_mass_fraction
    pollutant_so2_mass_fraction: pollutant_so2_mass_fraction
    pollutant_h2s_mass_fraction: pollutant_h2s_mass_fraction
    pollutant_so3_mass_fraction: pollutant_so3_mass_fraction
    pollutant_sh_mass_fraction: pollutant_sh_mass_fraction
    pollutant_so_mass_fraction: pollutant_so_mass_fraction
    soot_mass_fraction: soot_mass_fraction
    nuclei: nuclei
    tar_mass_fraction: tar_mass_fraction
    pollutant_hg_mass_fraction: pollutant_hg_mass_fraction
    pollutant_hgcl2_mass_fraction: pollutant_hgcl2_mass_fraction
    pollutant_hcl_mass_fraction: pollutant_hcl_mass_fraction
    pollutant_hgo_mass_fraction: pollutant_hgo_mass_fraction
    pollutant_cl_mass_fraction: pollutant_cl_mass_fraction
    pollutant_cl2_mass_fraction: pollutant_cl2_mass_fraction
    pollutant_hgcl_mass_fraction: pollutant_hgcl_mass_fraction
    pollutant_hocl_mass_fraction: pollutant_hocl_mass_fraction
    _child_aliases: dict
class phase_18_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_7
    turbulence: turbulence_2
    thermal: thermal_4
    radiation: radiation_5
    species: species_9
    discrete_phase: discrete_phase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_18(NamedObject[phase_18_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_18_child
class settings_16(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_7
    turbulence: turbulence_2
    thermal: thermal_4
    radiation: radiation_5
    species: species_9
    discrete_phase: discrete_phase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_18
class pressure_far_field_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_16
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class pressure_far_field(NamedObject[pressure_far_field_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_far_field_child
class momentum_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reference_frame: reference_frame_4
    gauge_total_pressure: gauge_total_pressure
    supersonic_or_initial_gauge_pressure: supersonic_or_initial_gauge_pressure
    direction_specification_method: direction_specification_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    direction_vector: direction_vector
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow_1
    acoustic_wave_model: acoustic_wave_model
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    _child_aliases: dict
class phase_19_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_8
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_19(NamedObject[phase_19_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_19_child
class settings_17(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_8
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_19
class pressure_inlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_17
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class pressure_inlet(NamedObject[pressure_inlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_inlet_child
class momentum_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    system_coupling: system_coupling_1
    backflow_reference_frame: backflow_reference_frame
    pressure_spec: pressure_spec
    pressure_spec_method: pressure_spec_method
    gauge_pressure: gauge_pressure
    pressure_profile_multiplier: pressure_profile_multiplier
    backflow_dir_spec_method: backflow_dir_spec_method
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    backflow_pressure_spec: backflow_pressure_spec
    backflow_pressure_specification: backflow_pressure_specification
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    prevent_reverse_flow: prevent_reverse_flow
    radial_equ_pressure_distribution: radial_equ_pressure_distribution
    radial_equ_reference_position: radial_equ_reference_position
    radial_equ_specified_radius: radial_equ_specified_radius
    radial_equ_specified_span: radial_equ_specified_span
    avg_pressure_spec: avg_pressure_spec
    avg_method: avg_method
    target_mass_flow_rate: target_mass_flow_rate
    target_mass_flow: target_mass_flow
    upper_limit_of_abs_pressure: upper_limit_of_abs_pressure
    lower_limit_of_abs_pressure: lower_limit_of_abs_pressure
    acoustic_wave_model: acoustic_wave_model
    exit_pressure_spec: exit_pressure_spec
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    _child_aliases: dict
class phase_20_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_9
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
class phase_20(NamedObject[phase_20_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_20_child
class settings_18(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_9
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_20
class pressure_outlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_18
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class pressure_outlet(NamedObject[pressure_outlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_outlet_child
class hc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class t(Real):
    _version: str
    fluent_name: str
    _python_name: str
class heat_flux(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radiator_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_jump_turb_wall_treatment: porous_jump_turb_wall_treatment
    loss_coefficient: loss_coefficient
    hc: hc
    t: t
    heat_flux: heat_flux
    strength: strength
    _child_aliases: dict
class phase_21_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiator: radiator_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
class phase_21(NamedObject[phase_21_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_21_child
class settings_19(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiator: radiator_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_21
class radiator_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_19
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class radiator(NamedObject[radiator_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: radiator_child
class les_spec_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rfg_number_of_modes(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class vm_nvortices(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class les_embedded_fluctuations(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    les_spec_name: les_spec_name
    rfg_number_of_modes: rfg_number_of_modes
    vm_nvortices: vm_nvortices
    les_embedded_fluctuations: les_embedded_fluctuations
class phase_22_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulence: turbulence_4
    geometry: geometry_6
class phase_22(NamedObject[phase_22_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_22_child
class settings_20(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulence: turbulence_4
    geometry: geometry_6
    phase: phase_22
class rans_les_interface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_20
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class rans_les_interface(NamedObject[rans_les_interface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: rans_les_interface_child
class outlet_zone(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class temperature_rise_specification(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_rise(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class heat_source(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class freestream_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transfer_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class species_mass_fractions_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_mass_fractions(NamedObject[species_mass_fractions_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_mass_fractions_child
class recirculation_inlet_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    outlet_zone: outlet_zone
    temperature_rise_specification: temperature_rise_specification
    temperature_rise: temperature_rise
    heat_source: heat_source
    freestream_temperature: freestream_temperature
    transfer_coefficient: transfer_coefficient
    direction_specification: direction_specification
    coordinate_system: coordinate_system
    flow_direction: flow_direction
    direction_vector: direction_vector
    turbulence_specification: turbulence_specification
    modified_turbulent_viscosity: modified_turbulent_viscosity
    laminar_kinetic_energy: laminar_kinetic_energy
    intermittency: intermittency
    turbulent_kinetic_energy: turbulent_kinetic_energy
    turbulent_dissipation_rate: turbulent_dissipation_rate
    specific_dissipation_rate: specific_dissipation_rate
    velocity_variance_scale: velocity_variance_scale
    turbulent_intensity: turbulent_intensity
    turbulent_length_scale: turbulent_length_scale
    hydraulic_diameter: hydraulic_diameter
    turbulent_viscosity_ratio: turbulent_viscosity_ratio
    turbulent_viscosity_ratio_profile: turbulent_viscosity_ratio_profile
    reynolds_stress_specification: reynolds_stress_specification
    uu_reynolds_stresses: uu_reynolds_stresses
    vv_reynolds_stresses: vv_reynolds_stresses
    ww_reynolds_stresses: ww_reynolds_stresses
    uv_reynolds_stresses: uv_reynolds_stresses
    vw_reynolds_stresses: vw_reynolds_stresses
    uw_reynolds_stresses: uw_reynolds_stresses
    subgrid_kinetic_energy_specification: subgrid_kinetic_energy_specification
    subgrid_kinetic_energy: subgrid_kinetic_energy
    subgrid_turbulent_intensity: subgrid_turbulent_intensity
    species_mass_fractions: species_mass_fractions
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class phase_23_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    recirculation_inlet: recirculation_inlet_1
    geometry: geometry_6
class phase_23(NamedObject[phase_23_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_23_child
class settings_21(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    recirculation_inlet: recirculation_inlet_1
    geometry: geometry_6
    phase: phase_23
class recirculation_inlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_21
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class recirculation_inlet(NamedObject[recirculation_inlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_inlet_child
class recirculation_outlet_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mass_flow_specification: mass_flow_specification
    mass_flow_rate: mass_flow_rate_1
    mass_flux: mass_flux
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class phase_24_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    recirculation_outlet: recirculation_outlet_1
    geometry: geometry_6
class phase_24(NamedObject[phase_24_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_24_child
class settings_22(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    recirculation_outlet: recirculation_outlet_1
    geometry: geometry_6
    phase: phase_24
class recirculation_outlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_22
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class recirculation_outlet(NamedObject[recirculation_outlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_outlet_child
class shadow_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class shadow(NamedObject[shadow_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: shadow_child
class symmetry_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_1
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class symmetry(NamedObject[symmetry_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: symmetry_child
class open_channel_wave_bc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class segregated_velocity_inputs(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frame_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_magnitude(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class initial_gauge_pressure(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class velocity_components_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class velocity_components(ListObject[velocity_components_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: velocity_components_child
class swirl_angular_velocity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class moving_object_velocity_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class moving_object_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_object_velocity_inputs(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    moving_object_velocity_specification_method: moving_object_velocity_specification_method
    moving_object_velocity: moving_object_velocity
    _child_aliases: dict
class primary_phase_velocity_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class primary_phase_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class primary_phase_velocity_inputs(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    primary_phase_velocity_specification_method: primary_phase_velocity_specification_method
    primary_phase_velocity: primary_phase_velocity
    _child_aliases: dict
class secondary_phase_velocity_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class secondary_phase_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class secondary_phase_velocity_inputs(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    secondary_phase_velocity_specification_method: secondary_phase_velocity_specification_method
    secondary_phase_velocity: secondary_phase_velocity
    _child_aliases: dict
class momentum_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    open_channel_wave_bc: open_channel_wave_bc
    segregated_velocity_inputs: segregated_velocity_inputs
    system_coupling: system_coupling_1
    velocity_specification_method: velocity_specification_method
    reference_frame: reference_frame_5
    velocity_magnitude: velocity_magnitude
    initial_gauge_pressure: initial_gauge_pressure
    coordinate_system: coordinate_system
    velocity_components: velocity_components
    flow_direction: flow_direction
    axis_direction: axis_direction_2
    axis_origin: axis_origin_2
    swirl_angular_velocity: swirl_angular_velocity
    gauge_pressure: gauge_pressure
    acoustic_wave_model: acoustic_wave_model
    impedance_zero_order_term: impedance_zero_order_term
    real_pole_series: real_pole_series
    complex_pole_series: complex_pole_series
    incoming_wave: incoming_wave
    moving_object_velocity_inputs: moving_object_velocity_inputs
    primary_phase_velocity_inputs: primary_phase_velocity_inputs
    secondary_phase_velocity_inputs: secondary_phase_velocity_inputs
    _child_aliases: dict
class turbulence_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    les_spec: les_spec
    fluctuating_velocity_algorithm: fluctuating_velocity_algorithm
    number_of_fourier_modes: number_of_fourier_modes
    number_of_vortices: number_of_vortices
    streamwise_fluctuations: streamwise_fluctuations
    satisfy_mass_conservation: satisfy_mass_conservation
    scale_search_limiter: scale_search_limiter
    stg_turbulent_intensity: stg_turbulent_intensity
    stg_turbulent_viscosity_ratio: stg_turbulent_viscosity_ratio
    wall_distance: wall_distance
    volumetric_forcing: volumetric_forcing
    forcing_zone_thickness: forcing_zone_thickness
    volumetric_thickness: volumetric_thickness
    turbulence_specification: turbulence_specification
    modified_turbulent_viscosity: modified_turbulent_viscosity
    laminar_kinetic_energy: laminar_kinetic_energy
    intermittency: intermittency
    turbulent_kinetic_energy: turbulent_kinetic_energy
    turbulent_dissipation_rate: turbulent_dissipation_rate
    specific_dissipation_rate: specific_dissipation_rate
    velocity_variance_scale: velocity_variance_scale
    turbulent_intensity: turbulent_intensity
    turbulent_length_scale: turbulent_length_scale
    hydraulic_diameter: hydraulic_diameter
    turbulent_viscosity_ratio: turbulent_viscosity_ratio
    turbulent_viscosity_ratio_profile: turbulent_viscosity_ratio_profile
    reynolds_stress_specification: reynolds_stress_specification
    uu_reynolds_stresses: uu_reynolds_stresses
    vv_reynolds_stresses: vv_reynolds_stresses
    ww_reynolds_stresses: ww_reynolds_stresses
    uv_reynolds_stresses: uv_reynolds_stresses
    vw_reynolds_stresses: vw_reynolds_stresses
    uw_reynolds_stresses: uw_reynolds_stresses
    subgrid_kinetic_energy_specification: subgrid_kinetic_energy_specification
    subgrid_kinetic_energy: subgrid_kinetic_energy
    subgrid_turbulent_intensity: subgrid_turbulent_intensity
    _child_aliases: dict
class thermodynamic_non_equilibrium_boundary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vibrational_electronic_temperature_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    temperature: temperature_3
    thermodynamic_non_equilibrium_boundary: thermodynamic_non_equilibrium_boundary
    vibrational_electronic_temperature: vibrational_electronic_temperature_1
    _child_aliases: dict
class participates_in_view_factor_calculation_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radiation_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    radiation_bc: radiation_bc
    beam_width: beam_width
    use_beeam_direction_from_solar_load_model_settings: use_beeam_direction_from_solar_load_model_settings
    use_irradiation_from_solar_soad_model_settings: use_irradiation_from_solar_soad_model_settings
    direct_irradiation_settings: direct_irradiation_settings
    diffuse_irradiation_settings: diffuse_irradiation_settings
    external_black_body_temperature_method: external_black_body_temperature_method
    black_body_temperature: black_body_temperature
    internal_emissivity: internal_emissivity
    participates_in_view_factor_calculation: participates_in_view_factor_calculation_1
    participates_in_solar_ray_tracing: participates_in_solar_ray_tracing
    solar_transmissivity_factor: solar_transmissivity_factor
    _child_aliases: dict
class averaged_flow_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class avg_flow_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flow_velocity_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flow_velocity(ListObject[flow_velocity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: flow_velocity_child
class moving_object_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class moving_object_direction(ListObject[moving_object_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: moving_object_direction_child
class secondary_phase_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class secondary_phase_direction(ListObject[secondary_phase_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: secondary_phase_direction_child
class primary_phase_reference_height_above_free_surface(Real):
    _version: str
    fluent_name: str
    _python_name: str
class primary_phase_power_law_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class primary_phase_reference_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class primary_phase_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class primary_phase_direction(ListObject[primary_phase_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: primary_phase_direction_child
class wave_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_wave_direction(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_direction_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class reference_direction(ListObject[reference_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: reference_direction_child
class wave_modeling_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class theory(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wave_ht(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class wave_len(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class phase_diff(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class heading_angle(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class wave_group_inputs_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    theory: theory
    wave_ht: wave_ht
    wave_len: wave_len
    phase_diff: phase_diff
    heading_angle: heading_angle
class wave_group_inputs(ListObject[wave_group_inputs_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: wave_group_inputs_child
class offset_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class shallow_wave_inputs_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    theory: theory
    wave_ht: wave_ht
    wave_len: wave_len
    offset: offset_5
    heading_angle: heading_angle
class shallow_wave_inputs(ListObject[shallow_wave_inputs_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: shallow_wave_inputs_child
class frequency_spectrum_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class peak_shape_parameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class significant_wave_height(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class peak_frequency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class minimum_frequency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class maximum_frequency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class number_of_frequency_components(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class directional_spreading_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_independent_cosine_exponent(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mean_wave_heading_angle(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class angular_deviation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class angular_components_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mean_and_std_deviation(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class pb_disc_components_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class pb_disc_components(ListObject[pb_disc_components_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: pb_disc_components_child
class pb_disc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mean_and_std_deviation: mean_and_std_deviation
    pb_disc_components: pb_disc_components
class multiphase_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    averaged_flow_specification_method: averaged_flow_specification_method
    avg_flow_velocity: avg_flow_velocity
    flow_velocity: flow_velocity
    moving_object_direction: moving_object_direction
    secondary_phase_direction: secondary_phase_direction
    primary_phase_reference_height_above_free_surface: primary_phase_reference_height_above_free_surface
    primary_phase_power_law_coefficient: primary_phase_power_law_coefficient
    primary_phase_reference_velocity: primary_phase_reference_velocity
    primary_phase_direction: primary_phase_direction
    secondary_phase_for_inlet: secondary_phase_for_inlet
    wave_option: wave_option
    free_surface_level: free_surface_level
    bottom_level: bottom_level
    reference_wave_direction: reference_wave_direction
    reference_direction: reference_direction
    wave_modeling_option: wave_modeling_option
    wave_group_inputs: wave_group_inputs
    shallow_wave_inputs: shallow_wave_inputs
    frequency_spectrum_method: frequency_spectrum_method
    peak_shape_parameter: peak_shape_parameter
    significant_wave_height: significant_wave_height
    peak_frequency: peak_frequency
    minimum_frequency: minimum_frequency
    maximum_frequency: maximum_frequency
    number_of_frequency_components: number_of_frequency_components
    directional_spreading_method: directional_spreading_method
    frequency_independent_cosine_exponent: frequency_independent_cosine_exponent
    mean_wave_heading_angle: mean_wave_heading_angle
    angular_deviation: angular_deviation
    angular_components_count: angular_components_count
    granular_temperature: granular_temperature
    interfacial_area_concentration: interfacial_area_concentration
    level_set_function_flux: level_set_function_flux
    volume_fraction: volume_fraction
    discrete_boundary_condition: discrete_boundary_condition
    pb_disc: pb_disc
    quadrature_moment_boundary_condition: quadrature_moment_boundary_condition
    quadrature_moment_boundary_value: quadrature_moment_boundary_value
    qbmm_boundary_condition: qbmm_boundary_condition
    qbmm_boundary_value: qbmm_boundary_value
    std_moment_boundary_condition: std_moment_boundary_condition
    std_moment_boundary_value: std_moment_boundary_value
    dqmom_boundary_condition: dqmom_boundary_condition
    dqmom_boundary_value: dqmom_boundary_value
    _child_aliases: dict
class phase_25_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_10
    turbulence: turbulence_5
    thermal: thermal_5
    radiation: radiation_6
    species: species_7
    discrete_phase: discrete_phase_1
    multiphase: multiphase_6
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
class phase_25(NamedObject[phase_25_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_25_child
class settings_23(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_10
    turbulence: turbulence_5
    thermal: thermal_5
    radiation: radiation_6
    species: species_7
    discrete_phase: discrete_phase_1
    multiphase: multiphase_6
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_25
class velocity_inlet_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_23
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class velocity_inlet(NamedObject[velocity_inlet_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: velocity_inlet_child
class wall_motion(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class moving(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class relative(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rotating(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class components_2(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class velocity_spec(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class speed(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class rotation_speed(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class rotation_axis_origin_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rotation_axis_origin(ListObject[rotation_axis_origin_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: rotation_axis_origin_child
class rotation_axis_direction_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rotation_axis_direction(ListObject[rotation_axis_direction_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: rotation_axis_direction_child
class direction_3_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class direction_3(ListObject[direction_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: direction_3_child
class shear_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fsi_interface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class periodic_displacement_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class periodic_displacement(ListObject[periodic_displacement_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: periodic_displacement_child
class periodic_imaginary_displacement_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class periodic_imaginary_displacement(ListObject[periodic_imaginary_displacement_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: periodic_imaginary_displacement_child
class frequency_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class amplitude_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class nodal_diam(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class passage_number(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class fwd(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class aero(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cmplx(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class norm(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method_6(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class force_real_component_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class force_real_component(ListObject[force_real_component_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: force_real_component_child
class force_imaginary_component_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class force_imaginary_component(ListObject[force_imaginary_component_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: force_imaginary_component_child
class force_cmplx(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class force_norm(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class shear_stress_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class shear_stress(ListObject[shear_stress_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: shear_stress_child
class fslip(Real):
    _version: str
    fluent_name: str
    _python_name: str
class eslip(Real):
    _version: str
    fluent_name: str
    _python_name: str
class surface_tension_gradient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class specified_shear(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class specularity_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mom_accommodation_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class momentum_11(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    wall_motion: wall_motion
    moving: moving
    relative: relative
    rotating: rotating
    components: components_2
    velocity_spec: velocity_spec
    speed: speed
    rotation_speed: rotation_speed
    rotation_axis_origin: rotation_axis_origin
    rotation_axis_direction: rotation_axis_direction
    direction: direction_3
    velocity_components: velocity_components
    shear_condition: shear_condition
    fsi_interface: fsi_interface
    periodic_displacement: periodic_displacement
    periodic_imaginary_displacement: periodic_imaginary_displacement
    frequency: frequency_1
    amplitude: amplitude_1
    nodal_diam: nodal_diam
    passage_number: passage_number
    fwd: fwd
    aero: aero
    cmplx: cmplx
    norm: norm
    method: method_6
    force_real_component: force_real_component
    force_imaginary_component: force_imaginary_component
    force_cmplx: force_cmplx
    force_norm: force_norm
    shear_stress: shear_stress
    fslip: fslip
    eslip: eslip
    surface_tension_gradient: surface_tension_gradient
    specified_shear: specified_shear
    specularity_coeff: specularity_coeff
    mom_accommodation_coeff: mom_accommodation_coeff
    _child_aliases: dict
class roughness_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rough_option(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rough_nasa(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class rough_shin_et_al(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class rough_data(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class sand_grain_roughness(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class roughness_height(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_const(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_height_cp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_const_cp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_const_nasa(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_const_shin(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class roughness_const_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class variable_roughness(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class free_stream_velocity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class free_stream_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class characteristic_length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class free_stream_temp_cp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class characteristic_length_cp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_content(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class liquid_content_cp(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class droplet_diameter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class turbulence_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    roughness_model: roughness_model
    rough_option: rough_option
    rough_nasa: rough_nasa
    rough_shin_et_al: rough_shin_et_al
    rough_data: rough_data
    sand_grain_roughness: sand_grain_roughness
    roughness_height: roughness_height
    roughness_const: roughness_const
    roughness_height_cp: roughness_height_cp
    roughness_const_cp: roughness_const_cp
    roughness_const_nasa: roughness_const_nasa
    roughness_const_shin: roughness_const_shin
    roughness_const_data: roughness_const_data
    variable_roughness: variable_roughness
    free_stream_velocity: free_stream_velocity
    free_stream_temp: free_stream_temp
    characteristic_length: characteristic_length
    free_stream_temp_cp: free_stream_temp_cp
    characteristic_length_cp: characteristic_length_cp
    liquid_content: liquid_content
    liquid_content_cp: liquid_content_cp
    droplet_diameter: droplet_diameter
    _child_aliases: dict
class thermal_condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class heat_flux_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class heat_transfer_coeff_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class free_stream_temp_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class external_emissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ext_rad_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class wall_thickness_old(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_thickness(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class heat_generation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class enable_shell_conduction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class material_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class qdot(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class conduction_layers_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thickness: thickness
    material: material_6
    qdot: qdot
class conduction_layers(ListObject[conduction_layers_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: conduction_layers_child
class thickness_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thin_wall_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thickness: thickness_1
    material: material_6
    qdot: qdot
class thin_wall(ListObject[thin_wall_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: thin_wall_child
class radiating_to_fixed_temp(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class internal_radiation_temp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class area_enhancement_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class contact_resistance_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class therm_accom_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class eve_accom_coef(Real):
    _version: str
    fluent_name: str
    _python_name: str
class caf(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class thermal_stabilization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stab_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_advection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thermal_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thermal_condition: thermal_condition
    material: material_5
    heat_flux: heat_flux_1
    temperature: temperature_3
    heat_transfer_coeff: heat_transfer_coeff_1
    free_stream_temp: free_stream_temp_1
    external_emissivity: external_emissivity
    ext_rad_temperature: ext_rad_temperature
    wall_thickness_old: wall_thickness_old
    wall_thickness: wall_thickness
    heat_generation_rate: heat_generation_rate
    enable_shell_conduction: enable_shell_conduction
    conduction_layers: conduction_layers
    thin_wall: thin_wall
    radiating_to_fixed_temp: radiating_to_fixed_temp
    internal_radiation_temp: internal_radiation_temp
    area_enhancement_factor: area_enhancement_factor
    contact_resistance: contact_resistance_1
    therm_accom_coef: therm_accom_coef
    eve_accom_coef: eve_accom_coef
    caf: caf
    thermal_stabilization: thermal_stabilization
    scale_factor: scale_factor
    stab_method: stab_method
    boundary_advection: boundary_advection
    _child_aliases: dict
class bc_type_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class polar_distribution_function(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class polar_func_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class polar_expression(Real):
    _version: str
    fluent_name: str
    _python_name: str
class polar_real_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class polar_real_intensity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class polar_data_pairs_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    polar_real_angle: polar_real_angle
    polar_real_intensity: polar_real_intensity
class polar_data_pairs(ListObject[polar_data_pairs_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: polar_data_pairs_child
class polar_distribution_function_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    polar_func_type: polar_func_type
    polar_expression: polar_expression
    polar_data_pairs: polar_data_pairs
    def read_polar_dist_func_from_file(self, file_name: str):
        """
        Read polar distribution function from file.
        
        Parameters
        ----------
            file_name_1 : str
                Name of input CSV file.
        """
    def write_polar_dist_func_to_file(self, file_name: str):
        """
        Write polar distribution function to file.
        
        Parameters
        ----------
            file_name : str
                Name of output CSV file.
        """
    _child_aliases: dict
class theta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class coll_dphi(Real):
    _version: str
    fluent_name: str
    _python_name: str
class beam_width_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    theta: theta
    coll_dphi: coll_dphi
    _child_aliases: dict
class solar_direction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solar_irradiation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class direct_irradiation_settings_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direct_irradiation: direct_irradiation
    parallel_collimated_beam: parallel_collimated_beam
    beam_direction: beam_direction
    _child_aliases: dict
class diffuse_irradiation_band_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class diffuse_irradiation_band(NamedObject[diffuse_irradiation_band_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: diffuse_irradiation_band_child
class diffuse_fraction_band_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class diffuse_fraction_band(NamedObject[diffuse_fraction_band_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: diffuse_fraction_band_child
class diffuse_irradiation_settings_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffuse_irradiation_band: diffuse_irradiation_band
    diffuse_fraction_band: diffuse_fraction_band
    _child_aliases: dict
class internal_emissivity_band_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class internal_emissivity_band(NamedObject[internal_emissivity_band_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: internal_emissivity_band_child
class critical_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class faces_per_surface_cluster(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class v_transmissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ir_transmissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class d_transmissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class transmissivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    v_transmissivity: v_transmissivity
    ir_transmissivity: ir_transmissivity
    d_transmissivity: d_transmissivity
class v_opq_absorbtivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class v_st_absorbtivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ir_opq_absorbtivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class ir_st_absorbtivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class d_st_absorbtivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class absorptivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    v_opq_absorbtivity: v_opq_absorbtivity
    v_st_absorbtivity: v_st_absorbtivity
    ir_opq_absorbtivity: ir_opq_absorbtivity
    ir_st_absorbtivity: ir_st_absorbtivity
    d_st_absorbtivity: d_st_absorbtivity
class radiation_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bc_type: bc_type_2
    boundary_source: boundary_source
    polar_distribution_function: polar_distribution_function
    polar_distribution_function_settings: polar_distribution_function_settings
    beam_width: beam_width_1
    solar_direction: solar_direction
    solar_irradiation: solar_irradiation
    direct_irradiation_settings: direct_irradiation_settings_1
    diffuse_irradiation_settings: diffuse_irradiation_settings_1
    internal_emissivity: internal_emissivity
    internal_emissivity_band: internal_emissivity_band
    radiating_s2s_surface: radiating_s2s_surface
    critical_zone: critical_zone
    faces_per_surface_cluster: faces_per_surface_cluster
    solar_fluxes: solar_fluxes
    transmissivity: transmissivity
    absorptivity: absorptivity
    _child_aliases: dict
class react_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partially_catalytic(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partially_catalytic_material(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class partially_catalytic_recombination_coefficient_o(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class partially_catalytic_recombination_coefficient_n(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class partially_catalytic_recombination_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class species_boundary_conditions_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class species_boundary_conditions(NamedObject[species_boundary_conditions_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_boundary_conditions_child
class species_mass_fraction_or_flux_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_mass_fraction_or_flux(NamedObject[species_mass_fraction_or_flux_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_mass_fraction_or_flux_child
class surf_washcoat_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_deposition_height(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solid_species_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    react: react_1
    partially_catalytic: partially_catalytic
    partially_catalytic_material: partially_catalytic_material
    partially_catalytic_recombination_coefficient_o: partially_catalytic_recombination_coefficient_o
    partially_catalytic_recombination_coefficient_n: partially_catalytic_recombination_coefficient_n
    partially_catalytic_recombination_model: partially_catalytic_recombination_model
    species_boundary_conditions: species_boundary_conditions
    species_mass_fraction_or_flux: species_mass_fraction_or_flux
    reaction_mechs: reaction_mechs_1
    surf_washcoat_factor: surf_washcoat_factor
    initial_deposition_height: initial_deposition_height
    solid_species_density: solid_species_density
    _child_aliases: dict
class particle_wall_heat_exchange_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class normal_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class tangential(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class reflection_coefficients(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    normal: normal_1
    tangential: tangential
    _child_aliases: dict
class film_condensation_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gas_side_boundary_layer_model_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lwf_to_vof_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vof_to_lwf_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_splashed_drops(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class critical_temperature_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class critical_temperature_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class critical_temperature_offset(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upper_deposition_limit_offset(Real):
    _version: str
    fluent_name: str
    _python_name: str
class deposition_delta_t(Real):
    _version: str
    fluent_name: str
    _python_name: str
class laplace_number_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class partial_evaporation_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class regime_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    critical_temperature_option: critical_temperature_option
    critical_temperature_factor: critical_temperature_factor
    critical_temperature_offset: critical_temperature_offset
    upper_deposition_limit_offset: upper_deposition_limit_offset
    deposition_delta_t: deposition_delta_t
    laplace_number_constant: laplace_number_constant
    partial_evaporation_ratio: partial_evaporation_ratio
    _child_aliases: dict
class impingement_splashing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_7
    number_of_splashed_drops: number_of_splashed_drops
    regime_parameters: regime_parameters
    _child_aliases: dict
class ra(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rq(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rsm(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_roughness_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ra: ra
    rz: rz
    rq: rq
    rsm: rsm
    _child_aliases: dict
class friction_coefficient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class model_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class critical_weber_number_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class separation_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_separation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model: model_8
    critical_weber_number: critical_weber_number_1
    separation_angle: separation_angle
    _child_aliases: dict
class enabled_45(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class critical_shear_stress(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_particle_stripping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_45
    critical_shear_stress: critical_shear_stress
    _child_aliases: dict
class enabled_46(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_height(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_velocity_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_velocity(ListObject[film_velocity_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: film_velocity_child
class film_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class injection(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_parcels_per_unit_area(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_parcels_per_facet(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class film_initialization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_46
    film_height: film_height
    film_velocity: film_velocity
    film_temperature: film_temperature
    injection: injection
    min_parcels_per_unit_area: min_parcels_per_unit_area
    min_parcels_per_facet: min_parcels_per_facet
    def do_initialization_now(self):
        """
        Apply All settings and initialize film on selected wall(s) Now?.
        """
    _child_aliases: dict
class enabled_47(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class time_of_first_execution(Real):
    _version: str
    fluent_name: str
    _python_name: str
class execution_time_interval(Real):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_coordinate_intervals(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_velocity_intervals(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_temperature_intervals(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class per_face_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_coordinate_intervals: number_of_coordinate_intervals
    number_of_velocity_intervals: number_of_velocity_intervals
    number_of_temperature_intervals: number_of_temperature_intervals
    _child_aliases: dict
class film_in_situ_data_reduction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_47
    time_of_first_execution: time_of_first_execution
    execution_time_interval: execution_time_interval
    per_face_parameters: per_face_parameters
    _child_aliases: dict
class enabled_48(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_function(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class diameter_function(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class velocity_exponent_function(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_45
    function_of: function_of_2
    value: value_17
    udf: udf_1
    piecewise_polynomial: piecewise_polynomial_1
    piecewise_linear: piecewise_linear_2
    polynomial: polynomial_3
class generic(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_48
    impact_angle_function: impact_angle_function
    diameter_function: diameter_function
    velocity_exponent_function: velocity_exponent_function
    _child_aliases: dict
class enabled_49(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_k(Real):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_exponent(Real):
    _version: str
    fluent_name: str
    _python_name: str
class angle_of_max_erosion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class finnie(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_49
    model_constant_k: model_constant_k
    velocity_exponent: velocity_exponent
    angle_of_max_erosion: angle_of_max_erosion
    _child_aliases: dict
class enabled_50(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transition_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_constant_b(Real):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_constant_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_constant_w(Real):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_constant_x(Real):
    _version: str
    fluent_name: str
    _python_name: str
class impact_angle_constant_y(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mclaury(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_50
    model_constant_a: model_constant_a
    velocity_exponent: velocity_exponent
    transition_angle: transition_angle
    impact_angle_constant_b: impact_angle_constant_b
    impact_angle_constant_c: impact_angle_constant_c
    impact_angle_constant_w: impact_angle_constant_w
    impact_angle_constant_x: impact_angle_constant_x
    impact_angle_constant_y: impact_angle_constant_y
    _child_aliases: dict
class enabled_51(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reference_erosion_rate_e90(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_vickers_hardness_hv(Real):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_n1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_n2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_exponent_k2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_exponent_k3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_diameter_dref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_velocity_vref(Real):
    _version: str
    fluent_name: str
    _python_name: str
class oka(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_51
    reference_erosion_rate_e90: reference_erosion_rate_e90
    wall_vickers_hardness_hv: wall_vickers_hardness_hv
    model_constant_n1: model_constant_n1
    model_constant_n2: model_constant_n2
    velocity_exponent_k2: velocity_exponent_k2
    diameter_exponent_k3: diameter_exponent_k3
    reference_diameter_dref: reference_diameter_dref
    reference_velocity_vref: reference_velocity_vref
    _child_aliases: dict
class enabled_52(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_n(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ductile_material_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dnv(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_52
    model_constant_k: model_constant_k
    model_constant_n: model_constant_n
    ductile_material_enabled: ductile_material_enabled
    _child_aliases: dict
class enabled_53(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_exponent_v(Real):
    _version: str
    fluent_name: str
    _python_name: str
class model_constant_c(Real):
    _version: str
    fluent_name: str
    _python_name: str
class packing_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class shielding_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class shear_erosion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_53
    velocity_exponent_v: velocity_exponent_v
    model_constant_c: model_constant_c
    packing_limit: packing_limit
    shielding_enabled: shielding_enabled
    _child_aliases: dict
class erosion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    generic: generic
    finnie: finnie
    mclaury: mclaury
    oka: oka
    dnv: dnv
    shear_erosion: shear_erosion
class discrete_phase_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bc_type: bc_type_1
    particle_wall_heat_exchange_enabled: particle_wall_heat_exchange_enabled
    reflection_coefficients: reflection_coefficients
    dem_collision_partner: dem_collision_partner
    reinject_using_injection: reinject_using_injection
    bc_user_function: bc_user_function
    film_condensation_enabled: film_condensation_enabled
    gas_side_boundary_layer_model_enabled: gas_side_boundary_layer_model_enabled
    lwf_to_vof_enabled: lwf_to_vof_enabled
    vof_to_lwf_enabled: vof_to_lwf_enabled
    impingement_splashing: impingement_splashing
    wall_roughness_parameters: wall_roughness_parameters
    friction_coefficient: friction_coefficient
    film_separation: film_separation
    film_particle_stripping: film_particle_stripping
    film_initialization: film_initialization
    film_in_situ_data_reduction: film_in_situ_data_reduction
    erosion: erosion
    _child_aliases: dict
class eulerian_film_wall(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_condition_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class film_height_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flux_momentum_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class flux_momentum(ListObject[flux_momentum_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: flux_momentum_child
class relative_initial_film_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class include_film_momentum_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_temperature_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class film_passive_scalar(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class enable_film_source_terms(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_mass_source(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class momentum_source_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class momentum_source(ListObject[momentum_source_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: momentum_source_child
class film_heat_source(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class film_passive_scalar_source(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class enable_film_phase_change(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class phase_change_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class film_condensation_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_vaporization_constant(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_condensation_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class film_vaporization_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class enable_flow_momentum_coupling(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_dpm_wall_splash(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class allow_film_boundary_separation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class impingement_model_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_splashed_particles(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class critical_temperature_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_roughness_length_ra(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_roughness_length_rz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enable_film_contact_angle_force(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_contact_angle_mean(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class film_contact_angle_rstd(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_contact_angle_beta(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_coupling_high(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_trans_high(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_trans_high_relax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_coupling_low(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_trans_low(Real):
    _version: str
    fluent_name: str
    _python_name: str
class film_vof_trans_low_relax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class nec_droplets_deposition_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class nec_deposition_rate_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nec_deposition_rate_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class nec_user_deposition_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class wall_film_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    eulerian_film_wall: eulerian_film_wall
    film_condition_type: film_condition_type
    film_height: film_height_1
    flux_momentum: flux_momentum
    relative_initial_film_velocity: relative_initial_film_velocity
    include_film_momentum_pressure: include_film_momentum_pressure
    film_temperature: film_temperature_1
    film_passive_scalar: film_passive_scalar
    enable_film_source_terms: enable_film_source_terms
    film_mass_source: film_mass_source
    momentum_source: momentum_source
    film_heat_source: film_heat_source
    film_passive_scalar_source: film_passive_scalar_source
    enable_film_phase_change: enable_film_phase_change
    phase_change_model: phase_change_model
    film_condensation_constant: film_condensation_constant
    film_vaporization_constant: film_vaporization_constant
    film_condensation_rate: film_condensation_rate
    film_vaporization_rate: film_vaporization_rate
    enable_flow_momentum_coupling: enable_flow_momentum_coupling
    enable_dpm_wall_splash: enable_dpm_wall_splash
    allow_film_boundary_separation: allow_film_boundary_separation
    impingement_model: impingement_model_1
    number_of_splashed_particles: number_of_splashed_particles
    critical_temperature_factor: critical_temperature_factor_1
    wall_roughness_length_ra: wall_roughness_length_ra
    wall_roughness_length_rz: wall_roughness_length_rz
    upper_deposition_limit_offset: upper_deposition_limit_offset
    deposition_delta_t: deposition_delta_t
    laplace_number_constant: laplace_number_constant
    partial_evaporation_ratio: partial_evaporation_ratio
    enable_film_contact_angle_force: enable_film_contact_angle_force
    film_contact_angle_mean: film_contact_angle_mean
    film_contact_angle_rstd: film_contact_angle_rstd
    film_contact_angle_beta: film_contact_angle_beta
    film_vof_coupling_high: film_vof_coupling_high
    film_vof_trans_high: film_vof_trans_high
    film_vof_trans_high_relax: film_vof_trans_high_relax
    film_vof_coupling_low: film_vof_coupling_low
    film_vof_trans_low: film_vof_trans_low
    film_vof_trans_low_relax: film_vof_trans_low_relax
    nec_droplets_deposition_enabled: nec_droplets_deposition_enabled
    nec_deposition_rate_model: nec_deposition_rate_model
    nec_deposition_rate_scale: nec_deposition_rate_scale
    nec_user_deposition_rate: nec_user_deposition_rate
    _child_aliases: dict
class gtemp_bc(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class g_temperature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class g_qflux(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class wall_restitution_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    gtemp_bc: gtemp_bc
    g_temperature: g_temperature
    g_qflux: g_qflux
    wall_restitution_coeff: wall_restitution_coeff
    contact_angles: contact_angles
    _child_aliases: dict
class elec_potential_jump(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class elec_potential_resistance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class echem_reaction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class elec_potential_mechs(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lithium_conc_cond(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lithium_boundary_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class potential_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    potential_boundary_condition: potential_boundary_condition
    potential_boundary_value: potential_boundary_value
    elec_potential_jump: elec_potential_jump
    elec_potential_resistance: elec_potential_resistance
    electrolyte_potential_boundary_condition: electrolyte_potential_boundary_condition
    current_density_boundary_value: current_density_boundary_value
    echem_reaction: echem_reaction
    elec_potential_mechs: elec_potential_mechs
    faradaic_heat: faradaic_heat
    lithium_conc_cond: lithium_conc_cond
    lithium_boundary_value: lithium_boundary_value
    _child_aliases: dict
class fensapice_ice_icing_mode(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_hflux_mode(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_hflux_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_hflux_file(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_wall_thickness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_wall_internal_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_wall_conductivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_ice_film_height(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class fensapice_drop_vwet(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_drop_reinj(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_wall_condition(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_udf_wall_cond(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_bc_norm_coeff(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class fensapice_dpm_bc_tang_coeff(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class icing_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fensapice_flow_bc_subtype: fensapice_flow_bc_subtype
    fensapice_ice_icing_mode: fensapice_ice_icing_mode
    fensapice_ice_hflux_mode: fensapice_ice_hflux_mode
    fensapice_ice_hflux_value: fensapice_ice_hflux_value
    fensapice_ice_hflux_file: fensapice_ice_hflux_file
    fensapice_ice_wall_thickness: fensapice_ice_wall_thickness
    fensapice_ice_wall_internal_temperature: fensapice_ice_wall_internal_temperature
    fensapice_ice_wall_conductivity: fensapice_ice_wall_conductivity
    fensapice_ice_film_height: fensapice_ice_film_height
    fensapice_drop_vwet: fensapice_drop_vwet
    fensapice_drop_reinj: fensapice_drop_reinj
    fensapice_dpm_wall_condition: fensapice_dpm_wall_condition
    fensapice_dpm_udf_wall_cond: fensapice_dpm_udf_wall_cond
    fensapice_dpm_bc_norm_coeff: fensapice_dpm_bc_norm_coeff
    fensapice_dpm_bc_tang_coeff: fensapice_dpm_bc_tang_coeff
class ablation_select_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ablation_vielle_a(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ablation_vielle_n(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ablation_flux(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ablation_surfacerxn_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_mass_fraction_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_44
    value: value_17
    profile_name: profile_name
    field_name: field_name
    udf: udf
    _child_aliases: dict
class species_mass_fraction_1(NamedObject[species_mass_fraction_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_mass_fraction_1_child
class ablation_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ablation_select_model: ablation_select_model
    ablation_vielle_a: ablation_vielle_a
    ablation_vielle_n: ablation_vielle_n
    ablation_flux: ablation_flux
    ablation_surfacerxn_density: ablation_surfacerxn_density
    species_mass_fraction: species_mass_fraction_1
    _child_aliases: dict
class phase_26_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_11
    turbulence: turbulence_6
    thermal: thermal_6
    radiation: radiation_7
    species: species_10
    discrete_phase: discrete_phase_5
    wall_film: wall_film_1
    multiphase: multiphase_7
    potential: potential_2
    structure: structure_1
    uds: uds
    icing: icing_2
    ablation: ablation_1
    geometry: geometry_6
class phase_26(NamedObject[phase_26_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_26_child
class settings_24(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    momentum: momentum_11
    turbulence: turbulence_6
    thermal: thermal_6
    radiation: radiation_7
    species: species_10
    discrete_phase: discrete_phase_5
    wall_film: wall_film_1
    multiphase: multiphase_7
    potential: potential_2
    structure: structure_1
    uds: uds
    icing: icing_2
    ablation: ablation_1
    geometry: geometry_6
    phase: phase_26
class wall_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    settings: settings_24
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    _child_aliases: dict
class wall(NamedObject[wall_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: wall_child
class boundaries_1(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axis: axis_5
    degassing: degassing
    exhaust_fan: exhaust_fan
    fan: fan
    geometry: geometry_5
    inlet_vent: inlet_vent
    intake_fan: intake_fan
    interface: interface
    interior: interior
    mass_flow_inlet: mass_flow_inlet
    mass_flow_outlet: mass_flow_outlet
    network: network
    network_end: network_end
    outflow: outflow
    outlet_vent: outlet_vent
    overset: overset
    periodic: periodic
    porous_jump: porous_jump
    pressure_far_field: pressure_far_field
    pressure_inlet: pressure_inlet
    pressure_outlet: pressure_outlet
    radiator: radiator
    rans_les_interface: rans_les_interface
    recirculation_inlet: recirculation_inlet
    recirculation_outlet: recirculation_outlet
    shadow: shadow
    symmetry: symmetry
    velocity_inlet: velocity_inlet
    wall: wall
    def set_type(self, boundary_names: list[str], type: str):
        """
        Input boundary name(s) to change its type.
        
        Parameters
        ----------
            boundary_names : List
                Input boundary names .
            type : str
                Input boundary type.
        """
class phase_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general: general_2
    conical: conical
    reference_frame: reference_frame_2
    mesh_motion: mesh_motion
    zonal_models: zonal_models
    porous_zone: porous_zone
    fan_zone: fan_zone
    embedded_les: embedded_les
    reaction: reaction
    sources: sources_1
    fixed_values: fixed_values
    multiphase: multiphase_1
    disabled: disabled
class phase_2(NamedObject[phase_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_2_child
class fluid_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    boundaries: boundaries_1
    general: general_2
    conical: conical
    reference_frame: reference_frame_2
    mesh_motion: mesh_motion
    zonal_models: zonal_models
    porous_zone: porous_zone
    fan_zone: fan_zone
    embedded_les: embedded_les
    reaction: reaction
    sources: sources_1
    fixed_values: fixed_values
    multiphase: multiphase_1
    disabled: disabled
    phase: phase_2
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input volume and location names to split.
        
        Parameters
        ----------
            name : str
                Input new volume name.
            locations : List
                Input location name which should be part of new volume.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this volume.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class fluid_2(NamedObject[fluid_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fluid_2_child
class phase_27_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general: general_3
    reference_frame: reference_frame_3
    mesh_motion: mesh_motion_1
    solid_motion: solid_motion
    sources: sources_1
    fixed_values: fixed_values
    material_orientation: material_orientation
    disabled: disabled_1
    internal: internal
class phase_27(NamedObject[phase_27_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_27_child
class solid_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    boundaries: boundaries_1
    general: general_3
    reference_frame: reference_frame_3
    mesh_motion: mesh_motion_1
    solid_motion: solid_motion
    sources: sources_1
    fixed_values: fixed_values
    material_orientation: material_orientation
    disabled: disabled_1
    internal: internal
    phase: phase_27
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input volume and location names to split.
        
        Parameters
        ----------
            name : str
                Input new volume name.
            locations : List
                Input location name which should be part of new volume.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this volume.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class solid_3(NamedObject[solid_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: solid_3_child
class volumes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    fluid: fluid_2
    solid: solid_3
    def list_physics(self):
        """
        List volume information.
        """
    def create(self, name: str, type: str):
        """
        Crate new volume.
        
        Parameters
        ----------
            name : str
                Input new volume name .
            type : str
                Input volume type.
        """
    def set_type(self, volume_names: list[str], type: str):
        """
        Input volume name(s) to change its type.
        
        Parameters
        ----------
            volume_names : List
                Input volume names .
            type : str
                Input volume type.
        """
class axis_6_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class axis_6(NamedObject[axis_6_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: axis_6_child
class degassing_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class degassing_1(NamedObject[degassing_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: degassing_1_child
class exhaust_fan_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_4
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class exhaust_fan_1(NamedObject[exhaust_fan_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: exhaust_fan_1_child
class fan_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    pressure_jump_specification: pressure_jump_specification
    swirl_velocity_specification: swirl_velocity_specification
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_5
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class fan_1(NamedObject[fan_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fan_1_child
class geometry_8_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class geometry_8(NamedObject[geometry_8_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: geometry_8_child
class inlet_vent_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_1
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_6
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class inlet_vent_1(NamedObject[inlet_vent_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: inlet_vent_1_child
class intake_fan_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_2
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_7
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class intake_fan_1(NamedObject[intake_fan_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: intake_fan_1_child
class interface_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    interface: interface_1
    geometry: geometry_6
    phase: phase_8
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class interface_2(NamedObject[interface_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interface_2_child
class interior_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    interior: interior_1
    phase: phase_9
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class interior_2(NamedObject[interior_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interior_2_child
class mass_flow_inlet_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_3
    turbulence: turbulence_2
    thermal: thermal_2
    radiation: radiation_3
    species: species_7
    discrete_phase: discrete_phase_3
    multiphase: multiphase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_10
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class mass_flow_inlet_1(NamedObject[mass_flow_inlet_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_inlet_1_child
class mass_flow_outlet_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_4
    turbulence: turbulence_3
    thermal: thermal_3
    radiation: radiation_4
    species: species_8
    discrete_phase: discrete_phase_3
    multiphase: multiphase_5
    potential: potential_1
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_11
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class mass_flow_outlet_1(NamedObject[mass_flow_outlet_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_outlet_1_child
class network_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    phase: phase_12
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class network_1(NamedObject[network_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_1_child
class network_end_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    network_end: network_end_1
    phase: phase_13
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class network_end_2(NamedObject[network_end_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_end_2_child
class outflow_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_5
    potential: potential
    structure: structure_1
    uds: uds_2
    radiation: radiation_2
    discrete_phase: discrete_phase_4
    geometry: geometry_6
    phase: phase_14
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class outflow_1(NamedObject[outflow_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outflow_1_child
class outlet_vent_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_6
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_15
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class outlet_vent_1(NamedObject[outlet_vent_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outlet_vent_1_child
class overset_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class overset_1(NamedObject[overset_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: overset_1_child
class periodic_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    periodic: periodic_1
    geometry: geometry_7
    phase: phase_16
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class periodic_2(NamedObject[periodic_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: periodic_2_child
class porous_jump_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    porous_jump: porous_jump_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_17
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class porous_jump_2(NamedObject[porous_jump_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: porous_jump_2_child
class pressure_far_field_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_7
    turbulence: turbulence_2
    thermal: thermal_4
    radiation: radiation_5
    species: species_9
    discrete_phase: discrete_phase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_18
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class pressure_far_field_1(NamedObject[pressure_far_field_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_far_field_1_child
class pressure_inlet_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_8
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_19
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class pressure_inlet_1(NamedObject[pressure_inlet_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_inlet_1_child
class pressure_outlet_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_9
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    phase: phase_20
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class pressure_outlet_1(NamedObject[pressure_outlet_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_outlet_1_child
class radiator_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    radiator: radiator_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    phase: phase_21
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class radiator_2(NamedObject[radiator_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: radiator_2_child
class rans_les_interface_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    turbulence: turbulence_4
    geometry: geometry_6
    phase: phase_22
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class rans_les_interface_1(NamedObject[rans_les_interface_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: rans_les_interface_1_child
class recirculation_inlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    recirculation_inlet: recirculation_inlet_1
    geometry: geometry_6
    phase: phase_23
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class recirculation_inlet_2(NamedObject[recirculation_inlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_inlet_2_child
class recirculation_outlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    recirculation_outlet: recirculation_outlet_1
    geometry: geometry_6
    phase: phase_24
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class recirculation_outlet_2(NamedObject[recirculation_outlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_outlet_2_child
class shadow_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class shadow_1(NamedObject[shadow_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: shadow_1_child
class symmetry_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    geometry: geometry_6
    phase: phase_3
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class symmetry_1(NamedObject[symmetry_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: symmetry_1_child
class velocity_inlet_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_10
    turbulence: turbulence_5
    thermal: thermal_5
    radiation: radiation_6
    species: species_7
    discrete_phase: discrete_phase_1
    multiphase: multiphase_6
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    phase: phase_25
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class velocity_inlet_1(NamedObject[velocity_inlet_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: velocity_inlet_1_child
class wall_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    locations: locations_2
    momentum: momentum_11
    turbulence: turbulence_6
    thermal: thermal_6
    radiation: radiation_7
    species: species_10
    discrete_phase: discrete_phase_5
    wall_film: wall_film_1
    multiphase: multiphase_7
    potential: potential_2
    structure: structure_1
    uds: uds
    icing: icing_2
    ablation: ablation_1
    geometry: geometry_6
    phase: phase_26
    def display(self):
        """
        Display physics object.
        """
    def split(self, name: str, locations: list[str]):
        """
        Input boundary and location names to split.
        
        Parameters
        ----------
            name : str
                Input new boundary name.
            locations : List
                Input location name which should be part of new boundary.
        """
    def set_location(self, locations: list[str]):
        """
        Input location name.
        
        Parameters
        ----------
            locations : List
                Input location name.
        """
    def set_type(self, type: str):
        """
        Change the type for this boundary.
        
        Parameters
        ----------
            type : str
                Input new type.
        """
    _child_aliases: dict
class wall_1(NamedObject[wall_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, volume: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: wall_1_child
class boundaries(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axis: axis_6
    degassing: degassing_1
    exhaust_fan: exhaust_fan_1
    fan: fan_1
    geometry: geometry_8
    inlet_vent: inlet_vent_1
    intake_fan: intake_fan_1
    interface: interface_2
    interior: interior_2
    mass_flow_inlet: mass_flow_inlet_1
    mass_flow_outlet: mass_flow_outlet_1
    network: network_1
    network_end: network_end_2
    outflow: outflow_1
    outlet_vent: outlet_vent_1
    overset: overset_1
    periodic: periodic_2
    porous_jump: porous_jump_2
    pressure_far_field: pressure_far_field_1
    pressure_inlet: pressure_inlet_1
    pressure_outlet: pressure_outlet_1
    radiator: radiator_2
    rans_les_interface: rans_les_interface_1
    recirculation_inlet: recirculation_inlet_2
    recirculation_outlet: recirculation_outlet_2
    shadow: shadow_1
    symmetry: symmetry_1
    velocity_inlet: velocity_inlet_1
    wall: wall_1
    def set_type(self, boundary_names: list[str], type: str):
        """
        Input boundary name(s) to change its type.
        
        Parameters
        ----------
            boundary_names : List
                Input boundary names .
            type : str
                Input boundary type.
        """
    def create(self, name: str, volume: str, type: str):
        """
        Crate new boundary.
        
        Parameters
        ----------
            name : str
                Input boundary name .
            volume : str
                Input volume name for which the new boundary.
            type : str
                Input boundary type.
        """
class type_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_1_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_2_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interfaces_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_17
    type: type_8
    boundary_1: boundary_1_1
    boundary_2: boundary_2_1
    periodicity: periodicity
    mesh_connectivity: mesh_connectivity
class interfaces(NamedObject[interfaces_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, boundary_1: str, boundary_2: str, periodicity: str, intf_type: str, mesh_connectivity: str):
        """
        Create mesh interfaces.
        
        Parameters
        ----------
            name : str
                The prefix for mesh interface names.
            boundary_1 : str
                First interface zones for pairing.
            boundary_2 : str
                First interface zones for pairing.
            periodicity : str
                Interface periodicity type.
            intf_type : str
                Interface type.
            mesh_connectivity : str
                Interface mesh connectivity type.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def auto_create(self):
        """
        Create mesh interfaces.
        """
    child_object_type: interfaces_child
class physics_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    volumes: volumes
    boundaries: boundaries
    interfaces: interfaces
class phase_28_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_28(NamedObject[phase_28_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_28_child
class axis_7_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class axis_7(NamedObject[axis_7_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: axis_7_child
class degassing_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class degassing_2(NamedObject[degassing_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: degassing_2_child
class phase_29_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_29(NamedObject[phase_29_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_29_child
class exhaust_fan_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_29
    momentum: momentum
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class exhaust_fan_2(NamedObject[exhaust_fan_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: exhaust_fan_2_child
class phase_30_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    pressure_jump_specification: pressure_jump_specification
    swirl_velocity_specification: swirl_velocity_specification
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_30(NamedObject[phase_30_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_30_child
class fan_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_30
    pressure_jump_specification: pressure_jump_specification
    swirl_velocity_specification: swirl_velocity_specification
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class fan_2(NamedObject[fan_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: fan_2_child
class geometry_9_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class geometry_9(NamedObject[geometry_9_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: geometry_9_child
class phase_31_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_1
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_31(NamedObject[phase_31_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_31_child
class inlet_vent_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_31
    momentum: momentum_1
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class inlet_vent_2(NamedObject[inlet_vent_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: inlet_vent_2_child
class phase_32_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_2
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_32(NamedObject[phase_32_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_32_child
class intake_fan_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_32
    momentum: momentum_2
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class intake_fan_2(NamedObject[intake_fan_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: intake_fan_2_child
class phase_33_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    interface: interface_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_33(NamedObject[phase_33_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_33_child
class interface_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_33
    interface: interface_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class interface_3(NamedObject[interface_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interface_3_child
class phase_34_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    interior: interior_1
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_34(NamedObject[phase_34_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_34_child
class interior_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_34
    interior: interior_1
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class interior_3(NamedObject[interior_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interior_3_child
class phase_35_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_3
    turbulence: turbulence_2
    thermal: thermal_2
    radiation: radiation_3
    species: species_7
    discrete_phase: discrete_phase_3
    multiphase: multiphase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_35(NamedObject[phase_35_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_35_child
class mass_flow_inlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_35
    momentum: momentum_3
    turbulence: turbulence_2
    thermal: thermal_2
    radiation: radiation_3
    species: species_7
    discrete_phase: discrete_phase_3
    multiphase: multiphase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class mass_flow_inlet_2(NamedObject[mass_flow_inlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_inlet_2_child
class phase_36_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_4
    turbulence: turbulence_3
    thermal: thermal_3
    radiation: radiation_4
    species: species_8
    discrete_phase: discrete_phase_3
    multiphase: multiphase_5
    potential: potential_1
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_36(NamedObject[phase_36_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_36_child
class mass_flow_outlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_36
    momentum: momentum_4
    turbulence: turbulence_3
    thermal: thermal_3
    radiation: radiation_4
    species: species_8
    discrete_phase: discrete_phase_3
    multiphase: multiphase_5
    potential: potential_1
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class mass_flow_outlet_2(NamedObject[mass_flow_outlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mass_flow_outlet_2_child
class phase_37_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    query_names: list[str]
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_37(NamedObject[phase_37_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_37_child
class network_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_37
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class network_2(NamedObject[network_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_2_child
class phase_38_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    network_end: network_end_1
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_38(NamedObject[phase_38_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_38_child
class network_end_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_38
    network_end: network_end_1
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class network_end_3(NamedObject[network_end_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: network_end_3_child
class phase_39_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_5
    potential: potential
    structure: structure_1
    uds: uds_2
    radiation: radiation_2
    discrete_phase: discrete_phase_4
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_39(NamedObject[phase_39_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_39_child
class outflow_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_39
    momentum: momentum_5
    potential: potential
    structure: structure_1
    uds: uds_2
    radiation: radiation_2
    discrete_phase: discrete_phase_4
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class outflow_2(NamedObject[outflow_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outflow_2_child
class phase_40_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_6
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_40(NamedObject[phase_40_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_40_child
class outlet_vent_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_40
    momentum: momentum_6
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class outlet_vent_2(NamedObject[outlet_vent_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: outlet_vent_2_child
class overset_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class overset_2(NamedObject[overset_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: overset_2_child
class phase_41_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    periodic: periodic_1
    geometry: geometry_7
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_41(NamedObject[phase_41_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_41_child
class periodic_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_41
    periodic: periodic_1
    geometry: geometry_7
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class periodic_3(NamedObject[periodic_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: periodic_3_child
class phase_42_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    porous_jump: porous_jump_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_42(NamedObject[phase_42_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_42_child
class porous_jump_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_42
    porous_jump: porous_jump_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class porous_jump_3(NamedObject[porous_jump_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: porous_jump_3_child
class phase_43_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_7
    turbulence: turbulence_2
    thermal: thermal_4
    radiation: radiation_5
    species: species_9
    discrete_phase: discrete_phase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_43(NamedObject[phase_43_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_43_child
class pressure_far_field_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_43
    momentum: momentum_7
    turbulence: turbulence_2
    thermal: thermal_4
    radiation: radiation_5
    species: species_9
    discrete_phase: discrete_phase_4
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class pressure_far_field_2(NamedObject[pressure_far_field_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_far_field_2_child
class phase_44_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_8
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_44(NamedObject[phase_44_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_44_child
class pressure_inlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_44
    momentum: momentum_8
    turbulence: turbulence_1
    thermal: thermal_1
    radiation: radiation_2
    species: species_6
    discrete_phase: discrete_phase_1
    multiphase: multiphase_3
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class pressure_inlet_2(NamedObject[pressure_inlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_inlet_2_child
class phase_45_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_9
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_45(NamedObject[phase_45_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_45_child
class pressure_outlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_45
    momentum: momentum_9
    turbulence: turbulence
    thermal: thermal
    radiation: radiation_1
    species: species_5
    discrete_phase: discrete_phase_1
    multiphase: multiphase_2
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class pressure_outlet_2(NamedObject[pressure_outlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pressure_outlet_2_child
class phase_46_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    radiator: radiator_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_46(NamedObject[phase_46_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_46_child
class radiator_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_46
    radiator: radiator_1
    discrete_phase: discrete_phase_2
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class radiator_3(NamedObject[radiator_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: radiator_3_child
class phase_47_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    turbulence: turbulence_4
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_47(NamedObject[phase_47_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_47_child
class rans_les_interface_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_47
    turbulence: turbulence_4
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class rans_les_interface_2(NamedObject[rans_les_interface_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: rans_les_interface_2_child
class phase_48_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    recirculation_inlet: recirculation_inlet_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_48(NamedObject[phase_48_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_48_child
class recirculation_inlet_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_48
    recirculation_inlet: recirculation_inlet_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class recirculation_inlet_3(NamedObject[recirculation_inlet_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_inlet_3_child
class phase_49_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    recirculation_outlet: recirculation_outlet_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class phase_49(NamedObject[phase_49_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_49_child
class recirculation_outlet_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_49
    recirculation_outlet: recirculation_outlet_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class recirculation_outlet_3(NamedObject[recirculation_outlet_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: recirculation_outlet_3_child
class shadow_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class shadow_2(NamedObject[shadow_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: shadow_2_child
class symmetry_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_28
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
class symmetry_2(NamedObject[symmetry_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: symmetry_2_child
class phase_50_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_10
    turbulence: turbulence_5
    thermal: thermal_5
    radiation: radiation_6
    species: species_7
    discrete_phase: discrete_phase_1
    multiphase: multiphase_6
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_50(NamedObject[phase_50_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_50_child
class velocity_inlet_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_50
    momentum: momentum_10
    turbulence: turbulence_5
    thermal: thermal_5
    radiation: radiation_6
    species: species_7
    discrete_phase: discrete_phase_1
    multiphase: multiphase_6
    potential: potential
    structure: structure_1
    uds: uds
    icing: icing_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class velocity_inlet_2(NamedObject[velocity_inlet_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: velocity_inlet_2_child
class phase_51_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    momentum: momentum_11
    turbulence: turbulence_6
    thermal: thermal_6
    radiation: radiation_7
    species: species_10
    discrete_phase: discrete_phase_5
    wall_film: wall_film_1
    multiphase: multiphase_7
    potential: potential_2
    structure: structure_1
    uds: uds
    icing: icing_2
    ablation: ablation_1
    geometry: geometry_6
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class phase_51(NamedObject[phase_51_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_51_child
class wall_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    name: name_4
    phase: phase_51
    momentum: momentum_11
    turbulence: turbulence_6
    thermal: thermal_6
    radiation: radiation_7
    species: species_10
    discrete_phase: discrete_phase_5
    wall_film: wall_film_1
    multiphase: multiphase_7
    potential: potential_2
    structure: structure_1
    uds: uds
    icing: icing_2
    ablation: ablation_1
    geometry: geometry_6
    def display(self):
        """
        Show the selected zone's surface. If the surface does not exist, this command creates it first and then displays it.
        """
    def create_surface(self):
        """
        Create surface for selected zone.
        """
    def adjacent_cell_zone(self):
        """
        Get adjacent cell zone for this face zone.
        """
    def shadow_face_zone(self):
        """
        Get shadow zone for this wall zone.
        """
    _child_aliases: dict
class wall_2(NamedObject[wall_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: wall_2_child
class sigma(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sigma2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tangential_source(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_5(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class general_nrbc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    sigma: sigma
    sigma2: sigma2
    relax: relax
    tangential_source: tangential_source
    verbosity: verbosity_5
class enable_16(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class discretization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class under_relaxation_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_6(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class turbo_specific_nrbc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable: enable_16
    discretization: discretization
    under_relaxation: under_relaxation_1
    verbosity: verbosity_6
    def initialize(self):
        """
        Initialize turbo-specific non-reflecting b.c.'s.
        """
    def show_status(self):
        """
        Show current status of turbo-specific non-reflecting b.c.'s.
        """
class non_reflecting_bc(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general_nrbc: general_nrbc
    turbo_specific_nrbc: turbo_specific_nrbc
class setup_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ninjections(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class urf(Real):
    _version: str
    fluent_name: str
    _python_name: str
class injection_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coupled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class extraction_thread(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class uniform(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class injection_hole_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class discrete_ext(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class static(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class formulation(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cht_coupling(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class point1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class point2_or_vector(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class injection_hole_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    point1: point1
    point2_or_vector: point2_or_vector
    diameter: diameter_1
class injection_hole(ListObject[injection_hole_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: injection_hole_child
class holes_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_4
    injection_hole: injection_hole
class method_7(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class acd(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cd(Real):
    _version: str
    fluent_name: str
    _python_name: str
class direction_4(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class angle_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_injection_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    acd: acd
    cd: cd
    direction: direction_4
    angle: angle_2
class dynamic_injection(ListObject[dynamic_injection_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: dynamic_injection_child
class dynamic_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_7
    dynamic_injection: dynamic_injection
class method_8(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flow_rate_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class flow_direction_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mixture_fraction_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class progress_variable_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_11(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class static_injection_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mass_flow_rate: mass_flow_rate_2
    flow_direction: flow_direction_1
    temperature: temperature_4
    mixture_fraction: mixture_fraction_1
    progress_variable: progress_variable_1
    species: species_11
class static_injection(ListObject[static_injection_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: static_injection_child
class static_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_8
    static_injection: static_injection
class injection_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    injection_thread: injection_thread
    coupled: coupled
    extraction_thread: extraction_thread
    uniform: uniform
    injection_hole_count: injection_hole_count
    discrete_ext: discrete_ext
    static: static
    formulation: formulation
    cht_coupling: cht_coupling
    holes_setup: holes_setup
    dynamic_setup: dynamic_setup
    static_setup: static_setup
class injection_1(ListObject[injection_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: injection_1_child
class model_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ninjections: ninjections
    urf: urf
    injection: injection_1
class perforated_wall(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    setup_method: setup_method
    model_setup: model_setup
    def read_input_file(self, file_name: str):
        """
        'read_input_file' command.
        """
class degassing_verbosity(Integer, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blending_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bin_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class average_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_outlet_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    blending_factor: blending_factor_1
    bin_count: bin_count
    average_pressure: average_pressure
class riemann_invariants_tangency_correction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class type_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_far_field_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    riemann_invariants_tangency_correction: riemann_invariants_tangency_correction
    type: type_9
class physical_velocity_porous_formulation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class under_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_7(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class target_mass_flow_rate_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    under_relaxation_factor: under_relaxation_factor
    verbosity: verbosity_7
class delay_model_change_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class batch_thread_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class advanced_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    delay_model_change_update: delay_model_change_update
    batch_thread_update: batch_thread_update
class type_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flow_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pressure_gradient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bulk_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relax_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class niter(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_direction_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class periodic_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_10
    mass_flow: mass_flow_1
    pressure_gradient: pressure_gradient
    bulk_temperature: bulk_temperature
    relax: relax_1
    niter: niter
    flow_direction: flow_direction_2
class settings_25(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    degassing_verbosity: degassing_verbosity
    mass_flow: mass_flow
    pressure_outlet: pressure_outlet_3
    pressure_far_field: pressure_far_field_3
    physical_velocity_porous_formulation: physical_velocity_porous_formulation
    target_mass_flow_rate_settings: target_mass_flow_rate_settings
    advanced: advanced_2
    periodic_conditions: periodic_conditions
    def detect_boundary_advection(self):
        """
        Detect and set boundary advection at solid walls.
        """
class boundary_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axis: axis_7
    degassing: degassing_2
    exhaust_fan: exhaust_fan_2
    fan: fan_2
    geometry: geometry_9
    inlet_vent: inlet_vent_2
    intake_fan: intake_fan_2
    interface: interface_3
    interior: interior_3
    mass_flow_inlet: mass_flow_inlet_2
    mass_flow_outlet: mass_flow_outlet_2
    network: network_2
    network_end: network_end_3
    outflow: outflow_2
    outlet_vent: outlet_vent_2
    overset: overset_2
    periodic: periodic_3
    porous_jump: porous_jump_3
    pressure_far_field: pressure_far_field_2
    pressure_inlet: pressure_inlet_2
    pressure_outlet: pressure_outlet_2
    radiator: radiator_3
    rans_les_interface: rans_les_interface_2
    recirculation_inlet: recirculation_inlet_3
    recirculation_outlet: recirculation_outlet_3
    shadow: shadow_2
    symmetry: symmetry_2
    velocity_inlet: velocity_inlet_2
    wall: wall_2
    non_reflecting_bc: non_reflecting_bc
    perforated_wall: perforated_wall
    settings: settings_25
    def copy(self, from_: str, to: list[str], verbosity: bool):
        """
        Copy boundary conditions to another zone.
        
        Parameters
        ----------
            from_ : str
                Copy boundary conditions from zone.
            to : List
                Copy boundary conditions to zone.
            verbosity : bool
                Copy boundary conditions: Print more information.
        """
    def set_zone_type(self, zone_list: list[str], new_type: str):
        """
        Set a zone's type.
        
        Parameters
        ----------
            zone_list : List
                Zone name list.
            new_type : str
                Give new zone type.
        """
    def slit_face_zone(self, zone_name: str):
        """
        Slit a two-sided wall into two connected wall zones.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
        """
    def non_overlapping_zone_name(self, zone_name: str):
        """
        Get non-overlapping zone name from the associated interface zone.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
        """
    def slit_interior_between_diff_materials(self):
        """
        Slit interior created between different materials into coupled walls.
        """
    def create_all_shell_threads(self):
        """
        Mark all finite thickness wall for shell creation. Shell zones will be created at the start of iterations.
        """
    def recreate_all_shells(self):
        """
        Create shell on all the walls where which were deleted using the command delete-all-shells.
        """
    def delete_all_shells(self):
        """
        Delete all shell zones and switch off shell conduction on all the walls. These zones can be recreated using the command recreate-all-shells.
        """
    def orient_face_zone(self, zone_name: str):
        """
        Orient the face zone.
        
        Parameters
        ----------
            zone_name : str
                The zone name.
        """
    def knudsen_number_calculator(self, length: float | str, boundary: str):
        """
        Utility to compute Kudsen number based on characteristic length and boundary information.
        
        Parameters
        ----------
            length : real
                Characteristic physics length.
            boundary : str
                Give flow boundary name.
        """
    def add_suffix_or_prefix(self, zone_name: list[str], append: bool, text: str):
        """
        Add suffix or prefix to zone name.
        
        Parameters
        ----------
            zone_name : List
                Zone name list.
            append : bool
                Add suffix to zone name.
            text : str
                Add prefix to zone name.
        """
    def rename_by_adjacency(self, zone_name: list[str], abbreviate_types: bool, exclude: bool):
        """
        Rename zone to adjacent zones.
        
        Parameters
        ----------
            zone_name : List
                Zone name list.
            abbreviate_types : bool
                Specifies whether to provide abbreviate types.
            exclude : bool
                Specifies whether to exclude custom names.
        """
    def rename_to_default(self, zone_name: list[str], abbrev: bool, exclude: bool):
        """
        Rename zone to default name.
        
        Parameters
        ----------
            zone_name : List
                Zone name list.
            abbrev : bool
                Specifies whether to provide abbreviate types.
            exclude : bool
                Specifies whether to exclude custom names.
        """
    _child_aliases: dict
class zone1_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class zone2_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class interface_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_17
    zone1: zone1_1
    zone2: zone2_1
    zone1_list: zone1_list
    zone2_list: zone2_list
    mapped: mapped
    enable_local_mapped_tolerance: enable_local_mapped_tolerance
    use_local_edge_length_factor: use_local_edge_length_factor
    local_relative_mapped_tolerance: local_relative_mapped_tolerance
    local_absolute_mapped_tolerance: local_absolute_mapped_tolerance
    periodic: periodic_4
    coupled: coupled_1
    matching: matching
    static: static_1
class interface_4(NamedObject[interface_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, zone1: str, zone2: str, zone1_list: list[str], zone2_list: list[str], mapped: bool, enable_local_mapped_tolerance: bool, use_local_edge_length_factor: bool, local_relative_mapped_tolerance: float | str, local_absolute_mapped_tolerance: float | str, periodic: bool, coupled: bool, matching: bool, ignore_area_difference: bool, static: bool):
        """
        Create mesh interfaces.
        
        Parameters
        ----------
            name : str
                The prefix for mesh interface names.
            zone1 : str
                First interface zones for pairing.
            zone2 : str
                Second interface zones for pairing.
            zone1_list : List
                First interface defining this mesh-interface.
            zone2_list : List
                Second interface defining this mesh-interface.
            mapped : bool
                Specifies whether mesh-interface is mapped.
            enable_local_mapped_tolerance : bool
                Enable local tolerance for this mesh interface.
            use_local_edge_length_factor : bool
                Enable tolerance based on local edge length factor instead of absolute tolerance.
            local_relative_mapped_tolerance : real
                Tolerance.
            local_absolute_mapped_tolerance : real
                Tolerance.
            periodic : bool
                Specifies whether mesh-interface is adjacent to periodic boundaries.
            coupled : bool
                Specifies whether mesh-interface is coupled.
            matching : bool
                Specifies whether mesh-interface is matching.
            ignore_area_difference : bool
                Check if user want to create poorly matched interface.
            static : bool
                Specifies whether mesh-interface is static.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: interface_4_child
class proximity_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_default_name_prefix(String):
    _version: str
    fluent_name: str
    _python_name: str
class set_minimum_area_percentage(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pairing_between_different_cell_zones_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pairing_between_interface_zones_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class keep_empty_interface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    proximity_tolerance: proximity_tolerance
    set_default_name_prefix: set_default_name_prefix
    set_minimum_area_percentage: set_minimum_area_percentage
    pairing_between_different_cell_zones_only: pairing_between_different_cell_zones_only
    pairing_between_interface_zones_only: pairing_between_interface_zones_only
    keep_empty_interface: keep_empty_interface
    def naming_option(self, option: str, change_all_one_to_one_interfaces_names: bool):
        """
        Specify whether or not to include an informative suffix to the mesh interface name.
        
        Parameters
        ----------
            option : str
                (0) basic:           name-prefix:##
        (1) name-based:      name-prefix:##:interface_name1::interface_name2
        (2) ID-based:        name-prefix:##:interface_ID1::interface-ID2
        (3) adjacency-based: name-prefix:##:cell_zone_name1::cell_zone_name2.
            change_all_one_to_one_interfaces_names : bool
                Apply the new naming option to existing one-to-one mesh interfaces?.
        """
    def set_one_to_one_pairing_tolerance(self, adjustable_tolerance: bool, use_length_factor: bool, relative_length_factor: float | str, absolute_tolerance: float | str):
        """
        Set one-to-one adjustable tolerance.
        
        Parameters
        ----------
            adjustable_tolerance : bool
                Enable/disable one-to-one adjustable tolerance.
            use_length_factor : bool
                Enable relative or absolute tolerance input.
            relative_length_factor : real
                The valid number for the relative length factor.
            absolute_tolerance : real
                The valid number for the absolute tolerance.
        """
    def set_exclusion_pairs(self, exclude_pairs: bool, exclusion_pairs: list[str]):
        """
        Set one-to-one interface exclusion pairs.
        
        Parameters
        ----------
            exclude_pairs : bool
                Excluding specified zone pairs.
            exclusion_pairs : List
                Wall and/or interface zones for pairing. no input will clear the exclusion paris.
        """
class name_18(String):
    _version: str
    fluent_name: str
    _python_name: str
class adjacent_cell_zone_1_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class adjacent_cell_zone_2_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class paired_zones_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbo_choice_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbo_non_overlap_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbo_create_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_18
    adjacent_cell_zone_1: adjacent_cell_zone_1_1
    zone1: zone1_1
    adjacent_cell_zone_2: adjacent_cell_zone_2_1
    zone2: zone2_1
    paired_zones: paired_zones_1
    turbo_choice: turbo_choice_1
    turbo_non_overlap: turbo_non_overlap_1
class turbo_create(NamedObject[turbo_create_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, mesh_interface_name: str, adjacent_cell_zone_1: str, zone1: str, adjacent_cell_zone_2: str, zone2: str, paired_zones: list[str], turbo_choice: str, turbo_non_overlap: bool):
        """
        Create turbo mesh interface.
        
        Parameters
        ----------
            mesh_interface_name : str
                The mesh interface names.
            adjacent_cell_zone_1 : str
                Adjacent cell zone 1.
            zone1 : str
                First interface defining this mesh-interface.
            adjacent_cell_zone_2 : str
                Adjacent cell zone 2.
            zone2 : str
                Second interface defining this mesh-interface.
            paired_zones : List
                Paired zones list.
            turbo_choice : str
                Your choice of pitch-change types.
            turbo_non_overlap : bool
                Enable non-overlapping walls option for this mesh-interface.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def interface_check(self, object_name: str):
        """
        Perform turbo interface check.
        
        Parameters
        ----------
            object_name : str
                Turbo interface for interface check.
        """
    child_object_type: turbo_create_child
class verbosity_8(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class enforce_continuity_after_bc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coupled_interfaces_inherit_bcs(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_si_with_nodes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enforce_coupled_wall_between_solids(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_visualization_of_interfaces(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mapped_interface_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def solution_controls(self, mapping_frequency: int, under_relaxation_factor: float | str):
        """
        Specification of mapped frequency and under-relaxation factor for mapped interfaces.
        
        Parameters
        ----------
            mapping_frequency : int
                Mapping Frequency.
            under_relaxation_factor : real
                Under-Relaxation Factor.
        """
    def tolerance(self, use_local_edge_length_factor: bool, gtol_length_factor: float | str, gtol_absolute_value: float | str, update: bool):
        """
        Specification of mapped interface tolerance.
        
        Parameters
        ----------
            use_local_edge_length_factor : bool
                Enable tolerance based on local edge length factor instead of absolute tolerance.
            gtol_length_factor : real
                Tolerance.
            gtol_absolute_value : real
                Tolerance.
            update : bool
                Update mapped interface with new tolerance.
        """
    def convert_to_mapped_interface(self, convert_all: bool, convert_poorly_matching: bool, use_local_edge_length_factor: bool, gtol_length_factor: float | str, gtol_absolute_value: float | str):
        """
        Convert non-conformal mesh interface to mapped mesh interfaces.
        
        Parameters
        ----------
            convert_all : bool
                Convert all mesh interfaces to mapped mesh interfaces.
            convert_poorly_matching : bool
                Convert poorly matching mesh interfaces to mapped mesh interfaces.
            use_local_edge_length_factor : bool
                Enable tolerance based on local edge length factor instead of absolute tolerance.
            gtol_length_factor : real
                Tolerance.
            gtol_absolute_value : real
                Tolerance.
        """
class non_conformal_interface_numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def change_numerics(self, use_sided_area_vector: bool, use_nci_sided_area_vectors: bool, recreate: bool):
        """
        Enable modified non-conformal interface numerics.
        
        Parameters
        ----------
            use_sided_area_vector : bool
                Enforce watertight cells for fluid-solid and solid-solid interfaces?.
            use_nci_sided_area_vectors : bool
                Use enhanced gradient computations for fluid-solid and solid-solid interfaces?.
            recreate : bool
                Recreate non-conformal interfaces?.
        """
class mesh_interfaces(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    interface: interface_4
    auto_options: auto_options
    turbo_create: turbo_create
    verbosity: verbosity_8
    enforce_continuity_after_bc: enforce_continuity_after_bc
    coupled_interfaces_inherit_bcs: coupled_interfaces_inherit_bcs
    enable_si_with_nodes: enable_si_with_nodes
    enforce_coupled_wall_between_solids: enforce_coupled_wall_between_solids
    enable_visualization_of_interfaces: enable_visualization_of_interfaces
    mapped_interface_options: mapped_interface_options
    non_conformal_interface_numerics: non_conformal_interface_numerics
    def create(self, si_name: str, all_bnd: bool, zone_ids: list[str], exclude_pair: bool, exclude_zone_ids: list[str], zone1_list: list[str], zone2_list: list[str], mapped: bool, enable_local_mapped_tolerance: bool, use_local_edge_length_factor: bool, local_relative_mapped_tolerance: float | str, local_absolute_mapped_tolerance: float | str, periodic: bool, coupled: bool, matching: bool, static: bool, ignore_area_difference: bool):
        """
        Create a mesh interface.
        
        Parameters
        ----------
            si_name : str
                The name/prefix for the mesh interface.
            all_bnd : bool
                Pick up zones for mesh interface creation.
            zone_ids : List
                Boundary zones and/or cell zones for pairing.
            exclude_pair : bool
                Excluding specified zone pairs.
            exclude_zone_ids : List
                Wall and/or interface zones for pairing.
            zone1_list : List
                First interface defining this mesh-interface.
            zone2_list : List
                Second interface defining this mesh-interface.
            mapped : bool
                Specifies whether mesh-interface is mapped.
            enable_local_mapped_tolerance : bool
                Enable local tolerance for this mesh interface.
            use_local_edge_length_factor : bool
                Enable tolerance based on local edge length factor instead of absolute tolerance.
            local_relative_mapped_tolerance : real
                Tolerance.
            local_absolute_mapped_tolerance : real
                Tolerance.
            periodic : bool
                Specifies whether mesh-interface is adjacent to periodic boundaries.
            coupled : bool
                Specifies whether mesh-interface is coupled.
            matching : bool
                Specifies whether mesh-interface is matching.
            static : bool
                Specifies whether mesh-interface is static.
            ignore_area_difference : bool
                Check if user want to create poorly matched interface.
        """
    def delete(self, name: str):
        """
        Delete a mesh interface.
        
        Parameters
        ----------
            name : str
                Mesh interface name to be deleted.
        """
    def list(self):
        """
        List all mesh-interfaces.
        """
    def delete_all(self):
        """
        Delete all mesh interfaces.
        """
    def display(self, zones: list[str]):
        """
        Display specified mesh interface zone.
        
        Parameters
        ----------
            zones : List
                Zone-name to be displayed.
        """
    def one_to_one_pairing(self, one_to_one_interface: bool, proceed: bool, delete_empty: bool):
        """
        Use the default one-to-one interface creation method?.
        
        Parameters
        ----------
            one_to_one_interface : bool
                Use the default one-to-one interface creation method?.
            proceed : bool
                Would you like to proceed?.
            delete_empty : bool
                Delete empty interface interior zones from non-overlapping interfaces?.
        """
    def delete_interfaces_with_small_overlap(self, delete: bool, overlapping_percentage_threshold: float | str):
        """
        Delete mesh interfaces that have an area percentage under a specified value.
        
        Parameters
        ----------
            delete : bool
                Delete mesh interfaces that have an area percentage under a specified value?.
            overlapping_percentage_threshold : real
                The area percentage used for deletion (%).
        """
    def turbo_interface_health_check(self, name: list[str]):
        """
        Check General Turbo Interface health check.
        
        Parameters
        ----------
            name : List
                The mesh interface name.
        """
    def turbo_interface_delete(self, delete_all_intf: bool, name: list[str]):
        """
        Delete mesh interfaces.
        
        Parameters
        ----------
            delete_all_intf : bool
                Delete all mesh interfaces.
            name : List
                Mesh interface names to be deleted.
        """
    def create_manually(self, name: str, zone_list_1: list[str], zone_list_2: list[str], matching: bool, ignore_area_difference: bool):
        """
        Create one-to-one interfaces between two groups of boundary zones even if they do not currently overlap.
        
        Parameters
        ----------
            name : str
                The prefix for mesh interface names.
            zone_list_1 : List
                The boundary zones belonging to the first group.
            zone_list_2 : List
                The boundary zones belonging to the second group.
            matching : bool
                Specifies whether mesh-interface is matching.
            ignore_area_difference : bool
                Check if user want to create poorly matched interface.
        """
    def auto_create(self, pair_all: bool, one_to_one_pairs: bool, interface_zones: list[str], create: bool, name: str, apply_mapped: bool, static_interface: bool):
        """
        Automatically pair and create mesh interfaces for some or all interface zones.
        
        Parameters
        ----------
            pair_all : bool
                Automatic pairing of all unintersected interface zones?.
            one_to_one_pairs : bool
                Create one-to-one pairs only?.
            interface_zones : List
                Unintersected interface zones for pairing.
            create : bool
                Create mesh interfaces with all these pairs?.
            name : str
                The prefix for mesh interface names.
            apply_mapped : bool
                Apply Mapped option at solids.
            static_interface : bool
                Static?.
        """
    def improve_quality(self, check_mapped_interface_quality: bool, proceed: bool, tol_percentage_increment: float | str):
        """
        Improve mesh interface quality.
        
        Parameters
        ----------
            check_mapped_interface_quality : bool
                Check Mapped Interface Qaulity.
            proceed : bool
                Continue to improve the mapped interface quality.
            tol_percentage_increment : real
                The percentage increment for tolerance (%).
        """
    def make_phaselag_from_boundaries(self, side_1: str, side_2: str, angle: float | str, interface_name: str):
        """
        Make interface zones phase lagged.
        
        Parameters
        ----------
            side_1 : str
                Id/name of zone to convert to phase lag side 1.
            side_2 : str
                Id/name of zone to convert to phase lag side 2.
            angle : real
                Rotation angle.
            interface_name : str
                The name for this phaselag interface.
        """
    def make_phaselag_from_periodic(self, periodic_zone_name: str):
        """
        Convert periodic interface to phase lagged.
        
        Parameters
        ----------
            periodic_zone_name : str
                Periodic zone id/name.
        """
    def transfer_motion_across_interfaces(self, enabled: bool, option_name: str):
        """
        Transfer motion from one side of the interface to the other when only one side undergoes user-defined or system-coupling motion.
        
        Parameters
        ----------
            enabled : bool
                Enable motion transfer across mesh interfaces?.
            option_name : str
                Transfer type.
        """
    def remove_left_handed_interface_faces(self, enable: bool, update: bool):
        """
        Remove left-handed faces during mesh interface creation.
        
        Parameters
        ----------
            enable : bool
                Remove left-handed faces on mesh interfaces.
            update : bool
                Update existing mesh interfaces?.
        """
    def non_overlapping_zone_name(self, zone_name: str):
        """
        Get non-overlapping zone name from the associated interface zone.
        
        Parameters
        ----------
            zone_name : str
                Zone id/name.
        """
    _child_aliases: dict
class enabled_55(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_56(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constant_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class bnd_node_relax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bnd_stiffness_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spring_on_all_elements(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class spring_on_simplex_elements(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class laplace_node_relax(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skew_smooth_niter(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skew_smooth_cell_skew_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skew_smooth_face_skew_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skew_smooth_all_deforming_boundaries(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_9(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class spring_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    constant_factor: constant_factor
    tolerance: tolerance_3
    max_iter: max_iter_1
    bnd_node_relax: bnd_node_relax
    bnd_stiffness_factor: bnd_stiffness_factor
    spring_on_all_elements: spring_on_all_elements
    spring_on_simplex_elements: spring_on_simplex_elements
    laplace_node_relax: laplace_node_relax
    skew_smooth_niter: skew_smooth_niter
    skew_smooth_cell_skew_max: skew_smooth_cell_skew_max
    skew_smooth_face_skew_max: skew_smooth_face_skew_max
    skew_smooth_all_deforming_boundaries: skew_smooth_all_deforming_boundaries
    verbosity: verbosity_9
class diffusion_coeff_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_coeff_parameter(Real):
    _version: str
    fluent_name: str
    _python_name: str
class amg_stabilization_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class relative_tolerance_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_10(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_distance_method(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_from_ref(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_fvm(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffusion_coeff_function: diffusion_coeff_function
    diffusion_coeff_parameter: diffusion_coeff_parameter
    amg_stabilization: amg_stabilization_1
    max_iter: max_iter_2
    relative_tolerance: relative_tolerance_1
    verbosity: verbosity_10
    boundary_distance_method: boundary_distance_method
    smooth_from_ref: smooth_from_ref
    diffusion_fvm: diffusion_fvm
class poisson_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class relative_tolerance_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_11(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class linelast_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    poisson_ratio: poisson_ratio
    amg_stabilization: amg_stabilization_1
    max_iter: max_iter_3
    relative_tolerance: relative_tolerance_2
    verbosity: verbosity_11
    smooth_from_ref: smooth_from_ref
class relative_tolerance_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_12(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class local_smoothing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_local_layers(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_bl_with_adj(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radial_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    relative_tolerance: relative_tolerance_3
    verbosity: verbosity_12
    local_smoothing: local_smoothing
    smooth_from_ref: smooth_from_ref
    number_local_layers: number_local_layers
    smooth_bl_with_adj: smooth_bl_with_adj
class smoothing_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_56
    method: method_9
    spring_settings: spring_settings
    diffusion_settings: diffusion_settings
    linelast_settings: linelast_settings
    radial_settings: radial_settings
class enabled_57(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class unified_remeshing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cell_skew_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class face_skew_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class retain_size_distribution(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class length_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class settings_26(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    unified_remeshing: unified_remeshing
    cell_skew_max: cell_skew_max
    face_skew_max: face_skew_max
    retain_size_distribution: retain_size_distribution
    length_min: length_min
    length_max: length_max
class remeshing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_57
    settings: settings_26
class enabled_58(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class split_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class collapse_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constant_height(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class settings_27(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    split_factor: split_factor
    collapse_factor: collapse_factor
    constant_height: constant_height
class layering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_58
    settings: settings_27
class methods(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    smoothing: smoothing_1
    remeshing: remeshing
    layering: layering
class enabled_59(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class crank_shaft_speed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class starting_crank_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class crank_period(Real):
    _version: str
    fluent_name: str
    _python_name: str
class crank_angle_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_crank_angle_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class crank_radius(Real):
    _version: str
    fluent_name: str
    _python_name: str
class connecting_rod_length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class piston_pin_offset(Real):
    _version: str
    fluent_name: str
    _python_name: str
class piston_stroke_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_valve_lift(Real):
    _version: str
    fluent_name: str
    _python_name: str
class write_freq(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_center_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_origin(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_function_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class swirl_axis(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class tumble_x(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class tumble_y(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class threads(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class write_in_cylinder_ouput(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    write_freq: write_freq
    swirl_center_method: swirl_center_method
    swirl_origin: swirl_origin
    user_defined_function: user_defined_function_1
    swirl_axis: swirl_axis
    tumble_x: tumble_x
    tumble_y: tumble_y
    threads: threads
    file_name: file_name_15
class in_cylinder(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    crank_shaft_speed: crank_shaft_speed
    starting_crank_angle: starting_crank_angle
    crank_period: crank_period
    crank_angle_step: crank_angle_step
    max_crank_angle_step: max_crank_angle_step
    crank_radius: crank_radius
    connecting_rod_length: connecting_rod_length
    piston_pin_offset: piston_pin_offset
    piston_stroke_cutoff: piston_stroke_cutoff
    minimum_valve_lift: minimum_valve_lift
    write_in_cylinder_ouput: write_in_cylinder_ouput
class x_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class gravity_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_5
    y: y_5
    z: z_5
class write_motion_history(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class basename(String):
    _version: str
    fluent_name: str
    _python_name: str
class second_order(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mass(Real):
    _version: str
    fluent_name: str
    _python_name: str
class preload(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spring_stiffness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_location(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class reference_maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constraint(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    reference_location: reference_location
    reference_minimum: reference_minimum
    reference_maximum: reference_maximum
class one_dof_translation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    direction: direction
    preload: preload
    spring_stiffness: spring_stiffness
    constraint: constraint
class center_of_rotation(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class reference_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class angle_minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class angle_maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constraint_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    reference_angle: reference_angle
    angle_minimum: angle_minimum
    angle_maximum: angle_maximum
class moment_of_inertia(Real):
    _version: str
    fluent_name: str
    _python_name: str
class one_dof_rotation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    axis: axis_3
    center_of_rotation: center_of_rotation
    preload: preload
    spring_stiffness: spring_stiffness
    constraint: constraint_1
    moment_of_inertia: moment_of_inertia
class ixx(Real):
    _version: str
    fluent_name: str
    _python_name: str
class iyy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class izz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ixy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ixz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class iyz(Real):
    _version: str
    fluent_name: str
    _python_name: str
class inertia_tensor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ixx: ixx
    iyy: iyy
    izz: izz
    ixy: ixy
    ixz: ixz
    iyz: iyz
class sdof_properties_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    mass: mass
    one_dof_translation: one_dof_translation
    one_dof_rotation: one_dof_rotation
    inertia_tensor: inertia_tensor
class sdof_properties(NamedObject[sdof_properties_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def list_properties_all(self):
        """
        'list_properties_all' command.
        """
    child_object_type: sdof_properties_child
class six_dof(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    gravity: gravity_1
    write_motion_history: write_motion_history
    basename: basename
    second_order: second_order
    sdof_properties: sdof_properties
class update_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class relaxation_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class residual_criterion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class implicit_update(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    update_interval: update_interval
    relaxation_factor: relaxation_factor_1
    residual_criterion: residual_criterion
class face_zones_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class proximity_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class contact_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_60(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solution_stabilization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flow_control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_60
    method: method_10
    solution_stabilization: solution_stabilization
    def create_zone(self, zone: str, new_name: str):
        """
        Create a flow control zone.
        
        Parameters
        ----------
            zone : str
                Zone.
            new_name : str
                Zone name.
        """
    def delete_zone(self, zone: str):
        """
        Delete a flow control zone.
        
        Parameters
        ----------
            zone : str
                Zone.
        """
    def update_contact_marks(self):
        """
        Update which cells are marked in order to block flow in the contact region.
        """
    def render_contact_cells(self, include: bool):
        """
        Set the option to include contact-cells in post-processing.
        
        Parameters
        ----------
            include : bool
                Include contact-cells in post-processing?.
        """
class verbosity_13(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class contact_detection(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    face_zones: face_zones_1
    proximity_threshold: proximity_threshold
    contact_udf: contact_udf
    flow_control: flow_control
    verbosity: verbosity_13
class options_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    in_cylinder: in_cylinder
    six_dof: six_dof
    implicit_update: implicit_update
    contact_detection: contact_detection
class zone_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class motion_def(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class passive(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class six_dof_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    passive: passive
class exclude_motion_bc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class relative_zone(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class relative_motion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    relative_zone: relative_zone
class cg_position(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class orientation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    angle: angle_1
    axis: axis_3
class cg_velocity(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class angular_velocity_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class rigid_body_properties(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cg_position: cg_position
    orientation: orientation
    cg_velocity: cg_velocity
    angular_velocity: angular_velocity_1
class lift_stroke(Real):
    _version: str
    fluent_name: str
    _python_name: str
class in_cylinder_props(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    lift_stroke: lift_stroke
    axis: axis_3
class motion(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    motion_def: motion_def
    six_dof: six_dof_1
    exclude_motion_bc: exclude_motion_bc
    relative_motion: relative_motion
    rigid_body_properties: rigid_body_properties
    in_cylinder_props: in_cylinder_props
class global_settings(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_lscale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_lscale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_skewness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    global_settings: global_settings
    min_lscale: min_lscale
    max_lscale: max_lscale
    max_skewness: max_skewness
class remeshing_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    parameters: parameters_5
class methods_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_elements(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class elements(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    global_settings: global_settings
    smooth_elements: smooth_elements
class smoothing_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    methods: methods_1
    elements: elements
class type_12(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class height(Real):
    _version: str
    fluent_name: str
    _python_name: str
class t0(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_12
    height: height
class t1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_12
    height: height
class adjacent_zones(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    t0: t0
    t1: t1
class bl_deform(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_skew(Real):
    _version: str
    fluent_name: str
    _python_name: str
class udf_deform(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    max_skew: max_skew
class meshing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    remeshing: remeshing_1
    smoothing: smoothing_2
    adjacent_zones: adjacent_zones
    bl_deform: bl_deform
    udf_deform: udf_deform
class definition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class point_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class normal_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class plane_def(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    point: point_1
    normal: normal_2
class radius_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cylinder_def(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    origin: origin_4
    axis: axis_3
    radius: radius_4
class geom_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class feature_angle(Real):
    _version: str
    fluent_name: str
    _python_name: str
class feature_detection(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    feature_angle: feature_angle
class geometry_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    definition: definition
    plane_def: plane_def
    cylinder_def: cylinder_def
    geom_udf: geom_udf
    feature_detection: feature_detection
class enabled_61(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_11
    scale: scale_2
class stabilization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_61
    parameters: parameters_6
class solver_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    stabilization: stabilization
class dynamic_zones_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    zone: zone_1
    type: type_11
    motion: motion
    meshing: meshing
    geometry: geometry_10
    solver: solver_1
class dynamic_zones(NamedObject[dynamic_zones_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def list_properties_all(self):
        """
        'list_properties_all' command.
        """
    child_object_type: dynamic_zones_child
class dynamic_mesh(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_55
    methods: methods
    options: options_8
    dynamic_zones: dynamic_zones
    def mesh_motion(self, dt: float | str, steps: int, display_grid: bool, display_frequency: int, save_picture: bool, enable_autosave: bool, update_mesh_interfaces: bool, update_overset_interfaces: bool, update_monitors: bool, pseudo_dt: float | str, update: bool):
        """
        Perform mesh motion.
        
        Parameters
        ----------
            dt : real
                'dt' child.
            steps : int
                'steps' child.
            display_grid : bool
                'display_grid' child.
            display_frequency : int
                'display_frequency' child.
            save_picture : bool
                'save_picture' child.
            enable_autosave : bool
                'enable_autosave' child.
            update_mesh_interfaces : bool
                'update_mesh_interfaces' child.
            update_overset_interfaces : bool
                'update_overset_interfaces' child.
            update_monitors : bool
                'update_monitors' child.
            pseudo_dt : real
                'pseudo_dt' child.
            update : bool
                Update the Mesh?.
        """
class area_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class depth(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density_9(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enthalpy(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class temperature_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class yplus(Real):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class viscosity_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ratio_of_specific_heats(Real):
    _version: str
    fluent_name: str
    _python_name: str
class zone_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_values(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    area: area_1
    depth: depth
    density: density_9
    enthalpy: enthalpy
    length: length_4
    pressure: pressure
    temperature: temperature_5
    yplus: yplus
    velocity: velocity_1
    viscosity: viscosity_3
    ratio_of_specific_heats: ratio_of_specific_heats
    zone: zone_2
    volume: volume_1
    def compute(self, from_zone_type: str, from_physics_type: str, from_zone_name: str, from_physics_name: str, phase: str):
        """
        'compute' command.
        """
    def list_values(self):
        """
        'list_values' command.
        """
class motion_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class linear_velocity(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class speed_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class rotation_axis(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class rotational_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    speed: speed_1
    rotation_axis: rotation_axis
class constant_velocity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    linear_velocity: linear_velocity
    rotational_velocity: rotational_velocity
class track_zone(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zone_track(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    track_zone: track_zone
class track_volume(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_track(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    track_volume: track_volume
class motion_definition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class motion_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    motion_type: motion_type
    constant_velocity: constant_velocity
    zone_track: zone_track
    volume_track: volume_track
    motion_definition: motion_definition
class parent_ref_frame(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class origin_6(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class direction_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class point_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_label(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axis_from(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_option: direction_option
    vector: vector
    point: point_2
    axis_label: axis_label
class axis_to(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    direction_option: direction_option
    vector: vector
    point: point_2
    axis_label: axis_label
class first_axis(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_from: axis_from
    axis_to: axis_to
class auto_second_axis(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class second_axis(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_from: axis_from
    axis_to: axis_to
class orientation_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    first_axis: first_axis
    auto_second_axis: auto_second_axis
    second_axis: second_axis
class initial_state(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    origin: origin_6
    orientation: orientation_1
class origin_7(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class z_axis_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class current_state(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    origin: origin_7
    x_axis: x_axis_1
    y_axis: y_axis_1
    z_axis: z_axis_1
class display_state(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frames_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    motion: motion_1
    parent_ref_frame: parent_ref_frame
    initial_state: initial_state
    current_state: current_state
    display_state: display_state
class reference_frames(NamedObject[reference_frames_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def display_frame(self, name: str):
        """
        Display Reference Frame.
        
        Parameters
        ----------
            name : str
                Display a reference frame by selecting its name.
        """
    def hide_frame(self, name: str):
        """
        Hide Reference Frame.
        
        Parameters
        ----------
            name : str
                Hide a reference frame.
        """
    child_object_type: reference_frames_child
class name_24(String):
    _version: str
    fluent_name: str
    _python_name: str
class description(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parameterid(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parametername(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class input_parameter(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class output_parameter(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class named_expressions_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    name: name_24
    definition: definition
    description: description
    parameterid: parameterid
    parametername: parametername
    unit: unit_1
    input_parameter: input_parameter
    output_parameter: output_parameter
    def get_value(self):
        """
        'get_value' query.
        """
    def get_info(self):
        """
        Provide summary of expression properties.
        """
class named_expressions(NamedObject[named_expressions_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def compute(self, names: list[str]):
        """
        'compute' command.
        """
    child_object_type: named_expressions_child
class enabled_62(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class backward_compatibility(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def pre_24r2_mp_discretization(self, enabled: bool):
        """
        Pre 24R2 discretization for the mixing-plane.
        
        Parameters
        ----------
            enabled : bool
                Enable/Disable enhanced discretization for the mixing-plane.
        """
class enhanced_mpm_bands_viability_check(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class expert_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    backward_compatibility: backward_compatibility
    enhanced_mpm_bands_viability_check: enhanced_mpm_bands_viability_check
    def flux_scaling(self, enabled_all: bool, disabled_all: bool, interface_name: str, scale: bool):
        """
        Enable or disable flux scaling at the turbo interfaces.
        
        Parameters
        ----------
            enabled_all : bool
                Enable flux scaling for all the interfaces.
            disabled_all : bool
                Disable flux scaling for all the interfaces.
            interface_name : str
                Define the turbo interface to enable/disable flux scaling.
            scale : bool
                Enable or disable flux scaling for the turbo interface.
        """
    def nps_minimize_po_loss(self, enabled_all: bool, disabled_all: bool, interface_name: str, nps_min_po_loss: bool):
        """
        Enable or disable minimize total pressure loss option for the nps interfaces.
        
        Parameters
        ----------
            enabled_all : bool
                Enable for all the nps interfaces.
            disabled_all : bool
                Disable for all the nps interfaces.
            interface_name : str
                Define the nps interface to enable/disable minimize total pressure loss option.
            nps_min_po_loss : bool
                Enable or disable minimize total pressure loss option for the specified interface.
        """
    def print_settings(self):
        """
        Display the current status(on/off) of flux scaling for the turbo interfaces.
        """
    def get_po_loss_settings(self):
        """
        Return the settings to minimize pressure loss for the NPS interfaces.
        """
    def get_flux_settings(self):
        """
        Return the flux scale settings for the turbo interfaces.
        """
class bands_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_bands(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def on_all_interfaces(self, bands: int):
        """
        Maximum number of bands to be employed at all the mixing planes.
        
        Parameters
        ----------
            bands : int
                Maximum number of band counts.
        """
    def on_specified_interface(self, interface_name: str, bands: int):
        """
        Maximum number of bands to be employed at the specified mixing plane interface.
        
        Parameters
        ----------
            interface_name : str
                Define the mixing plane interface to specify band count.
            bands : int
                Maximum number of band counts.
        """
class mixing_plane_model(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    bands_type: bands_type
    number_of_bands: number_of_bands
    def list_mixing_planes(self):
        """
        Display the configuration settings of mixing planes in the current case.
        """
class general_turbo_interface(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    expert: expert_5
    mixing_plane_model: mixing_plane_model
class models_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_62
    general_turbo_interface: general_turbo_interface
    def export_boundary_mesh(self, file_name: str, boundary_list: list[str], global_: bool):
        """
        Export boundary mesh file.
        
        Parameters
        ----------
            file_name : str
                Output file name.
            boundary_list : List
                Boundary zones for exporting mesh.
            global_ : bool
                Enable/disable output of mesh global number.
        """
class turbomachinery(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    models: models_1
class auto_compile_compiled_functions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class initialization(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class adjust(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class execute_at_end(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_legacy_case(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_case_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class write_legacy_case(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class write_case_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_legacy_data(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_data_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class write_legacy_data(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class write_data_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class execute_at_exit(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wall_heat_flux(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wall_nodal_displacement(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class wall_nodal_force(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class net_reaction_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class relax_to_equilibrium(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vol_reaction_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_cd_for_perforated_walls(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_reaction_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class particle_reaction_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class electrochemical_reaction_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_premixed_source(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class thickened_flame_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class chemistry_step(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cphi_mixing_model(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flame_area_density_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ignition_source(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cavitation_mass_rate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class do_source(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class do_diffuse_reflectivity(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class do_specular_reflectivity(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class emissivity_weighting_factor(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solar_transmissivity(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pdf_table(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reacting_channel_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class function_hooks(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initialization: initialization
    adjust: adjust
    execute_at_end: execute_at_end
    read_legacy_case: read_legacy_case
    read_case: read_case_1
    write_legacy_case: write_legacy_case
    write_case: write_case_1
    read_legacy_data: read_legacy_data
    read_data: read_data_2
    write_legacy_data: write_legacy_data
    write_data: write_data_2
    execute_at_exit: execute_at_exit
    wall_heat_flux: wall_heat_flux
    wall_nodal_displacement: wall_nodal_displacement
    wall_nodal_force: wall_nodal_force
    net_reaction_rate: net_reaction_rate
    relax_to_equilibrium: relax_to_equilibrium
    vol_reaction_rate: vol_reaction_rate
    dynamic_cd_for_perforated_walls: dynamic_cd_for_perforated_walls
    surface_reaction_rate: surface_reaction_rate
    particle_reaction_rate: particle_reaction_rate
    electrochemical_reaction_rate: electrochemical_reaction_rate
    turbulent_premixed_source: turbulent_premixed_source
    thickened_flame: thickened_flame_1
    chemistry_step: chemistry_step
    cphi_mixing_model: cphi_mixing_model
    flame_area_density: flame_area_density_1
    ignition_source: ignition_source
    cavitation_mass_rate: cavitation_mass_rate
    do_source: do_source
    do_diffuse_reflectivity: do_diffuse_reflectivity
    do_specular_reflectivity: do_specular_reflectivity
    emissivity_weighting_factor: emissivity_weighting_factor
    solar_transmissivity: solar_transmissivity
    pdf_table: pdf_table
    reacting_channel_solver: reacting_channel_solver
class memory_locations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class memory_node_locations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class zone_based_udm(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class udm_zone_ids(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class memory(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    memory_locations: memory_locations
    memory_node_locations: memory_node_locations
    zone_based_udm: zone_based_udm
    udm_zone_ids: udm_zone_ids
class inlet_diffusion_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diffusion_long(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class domain_id(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solution_zones(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class selected_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flux_fcn(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_fcn(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scalar_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    domain_id: domain_id
    solution_zones: solution_zones
    selected_zones: selected_zones
    flux_fcn: flux_fcn
    unsteady_fcn: unsteady_fcn
class scalar(ListObject[scalar_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: scalar_child
class scalars(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    inlet_diffusion: inlet_diffusion_3
    diffusion_long: diffusion_long
    scalar: scalar
    def update(self):
        """
        Update UDS model with the current settings.
        """
class user_defined_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    auto_compile_compiled_functions: auto_compile_compiled_functions
    function_hooks: function_hooks
    memory: memory
    scalars: scalars
    def compiled_udf(self, library_name: str, source_files: list[str], header_files: list[str], use_built_in_compiler: bool):
        """
        Compile user-defined functions.
        
        Parameters
        ----------
            library_name : str
                The UDF libraries.
            source_files : List
                The source files.
            header_files : List
                The header files.
            use_built_in_compiler : bool
                Enable/disable the use of the built-in compiler.
        """
    def load(self, udf_library_name: str):
        """
        Load UDF library.
        
        Parameters
        ----------
            udf_library_name : str
                Name of the UDF library to compile.
        """
    def unload(self, udf_library_name: list[str]):
        """
        Unload UDF library.
        
        Parameters
        ----------
            udf_library_name : List
                Name of the UDF library to compile.
        """
    def interpreted_functions(self, file_name: str, cpp_cmd_name: str, stack_size: int, listing: bool, use_contributed_cpp: bool):
        """
        Load interpreted user-defined functions.
        """
    def execute_on_demand(self, lib_name: str):
        """
        Execute UDFs on demand.
        
        Parameters
        ----------
            lib_name : str
                Execute on demand function name.
        """
    def oned_coupling(self, code_name: str, input_file_name: str):
        """
        Load 1D library.
        
        Parameters
        ----------
            code_name : str
                The code name.
            input_file_name : str
                The input file name.
        """
    def enable_udf_on_gpu(self):
        """
        Compile UDFs with OpenCL support.
        """
    def fan_model(self, fan_zone_id: list[str], update_interval: int, profile_points: int, program_name: str):
        """
        Configure user-defined fan model.
        
        Parameters
        ----------
            fan_zone_id : List
                Fan zones.
            update_interval : int
                The Fan update interval.
            profile_points : int
                The Fan update interval.
            program_name : str
                The Fam program name.
        """
    def customized_addon_library(self, customize_addon: bool, addon_udf_file: str):
        """
        Compile customized addon module?.
        
        Parameters
        ----------
            customize_addon : bool
                Enable/disable the customization of the addon library.
            addon_udf_file : str
                The addon UDF file.
        """
    _child_aliases: dict
class update_interval_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class circumferential_averaged_profile_enhanced_bands_check(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class profiles(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    update_interval: update_interval_2
    circumferential_averaged_profile_enhanced_bands_check: circumferential_averaged_profile_enhanced_bands_check
    def display_profile_point_cloud_data(self, profile_name: str, field_contour: bool, field_variable: str):
        """
        Display Profile Point cloud data Command.
        
        Parameters
        ----------
            profile_name : str
                Profile name.
            field_contour : bool
                Field contour?.
            field_variable : str
                Field variable.
        """
    def display_profile_surface(self, profile_name: str, field_contour: bool, field_variable: str):
        """
        Display Profile Surface/field rendering command.
        """
    def set_preference_profile_point_cloud_data(self, profile_point_marker: str, profile_point_marker_size: float | str, profile_point_marker_color: str):
        """
        Profile Point attributes command.
        """
    def overlay_profile_point_cloud_data(self, overlay: bool, profile_name: str, graphics_object: str, display_contour: bool, field_variable: str):
        """
        Overlay Display Profile Point cloud data Command.
        
        Parameters
        ----------
            overlay : bool
                Overlay profile point cloud data.
            profile_name : str
                Profile name.
            graphics_object : str
                Graphics Object.
            display_contour : bool
                Enable/Disable Profile Field Contour.
            field_variable : str
                Field variable.
        """
    def overlay_profile_surface(self, overlay: bool, profile_name: str, graphics_object: str, field_contour: bool, filed_variable: str):
        """
        Overlay Display Profile Surface Command.
        
        Parameters
        ----------
            overlay : bool
                Overlay profile surface.
            profile_name : str
                Profile name.
            graphics_object : str
                Graphics Object.
            field_contour : bool
                Field contour?.
            filed_variable : str
                Field variable.
        """
    def list_profiles(self):
        """
        List-profiles-command.
        """
    def list_profile_parameters(self, profile_name: str):
        """
        List-profile-parameters-command.
        """
    def list_profile_parameters_with_value(self, profile_name: str):
        """
        List-profile-parameters-with-value-command.
        """
    def list_profile_fields(self, profile_name: str):
        """
        List-profile-fields-command.
        """
    def delete(self, profile_name: str):
        """
        Delete-profile-command.
        """
    def delete_all(self):
        """
        Delete-all-command.
        """
    def query_list_profiles(self):
        """
        List-profiles-command.
        """
    def query_list_profile_fields(self, profile_name: str):
        """
        Query list-profile-fields.
        
        Parameters
        ----------
            profile_name : str
                Profile name.
        """
    def query_list_profile_parameters(self, profile_name: str):
        """
        Query-list-profile-parameters-class.
        
        Parameters
        ----------
            profile_name : str
                Profile name.
        """
    def query_list_profile_parameters_with_value(self, profile_name: str):
        """
        Query-list-profile-parameters-with-value-class.
        
        Parameters
        ----------
            profile_name : str
                Profile name.
        """
class setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general: general
    models: models
    materials: materials
    cell_zone_conditions: cell_zone_conditions
    model_topology: model_topology
    physics: physics_1
    boundary_conditions: boundary_conditions
    mesh_interfaces: mesh_interfaces
    dynamic_mesh: dynamic_mesh
    reference_values: reference_values
    reference_frames: reference_frames
    named_expressions: named_expressions
    turbomachinery: turbomachinery
    user_defined: user_defined_1
    profiles: profiles
    _child_aliases: dict
class axis_stabilization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class axisymmetric(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_stabilization: axis_stabilization
class flow_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class skewness_correction_itr_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class neighbor_correction_itr_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skewness_neighbor_coupling(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coupled_form(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solve_n_phase(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flux_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flux_auto_select(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class p_v_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    flow_scheme: flow_scheme
    skewness_correction_itr_count: skewness_correction_itr_count
    neighbor_correction_itr_count: neighbor_correction_itr_count
    skewness_neighbor_coupling: skewness_neighbor_coupling
    coupled_form: coupled_form
    solve_n_phase: solve_n_phase
    flux_type: flux_type
    flux_auto_select: flux_auto_select
    _child_aliases: dict
class gradient_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class discretization_scheme_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class discretization_scheme(NamedObject[discretization_scheme_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: discretization_scheme_child
class spatial_discretization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    gradient_scheme: gradient_scheme
    discretization_scheme: discretization_scheme
class diffusion_coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class shield_bl_distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class low_diffusion_central(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diffusion_coefficient: diffusion_coefficient
    shield_bl_distance: shield_bl_distance
class bcd_boundedness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class spatial_discretization_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    low_diffusion_central: low_diffusion_central
    bcd_boundedness: bcd_boundedness
class coupled_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class segregated_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class density_based_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class formulation_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coupled_solver: coupled_solver
    segregated_solver: segregated_solver
    density_based_solver: density_based_solver
class relaxation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_acceleration_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class casm_cutoff_multiplier(Real):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_acceleration_for_stretched_meshes_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    convergence_acceleration_type: convergence_acceleration_type
    casm_cutoff_multiplier: casm_cutoff_multiplier
class pseudo_time_method(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    formulation: formulation_1
    relaxation_method: relaxation_method
    convergence_acceleration_for_stretched_meshes: convergence_acceleration_for_stretched_meshes_1
    def relaxation_bounds(self, relaxation_bounding_method: str, default_min_max_relaxation_limits: bool, minimum_allowed_effctive_relaxation: float | str, maximum_allowed_effctive_relaxation: float | str):
        """
        Select relaxation bounding scheme for pseudo time method.
        
        Parameters
        ----------
            relaxation_bounding_method : str
                'relaxation_bounding_method' child.
            default_min_max_relaxation_limits : bool
                'default_min_max_relaxation_limits' child.
            minimum_allowed_effctive_relaxation : real
                'minimum_allowed_effctive_relaxation' child.
            maximum_allowed_effctive_relaxation : real
                'maximum_allowed_effctive_relaxation' child.
        """
class transient_formulation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class unsteady_global_time(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class accelerated_non_iterative_time_marching(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_18(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_acceleration_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class casm_cutoff_multiplier_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_acceleration_for_stretched_meshes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_18
    convergence_acceleration_type: convergence_acceleration_type_1
    casm_cutoff_multiplier: casm_cutoff_multiplier_1
class enable_19(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class relaxation_factor_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class divergence_prevention(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_19
    relaxation_factor: relaxation_factor_2
class reactions_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reaction_source_term_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class implicit_bodyforce_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class physical_velocity_formulation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class disable_rhie_chow_flux(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class presto_pressure_scheme(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class first_to_second_order_blending(Real):
    _version: str
    fluent_name: str
    _python_name: str
class alternate_diffusion_for_porous_region_solids(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class expert_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    reactions: reactions_2
    reaction_source_term_relaxation_factor: reaction_source_term_relaxation_factor
    implicit_bodyforce_treatment: implicit_bodyforce_treatment
    velocity_formulation: velocity_formulation
    physical_velocity_formulation: physical_velocity_formulation
    disable_rhie_chow_flux: disable_rhie_chow_flux
    presto_pressure_scheme: presto_pressure_scheme
    first_to_second_order_blending: first_to_second_order_blending
    alternate_diffusion_for_porous_region_solids: alternate_diffusion_for_porous_region_solids
    _child_aliases: dict
class frozen_flux(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_20(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class relaxation_factor_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class select_variables(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_13(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class high_order_term_relaxation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_20
    relaxation_factor: relaxation_factor_3
    select_variables: select_variables
    type: type_13
    _child_aliases: dict
class relative_permeability_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class capillary_pressure_as_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class porous_media(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    relative_permeability: relative_permeability_2
    capillary_pressure_as_diffusion: capillary_pressure_as_diffusion
class enhanced_numerics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class alternate_bc_formulation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class analytical_thermodynamic_derivatives(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class compressible_flow(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enhanced_numerics: enhanced_numerics
    alternate_bc_formulation: alternate_bc_formulation
    analytical_thermodynamic_derivatives: analytical_thermodynamic_derivatives
class thin_film(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class liquid_vof_factor(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class boiling_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thin_film: thin_film
    liquid_vof_factor: liquid_vof_factor
class viscosity_averaging(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turb_visc_based_damping(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class density_func_expo(Real):
    _version: str
    fluent_name: str
    _python_name: str
class density_ratio_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class n_smooth_for_interfacial_regims(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class sm_relax_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class viscous_func_options(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class density_func_options(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class exponent_smoothing_func(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exponent_density_func(Real):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class near_wall_treatment_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class interfacial_artificial_viscosity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    n_smooth_for_interfacial_regims: n_smooth_for_interfacial_regims
    sm_relax_factor: sm_relax_factor
    viscous_func_options: viscous_func_options
    density_func_options: density_func_options
    exponent_smoothing_func: exponent_smoothing_func
    exponent_density_func: exponent_density_func
    boundary_treatment: boundary_treatment
    near_wall_treatment: near_wall_treatment_1
class viscous_flow(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    viscosity_averaging: viscosity_averaging
    turb_visc_based_damping: turb_visc_based_damping
    density_func_expo: density_func_expo
    density_ratio_cutoff: density_ratio_cutoff
    interfacial_artificial_viscosity: interfacial_artificial_viscosity
class schnerr_evap_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class schnerr_cond_coeff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_vapor_pressure_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_vapor_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class display_clipped_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class p_limit_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class old_treatment_for_turbulent_diffusion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cavitation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    schnerr_evap_coeff: schnerr_evap_coeff
    schnerr_cond_coeff: schnerr_cond_coeff
    max_vapor_pressure_ratio: max_vapor_pressure_ratio
    min_vapor_pressure: min_vapor_pressure
    display_clipped_pressure: display_clipped_pressure
    p_limit_method: p_limit_method
    turbulent_diffusion: turbulent_diffusion
    old_treatment_for_turbulent_diffusion: old_treatment_for_turbulent_diffusion
class vof_from_min_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_from_max_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_to_min_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_to_max_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ia_norm_min_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_rel_humidity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class evaporation_condensation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    vof_from_min_limit: vof_from_min_limit
    vof_from_max_limit: vof_from_max_limit
    vof_to_min_limit: vof_to_min_limit
    vof_to_max_limit: vof_to_max_limit
    ia_norm_min_limit: ia_norm_min_limit
    max_rel_humidity: max_rel_humidity
class heat_flux_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class show_expert_options(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class two_resistance_boiling_framework(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class boiling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    heat_flux_relaxation_factor: heat_flux_relaxation_factor
    show_expert_options: show_expert_options
    two_resistance_boiling_framework: two_resistance_boiling_framework
class vof_min_seeding(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ia_grad_sym(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class area_density_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    vof_min_seeding: vof_min_seeding
    ia_grad_sym: ia_grad_sym
class alternative_energy_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class heat_mass_transfer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cavitation: cavitation
    evaporation_condensation: evaporation_condensation
    boiling: boiling
    area_density: area_density_1
    alternative_energy_treatment: alternative_energy_treatment
class turb_disp_trans_lower_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turb_disp_trans_upper_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_dispersion_trans_vof(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turb_disp_trans_lower_vof: turb_disp_trans_lower_vof
    turb_disp_trans_upper_vof: turb_disp_trans_upper_vof
class turb_disp_limit_lower_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turb_disp_limit_upper_vof(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_dispersion_limit_vof_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turb_disp_limit_lower_vof: turb_disp_limit_lower_vof
    turb_disp_limit_upper_vof: turb_disp_limit_upper_vof
class turbulent_dispersion_limit_vof(NamedObject[turbulent_dispersion_limit_vof_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: turbulent_dispersion_limit_vof_child
class turbulent_dispersion_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulent_dispersion_trans_vof: turbulent_dispersion_trans_vof
    turbulent_dispersion_limit_vof: turbulent_dispersion_limit_vof
class t_h_legacy(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class t_h_vof_correction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class t_h_freq_correction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_interaction_troshko_hassan(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    t_h_legacy: t_h_legacy
    t_h_vof_correction: t_h_vof_correction
    t_h_freq_correction: t_h_freq_correction
class turbulence_interaction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulent_interaction_troshko_hassan: turbulent_interaction_troshko_hassan
class interphase_interactions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    turbulent_dispersion: turbulent_dispersion_1
    turbulence_interaction: turbulence_interaction
class smoothed_density_stabilization_method(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class num_of_density_smoothing(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class false_time_step_linearization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_21(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dt_init_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dt_max_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dt_factor_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dt_factor_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_velocity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_dt_advanced_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_21
    dt_init_limit: dt_init_limit
    dt_max: dt_max_1
    dt_factor_min: dt_factor_min
    dt_factor_max: dt_factor_max
    max_velocity_ratio: max_velocity_ratio
class pseudo_transient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    smoothed_density_stabilization_method: smoothed_density_stabilization_method
    num_of_density_smoothing: num_of_density_smoothing
    false_time_step_linearization: false_time_step_linearization
    auto_dt_advanced_controls: auto_dt_advanced_controls
class buoyancy_force_linearization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class blended_treatment_for_buoyancy_forces(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coupled_vof(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    buoyancy_force_linearization: buoyancy_force_linearization
    blended_treatment_for_buoyancy_forces: blended_treatment_for_buoyancy_forces
class low_order_rhie_chow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rhie_chow_flux(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    low_order_rhie_chow: low_order_rhie_chow
class limit_pressure_correction_gradient(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class skewness_correction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    limit_pressure_correction_gradient: limit_pressure_correction_gradient
class p_v_coupling_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coupled_vof: coupled_vof
    rhie_chow_flux: rhie_chow_flux
    skewness_correction: skewness_correction
class outer_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_time_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_outer_iter(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_outer_iterations(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initial_time_steps: initial_time_steps
    initial_outer_iter: initial_outer_iter
class enable_instability_detector(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set_cfl_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_cfl_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class set_velocity_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class unstable_event_outer_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class instability_detector(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_instability_detector: enable_instability_detector
    set_cfl_limit: set_cfl_limit
    set_cfl_type: set_cfl_type
    set_velocity_limit: set_velocity_limit
    unstable_event_outer_iterations: unstable_event_outer_iterations
class hybrid_nita(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    outer_iterations: outer_iterations
    initial_outer_iterations: initial_outer_iterations
    instability_detector: instability_detector
class solve_flow_last(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solve_exp_vof_at_end(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class equation_order(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    solve_flow_last: solve_flow_last
    solve_exp_vof_at_end: solve_exp_vof_at_end
class enable_dynamic_strength(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set_dynamic_strength_exponent(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_maximum_dynamic_strength(Real):
    _version: str
    fluent_name: str
    _python_name: str
class anti_diffusion_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_dynamic_strength: enable_dynamic_strength
    set_dynamic_strength_exponent: set_dynamic_strength_exponent
    set_maximum_dynamic_strength: set_maximum_dynamic_strength
class advanced_stability_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pseudo_transient: pseudo_transient
    p_v_coupling: p_v_coupling_1
    hybrid_nita: hybrid_nita
    equation_order: equation_order
    anti_diffusion: anti_diffusion_1
class recommended_defaults_for_existing_cases(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class old_default_of_operating_density_method(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class old_default_of_volume_fraction_smoothing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class old_variant_of_presto_for_cases_using_structured_mesh(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class revert_to_pre_r20_1_default_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    old_default_of_operating_density_method: old_default_of_operating_density_method
    old_default_of_volume_fraction_smoothing: old_default_of_volume_fraction_smoothing
    old_variant_of_presto_for_cases_using_structured_mesh: old_variant_of_presto_for_cases_using_structured_mesh
    _child_aliases: dict
class default_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    recommended_defaults_for_existing_cases: recommended_defaults_for_existing_cases
    revert_to_pre_r20_1_default_settings: revert_to_pre_r20_1_default_settings
class pressure_corr_grad(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class face_pressure_calculation_method(String):
    _version: str
    fluent_name: str
    _python_name: str
class exclude_transient_term_in_face_pressure_calc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class face_pressure_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pressure_corr_grad: pressure_corr_grad
    face_pressure_calculation_method: face_pressure_calculation_method
    exclude_transient_term_in_face_pressure_calc: exclude_transient_term_in_face_pressure_calc
class face_pressure_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    face_pressure_options: face_pressure_options
class execute_settings_optimization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class execute_advanced_stabilization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class execute_additional_stability_controls(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class blended_compressive_scheme(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_stabilization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class additional_stabilization_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    blended_compressive_scheme: blended_compressive_scheme
    pseudo_time_stabilization: pseudo_time_stabilization
    _child_aliases: dict
class enable_velocity_limiting(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_vel_mag(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vol_frac_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_velocity_and_vof_cutoffs_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_vel_mag: max_vel_mag
    vol_frac_cutoff: vol_frac_cutoff
class set_velocity_and_vof_cutoffs(NamedObject[set_velocity_and_vof_cutoffs_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: set_velocity_and_vof_cutoffs_child
class set_damping_strengths_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_damping_strengths(NamedObject[set_damping_strengths_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: set_damping_strengths_child
class set_velocity_cutoff(Real):
    _version: str
    fluent_name: str
    _python_name: str
class set_damping_strength(Real):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_14(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class velocity_limiting_treatment(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_velocity_limiting: enable_velocity_limiting
    set_velocity_and_vof_cutoffs: set_velocity_and_vof_cutoffs
    set_damping_strengths: set_damping_strengths
    set_velocity_cutoff: set_velocity_cutoff
    set_damping_strength: set_damping_strength
    verbosity: verbosity_14
class solution_stabilization_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    execute_settings_optimization: execute_settings_optimization
    execute_advanced_stabilization: execute_advanced_stabilization
    execute_additional_stability_controls: execute_additional_stability_controls
    additional_stabilization_controls: additional_stabilization_controls
    velocity_limiting_treatment: velocity_limiting_treatment
class phasic_wall_heat_flux_form(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class energy_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    phasic_wall_heat_flux_form: phasic_wall_heat_flux_form
class multiphase_numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    porous_media: porous_media
    compressible_flow: compressible_flow
    boiling_parameters: boiling_parameters
    viscous_flow: viscous_flow
    heat_mass_transfer: heat_mass_transfer
    interphase_interactions: interphase_interactions
    advanced_stability_controls: advanced_stability_controls
    default_controls: default_controls
    face_pressure_controls: face_pressure_controls
    solution_stabilization: solution_stabilization_1
    energy: energy_1
class nb_gradient(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nb_gradient_boundary_option(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    nb_gradient: nb_gradient
    _child_aliases: dict
class nita(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_15(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skewness_neighbor_coupling_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_22(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class multi_phase_setting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_22
    options: options_9
class single_phase_setting(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hybrid_nita_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    multi_phase_setting: multi_phase_setting
    single_phase_setting: single_phase_setting
class nita_expert_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    verbosity: verbosity_15
    skewness_neighbor_coupling: skewness_neighbor_coupling_1
    hybrid_nita_settings: hybrid_nita_settings
class high_order_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class interpolation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class orphan_cell_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mass_flux_correction_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hybrid_mode_selection(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expert_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mass_flux_correction_method: mass_flux_correction_method
    hybrid_mode_selection: hybrid_mode_selection
class overset_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    high_order_pressure: high_order_pressure
    interpolation_method: interpolation_method
    orphan_cell_treatment: orphan_cell_treatment
    expert: expert_7
class phase_based_vof_discretization_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class phase_based_vof_discretization(NamedObject[phase_based_vof_discretization_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: phase_based_vof_discretization_child
class reduced_rank_extrapolation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class subspace_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skip_iter_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class reduced_rank_extrapolation_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    subspace_size: subspace_size
    skip_iter_count: skip_iter_count
class use_limiter_in_time(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class high_order_rc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class high_order_rc_hybrid_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class force_treatment_of_unsteady_rc(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class unstructured_var_presto_scheme(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class new_framework_for_vof_specific_node_based_treatment(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vof_numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    high_order_rc: high_order_rc
    high_order_rc_hybrid_treatment: high_order_rc_hybrid_treatment
    force_treatment_of_unsteady_rc: force_treatment_of_unsteady_rc
    unstructured_var_presto_scheme: unstructured_var_presto_scheme
    new_framework_for_vof_specific_node_based_treatment: new_framework_for_vof_specific_node_based_treatment
class enable_23(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mode_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class turbulence_options(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class warped_face_gradient_correction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_23
    mode: mode_1
    turbulence_options: turbulence_options
class enable_24(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class expert_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class robust_fluxes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class visualize_pressure_discontinuity_sensor(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class high_speed_numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_24
    expert: expert_8
    robust_fluxes: robust_fluxes
    visualize_pressure_discontinuity_sensor: visualize_pressure_discontinuity_sensor
class species_disc_together(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_25(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class orthogonal_quality_threshold_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class orthogonal_quality_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tangent_skewness_threshold_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tangent_skewness_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class warpage_threshold_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class warpage_threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class poor_mesh_removal(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_25
    orthogonal_quality_threshold_enabled: orthogonal_quality_threshold_enabled
    orthogonal_quality_threshold: orthogonal_quality_threshold
    tangent_skewness_threshold_enabled: tangent_skewness_threshold_enabled
    tangent_skewness_threshold: tangent_skewness_threshold
    warpage_threshold_enabled: warpage_threshold_enabled
    warpage_threshold: warpage_threshold
class enable_26(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class orthogonal_quality_threshold_enabled_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class orthogonal_quality_threshold_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tangent_skewness_threshold_enabled_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tangent_skewness_threshold_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class poor_mesh_numerics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable: enable_26
    orthogonal_quality_threshold_enabled: orthogonal_quality_threshold_enabled_1
    orthogonal_quality_threshold: orthogonal_quality_threshold_1
    tangent_skewness_threshold_enabled: tangent_skewness_threshold_enabled_1
    tangent_skewness_threshold: tangent_skewness_threshold_1
class poor_mesh_robustness(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    poor_mesh_removal: poor_mesh_removal
    poor_mesh_numerics: poor_mesh_numerics
class methods_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axisymmetric: axisymmetric
    p_v_coupling: p_v_coupling
    spatial_discretization: spatial_discretization
    spatial_discretization_parameters: spatial_discretization_parameters
    pseudo_time_method: pseudo_time_method
    transient_formulation: transient_formulation
    unsteady_global_time: unsteady_global_time
    accelerated_non_iterative_time_marching: accelerated_non_iterative_time_marching
    convergence_acceleration_for_stretched_meshes: convergence_acceleration_for_stretched_meshes
    divergence_prevention: divergence_prevention
    expert: expert_6
    frozen_flux: frozen_flux
    high_order_term_relaxation: high_order_term_relaxation
    multiphase_numerics: multiphase_numerics
    nb_gradient_boundary_option: nb_gradient_boundary_option
    nita: nita
    nita_expert_controls: nita_expert_controls
    overset: overset_3
    phase_based_vof_discretization: phase_based_vof_discretization
    reduced_rank_extrapolation: reduced_rank_extrapolation
    reduced_rank_extrapolation_options: reduced_rank_extrapolation_options
    use_limiter_in_time: use_limiter_in_time
    vof_numerics: vof_numerics
    warped_face_gradient_correction: warped_face_gradient_correction
    high_speed_numerics: high_speed_numerics
    species_disc_together: species_disc_together
    poor_mesh_robustness: poor_mesh_robustness
    def set_solution_methods_to_default(self):
        """
        Set solution methods to default values.
        """
    def set_optimized_les_numerics(self):
        """
        Set optimized LES numerics.
        """
    _child_aliases: dict
class courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skewness_correction_itr_count_1(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class neighbor_correction_itr_count_1(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class skewness_neighbor_coupling_2(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class vof_correction_itr_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class volume_fraction_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_pressure_under_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_momentum_under_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_volume_fraction_under_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class p_v_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    skewness_correction_itr_count: skewness_correction_itr_count_1
    neighbor_correction_itr_count: neighbor_correction_itr_count_1
    skewness_neighbor_coupling: skewness_neighbor_coupling_2
    vof_correction_itr_count: vof_correction_itr_count
    flow_courant_number: flow_courant_number
    volume_fraction_courant_number: volume_fraction_courant_number
    explicit_pressure_under_relaxation: explicit_pressure_under_relaxation
    explicit_momentum_under_relaxation: explicit_momentum_under_relaxation
    explicit_volume_fraction_under_relaxation: explicit_volume_fraction_under_relaxation
    _child_aliases: dict
class residual_smoothing_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class residual_smoothing_iter_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class residual_smoothing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    residual_smoothing_factor: residual_smoothing_factor
    residual_smoothing_iter_count: residual_smoothing_iter_count
class relaxation_factor_4_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relaxation_factor_4(NamedObject[relaxation_factor_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: relaxation_factor_4_child
class under_relaxation_2_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class under_relaxation_2(NamedObject[under_relaxation_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: under_relaxation_2_child
class pseudo_time_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_step_method_solid_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_method_local_time_step(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pseudo_time_courant_number: pseudo_time_courant_number
    pseudo_time_step_method_solid_zone: pseudo_time_step_method_solid_zone
    time_step_size_scale_factor: time_step_size_scale_factor
class local_dt_dualts_relax_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class local_dt_dualts_relax(NamedObject[local_dt_dualts_relax_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: local_dt_dualts_relax_child
class global_dt_pseudo_relax_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class global_dt_pseudo_relax(NamedObject[global_dt_pseudo_relax_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: global_dt_pseudo_relax_child
class pseudo_time_explicit_relaxation_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    local_dt_dualts_relax: local_dt_dualts_relax
    global_dt_pseudo_relax: global_dt_pseudo_relax
class simplec_skewness_correction_itr(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class piso_skewness_correction_itr(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fractstep_skewness_correction_itr(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class neighbor_correction_itr(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_courant_number_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dualts_explicit_mom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class dualts_explicit_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_expl_relax_mom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_expl_relax_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_pseudo_expl_relax_mom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_pseudo_expl_relax_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_steady_expl_relax_mom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cpl_steady_expl_relax_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class global_dt_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class local_dt_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_localdt_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class global_dt_time_step_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class global_dt_pseudo_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_time_length_scale_methods(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_time_step_size_scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_time_length_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cycle_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_cycle_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dual_ts_cycle_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mg_controls_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cycle_type: cycle_type
    pseudo_cycle_type: pseudo_cycle_type
    dual_ts_cycle_type: dual_ts_cycle_type
class mg_controls(NamedObject[mg_controls_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mg_controls_child
class global_dt_post_sweeps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class post_sweeps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class global_dt_max_cycle(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_cycle(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_cycle_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    global_dt_post_sweeps: global_dt_post_sweeps
    post_sweeps: post_sweeps
    global_dt_max_cycle: global_dt_max_cycle
    max_cycle: max_cycle
class global_dt_coarsen_by_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_by_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    global_dt_coarsen_by_interval: global_dt_coarsen_by_interval
    coarsen_by_interval: coarsen_by_interval
class global_dt_smoother_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smoother_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class amg_controls_scalar(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fixed_cycle_parameters: fixed_cycle_parameters
    coarsening_parameters: coarsening_parameters
    global_dt_smoother_type: global_dt_smoother_type
    smoother_type: smoother_type
class zonal_pbns_solution_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    simplec_skewness_correction_itr: simplec_skewness_correction_itr
    piso_skewness_correction_itr: piso_skewness_correction_itr
    fractstep_skewness_correction_itr: fractstep_skewness_correction_itr
    neighbor_correction_itr: neighbor_correction_itr
    skewness_neighbor_coupling: skewness_neighbor_coupling
    flow_courant_number: flow_courant_number_1
    dualts_explicit_mom: dualts_explicit_mom
    dualts_explicit_pressure: dualts_explicit_pressure
    cpl_expl_relax_mom: cpl_expl_relax_mom
    cpl_expl_relax_pressure: cpl_expl_relax_pressure
    cpl_pseudo_expl_relax_mom: cpl_pseudo_expl_relax_mom
    cpl_pseudo_expl_relax_pressure: cpl_pseudo_expl_relax_pressure
    cpl_steady_expl_relax_mom: cpl_steady_expl_relax_mom
    cpl_steady_expl_relax_pressure: cpl_steady_expl_relax_pressure
    global_dt_verbosity: global_dt_verbosity
    local_dt_verbosity: local_dt_verbosity
    pseudo_time_localdt_courant_number: pseudo_time_localdt_courant_number
    global_dt_time_step_method: global_dt_time_step_method
    global_dt_pseudo_time_step_size: global_dt_pseudo_time_step_size
    auto_time_length_scale_methods: auto_time_length_scale_methods
    auto_time_step_size_scale_factor: auto_time_step_size_scale_factor
    auto_time_length_scale: auto_time_length_scale
    mg_controls: mg_controls
    amg_controls_scalar: amg_controls_scalar
class under_relaxation_factor_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expert_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    under_relaxation_factor: under_relaxation_factor_2
    explicit_relaxation_factor: explicit_relaxation_factor
class relative_convergence_criterion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter_per_timestep_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class acoustics_wave_eqn_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    expert: expert_9
    relative_convergence_criterion: relative_convergence_criterion
    max_iter_per_timestep_count: max_iter_per_timestep_count
class solution_stabilization_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_16(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class iter_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class solution_stabilization_persistence(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class persistence_fixed_time_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class persistence_fixed_duration(Real):
    _version: str
    fluent_name: str
    _python_name: str
class extrapolation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_7(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    iter_count: iter_count
    solution_stabilization_persistence: solution_stabilization_persistence
    persistence_fixed_time_steps: persistence_fixed_time_steps
    persistence_fixed_duration: persistence_fixed_duration
    extrapolation_method: extrapolation_method
class first_to_second_order_blending_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class first_to_second_order_blending_list(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class scheme(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_skew_diffusion_exclude(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scalars_skew_diffusion_exclude(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rhie_chow_flux_specify(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rhie_chow_method(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class spatial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    first_to_second_order_blending: first_to_second_order_blending_1
    first_to_second_order_blending_list: first_to_second_order_blending_list
    scheme: scheme
    flow_skew_diffusion_exclude: flow_skew_diffusion_exclude
    scalars_skew_diffusion_exclude: scalars_skew_diffusion_exclude
    rhie_chow_flux_specify: rhie_chow_flux_specify
    rhie_chow_method: rhie_chow_method
class transient_parameters_specify(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class transient_scheme(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_scale_modification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_scale_modification_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transient(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    transient_parameters_specify: transient_parameters_specify
    transient_scheme: transient_scheme
    time_scale_modification_method: time_scale_modification_method
    time_scale_modification_factor: time_scale_modification_factor
class enforce_laplace_coarsening(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class increase_pre_sweeps(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pre_sweeps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class specify_coarsening_rate_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_rate(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class specify_coarsening_rate(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    specify_coarsening_rate: specify_coarsening_rate_1
    coarsen_rate: coarsen_rate
class amg(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enforce_laplace_coarsening: enforce_laplace_coarsening
    increase_pre_sweeps: increase_pre_sweeps
    pre_sweeps: pre_sweeps
    specify_coarsening_rate: specify_coarsening_rate
class model_ramping(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ramp_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ramp_turbulence(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ramp_scalars(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class models_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    model_ramping: model_ramping
    ramp_flow: ramp_flow
    ramp_turbulence: ramp_turbulence
    ramp_scalars: ramp_scalars
class pv_coupling_controls_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pv_coupling_method(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pv_coupling_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pv_coupling_controls: pv_coupling_controls_1
    pv_coupling_method: pv_coupling_method
class gradient_controls_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class specify_gradient_method(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class gradient_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    gradient_controls: gradient_controls_1
    specify_gradient_method: specify_gradient_method
class methods_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pv_coupling_controls: pv_coupling_controls
    gradient_controls: gradient_controls
class compute_statistics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class statistics_level(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class miscellaneous(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    compute_statistics: compute_statistics
    statistics_level: statistics_level
class contact_solution_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    solution_stabilization: solution_stabilization_2
    verbosity: verbosity_16
    parameters: parameters_7
    spatial: spatial
    transient: transient
    amg: amg
    models: models_2
    methods: methods_3
    miscellaneous: miscellaneous
    def set_settings_to_default(self):
        """
        Set contact solution stabilization to default.
        """
class equations_child(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class equations(NamedObject[equations_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: equations_child
class min_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_pressure(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_temperature_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_tke(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_lam_tke(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_des_tke(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_epsilon(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_des_epsilon(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_v2f_tke(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_v2f_epsilon(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_vel_var_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_elliptic_relax_func(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_omega(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_des_omega(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_turb_visc_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class positivity_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_vol_frac_for_matrix_sol(Real):
    _version: str
    fluent_name: str
    _python_name: str
class limits(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    min_pressure: min_pressure
    max_pressure: max_pressure
    min_temperature: min_temperature_1
    max_temperature: max_temperature
    min_tke: min_tke
    min_lam_tke: min_lam_tke
    min_des_tke: min_des_tke
    min_epsilon: min_epsilon
    min_des_epsilon: min_des_epsilon
    min_v2f_tke: min_v2f_tke
    min_v2f_epsilon: min_v2f_epsilon
    min_vel_var_scale: min_vel_var_scale
    min_elliptic_relax_func: min_elliptic_relax_func
    min_omega: min_omega
    min_des_omega: min_des_omega
    max_turb_visc_ratio: max_turb_visc_ratio
    positivity_rate: positivity_rate
    min_vol_frac_for_matrix_sol: min_vol_frac_for_matrix_sol
class termination_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class residual_reduction_tolerance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class method_12(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class stabilization_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mg_controls_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    cycle_type: cycle_type
    termination_criteria: termination_criteria
    residual_reduction_tolerance: residual_reduction_tolerance
    method: method_12
    stabilization: stabilization_1
class mg_controls_1(NamedObject[mg_controls_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mg_controls_1_child
class pre_sweeps_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_cycle_parameters_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_sweeps: pre_sweeps_1
    post_sweeps: post_sweeps
    max_cycle: max_cycle
class max_coarse_levels(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class conservative_coarsening(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class aggressive_coarsening(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class laplace_coarsening(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_parameters_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_coarse_levels: max_coarse_levels
    coarsen_by_interval: coarsen_by_interval
    conservative_coarsening: conservative_coarsening
    aggressive_coarsening: aggressive_coarsening
    laplace_coarsening: laplace_coarsening
class scalar_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fixed_cycle_parameters: fixed_cycle_parameters_1
    coarsening_parameters: coarsening_parameters_1
    smoother_type: smoother_type
class pre_sweeps_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class post_sweeps_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_cycle_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_cycle_parameters_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_sweeps: pre_sweeps_2
    post_sweeps: post_sweeps_1
    max_cycle: max_cycle_1
class max_coarse_levels_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_by_interval_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class aggressive_coarsening_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_parameters_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_coarse_levels: max_coarse_levels_1
    coarsen_by_interval: coarsen_by_interval_1
    conservative_coarsening: conservative_coarsening
    aggressive_coarsening: aggressive_coarsening_1
    laplace_coarsening: laplace_coarsening
class smoother_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coupled_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fixed_cycle_parameters: fixed_cycle_parameters_2
    coarsening_parameters: coarsening_parameters_2
    smoother_type: smoother_type_1
class sweeps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_fine_relaxations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_coarse_relaxations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flexible_cycle_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    sweeps: sweeps
    max_fine_relaxations: max_fine_relaxations
    max_coarse_relaxations: max_coarse_relaxations
class verbosity_17(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class options_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    verbosity: verbosity_17
class amg_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    scalar_parameters: scalar_parameters
    coupled_parameters: coupled_parameters
    flexible_cycle_parameters: flexible_cycle_parameters
    options: options_10
class pre_sweeps_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class post_sweeps_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_cycle_parameters_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pre_sweeps: pre_sweeps_3
    post_sweeps: post_sweeps_2
class max_coarse_levels_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_by_interval_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsening_parameters_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_coarse_levels: max_coarse_levels_2
    coarsen_by_interval: coarsen_by_interval_2
class courant_number_reduction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class correction_reduction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class correction_smoothing(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_correction_reduction(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relaxation_factor_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    courant_number_reduction: courant_number_reduction
    correction_reduction: correction_reduction
    correction_smoothing: correction_smoothing
    species_correction_reduction: species_correction_reduction
class options_11(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    verbosity: verbosity_17
class fas_mg_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fixed_cycle_parameters: fixed_cycle_parameters_3
    coarsening_parameters: coarsening_parameters_3
    relaxation_factor: relaxation_factor_5
    options: options_11
class enable_gpu(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class term_criterion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solver_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_num_cycle(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_by_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pre_sweep(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class post_sweep(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class smoother(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class amg_gpgpu_options_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_gpu: enable_gpu
    term_criterion: term_criterion
    solver: solver_2
    max_num_cycle: max_num_cycle
    coarsen_by_size: coarsen_by_size
    pre_sweep: pre_sweep
    post_sweep: post_sweep
    smoother: smoother
class amg_gpgpu_options(NamedObject[amg_gpgpu_options_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: amg_gpgpu_options_child
class multi_grid(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mg_controls: mg_controls_1
    amg_controls: amg_controls
    fas_mg_controls: fas_mg_controls
    amg_gpgpu_options: amg_gpgpu_options
class coefficient(Real):
    _version: str
    fluent_name: str
    _python_name: str
class update_dissipation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class update_viscous(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multi_stage_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coefficient: coefficient
    update_dissipation: update_dissipation
    update_viscous: update_viscous
class multi_stage(ListObject[multi_stage_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: multi_stage_child
class limiter_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cell_to_limiting(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class limiter_filter(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class spatial_discretization_limiter(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    limiter_type: limiter_type
    cell_to_limiting: cell_to_limiting
    limiter_filter: limiter_filter
class enable_pseudo_time_method(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class implicit_under_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_method_usage_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_pseudo_time_method: enable_pseudo_time_method
    pseudo_time_scale_factor: pseudo_time_scale_factor
    implicit_under_relaxation_factor: implicit_under_relaxation_factor
class pseudo_time_method_usage(NamedObject[pseudo_time_method_usage_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: pseudo_time_method_usage_child
    _child_aliases: dict
class linearized_mass_transfer_udf(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class singhal_cavitation_model(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wall_temp_alternate_formulation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class save_cell_residuals(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class keep_temporary_memory(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class allow_all_disc_schemes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_under_relaxation_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class nci_secondary_gradient_child(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class nci_secondary_gradient(NamedObject[nci_secondary_gradient_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: nci_secondary_gradient_child
class expert_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    spatial_discretization_limiter: spatial_discretization_limiter
    pseudo_time_method_usage: pseudo_time_method_usage
    linearized_mass_transfer_udf: linearized_mass_transfer_udf
    singhal_cavitation_model: singhal_cavitation_model
    wall_temp_alternate_formulation: wall_temp_alternate_formulation
    save_cell_residuals: save_cell_residuals
    keep_temporary_memory: keep_temporary_memory
    allow_all_disc_schemes: allow_all_disc_schemes
    explicit_under_relaxation_value: explicit_under_relaxation_value
    nci_secondary_gradient: nci_secondary_gradient
class update_stage_gradients(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class two_stage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ten_stage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class default_multi_stage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class runge_kutta(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    two_stage: two_stage
    ten_stage: ten_stage
    default_multi_stage: default_multi_stage
class fast_transient_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    update_stage_gradients: update_stage_gradients
    runge_kutta: runge_kutta
class relaxation_method_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class correction_tolerance_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class correction_tolerance(NamedObject[correction_tolerance_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: correction_tolerance_child
class relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class flux(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class gradient(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anisotropic_solid_heat_transfer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    relaxation: relaxation
    flux: flux
    gradient: gradient
class linearize(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class threshold(Real):
    _version: str
    fluent_name: str
    _python_name: str
class continuity_transient_term_linearization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    linearize: linearize
    threshold: threshold
class enthalpy_reference_temperature(Real):
    _version: str
    fluent_name: str
    _python_name: str
class advanced_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    multi_grid: multi_grid
    multi_stage: multi_stage
    expert: expert_10
    fast_transient_settings: fast_transient_settings
    relaxation_method: relaxation_method_1
    correction_tolerance: correction_tolerance
    anisotropic_solid_heat_transfer: anisotropic_solid_heat_transfer
    continuity_transient_term_linearization: continuity_transient_term_linearization
    enthalpy_reference_temperature: enthalpy_reference_temperature
class species_urf_together(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class controls_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    courant_number: courant_number
    p_v_controls: p_v_controls
    residual_smoothing: residual_smoothing
    relaxation_factor: relaxation_factor_4
    under_relaxation: under_relaxation_2
    pseudo_time_method_local_time_step: pseudo_time_method_local_time_step
    pseudo_time_explicit_relaxation_factor: pseudo_time_explicit_relaxation_factor
    zonal_pbns_solution_controls: zonal_pbns_solution_controls
    acoustics_wave_eqn_controls: acoustics_wave_eqn_controls
    contact_solution_controls: contact_solution_controls
    equations: equations
    limits: limits
    advanced: advanced_3
    species_urf_together: species_urf_together
    def reset_solution_controls(self):
        """
        Reset the solution controls to default.
        """
    def reset_amg_controls(self):
        """
        Rest AMG controls to default.
        """
    def reset_multi_stage_parameters(self):
        """
        Reset multi-stage parameters.
        """
    def reset_limits(self):
        """
        Reset limits to default.
        """
    def reset_pseudo_time_method_generic(self):
        """
        Set pseudo time method parameters to default.
        """
    def reset_pseudo_time_method_equations(self):
        """
        Set pseudo time method equation specific usage to default.
        """
    def reset_pseudo_time_method_relaxations(self):
        """
        Set pseudo time method relaxation factors to default.
        """
    def reset_pseudo_time_method_scale_factors(self):
        """
        Set pseudo time method time scale factors to default.
        """
class report_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class per_selection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class average_over(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class retain_instantaneous_values(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cell_zones_7(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class physics_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_11(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_7(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class locations_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    physics: physics_3
    geometry: geometry_11
    surfaces: surfaces_7
class output_parameter_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class create_report_file(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class create_report_plot(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    cell_zones: cell_zones_7
    face_zones: face_zones_1
    locations: locations_5
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class mesh_1(NamedObject[mesh_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mesh_1_child
class field(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_names(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class custom_vector(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    field: field
    surface_names: surface_names
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    custom_vector: custom_vector
    phase: phase_52
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class surface_1(NamedObject[surface_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: surface_1_child
class cell_zones_8(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    field: field
    cell_zones: cell_zones_8
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    phase: phase_52
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class volume_2(NamedObject[volume_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: volume_2_child
class force_vector(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frame_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zones_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class report_output_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class force_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    force_vector: force_vector
    reference_frame: reference_frame_6
    zones: zones_2
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    report_output_type: report_output_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class force(NamedObject[force_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: force_child
class lift_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    force_vector: force_vector
    reference_frame: reference_frame_6
    zones: zones_2
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    report_output_type: report_output_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class lift(NamedObject[lift_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: lift_child
class drag_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    force_vector: force_vector
    reference_frame: reference_frame_6
    zones: zones_2
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    report_output_type: report_output_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class drag(NamedObject[drag_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: drag_child
class mom_center(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class mom_axis(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class moment_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    mom_center: mom_center
    mom_axis: mom_axis
    reference_frame: reference_frame_6
    zones: zones_2
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    report_output_type: report_output_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class moment(NamedObject[moment_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: moment_child
class time_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class time_1(NamedObject[time_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: time_1_child
class boundaries_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flux_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    boundaries: boundaries_2
    locations: locations_5
    per_selection: per_selection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    phase: phase_52
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class flux_1(NamedObject[flux_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: flux_1_child
class vbm_rotor_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class report_output_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vbm_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    vbm_rotor_name: vbm_rotor_name
    report_output_type: report_output_type_1
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class vbm(NamedObject[vbm_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: vbm_child
class injection_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class per_injection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mass_criterion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class user_specified_origin_and_axis(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class show_unsteady_rate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inj_mass_rate_prev_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class inj_mass_rate_prev_mass(Real):
    _version: str
    fluent_name: str
    _python_name: str
class inj_mass_rate_last_flow(Real):
    _version: str
    fluent_name: str
    _python_name: str
class inj_mass_rate_last_tstp(Real):
    _version: str
    fluent_name: str
    _python_name: str
class injection_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    injection_list: injection_list
    boundaries: boundaries_2
    locations: locations_5
    per_injection: per_injection
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    mass_criterion: mass_criterion
    user_specified_origin_and_axis: user_specified_origin_and_axis
    origin: origin_4
    axis: axis_3
    show_unsteady_rate: show_unsteady_rate
    inj_mass_rate_prev_time: inj_mass_rate_prev_time
    inj_mass_rate_prev_mass: inj_mass_rate_prev_mass
    inj_mass_rate_last_flow: inj_mass_rate_last_flow
    inj_mass_rate_last_tstp: inj_mass_rate_last_tstp
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class injection_2(NamedObject[injection_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: injection_2_child
class function_name_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class input_params(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_16_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    function_name: function_name_1
    input_params: input_params
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class user_defined_16(NamedObject[user_defined_16_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: user_defined_16_child
class nodal_diameters(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class integrate_over(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class normalization(Real):
    _version: str
    fluent_name: str
    _python_name: str
class realcomponent(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class force_obj_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class component_type(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class aeromechanics_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    zones: zones_2
    per_selection: per_selection
    nodal_diameters: nodal_diameters
    average_over: average_over
    integrate_over: integrate_over
    normalization: normalization
    realcomponent: realcomponent
    force_obj_name: force_obj_name
    component_type: component_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class aeromechanics(NamedObject[aeromechanics_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: aeromechanics_child
class icing_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    report_type: report_type
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class icing_3(NamedObject[icing_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: icing_3_child
class expr_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class define(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class list_valid_report_names(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expression_7_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    average_over: average_over
    expr_value: expr_value
    define: define
    list_valid_report_names: list_valid_report_names
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class expression_7(NamedObject[expression_7_child]):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: expression_7_child
class single_valued_expression_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    average_over: average_over
    retain_instantaneous_values: retain_instantaneous_values
    definition: definition
    list_valid_report_names: list_valid_report_names
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class single_valued_expression(NamedObject[single_valued_expression_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: single_valued_expression_child
class custom_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    output_parameter: output_parameter_1
    create_report_file: create_report_file
    create_report_plot: create_report_plot
    def create_output_parameter(self):
        """
        Option to make report definition available as an output parameter.
        """
    _child_aliases: dict
class custom(NamedObject[custom_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: custom_child
class report_definitions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    mesh: mesh_1
    surface: surface_1
    volume: volume_2
    force: force
    lift: lift
    drag: drag
    moment: moment
    time: time_1
    flux: flux_1
    vbm: vbm
    injection: injection_2
    user_defined: user_defined_16
    aeromechanics: aeromechanics
    icing: icing_3
    expression: expression_7
    single_valued_expression: single_valued_expression
    custom: custom
    def compute(self, report_defs: list[str]):
        """
        Compute and view the net value.
        
        Parameters
        ----------
            report_defs : List
                Compute the net value of the selected report definition.
        """
    def copy(self, copy_from: str, copy_to: str):
        """
        Create a copy of a report definition.
        
        Parameters
        ----------
            copy_from : str
                The report definition to copy.
            copy_to : str
                Write the new name for the copied report definition.
        """
    def delete_all(self):
        """
        Delete all the report definitions.
        """
class monitor_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class normalization_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class check_convergence(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class absolute_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relative_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class equations_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    monitor: monitor_1
    normalization_factor: normalization_factor
    check_convergence: check_convergence
    absolute_criteria: absolute_criteria
    relative_criteria: relative_criteria
class equations_1(NamedObject[equations_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: equations_1_child
class criterion_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class n_save(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class normalize(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class n_maximize_norms(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class enhanced_continuity_residual(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scale_residuals(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class compute_local_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reporting_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class residual_values(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    scale_residuals: scale_residuals
    compute_local_scale: compute_local_scale
    reporting_option: reporting_option
    _child_aliases: dict
class print_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class plot_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class n_display(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class options_12(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    criterion_type: criterion_type
    n_save: n_save
    normalize: normalize
    n_maximize_norms: n_maximize_norms
    enhanced_continuity_residual: enhanced_continuity_residual
    residual_values: residual_values
    print: print_2
    plot: plot_1
    n_display: n_display
class label(String):
    _version: str
    fluent_name: str
    _python_name: str
class format_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class precision(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_format(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    format_type: format_type
    precision: precision
class log_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_min(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_max(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class show_major_gridlines(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class weight_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class auto_placement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class units_or_divisions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class major_gridlines(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    color: color
    weight: weight_1
    auto_placement: auto_placement
    units_or_divisions: units_or_divisions
    distance: distance
class show_minor_gridlines(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minor_gridlines(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    color: color
    weight: weight_1
    auto_placement: auto_placement
    units_or_divisions: units_or_divisions
    distance: distance
class x_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    label: label
    number_format: number_format
    log_scale: log_scale
    auto_range: auto_range
    auto_range_min: auto_range_min
    auto_range_max: auto_range_max
    min: min
    max: max
    show_major_gridlines: show_major_gridlines
    major_gridlines: major_gridlines
    show_minor_gridlines: show_minor_gridlines
    minor_gridlines: minor_gridlines
class y_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    label: label
    number_format: number_format
    log_scale: log_scale
    auto_range: auto_range
    auto_range_min: auto_range_min
    auto_range_max: auto_range_max
    min: min
    max: max
    show_major_gridlines: show_major_gridlines
    major_gridlines: major_gridlines
    show_minor_gridlines: show_minor_gridlines
    minor_gridlines: minor_gridlines
class background_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_6
    y: y_6
    background_color: background_color
class pattern(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class weight_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class color_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class line(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pattern: pattern
    weight: weight_2
    color: color_1
class line_in_file(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pattern: pattern
    weight: weight_2
    color: color_1
class symbol(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class color_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class marker(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    symbol: symbol
    size: size_1
    color: color_2
class marker_in_file(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    symbol: symbol
    size: size_1
    color: color_2
class curves_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    line: line
    line_in_file: line_in_file
    marker: marker
    marker_in_file: marker_in_file
class curves(ListObject[curves_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: curves_child
class residual(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    equations: equations_1
    options: options_12
    axes: axes
    curves: curves
    def reset(self):
        """
        Delete the residual history and reset iteration counter to unity.
        """
    def renormalize(self):
        """
        Renormalize residuals by maximum values.
        """
    def plot(self):
        """
        Plot residuals.
        """
    def write(self, file_name: str):
        """
        Write residuals to file.
        
        Parameters
        ----------
            file_name : str
                The name you want the file saved with.
        """
class file_name_3_1(Filename, _InOutFile):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_of(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_frequency(Real):
    _version: str
    fluent_name: str
    _python_name: str
class itr_index(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class run_index(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class report_defs_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class print_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class active_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class write_instantaneous_values(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class report_files_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_24
    file_name: file_name_3_1
    frequency_of: frequency_of
    frequency: frequency_2
    flow_frequency: flow_frequency
    itr_index: itr_index
    run_index: run_index
    report_defs: report_defs_1
    print: print_3
    active: active_1
    write_instantaneous_values: write_instantaneous_values
class report_files(NamedObject[report_files_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def delete_all(self):
        """
        Delete all the report files.
        """
    def clear_data(self, report_files: list[str]):
        """
        Delete the report file from system.
        
        Parameters
        ----------
            report_files : List
                The Report files.
        """
    child_object_type: report_files_child
class plot_window(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class title(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_label(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_label(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class plot_instantaneous_values(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class report_plots_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_24
    plot_window: plot_window
    frequency_of: frequency_of
    frequency: frequency_2
    flow_frequency: flow_frequency
    report_defs: report_defs_1
    print: print_3
    title: title
    x_label: x_label
    y_label: y_label
    active: active_1
    plot_instantaneous_values: plot_instantaneous_values
    axes: axes
    curves: curves
    def plot(self):
        """
        Display the report-plot.
        """
class report_plots(NamedObject[report_plots_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def delete_all(self):
        """
        Delete all the report plots.
        """
    child_object_type: report_plots_child
class previous_values_to_consider(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initial_values_to_ignore(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class iteration_at_creation_or_edit(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class stop_criterion(Real):
    _version: str
    fluent_name: str
    _python_name: str
class report_defs_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class plot_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cov(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class previous_values(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_reports_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_24
    previous_values_to_consider: previous_values_to_consider
    initial_values_to_ignore: initial_values_to_ignore
    iteration_at_creation_or_edit: iteration_at_creation_or_edit
    stop_criterion: stop_criterion
    report_defs: report_defs_2
    print: print_3
    plot: plot_3
    cov: cov
    active: active_1
    x_label: x_label
    previous_values: previous_values
class convergence_reports(NamedObject[convergence_reports_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: convergence_reports_child
class frequency_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class condition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class check_for(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    convergence_reports: convergence_reports
    frequency: frequency_3
    condition: condition
    check_for: check_for
class monitor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    residual: residual
    report_files: report_files
    report_plots: report_plots
    convergence_conditions: convergence_conditions
class name_25(String):
    _version: str
    fluent_name: str
    _python_name: str
class python_name_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_47(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_point(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class max_point(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class inside(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class hexahedron(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    min_point: min_point
    max_point: max_point
    inside: inside
class center_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radius_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    center: center_1
    radius: radius_5
    inside: inside
class axis_begin(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_end(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class cylinder_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_begin: axis_begin
    axis_end: axis_end
    radius: radius_5
    inside: inside
class option_48(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cell_distance(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class normal_distance_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_volume(Real):
    _version: str
    fluent_name: str
    _python_name: str
class volume_growth(Real):
    _version: str
    fluent_name: str
    _python_name: str
class volume_distance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    boundary_volume: boundary_volume
    volume_growth: volume_growth
class distance_option(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_48
    cell_distance: cell_distance
    normal_distance: normal_distance_1
    volume_distance: volume_distance
class boundary_list_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    distance_option: distance_option
    boundary_list: boundary_list_2
class limiters(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_50(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_max(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class value1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class value2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class in_range(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    value1: value1
    value2: value2
class except_in_range(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    value1: value1
    value2: value2
class top_value_cells(Real):
    _version: str
    fluent_name: str
    _python_name: str
class low_value_cells(Real):
    _version: str
    fluent_name: str
    _python_name: str
class less_than(Real):
    _version: str
    fluent_name: str
    _python_name: str
class more_than(Real):
    _version: str
    fluent_name: str
    _python_name: str
class lower_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upper_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class between_std_dev(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    lower: lower_1
    upper: upper_1
class outside_std_dev(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    lower: lower_1
    upper: upper_1
class less_than_std_dev(Real):
    _version: str
    fluent_name: str
    _python_name: str
class more_than_std_dev(Real):
    _version: str
    fluent_name: str
    _python_name: str
class option_49(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_50
    min_max: min_max
    in_range: in_range
    except_in_range: except_in_range
    top_value_cells: top_value_cells
    low_value_cells: low_value_cells
    less_than: less_than
    more_than: more_than
    between_std_dev: between_std_dev
    outside_std_dev: outside_std_dev
    less_than_std_dev: less_than_std_dev
    more_than_std_dev: more_than_std_dev
class min_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class average(Real):
    _version: str
    fluent_name: str
    _python_name: str
class std_dev(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scaling(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class derivative(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class size_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class field_value(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    field: field_1
    option: option_49
    min: min_1
    max: max_1
    average: average
    std_dev: std_dev
    scaling: scaling
    derivative: derivative
    size_ratio: size_ratio
    def compute(self):
        """
        'compute' command.
        """
class equation_for_residual(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class threshold_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class residual_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    equation_for_residual: equation_for_residual
    threshold: threshold_1
class volume_magnitude(Real):
    _version: str
    fluent_name: str
    _python_name: str
class volume_change(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_1
    maximum: maximum_1
    def compute(self):
        """
        Compute the range.
        """
class volume_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    volume_magnitude: volume_magnitude
    volume_change: volume_change
    range: range_1
class option_51(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_2
    maximum: maximum_2
    def compute(self):
        """
        'compute' command.
        """
class min_allowed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_allowed(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wall_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class phase_53(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class yplus_star(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_51
    range: range_2
    min_allowed: min_allowed
    max_allowed: max_allowed
    wall_zones: wall_zones
    phase: phase_53
class yplus_ystar(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_51
    range: range_2
    min_allowed: min_allowed
    max_allowed: max_allowed
    wall_zones: wall_zones
    phase: phase_53
class type_14(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_47
    hexahedron: hexahedron
    sphere: sphere_1
    cylinder: cylinder_1
    boundary: boundary_4
    limiters: limiters
    field_value: field_value
    residual: residual_1
    volume: volume_3
    yplus_star: yplus_star
    yplus_ystar: yplus_ystar
class draw_mesh(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class filled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class marker_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class marker_symbol(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class marker_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class wireframe(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class display_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    draw_mesh: draw_mesh
    filled: filled
    marker: marker_1
    marker_symbol: marker_symbol
    marker_size: marker_size
    wireframe: wireframe
    color: color_3
class cell_registers_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_25
    python_name_1: python_name_1
    type: type_14
    display_options: display_options
    def refine(self):
        """
        Refine cell register objects.
        """
    def coarsen(self):
        """
        Coarsen cell register objects.
        """
    def apply_poor_mesh_numerics(self):
        """
        Apply poor mesh numerics to cell register objects.
        """
    def create_volume_surface(self):
        """
        Create a volume surface.
        """
class cell_registers(NamedObject[cell_registers_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: cell_registers_child
class initialization_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reference_frame_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class defaults_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class defaults(NamedObject[defaults_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: defaults_child
class enabled_64(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_intensity_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_viscosity_ratio_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class localized_turb_init(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_64
    turbulent_intensity: turbulent_intensity_1
    turbulent_viscosity_ratio: turbulent_viscosity_ratio_1
class iter_count_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class explicit_urf(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class initial_pressure(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class external_aero(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class const_velocity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class initialization_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    initial_pressure: initial_pressure
    external_aero: external_aero
    const_velocity: const_velocity
class general_settings_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    iter_count: iter_count_1
    explicit_urf: explicit_urf
    initialization_options: initialization_options
    _child_aliases: dict
class averaged_turbulent_parameters(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscosity_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_setting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    averaged_turbulent_parameters: averaged_turbulent_parameters
    turbulent_intensity: turbulent_intensity_1
    viscosity_ratio: viscosity_ratio
class user_specified_species(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_12_child_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class species_12_child(NamedObject[species_12_child_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_12_child_child
class species_12(NamedObject[species_12_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: species_12_child
class species_setting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    user_specified_species: user_specified_species
    species: species_12
class hybrid_init_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    general_settings: general_settings_1
    turbulent_setting: turbulent_setting
    species_setting: species_setting
class patch_reconstructed_interface(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_volumetric_smoothing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class smoothing_relaxation_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vof_smooth_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    patch_reconstructed_interface: patch_reconstructed_interface
    use_volumetric_smoothing: use_volumetric_smoothing
    smoothing_relaxation_factor: smoothing_relaxation_factor
    def execute_smoothing(self):
        """
        Execute volumetric smoothing for volume fraction.
        """
class patch(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    vof_smooth_options: vof_smooth_options
    def calculate_patch(self, domain: str, cell_zones: list[str], volumes: list[str], registers: list[str], variable: str, reference_frame: str, use_custom_field_function: bool, custom_field_function_name: str, value: float | str):
        """
        Patch a value for a flow variable in the domain.
        
        Parameters
        ----------
            domain : str
                Domain.
            cell_zones : List
                Cell zone.
            volumes : List
                Physics-volume/expression-volume name.
            registers : List
                Register.
            variable : str
                Variable.
            reference_frame : str
                Velocity Reference Frame.
            use_custom_field_function : bool
                Enable/disable custom field function for patching.
            custom_field_function_name : str
                Custom function.
            value : real
                Patch value.
        """
class boundary_zone(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class flat_init(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wavy_surface_init(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class open_channel_auto_init(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    boundary_zone: boundary_zone
    flat_init: flat_init
    wavy_surface_init: wavy_surface_init
class fmg_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class enable_fmg_verbose(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscous_terms(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_reactions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class turbulent_viscosity_ratio_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fmg(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    fmg_courant_number: fmg_courant_number
    enable_fmg_verbose: enable_fmg_verbose
    viscous_terms: viscous_terms
    species_reactions: species_reactions
    turbulent_viscosity_ratio: turbulent_viscosity_ratio_2
    def fmg_initialize(self):
        """
        Initialize using the full-multigrid initialization (FMG).
        """
    def customize(self, multi_level_grid: int, residual_reduction: list[float | str], cycle_count: list[float | str]):
        """
        Enter FMG customization object.
        
        Parameters
        ----------
            multi_level_grid : int
                Number of multigrid levels.
            residual_reduction : List
                Number of residual reduction levels.
            cycle_count : List
                Number of cycles.
        """
    def reset_to_defaults(self):
        """
        'reset_to_defaults' command.
        """
class enable_profile_memory_flushing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class initialization_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    initialization_type: initialization_type
    reference_frame: reference_frame_7
    defaults: defaults
    localized_turb_init: localized_turb_init
    hybrid_init_options: hybrid_init_options
    patch: patch
    open_channel_auto_init: open_channel_auto_init
    fmg: fmg
    enable_profile_memory_flushing: enable_profile_memory_flushing
    def initialize(self):
        """
        Start initialization with current initialization type.
        """
    def compute_defaults(self, from_zone_type: str, from_zone_name: str, phase: str):
        """
        Compute default values from selection.
        
        Parameters
        ----------
            from_zone_type : str
                Boundary/zone type.
            from_zone_name : str
                Selecte zone name.
            phase : str
                Phase name.
        """
    def standard_initialize(self):
        """
        Initialize the flow field with the current default values.
        """
    def hybrid_initialize(self):
        """
        Initialize using the hybrid initialization method.
        """
    def list_defaults(self):
        """
        List default values.
        """
    def init_turb_vel_fluctuations(self):
        """
        Initialize turbulent velocity fluctuations.
        """
    def init_flow_statistics(self):
        """
        Initialize statistics.
        """
    def show_iterations_sampled(self):
        """
        Display the amount of simulated iterations covered by the data sampled for steady statistics.
        """
    def show_time_sampled(self):
        """
        Display the amount of simulated time covered by the data sampled for unsteady statistics.
        """
    def dpm_reset(self):
        """
        Reset discrete phase source terms to zero.
        """
    def lwf_reset(self):
        """
        Delete wall film particles and initialize wall film variables to zero.
        """
    def init_lwf(self):
        """
        Initialize Lagrangian wall film on all wall zones for which corresponding settings have been made.
        """
    def init_acoustics_options(self, set_ramping_length: bool, time_step_count: int):
        """
        Specify number of timesteps for ramping of sources
        and initialize acoustics model variables.
        During ramping the sound sources are multiplied by a factor smoothly growing from 0 to 1.
        
        Parameters
        ----------
            set_ramping_length : bool
                Enable/Disable ramping length and initialize acoustics.
            time_step_count : int
                Number of timesteps for ramping of sources.
        """
    def levelset_auto_init(self):
        """
        Levelset function automatic initialization.
        """
class enable_27(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class execution_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class execution_command(String):
    _version: str
    fluent_name: str
    _python_name: str
class when_to_execute(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_cmd(Real):
    _version: str
    fluent_name: str
    _python_name: str
class python_cmd(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class execute_commands_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    enable: enable_27
    execution_type: execution_type
    execution_command: execution_command
    when_to_execute: when_to_execute
    frequency_cmd: frequency_cmd
    python_cmd: python_cmd
class execute_commands(NamedObject[execute_commands_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def export(self, command_name: list[str], tsv_file_name: str):
        """
        Export Commands.
        """
    def import_(self, tsv_file_name: str):
        """
        Import commands from .tsv file.
        """
    child_object_type: execute_commands_child
class name_27(String):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_of_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_4(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_time_frequency(Real):
    _version: str
    fluent_name: str
    _python_name: str
class last_flow_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class storage_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class storage_dir_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class window_id(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class view(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class use_raytracing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class append_filename(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class append_filename_with(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class appended_flowtime_precision(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class solution_animations_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    animate_on: animate_on
    frequency_of: frequency_of_1
    frequency: frequency_4
    flow_time_frequency: flow_time_frequency
    last_flow_time: last_flow_time
    storage_type: storage_type
    storage_dir: storage_dir_1
    window_id: window_id
    view: view
    use_raytracing: use_raytracing
    append_filename: append_filename
    append_filename_with: append_filename_with
    appended_flowtime_precision: appended_flowtime_precision
    def display(self):
        """
        'display' command.
        """
class solution_animations(NamedObject[solution_animations_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, storage_dir: str, animate_on: str):
        """
        Create New solution animation Object.
        
        Parameters
        ----------
            name : str
                Name of the solution animation you want to create.
            storage_dir : str
                The directory where animation images are stored using either an absolute or relative (./) path to currently opened case directory.
            animate_on : str
                A graphics object to animate. The images will be captured at the specified frequency.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: solution_animations_child
    _child_aliases: dict
class enabled_65(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class init_from_data_file(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_52(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class init_from_solution(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_52
    init_from_data_file: init_from_data_file
class initialization_method(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    init_from_data_file: init_from_data_file
    init_from_solution: init_from_solution
class python_cmd_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class command(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class ftselected(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flowtime(Real):
    _version: str
    fluent_name: str
    _python_name: str
class before_init_modification(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_1
    name: name_24
    python_cmd: python_cmd_1
    command: command
    count: count
    ftselected: ftselected
    flowtime: flowtime
class original_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_1
    name: name_24
    python_cmd: python_cmd_1
    command: command
    count: count
    ftselected: ftselected
    flowtime: flowtime
class modifications_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_1
    name: name_24
    python_cmd: python_cmd_1
    command: command
    count: count
    ftselected: ftselected
    flowtime: flowtime
class modifications(ListObject[modifications_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: modifications_child
class case_modification_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    before_init_modification: before_init_modification
    original_settings: original_settings
    modifications: modifications
class case_modification(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enabled: enabled_65
    initialization_method: initialization_method
    case_modification: case_modification_1
    def automatic_initialization(self, initialization_type: str, data_file_name: str, init_from_solution: str, data_file_name2: str):
        """
        Define how the case is to be initialized automatically.
        
        Parameters
        ----------
            initialization_type : str
                'initialization_type' child.
            data_file_name : str
                'data_file_name' child.
            init_from_solution : str
                'init_from_solution' child.
            data_file_name2 : str
                'data_file_name2' child.
        """
    def execute_strategy(self, save_mode: str, continue_with_current_mesh: bool, discard_all_data: bool):
        """
        Execute the automatic initialization and case modification strategy defined at present .
        
        Parameters
        ----------
            save_mode : str
                'save_mode' child.
            continue_with_current_mesh : bool
                Reloading of the upstream mesh data is desired. Is it needed to continue with currently loaded mesh?.
            discard_all_data : bool
                'discard_all_data' child.
        """
    def enable_strategy(self, enable: bool):
        """
        Specify whether automatic initialization and case modification should be enabled.
        
        Parameters
        ----------
            enable : bool
                'enable' child.
        """
    def add_edit_modification(self, mod_name: str, mod_exists: bool, mod_active: bool, mod_execution_option: str, mod_iterations: int, mod_timesteps: int, mod_flowtime: float | str, mod_python: bool, mod_command: str):
        """
        Define a single case modification.
        """
    def copy_modification(self, mod_name: str):
        """
        Copy a single case modification.
        
        Parameters
        ----------
            mod_name : str
                'mod_name' child.
        """
    def delete_modification(self, mod_name: str):
        """
        Delete a single case modification.
        
        Parameters
        ----------
            mod_name : str
                'mod_name' child.
        """
    def enable_modification(self, mod_name: str):
        """
        Enable a single defined case modification.
        
        Parameters
        ----------
            mod_name : str
                'mod_name' child.
        """
    def disable_modification(self, mod_name: str):
        """
        Disable a single defined case modification.
        
        Parameters
        ----------
            mod_name : str
                'mod_name' child.
        """
    def import_modifications(self, file_name: str):
        """
        Import a list of case modifications from a tsv file.
        
        Parameters
        ----------
            file_name_1 : str
                TSV filename.
        """
    def export_modifications(self, command_list: list[str], file_name: str):
        """
        Export all case modifications to a tsv file.
        """
    def continue_strategy_execution(self):
        """
        Continue execution of the automatic initialization and case modification strategy defined at present.
        """
class name_28(String):
    _version: str
    fluent_name: str
    _python_name: str
class register_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_53(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class iterations_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_53
    iterations: iterations_1
    time_steps: time_steps
class active_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_18(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class monitor_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class register_based_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_28
    register: register_2
    frequency: frequency_5
    active: active_2
    verbosity: verbosity_18
    monitor: monitor_2
class register_based(NamedObject[register_based_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the definitions for poor mesh numerics.
        """
    def list_properties(self, register_name: str):
        """
        List the properties of a definition for poor mesh numerics.
        
        Parameters
        ----------
            register_name : str
                'register_name' child.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def set(self):
        """
        'set' command.
        """
    child_object_type: register_based_child
class poor_mesh_numerics_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    register_based: register_based
    def print(self):
        """
        Print poor cells count.
        """
class calculation_activity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    execute_commands: execute_commands
    solution_animations: solution_animations
    case_modification: case_modification
    poor_mesh_numerics: poor_mesh_numerics_1
class verbosity_19(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_method_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pseudo_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_scale_methods(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_scale_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_scale_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_time_size_calc_solid_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class time_solid_scale_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_for_solid_zone(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_method(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    time_step_method: time_step_method_1
    pseudo_time_step_size: pseudo_time_step_size
    length_scale_methods: length_scale_methods
    time_step_size_scale_factor: time_step_size_scale_factor_1
    length_scale: length_scale_1
    auto_time_size_calc_solid_zone: auto_time_size_calc_solid_zone
    time_solid_scale_factor: time_solid_scale_factor
    time_step_size_for_solid_zone: time_step_size_for_solid_zone
class pseudo_time_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    verbosity: verbosity_19
    time_step_method: time_step_method
class iter_count_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_66(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_timestep(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class error_tolerance_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_end(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_time_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_time_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_step_change_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_step_change_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_time_step_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class adaptive_time_stepping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_66
    user_defined_timestep: user_defined_timestep
    error_tolerance: error_tolerance_2
    time_end: time_end
    min_time_step: min_time_step
    max_time_step: max_time_step
    min_step_change_factor: min_step_change_factor
    max_step_change_factor: max_step_change_factor
    fixed_time_step_count: fixed_time_step_count
class enabled_67(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class desired_cfl(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_time_step(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_fixed_time_step(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class update_interval_time_step_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cfl_based_adaptive_time_stepping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_67
    user_defined_timestep: user_defined_timestep
    desired_cfl: desired_cfl
    time_end: time_end
    initial_time_step: initial_time_step
    max_fixed_time_step: max_fixed_time_step
    update_interval_time_step_size: update_interval_time_step_size
    min_time_step: min_time_step
    max_time_step: max_time_step
    min_step_change_factor: min_step_change_factor
    max_step_change_factor: max_step_change_factor
class reporting_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class profile_update_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class enable_28(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flow_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class first_to_second_order_blending_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class use_fmg(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solution_steering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    enable: enable_28
    flow_type: flow_type
    first_to_second_order_blending: first_to_second_order_blending_2
    use_fmg: use_fmg
    def settings(self, explicit_relaxation: float | str, initial_iterations: int, pre_iterations: int, cfl_update_frequency: int, cfl_start: float | str, cfl_max: float | str, ramp: bool, ramp_it: int):
        """
        Solution Steering Settings.
        
        Parameters
        ----------
            explicit_relaxation : real
                Explicit Under Relaxation Factor.
            initial_iterations : int
                Number of initial iterations (Stage 1).
            pre_iterations : int
                Number of iterations before updating the Courant number (Stage 2).
            cfl_update_frequency : int
                Frequency of Courant number updates (Stage 2).
            cfl_start : real
                Starting Courant number.
            cfl_max : real
                Maximum Courant number.
            ramp : bool
                Use Courant number linear ramping.
            ramp_it : int
                Courant number ramping iterations.
        """
class time_step_count_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class type_15(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_13(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class duration_specification_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class specified_time_step(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class incremental_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_count_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class total_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iter_per_time_step(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class flow_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class total_time_step_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class solution_status(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class extrapolate_variables(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_flow_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class courant_number_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initial_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_time_step_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class min_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_time_step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class update_interval_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class cfl_based_time_stepping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    courant_number: courant_number_1
    initial_time_step_size: initial_time_step_size
    fixed_time_step_size: fixed_time_step_size
    min_time_step_size: min_time_step_size
    max_time_step_size: max_time_step_size
    min_step_change_factor: min_step_change_factor
    max_step_change_factor: max_step_change_factor
    update_interval: update_interval_3
class control_time_step_size_variation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_average_cfl(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cfl_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class cfl_based_time_stepping_advanced_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    control_time_step_size_variation: control_time_step_size_variation
    use_average_cfl: use_average_cfl
    cfl_type: cfl_type
class error_tolerance_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class error_based_time_stepping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    error_tolerance: error_tolerance_3
    initial_time_step_size: initial_time_step_size
    fixed_time_step_size: fixed_time_step_size
    min_time_step_size: min_time_step_size
    max_time_step_size: max_time_step_size
    min_step_change_factor: min_step_change_factor
    max_step_change_factor: max_step_change_factor
    update_interval: update_interval_3
class undo_timestep(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class predict_next(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rotating_mesh_flow_predictor(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_68(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class global_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class mp_specific_time_stepping(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_68
    global_courant_number: global_courant_number
    initial_time_step_size: initial_time_step_size
    fixed_time_step_size: fixed_time_step_size
    min_time_step_size: min_time_step_size
    max_time_step_size: max_time_step_size
    min_step_change_factor: min_step_change_factor
    max_step_change_factor: max_step_change_factor
    update_interval: update_interval_3
class udf_hook(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_69(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_periodic_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class period(Real):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_steps_per_period(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class total_periods(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_periodic(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_69
    fixed_periodic_type: fixed_periodic_type
    period: period
    frequency: frequency_6
    time_step_size: time_step_size_1
    time_step_size_count: time_step_size_count
    time_steps_per_period: time_steps_per_period
    total_periods: total_periods
    _child_aliases: dict
class moving_mesh_constraint(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_courant_number(Real):
    _version: str
    fluent_name: str
    _python_name: str
class moving_mesh_cfl_constraint(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    moving_mesh_constraint: moving_mesh_constraint
    mesh_courant_number: mesh_courant_number
class physics_based_constraint(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class viscous_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gravity_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surface_tension_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class acoustic_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class time_scale_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    viscous_scale: viscous_scale
    gravity_scale: gravity_scale
    surface_tension_scale: surface_tension_scale
    acoustic_scale: acoustic_scale
class verbosity_20(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class multiphase_specific_time_constraints(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    moving_mesh_cfl_constraint: moving_mesh_cfl_constraint
    physics_based_constraint: physics_based_constraint
    time_scale_options: time_scale_options
    verbosity: verbosity_20
class enable_solid_time_step(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class choose_auto_time_stepping(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class time_step_size_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class solid_time_step_size(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_solid_time_step: enable_solid_time_step
    choose_auto_time_stepping: choose_auto_time_stepping
    time_step_size: time_step_size_2
class time_step_size_for_acoustic_export(Real):
    _version: str
    fluent_name: str
    _python_name: str
class extrapolate_eqn_vars_child(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class extrapolate_eqn_vars(NamedObject[extrapolate_eqn_vars_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: extrapolate_eqn_vars_child
class transient_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    query_names: list[str]
    type: type_15
    method: method_13
    duration_specification_method: duration_specification_method
    specified_time_step: specified_time_step
    incremental_time: incremental_time
    time_step_count: time_step_count_2
    total_time: total_time
    time_step_size: time_step_size
    max_iter_per_time_step: max_iter_per_time_step
    flow_time: flow_time
    total_time_step_count: total_time_step_count
    solution_status: solution_status
    extrapolate_variables: extrapolate_variables
    max_flow_time: max_flow_time
    cfl_based_time_stepping: cfl_based_time_stepping
    cfl_based_time_stepping_advanced_options: cfl_based_time_stepping_advanced_options
    error_based_time_stepping: error_based_time_stepping
    undo_timestep: undo_timestep
    predict_next: predict_next
    rotating_mesh_flow_predictor: rotating_mesh_flow_predictor
    mp_specific_time_stepping: mp_specific_time_stepping
    udf_hook: udf_hook
    fixed_periodic: fixed_periodic
    multiphase_specific_time_constraints: multiphase_specific_time_constraints
    solid_time_step_size: solid_time_step_size
    time_step_size_for_acoustic_export: time_step_size_for_acoustic_export
    extrapolate_eqn_vars: extrapolate_eqn_vars
    def simulation_status(self):
        """
        Get the simulation status.
        """
class postprocess(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class num_of_post_iter_per_timestep(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pollutants(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    postprocess: postprocess
    num_of_post_iter_per_timestep: num_of_post_iter_per_timestep
class enabled_70(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sampling_interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_sampled(Real):
    _version: str
    fluent_name: str
    _python_name: str
class flow_shear_stresses(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class flow_heat_fluxes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wall_statistics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class force_statistics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dpm_variables(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class species_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class statistics_mixture_fraction(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class statistics_reaction_progress(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enable_custom_field_functions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class custom_field_functions(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class data_sampling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_70
    sampling_interval: sampling_interval
    time_sampled: time_sampled
    flow_shear_stresses: flow_shear_stresses
    flow_heat_fluxes: flow_heat_fluxes
    wall_statistics: wall_statistics
    force_statistics: force_statistics
    dpm_variables: dpm_variables
    species_list: species_list
    statistics_mixture_fraction: statistics_mixture_fraction
    statistics_reaction_progress: statistics_reaction_progress
    enable_custom_field_functions: enable_custom_field_functions
    custom_field_functions: custom_field_functions
class zones_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class min_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mean(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rmse(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class moving_average(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class average_over_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class data_sets_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    zones: zones_3
    min: min_2
    max: max_2
    mean: mean
    rmse: rmse
    moving_average: moving_average
    average_over: average_over_1
class data_sets(NamedObject[data_sets_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: data_sets_child
class data_sampling_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    data_sets: data_sets
    def add_datasets(self, zone_names: list[str], domain: str, quantities: list[str], min: bool, max: bool, mean: bool, rmse: bool, moving_average: bool, average_over: int):
        """
        Add datasets.
        
        Parameters
        ----------
            zone_names : List
                One or more zone names.
            domain : str
                The domain.
            quantities : List
                One or more quantities.
            min : bool
                Specifies whether to specify the minimum value of the selected quantity(s) will be collected.
            max : bool
                Specifies whether to specify the maximum value of the selected quantity(s) will be collected.
            mean : bool
                Specifies whether to specify the average value of the selected quantity(s) will be computed and collected.
            rmse : bool
                Specifies whether to specify that the root mean square error of the selected quantity(s) will be computed and collected.
            moving_average : bool
                Specifies whether to specify an interval for averaging of the computed statistics.
            average_over : int
                The number of iterations (steady simulations) or time steps (transient simulations) that will be used for computing the moving average.
        """
    def list_datasets(self):
        """
        List dataset.
        """
class residual_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class run_calculation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    pseudo_time_settings: pseudo_time_settings
    iter_count: iter_count_2
    adaptive_time_stepping: adaptive_time_stepping
    cfl_based_adaptive_time_stepping: cfl_based_adaptive_time_stepping
    reporting_interval: reporting_interval
    profile_update_interval: profile_update_interval
    solution_steering: solution_steering
    time_step_count: time_step_count_1
    transient_controls: transient_controls
    pollutants: pollutants
    data_sampling: data_sampling
    data_sampling_options: data_sampling_options
    residual_verbosity: residual_verbosity
    def calculate(self):
        """
        Start run calculation.
        """
    def interrupt(self, interrupt_at: str):
        """
        Interrupt the iterations.
        
        Parameters
        ----------
            interrupt_at : str
                When should the solution be interrupted.
        """
    def dual_time_iterate(self, total_period_count: int, time_step_count: int, total_time_step_count: int, total_time: float | str, incremental_time: float | str, max_iter_per_step: int, postprocess: bool, post_iter_per_time_step_count: int):
        """
        Perform unsteady iterations.
        
        Parameters
        ----------
            total_period_count : int
                Number of total periods.
            time_step_count : int
                Inceremtal number of Time steps.
            total_time_step_count : int
                Total number of Time steps.
            total_time : real
                Total Simulation Time.
            incremental_time : real
                Incremental Time.
            max_iter_per_step : int
                Maximum Number of iterations per time step.
            postprocess : bool
                Enable/Disable Postprocess pollutant solution?.
            post_iter_per_time_step_count : int
                Number of post-processing iterations per time step.
        """
    def iterate(self, iter_count: int):
        """
        Perform a specified number of iterations.
        
        Parameters
        ----------
            iter_count : int
                Incremental number of time steps.
        """
    def iterating(self):
        """
        'iterating' query.
        """
class solution(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    methods: methods_2
    controls: controls_1
    report_definitions: report_definitions
    monitor: monitor
    cell_registers: cell_registers
    initialization: initialization_1
    calculation_activity: calculation_activity
    run_calculation: run_calculation
class custom_field_function_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class custom_field_functions_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_29
    custom_field_function: custom_field_function_1
class custom_field_functions_1(NamedObject[custom_field_functions_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def create(self, name: str, custom_field_function: str):
        """
        Create a custom field function.
        
        Parameters
        ----------
            name : str
                The name for the custom field function.
            custom_field_function : str
                The custom field function.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def save(self, file_name: str):
        """
        Save saving a custom field function to a file.
        
        Parameters
        ----------
            file_name : str
                The name you want the file saved with.
        """
    def load(self, file_name: str):
        """
        Read custom field-function definitions from a file.
        
        Parameters
        ----------
            file_name_1 : str
                File name.
        """
    def get_list_of_valid_cell_function_names(self):
        """
        List the names of cell functions that can be used in a custom field function.
        """
    child_object_type: custom_field_functions_1_child
class x_component(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_component(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class z_component(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class custom_vectors_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    x_component: x_component
    y_component: y_component
    z_component: z_component
class custom_vectors(NamedObject[custom_vectors_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: custom_vectors_child
class reference_frame_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coordinate(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class point_3(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class r_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class theta_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class snap_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class point_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    reference_frame: reference_frame_9
    coordinate: coordinate
    point: point_3
    r: r_1
    theta: theta_1
    z: z_6
    snap_method: snap_method
    dynamic: dynamic
    def display(self):
        """
        Display a surface.
        """
class point_surface(NamedObject[point_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: point_surface_child
class p0(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class p1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class line_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    p0: p0
    p1: p1
    def display(self):
        """
        Display a surface.
        """
class line_surface(NamedObject[line_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: line_surface_child
class number_of_points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class rake_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    p0: p0
    p1: p1
    number_of_points: number_of_points
    def display(self):
        """
        Display a surface.
        """
class rake_surface(NamedObject[rake_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: rake_surface_child
class method_14(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class normal_computation_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_aligned_normal(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class normal_3(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class p0_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class p1_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class p2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class bounded(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sample_points(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class edges(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class plane_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    method: method_14
    x: x_7
    y: y_7
    z: z_7
    point: point_3
    normal_computation_method: normal_computation_method
    surface_aligned_normal: surface_aligned_normal
    normal: normal_3
    p0: p0_1
    p1: p1_1
    p2: p2
    bounded: bounded
    sample_points: sample_points
    edges: edges
    def display(self):
        """
        Display a surface.
        """
    _child_aliases: dict
class plane_surface(NamedObject[plane_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: plane_surface_child
class field_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class iso_values(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_3
    maximum: maximum_3
    def compute(self):
        """
        Sets the 'minimum' and 'maximum' fields based on the current solution data.
        """
class surfaces_9(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zones_4(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volumes_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class iso_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    field: field_2
    iso_values: iso_values
    range: range_3
    surfaces: surfaces_9
    from_location: from_location
    zones: zones_4
    volumes: volumes_2
    def display(self):
        """
        Display a surface.
        """
    _child_aliases: dict
class iso_surface(NamedObject[iso_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: iso_surface_child
class surfaces_10(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_4
    maximum: maximum_4
    def compute(self):
        """
        Sets 'minimum' and 'maximum' to the current minimum and maximum values for the selected surfaces.
        """
class iso_clip_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    field: field_2
    surfaces: surfaces_10
    from_location: from_location
    range: range_4
    def display(self):
        """
        Display a surface.
        """
    _child_aliases: dict
class iso_clip(NamedObject[iso_clip_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: iso_clip_child
class zone_name_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zone_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    zone_name: zone_name_10
    def display(self):
        """
        Display a surface.
        """
class zone_surface(NamedObject[zone_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: zone_surface_child
class partition_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class partition_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class interior_cell_faces(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partition_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    partition_1: partition_1
    partition_2: partition_2
    interior_cell_faces: interior_cell_faces
    def display(self):
        """
        Display a surface.
        """
class partition_surface(NamedObject[partition_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: partition_surface_child
class surface_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class center_of_rotation_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class angle_of_rotation(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class translation_distance(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class iso_distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transform_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    surface: surface_2
    from_location: from_location
    center_of_rotation: center_of_rotation_1
    angle_of_rotation: angle_of_rotation
    translation_distance: translation_distance
    iso_distance: iso_distance
    def display(self):
        """
        Display a surface.
        """
class transform_surface(NamedObject[transform_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: transform_surface_child
class surface_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zones_5(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volumes_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class imprint_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    surface: surface_3
    zones: zones_5
    volumes: volumes_3
    def display(self):
        """
        Display a surface.
        """
class imprint_surface(NamedObject[imprint_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: imprint_surface_child
class distance_from_origin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class plane_slice_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    normal: normal_3
    distance_from_origin: distance_from_origin
    def display(self):
        """
        Display a surface.
        """
class plane_slice(NamedObject[plane_slice_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: plane_slice_child
class center_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_slice_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    center: center_2
    radius: radius_1
    def display(self):
        """
        Display a surface.
        """
class sphere_slice(NamedObject[sphere_slice_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: sphere_slice_child
class attribute(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class value_19(Real):
    _version: str
    fluent_name: str
    _python_name: str
class quadric_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    attribute: attribute
    value: value_19
    def display(self):
        """
        Display a surface.
        """
class quadric_surface(NamedObject[quadric_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: quadric_surface_child
class surface_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_cells_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    surface: surface_4
    def display(self):
        """
        Display a surface.
        """
class surface_cells(NamedObject[surface_cells_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: surface_cells_child
class expression_definition(String):
    _version: str
    fluent_name: str
    _python_name: str
class expression_volume_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    expression_definition: expression_definition
    def display(self):
        """
        Display a surface.
        """
class expression_volume(NamedObject[expression_volume_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: expression_volume_child
class group_surface_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_30
    surfaces: surfaces_11
    def display(self):
        """
        Display the surface.
        """
class group_surface(NamedObject[group_surface_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str, surfaces: list[str]):
        """
        Create a group of surfaces.
        
        Parameters
        ----------
            name : str
                The name for the group surface.
            surfaces : List
                The surfaces.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def ungroup(self, surface: str):
        """
        Ungroup previously-grouped surfaces.
        
        Parameters
        ----------
            surface : str
                The surface to ungroup.
        """
    child_object_type: group_surface_child
class surfaces_8(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    point_surface: point_surface
    line_surface: line_surface
    rake_surface: rake_surface
    plane_surface: plane_surface
    iso_surface: iso_surface
    iso_clip: iso_clip
    zone_surface: zone_surface
    partition_surface: partition_surface
    transform_surface: transform_surface
    imprint_surface: imprint_surface
    plane_slice: plane_slice
    sphere_slice: sphere_slice
    quadric_surface: quadric_surface
    surface_cells: surface_cells
    expression_volume: expression_volume
    group_surface: group_surface
    def create_multiple_zone_surfaces(self, zone_names: list[str]):
        """
        Provides access to creating new and editing multiple zone surfaces.
        
        Parameters
        ----------
            zone_names : List
                Zone name list.
        """
    def create_multiple_iso_surfaces(self, field: str, name: str, surfaces: list[str], zones: list[str], min: float | str, max: float | str, iso_value: float | str, no_of_surfaces: int, spacing: float | str):
        """
        Provides access to creating new and editing multiple iso-surfaces.
        
        Parameters
        ----------
            field : str
                The field variable.
            name : str
                The Iso-surface name.
            surfaces : List
                The surface(s) that will be used to define the iso-surface.
            zones : List
                The zone(s) that will be used to define the iso-surface.
            min : real
                Min.
            max : real
                Max.
            iso_value : real
                The iso-value.
            no_of_surfaces : int
                The number of surfaces to be created.
            spacing : real
                The spacing.
        """
    def create_multiple_plane_surfaces(self, method: str, name_format: str, x: float | str, y: float | str, z: float | str, point: list[float | str], normal_computation_method: str, surface_aligned_normal: str, normal: list[float | str], p0: list[float | str], p1: list[float | str], p2: list[float | str], bounded: bool, sample_points: bool, edges: list[int], surfaces: int, spacing: float | str):
        """
        Specify the attributes of plane surface.
        
        Parameters
        ----------
            method : str
                The method you want to use to create the plane surface. The required inputs vary by method.
            name_format : str
                The Name Format.
            x : real
                The location on the X-axis where the YZ plane will be created.
            y : real
                The location on the Y-axis where the ZX plane will be created.
            z : real
                The location on the Z-axis where the XY plane will be created.
            point : List
                The XYZ coordinates of the point.
            normal_computation_method : str
                The normal computation method.
            surface_aligned_normal : str
                The surface you want to compute the normal components.
            normal : List
                The XYZ components of the normal.
            p0 : List
                The XYZ coordinates of Point 1 for the Three Points plane creation method.
            p1 : List
                The XYZ coordinates of Point 2 for the Three Points plane creation method.
            p2 : List
                The XYZ coordinates of Point 3 for the Three Points plane creation method.
            bounded : bool
                Specifies whether the plane is bounded by its defining points.
            sample_points : bool
                Specifies whether you want to specify a uniform distribution of points on the plane.
            edges : List
                The point density for edges.
            surfaces : int
                The number of surfaces to be created.
            spacing : real
                The spacing.
        """
    def create_group_surfaces(self, surfaces: list[str], name: str):
        """
        Create a group of surfaces.
        
        Parameters
        ----------
            surfaces : List
                List of surfaces.
            name : str
                The name for the group surface.
        """
    def ungroup_surfaces(self, surface: str):
        """
        Ungroup previously-grouped surfaces.
        
        Parameters
        ----------
            surface : str
                The surface to ungroup.
        """
    def set_rendering_priority(self, surface: str, priority: str):
        """
        Set the surface rendering priority.
        
        Parameters
        ----------
            surface : str
                The surface(s) for surface rendering priority.
            priority : str
                The desired rendering priority.
        """
    def reset_zone_surfaces(self):
        """
        Recreates missing surface zones by resetting the case surface list.
        """
    def split_surface(self, surface: str, auto_name: bool, surf_name_prefix: str):
        """
        Split Surface.
        
        Parameters
        ----------
            surface : str
                The surface to split.
            auto_name : bool
                Specifies whether to do automatic naming or not.
            surf_name_prefix : str
                The prefix for splited surfaces.
        """
    def external_surface(self, auto_name: bool, surf_base_name: str, stl_filename: str, unit: str, split_surface: bool, zones: list[str]):
        """
        External Surface.
        
        Parameters
        ----------
            auto_name : bool
                Specifies whether to do automatic naming or not.
            surf_base_name : str
                The prefix for external surface.
            stl_filename : str
                STL filename.
            unit : str
                Unit in which the mesh was created.
            split_surface : bool
                Specifies whether to Split Surface at Boundaries or not.
            zones : List
                The zone(s) that will be used to define the surface.
        """
class surfaces_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nodes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class edges_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class faces_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partitions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class overset_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gap(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_13(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    nodes: nodes
    edges: edges_1
    faces: faces_1
    partitions: partitions
    overset: overset_4
    gap: gap
class option_54(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class all(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class feature(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    feature_angle: feature_angle
class outline(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class edge_type(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_54
    all: all
    feature: feature
    outline: outline
class edge_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class feature_angle_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class edge_type_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    edge_type: edge_type_1
    feature_angle: feature_angle_1
class shrink_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class option_55(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_16(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class id(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class normal_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class partition(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class by_topological_body(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class by_topological_face(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class by_physics_volume(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class by_physics_boundary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class automatic(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    type: type_16
    id: id
    normal: normal_4
    partition: partition
    by_topological_body: by_topological_body
    by_topological_face: by_topological_face
    by_physics_volume: by_physics_volume
    by_physics_boundary: by_physics_boundary
class faces_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class edges_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class nodes_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class manual_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    faces: faces_2
    edges: edges_2
    nodes: nodes_1
    material_color: material_color
class coloring(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_55
    automatic: automatic
    manual: manual_1
class option_56(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class edges_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coloring_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_56
    faces: faces_2
    edges: edges_3
class display_state_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class annotations_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    surfaces_list: surfaces_list
    locations: locations_5
    options: options_13
    edge_type: edge_type
    edge_type_options: edge_type_options
    shrink_factor: shrink_factor
    coloring: coloring
    coloring_options: coloring_options
    display_state_name: display_state_name
    annotations_list: annotations_list
    def display(self):
        """
        'display' command.
        """
class mesh_2(NamedObject[mesh_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: mesh_2_child
    _child_aliases: dict
class field_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_57(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class global_range(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_on(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    global_range: global_range
class clip_to_range(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_off(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    clip_to_range: clip_to_range
    minimum: minimum_5
    maximum: maximum_5
class range_option(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_57
    auto_range_on: auto_range_on
    auto_range_off: auto_range_off
class global_range_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class clip_to_range_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class range_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    global_range: global_range_1
    auto_range: auto_range_1
    clip_to_range: clip_to_range_1
    minimum: minimum_5
    maximum: maximum_5
    def compute(self):
        """
        Update min-max for Range object.
        """
class filled_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class node_values_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_values_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class contour_lines_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_14(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    filled: filled_2
    node_values: node_values_1
    boundary_values: boundary_values_1
    contour_lines: contour_lines_1
class filled_1(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class node_values(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class boundary_values(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class contour_lines(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class option_58(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smooth(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class banded(Group):
    _version: str
    fluent_name: str
    _python_name: str
class coloring_1(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_58
    smooth: smooth
    banded: banded
class banded_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class colorings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    banded: banded_1
    smooth: smooth
class visible(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class size_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class log_scale_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class user_skip(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class show_all(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class position(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class font_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_automatic(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class font_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class width(Real):
    _version: str
    fluent_name: str
    _python_name: str
class bground_transparent(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bground_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class title_elements(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class color_map(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    visible: visible
    color: color_4
    size: size_2
    log_scale: log_scale_1
    format: format
    user_skip: user_skip
    show_all: show_all
    position: position
    font_name: font_name
    font_automatic: font_automatic
    font_size: font_size
    length: length_5
    width: width
    bground_transparent: bground_transparent
    bground_color: bground_color
    title_elements: title_elements
class draw_mesh_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_object(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class deformation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class deformation_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class contour_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    field: field_3
    surfaces_list: surfaces_list
    locations: locations_5
    range_option: range_option
    range_options: range_options
    options: options_14
    filled: filled_1
    node_values: node_values
    boundary_values: boundary_values
    contour_lines: contour_lines
    coloring: coloring_1
    colorings: colorings
    color_map: color_map
    annotations_list: annotations_list
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    deformation: deformation
    deformation_scale: deformation_scale
    def display(self):
        """
        'display' command.
        """
    _child_aliases: dict
class contour(NamedObject[contour_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: contour_child
    _child_aliases: dict
class vector_field(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class vector_style(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skip_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class options_15(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_scale: auto_scale
    vector_style: vector_style
    scale: scale_5
    skip: skip_1
class scale_f(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scale_4(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_scale: auto_scale
    scale_f: scale_f
class style(String, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class skip(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class in_plane(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_length(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_comp(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_comp(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class z_comp(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scale_head(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tessellation(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class color_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_opt(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    in_plane: in_plane
    fixed_length: fixed_length
    x_comp: x_comp
    y_comp: y_comp
    z_comp: z_comp
    scale_head: scale_head
    tessellation: tessellation
    color: color_5
class vector_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    vector_field: vector_field
    field: field_4
    surfaces_list: surfaces_list
    locations: locations_5
    range_option: range_option
    range_options: range_options
    options: options_15
    scale: scale_4
    style: style
    skip: skip
    vector_opt: vector_opt
    color_map: color_map
    annotations_list: annotations_list
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    def display(self):
        """
        'display' command.
        """
    _child_aliases: dict
class vector_1(NamedObject[vector_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: vector_1_child
    _child_aliases: dict
class velocity_domain(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class release_from_surfaces(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class from_location_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    physics: physics_3
    geometry: geometry_11
    surfaces: surfaces_7
class option_60(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
class min_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class clip_to_range_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    min_value: min_value
    max_value: max_value
class range_5(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_60
    auto_range: auto_range_2
    clip_to_range: clip_to_range_2
class range_options_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    auto_range: auto_range_1
    minimum: minimum_5
    maximum: maximum_5
    def compute(self):
        """
        Update min-max for Range object.
        """
class style_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class line_width(Real):
    _version: str
    fluent_name: str
    _python_name: str
class arrow_space(Real):
    _version: str
    fluent_name: str
    _python_name: str
class arrow_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class marker_size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_lod(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class radius_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scalefactor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ribbon(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    field: field
    scalefactor: scalefactor
class style_attribute(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    style: style_1
    line_width: line_width
    arrow_space: arrow_space
    arrow_scale: arrow_scale
    marker_size: marker_size_1
    sphere_size: sphere_size
    sphere_lod: sphere_lod
    radius: radius_6
    ribbon: ribbon
class style_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class line_width_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class space_factor(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scale_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class width_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class marker_size_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_detail_lod(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constant_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class size_by(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_scale(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_lod_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class field_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_sphere(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    auto_range: auto_range_3
    minimum: minimum_6
    maximum: maximum_6
    def compute(self):
        """
        Update min-max for Size-by Range for Sphere Style.
        """
class minimum_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximun(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_ribbon(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_7
    maximun: maximun
    def compute(self):
        """
        Update min-max for Twist Range for Ribbon Style.
        """
class style_attributes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    style: style_2
    line_width: line_width_1
    space_factor: space_factor
    scale: scale_6
    width: width_1
    marker_size: marker_size_2
    sphere_size: sphere_size_1
    sphere_detail_lod: sphere_detail_lod
    constant: constant_1
    diameter: diameter_3
    size_by: size_by
    sphere_scale: sphere_scale
    sphere_lod: sphere_lod_1
    field: field_6
    scale_factor: scale_factor
    range_sphere: range_sphere
    range_ribbon: range_ribbon
class oil_flow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reverse(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class node_values_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class relative_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_16(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    oil_flow: oil_flow
    reverse: reverse
    node_values: node_values_2
    relative: relative_1
class option_61(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class step_size(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class accuracy_control_1(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_61
    step_size: step_size
    tolerance: tolerance_4
class oil_flow_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class onzone_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reverse_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class node_values_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class accuracy_controls(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class step_size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class relative_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class step_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class skip_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class option_59(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    oil_flow: oil_flow_1
    onzone: onzone_1
    reverse: reverse_1
    node_values: node_values_3
    accuracy_controls: accuracy_controls
    step_size: step_size_1
    tolerance: tolerance_5
    relative: relative_2
    step: step_1
    skip: skip_3
    coarsen: coarsen_3
class step(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class skip_2(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_2(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class onzone(StringList, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class on_location(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    physics: physics_3
    geometry: geometry_11
    surfaces: surfaces_7
class enabled_71(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class to_file_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class file_name_19(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class plot_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_71
    x_axis_function: x_axis_function
    to_file_enabled: to_file_enabled
    file_name: file_name_19
class x_format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_precision(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class y_format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_precision(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class numbers(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_format: x_format
    x_axis_precision: x_axis_precision
    y_format: y_format
    y_axis_precision: y_axis_precision
class draw_major_rules(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class major_rule_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class major_rule_line_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class automatic_major_rules(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class major_rule_distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class major_rule_divisions(Real):
    _version: str
    fluent_name: str
    _python_name: str
class draw_minor_rules(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minor_rule_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class minor_rule_line_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class automatic_minor_rules(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minor_rule_distance(Real):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    draw_major_rules: draw_major_rules
    major_rule_weight: major_rule_weight
    major_rule_line_color: major_rule_line_color
    automatic_major_rules: automatic_major_rules
    major_rule_distance: major_rule_distance
    major_rule_divisions: major_rule_divisions
    draw_minor_rules: draw_minor_rules
    minor_rule_weight: minor_rule_weight
    minor_rule_line_color: minor_rule_line_color
    automatic_minor_rules: automatic_minor_rules
    minor_rule_distance: minor_rule_distance
class y_axis_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    draw_major_rules: draw_major_rules
    major_rule_weight: major_rule_weight
    major_rule_line_color: major_rule_line_color
    automatic_major_rules: automatic_major_rules
    major_rule_distance: major_rule_distance
    major_rule_divisions: major_rule_divisions
    draw_minor_rules: draw_minor_rules
    minor_rule_weight: minor_rule_weight
    minor_rule_line_color: minor_rule_line_color
    automatic_minor_rules: automatic_minor_rules
    minor_rule_distance: minor_rule_distance
class rules(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_axis: x_axis_2
    y_axis: y_axis_2
class x_axis_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class log_scale_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_axis: x_axis_3
    y_axis: y_axis_3
class x_axis_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_min_auto(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_max_auto(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_min_auto(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_max_auto(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class auto_scale_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_axis: x_axis_4
    x_axis_min_auto: x_axis_min_auto
    x_axis_max_auto: x_axis_max_auto
    x_axis_min: x_axis_min
    x_axis_max: x_axis_max
    y_axis: y_axis_4
    y_axis_min_auto: y_axis_min_auto
    y_axis_max_auto: y_axis_max_auto
    y_axis_min: y_axis_min
    y_axis_max: y_axis_max
class x_axis_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class labels(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_axis: x_axis_5
    y_axis: y_axis_5
class axes_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    numbers: numbers
    rules: rules
    log_scale: log_scale_2
    auto_scale: auto_scale_1
    labels: labels
class pattern_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class weight_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class color_6(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lines_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    pattern: pattern_1
    weight: weight_3
    color: color_6
class lines(ListObject[lines_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: lines_child
class symbol_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class size_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class markers_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    symbol: symbol_1
    size: size_3
    color: color_6
class markers(ListObject[markers_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: markers_child
class curves_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    lines: lines
    markers: markers
class pathline_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    velocity_domain: velocity_domain
    field: field_5
    release_from_surfaces: release_from_surfaces
    from_location: from_location_1
    range: range_5
    range_options: range_options_1
    style_attribute: style_attribute
    style_attributes: style_attributes
    options: options_16
    accuracy_control: accuracy_control_1
    option: option_59
    step: step
    skip: skip_2
    coarsen: coarsen_2
    onzone: onzone
    on_location: on_location
    plot: plot_5
    color_map: color_map
    annotations_list: annotations_list
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    axes: axes_1
    curves: curves_1
    def display(self):
        """
        'display' command.
        """
    _child_aliases: dict
class pathline(NamedObject[pathline_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: pathline_child
    _child_aliases: dict
class field_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class injections_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class style_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class line_width_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class arrow_space_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class marker_size_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class sphere_lod_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class field_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scalefactor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class ribbon_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    field: field_8
    scalefactor: scalefactor_1
class scale_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class option_63(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constant_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diameter: diameter_4
class size_by_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class range_options_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    auto_range: auto_range_1
    minimum: minimum_5
    maximum: maximum_5
    def compute(self):
        """
        Update min-max for Range object.
        """
class variable_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    size_by: size_by_1
    range: range_5
    range_options: range_options_2
class options_18(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_63
    constant: constant_2
    variable: variable_1
class sphere_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    scale: scale_7
    sphere_lod: sphere_lod_2
    options: options_18
class style_attribute_1(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    style: style_3
    line_width: line_width_2
    arrow_space: arrow_space_1
    arrow_scale: arrow_scale
    marker_size: marker_size_3
    sphere_size: sphere_size
    sphere_lod: sphere_lod_2
    radius: radius_6
    ribbon_settings: ribbon_settings
    sphere_settings: sphere_settings
class style_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_64(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constant_length(Real):
    _version: str
    fluent_name: str
    _python_name: str
class variable_length(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_length(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_64
    constant_length: constant_length
    variable_length: variable_length
class constant_color(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    color: color_6
class vector_of(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_to_head_ratio(Real):
    _version: str
    fluent_name: str
    _python_name: str
class vector_settings(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    style: style_4
    vector_length: vector_length
    constant_color: constant_color
    vector_of: vector_of
    scale: scale_8
    length_to_head_ratio: length_to_head_ratio
class style_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_of_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class variable_length_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_length_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class constant_length_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class length_to_head_ratio_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constant_color_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_7(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_setting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    style: style_5
    vector_of: vector_of_1
    variable_length: variable_length_1
    vector_length: vector_length_1
    constant_length: constant_length_1
    scale: scale_6
    length_to_head_ratio: length_to_head_ratio_1
    constant_color: constant_color_1
    color: color_7
class free_stream_particles_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class wall_film_particles_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class track_pdf_particles_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_72(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stream_id(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class track_single_particle_stream_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_72
    stream_id: stream_id
class skip_5(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_5(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class option_62(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    free_stream_particles: free_stream_particles_1
    wall_film_particles: wall_film_particles_1
    track_pdf_particles: track_pdf_particles_1
    track_single_particle_stream: track_single_particle_stream_1
    skip: skip_5
    coarsen: coarsen_5
class field_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inside_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class outside(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_19(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    inside: inside_1
    outside: outside
class enabled_73(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class filter_minimum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class filter_maximum(Real):
    _version: str
    fluent_name: str
    _python_name: str
class filter_settings(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    field: field_9
    options: options_19
    enabled: enabled_73
    filter_minimum: filter_minimum
    filter_maximum: filter_maximum
class enabled_74(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class field_10(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class option_65(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class range_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    minimum: minimum_8
    maximum: maximum_7
    def compute(self):
        """
        Update min-max for Filter Settings.
        """
class filter_setting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_74
    field: field_10
    option: option_65
    range: range_6
class options_17(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    node_values: node_values_2
class enabled_75(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class stream_id_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class track_single_particle_stream(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_75
    stream_id: stream_id_1
class skip_4(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_4(Integer):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class free_stream_particles(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class wall_film_particles(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class track_pdf_particles(Boolean):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class particle_track_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    field: field_7
    injections_list: injections_list
    range_options: range_options_1
    range: range_5
    style_attribute: style_attribute_1
    style_attributes: style_attributes
    vector_settings: vector_settings
    vector_setting: vector_setting
    option: option_62
    color_map: color_map
    annotations_list: annotations_list
    filter_settings: filter_settings
    filter_setting: filter_setting
    options: options_17
    track_single_particle_stream: track_single_particle_stream
    skip: skip_4
    coarsen: coarsen_4
    free_stream_particles: free_stream_particles
    wall_film_particles: wall_film_particles
    track_pdf_particles: track_pdf_particles
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    plot: plot_5
    axes: axes_1
    curves: curves_1
    def display(self):
        """
        'display' command.
        """
    _child_aliases: dict
class particle_track(NamedObject[particle_track_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: particle_track_child
    _child_aliases: dict
class vector_field_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_phase(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lic_color_by_field(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lic_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lic_oriented(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lic_normalize(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lic_pixel_interpolation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lic_max_steps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class texture_spacing(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class texture_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class lic_intensity_factor(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class lic_image_filter(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lic_intensity_alpha(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lic_fast(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class gray_scale(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class image_to_display(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lic_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    field: field_4
    vector_field: vector_field_1
    vector_phase: vector_phase
    surfaces_list: surfaces_list
    locations: locations_5
    lic_color_by_field: lic_color_by_field
    lic_color: lic_color
    lic_oriented: lic_oriented
    lic_normalize: lic_normalize
    lic_pixel_interpolation: lic_pixel_interpolation
    lic_max_steps: lic_max_steps
    texture_spacing: texture_spacing
    texture_size: texture_size
    lic_intensity_factor: lic_intensity_factor
    lic_image_filter: lic_image_filter
    lic_intensity_alpha: lic_intensity_alpha
    lic_fast: lic_fast
    gray_scale: gray_scale
    image_to_display: image_to_display
    range_option: range_option
    range_options: range_options
    color_map: color_map
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    annotations_list: annotations_list
    def display(self):
        """
        'display' command.
        """
    _child_aliases: dict
class lic(NamedObject[lic_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: lic_child
    _child_aliases: dict
class olic_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    field: field_4
    vector_field: vector_field_1
    vector_phase: vector_phase
    surfaces_list: surfaces_list
    locations: locations_5
    lic_color_by_field: lic_color_by_field
    lic_color: lic_color
    lic_oriented: lic_oriented
    lic_normalize: lic_normalize
    lic_pixel_interpolation: lic_pixel_interpolation
    lic_max_steps: lic_max_steps
    texture_spacing: texture_spacing
    texture_size: texture_size
    lic_intensity_factor: lic_intensity_factor
    lic_image_filter: lic_image_filter
    lic_intensity_alpha: lic_intensity_alpha
    lic_fast: lic_fast
    gray_scale: gray_scale
    image_to_display: image_to_display
    range_option: range_option
    range_options: range_options
    color_map: color_map
    draw_mesh: draw_mesh_1
    mesh_object: mesh_object
    display_state_name: display_state_name
    annotations_list: annotations_list
    def display(self):
        """
        'display' command.
        """
class olic(NamedObject[olic_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: olic_child
    _child_aliases: dict
class field_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class data_source(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_17(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class range_options_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_17
    minimum: minimum_5
    maximum: maximum_5
class color_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class cell_zones_10(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class home_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    field: field_11
    data_source: data_source
    range_options: range_options_3
    color_density: color_density
    color_map: color_map
    cell_zones: cell_zones_10
class use_home_tab_range(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class active_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class min_value_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_value_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_transparency_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_transparency_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class settings_29_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_3
    min_value: min_value_1
    max_value: max_value_1
    min_transparency_value: min_transparency_value
    max_transparency_value: max_transparency_value
class settings_29(ListObject[settings_29_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: settings_29_child
class reset_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class invert(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class transparency_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_home_tab_range: use_home_tab_range
    settings: settings_29
    reset: reset_2
    invert: invert
class hide_volume(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class value_20(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transparency(Real):
    _version: str
    fluent_name: str
    _python_name: str
class color_8(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class settings_30_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_3
    value: value_20
    transparency: transparency
    color: color_8
class settings_30(ListObject[settings_30_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: settings_30_child
class isovalue_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    hide_volume: hide_volume
    settings: settings_30
    reset: reset_2
class selection_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_min(Real):
    _version: str
    fluent_name: str
    _python_name: str
class x_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_max(Real):
    _version: str
    fluent_name: str
    _python_name: str
class settings_31_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_3
    x_min: x_min
    y_min: y_min
    z_min: z_min
    x_max: x_max
    y_max: y_max
    z_max: z_max
class settings_31(ListObject[settings_31_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: settings_31_child
class clip_box_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    selection_type: selection_type
    settings: settings_31
    reset: reset_2
class x_center_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class y_center_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class z_center_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class radius_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class settings_32_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    active: active_3
    x_center: x_center_1
    y_center: y_center_1
    z_center: z_center_1
    radius: radius_7
class settings_32(ListObject[settings_32_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: settings_32_child
class clip_sphere_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    selection_type: selection_type
    settings: settings_32
    reset: reset_2
class compute_node_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class volumes_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    home_options: home_options
    transparency_options: transparency_options
    isovalue_options: isovalue_options
    clip_box_options: clip_box_options
    clip_sphere_options: clip_sphere_options
    compute_node_count: compute_node_count
    def display(self):
        """
        'display' command.
        """
class volumes_4(NamedObject[volumes_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: volumes_4_child
    _child_aliases: dict
class auto_scale_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class clip_to_range_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_14(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class filled_contours(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class global_range_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class line_contours(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class log_scale_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class n_contour(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class node_values_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class render_mesh(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class banded_coloring(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_bands_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class coloring_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    banded_coloring: banded_coloring
    number_of_bands: number_of_bands_1
class contours(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_scale: auto_scale_2
    clip_to_range: clip_to_range_3
    surfaces: surfaces_14
    filled_contours: filled_contours
    global_range: global_range_2
    line_contours: line_contours
    log_scale: log_scale_3
    n_contour: n_contour
    node_values: node_values_4
    render_mesh: render_mesh
    coloring: coloring_2
class display_11(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class history_file_name(Filename, _OutputFile):
    _version: str
    fluent_name: str
    _python_name: str
class report_default_variables(String):
    _version: str
    fluent_name: str
    _python_name: str
class track_single_particle_stream_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class arrow_scale_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class arrow_space_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class coarsen_factor(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class line_width_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class particle_tracks(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    display: display_11
    history_file_name: history_file_name
    report_default_variables: report_default_variables
    track_single_particle_stream: track_single_particle_stream_2
    arrow_scale: arrow_scale_1
    arrow_space: arrow_space_2
    coarsen_factor: coarsen_factor
    line_width: line_width_3
    _child_aliases: dict
class background_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class color_by_type(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_by(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class foreground(String):
    _version: str
    fluent_name: str
    _python_name: str
class only_list_case_boundaries(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_inherent_material_color(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class material_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_name_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    color: color_6
    material: material_8
class type_name(NamedObject[type_name_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: type_name_child
class by_type(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    only_list_case_boundaries: only_list_case_boundaries
    use_inherent_material_color: use_inherent_material_color
    type_name: type_name
    def reset(self):
        """
        Reset colors and/or materials to the defaults.
        """
class use_inherent_material_color_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class material_9(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_name_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    color: color_9
    material: material_9
class surface_name(NamedObject[surface_name_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: surface_name_child
class by_surface(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    use_inherent_material_color: use_inherent_material_color_1
    surface_name: surface_name
    def reset(self):
        """
        Reset colors and/or materials to the defaults.
        """
    def list_surfaces_by_color(self):
        """
        List the surfaces by its color.
        """
    def list_surfaces_by_material(self):
        """
        List the surfaces by its material.
        """
    def surfaces(self, surface_names: list[str], color: str, material: str):
        """
        Select the surface(s) to specify colors and/or materials.
        
        Parameters
        ----------
            surface_names : List
                The list of surfaces to set color and material.
            color : str
                'color' child.
            material : str
                'material' child.
        """
class far_field_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class inlet_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class interior_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class internal_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class outlet_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class overset_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class periodic_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class rans_les_interface_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class symmetry_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class axis_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class free_surface_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class traction_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class wall_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class interface_faces(String):
    _version: str
    fluent_name: str
    _python_name: str
class surface_8(String):
    _version: str
    fluent_name: str
    _python_name: str
class skip_label(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class automatic_skip(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class colormap(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class graphics_color_theme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mesh_display_configuration(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class left_top(String):
    _version: str
    fluent_name: str
    _python_name: str
class left_bottom(String):
    _version: str
    fluent_name: str
    _python_name: str
class right_top(String):
    _version: str
    fluent_name: str
    _python_name: str
class right_middle(String):
    _version: str
    fluent_name: str
    _python_name: str
class right_bottom(String):
    _version: str
    fluent_name: str
    _python_name: str
class titles(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    left_top: left_top
    left_bottom: left_bottom
    right_top: right_top
    right_middle: right_middle
    right_bottom: right_bottom
class overlays(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class render_mesh_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class colors(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    background: background_1
    color_by_type: color_by_type
    color_by: color_by
    foreground: foreground
    by_type: by_type
    by_surface: by_surface
    far_field_faces: far_field_faces
    inlet_faces: inlet_faces
    interior_faces: interior_faces
    internal_faces: internal_faces
    outlet_faces: outlet_faces
    overset_faces: overset_faces
    periodic_faces: periodic_faces
    rans_les_interface_faces: rans_les_interface_faces
    symmetry_faces: symmetry_faces
    axis_faces: axis_faces
    free_surface_faces: free_surface_faces
    traction_faces: traction_faces
    wall_faces: wall_faces
    interface_faces: interface_faces
    surface: surface_8
    skip_label: skip_label
    automatic_skip: automatic_skip
    colormap: colormap
    graphics_color_theme: graphics_color_theme
    mesh_display_configuration: mesh_display_configuration
    titles: titles
    overlays: overlays
    render_mesh: render_mesh_1
    def reset_colors(self):
        """
        Reset individual mesh surface colors to the defaults.
        """
    def list_colors(self):
        """
        List available colors.
        """
    def reset_graphics(self):
        """
        Reset the graphics system.
        """
class ambient_color(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class headlight_setting(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lights_on(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lighting_interpolation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class on(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class rgb(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class direction_5(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class lights_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    on: on
    rgb: rgb
    direction: direction_5
    def set_direction_from_view_vector(self):
        """
        'set_direction_from_view_vector' command.
        """
class lights(ListObject[lights_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: lights_child
class lighting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    ambient_color: ambient_color
    headlight_setting: headlight_setting
    lights_on: lights_on
    lighting_interpolation: lighting_interpolation
    lights: lights
class raytracer_image(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_mode(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hardcopy_format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hardcopy_options(String):
    _version: str
    fluent_name: str
    _python_name: str
class window_dump_cmd(String):
    _version: str
    fluent_name: str
    _python_name: str
class post_format(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class driver_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    hardcopy_format: hardcopy_format
    hardcopy_options: hardcopy_options
    window_dump_cmd: window_dump_cmd
    post_format: post_format
    def current_driver(self):
        """
        'current_driver' command.
        """
class invert_background(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class landscape(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_resolution(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class y_resolution(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class dpi(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class use_window_resolution(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class standard_resolution(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class jpeg_hardcopy_quality(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class invert_normals_for_avz(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class picture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    raytracer_image: raytracer_image
    color_mode: color_mode
    driver_options: driver_options
    invert_background: invert_background
    landscape: landscape
    x_resolution: x_resolution
    y_resolution: y_resolution
    dpi: dpi
    use_window_resolution: use_window_resolution
    standard_resolution: standard_resolution
    jpeg_hardcopy_quality: jpeg_hardcopy_quality
    invert_normals_for_avz: invert_normals_for_avz
    def preview(self):
        """
        Display a preview image of a hardcopy.
        """
    def save_picture(self, file_name: str):
        """
        'save_picture' command.
        """
    def list_color_mode(self):
        """
        'list_color_mode' command.
        """
class camera(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def dolly(self, right: float | str, up: float | str, in_: float | str):
        """
        Adjust the camera position and target.
        
        Parameters
        ----------
            right : real
                Dollys the camera to the right.
            up : real
                Dollys the camera up.
            in_ : real
                Dollys the camera in toward the model (zoom in).
        """
    def field(self, width: float | str, height: float | str):
        """
        Settings for specifying the field of view (width and height).
        
        Parameters
        ----------
            width : real
                The height for the camera's field of view.
            height : real
                The width for the camera's field of view.
        """
    def orbit(self, right: float | str, up: float | str):
        """
        Settings for adjusting the camera position without modifying the target.
        
        Parameters
        ----------
            right : real
                Orbits the camera to the right.
            up : real
                Orbits the camera upwards.
        """
    def pan(self, right: float | str, up: float | str):
        """
        Settings for adjusting the camera position without modifying the target.
        
        Parameters
        ----------
            right : real
                Pan the camera to the right.
            up : real
                Pan the camera upwards.
        """
    def position(self, xyz: list[float | str]):
        """
        Settings for specifying the camera position.
        
        Parameters
        ----------
            xyz : List
                The position of the camera in the domain (XYZ coordinates).
        """
    def projection(self, type: str):
        """
        Options for setting the camera's projection.
        
        Parameters
        ----------
            type : str
                Specifies whether the view is orthographic or projection.
        """
    def roll(self, counter_clockwise: float | str):
        """
        Settings for adjusting the camera up-vector.
        
        Parameters
        ----------
            counter_clockwise : real
                Roll the camera in the counter-clockwise direction.
        """
    def target(self, xyz: list[float | str]):
        """
        Specifies the center point of the camera view.
        
        Parameters
        ----------
            xyz : List
                Specifies the target location for the camera (what the camera is pointing at).
        """
    def up_vector(self, xyz: list[float | str]):
        """
        Settings for specifying the camera up-vector.
        
        Parameters
        ----------
            xyz : List
                Specifies the XYZ coordinates indicating which direction is "up" to the camera.
        """
    def zoom(self, factor: float | str):
        """
        Settings for controlling the zoom level (field of view for the camera).
        
        Parameters
        ----------
            factor : real
                Specifies the zoom factor for the camera.
        """
class front_faces_transparent(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class projection_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class axes_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ruler(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class title_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class boundary_marker(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class anti_aliasing(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reflections(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class static_shadows(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_shadows(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class grid_plane(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class headlights(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class lighting_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class view_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class light_id(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class display_states_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    front_faces_transparent: front_faces_transparent
    projection: projection_1
    axes: axes_2
    ruler: ruler
    title: title_1
    boundary_marker: boundary_marker
    anti_aliasing: anti_aliasing
    reflections: reflections
    static_shadows: static_shadows
    dynamic_shadows: dynamic_shadows
    grid_plane: grid_plane
    headlights: headlights
    lighting: lighting_1
    view_name: view_name
    light_id: light_id
class display_states(NamedObject[display_states_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def use_active(self, state_name: str):
        """
        Update an existing display state's settings to match those of the active graphics window.
        
        Parameters
        ----------
            state_name : str
                Update the currently-selected display state to inherit the display state settings of the active graphics window.
        """
    def apply(self, state_name: str):
        """
        Apply a display state to the active window.
        
        Parameters
        ----------
            state_name : str
                Display state name to apply.
        """
    def copy(self, state_name: str):
        """
        Create a new display state with settings copied from an existing display state.
        
        Parameters
        ----------
            state_name : str
                Create copy of display state.
        """
    def read(self, file_name: str):
        """
        Read display states from a file.
        
        Parameters
        ----------
            file_name_1 : str
                File name to read display states from.
        """
    def write(self, file_name: str, state_name: list[str]):
        """
        Write display states to a file.
        
        Parameters
        ----------
            file_name : str
                File name to write display states to.
            state_name : List
                Display state names to write to file.
        """
    child_object_type: display_states_child
class animation_option(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_spin(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class color_map_alignment(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class double_buffering(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class face_displacement(Real):
    _version: str
    fluent_name: str
    _python_name: str
class hidden_surface_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class hidden_surfaces(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class front_faces_transparent_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class show_colormap(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class line_weight(Real):
    _version: str
    fluent_name: str
    _python_name: str
class marker_size_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class marker_symbol_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class rendering_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    animation_option: animation_option
    auto_spin: auto_spin
    color_map_alignment: color_map_alignment
    double_buffering: double_buffering
    face_displacement: face_displacement
    hidden_surface_method: hidden_surface_method
    hidden_surfaces: hidden_surfaces
    front_faces_transparent: front_faces_transparent_1
    show_colormap: show_colormap
    line_weight: line_weight
    marker_size: marker_size_4
    marker_symbol: marker_symbol_1
    def device_info(self):
        """
        List information for the graphics device.
        """
    def driver(self, driver_name: str):
        """
        Change the current graphics driver.
        
        Parameters
        ----------
            driver_name : str
                New graphics driver.
        """
    def set_rendering_options(self):
        """
        Set the rendering options.
        """
class plane_coefficients(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class visible_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mirror_planes_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    plane_coefficients: plane_coefficients
    distance: distance_1
    visible: visible_1
class mirror_planes(NamedObject[mirror_planes_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, coefficients: list[float | str], distance: float | str):
        """
        Define a mirror plane for a non-symmetric domain.
        
        Parameters
        ----------
            coefficients : List
                The cofficients of X, Y and Z.
            distance : real
                The distance of the plane from the origin.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: mirror_planes_child
class mirror_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class add_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class remove(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class view_sync(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    add: add_1
    remove: remove
    def list(self):
        """
        Print the IDs of the open, synchronized graphics windows.
        """
    def start(self, primary_window_id: str):
        """
        Start the view synchronization process.
        
        Parameters
        ----------
            primary_window_id : str
                Specifies the ID of the primary graphics window, that all others are synchronized to.
        """
    def stop(self):
        """
        Stop view synchronization process.
        """
    def add_all(self):
        """
        Add all graphics windows (IDs) for synchronization.
        """
class views(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    camera: camera
    display_states: display_states
    rendering_options: rendering_options
    mirror_planes: mirror_planes
    mirror_zones: mirror_zones
    view_sync: view_sync
    def auto_scale(self):
        """
        'auto_scale' command.
        """
    def reset_to_default_view(self):
        """
        Reset view to front and center.
        """
    def delete_view(self, view_name: str):
        """
        Remove a view from the list.
        
        Parameters
        ----------
            view_name : str
                'view_name' child.
        """
    def last_view(self):
        """
        Return to the camera position before the last manipulation.
        """
    def next_view(self):
        """
        Return to the camera position after the current position in the stack.
        """
    def list_views(self):
        """
        List predefined and saved views.
        """
    def restore_view(self, view_name: str):
        """
        Use a saved view.
        
        Parameters
        ----------
            view_name : str
                'view_name' child.
        """
    def read_views(self, file_name: str):
        """
        Read views from a view file.
        
        Parameters
        ----------
            file_name_1 : str
                The view file.
        """
    def save_view(self, view_name: str):
        """
        Save the current view to the view list.
        
        Parameters
        ----------
            view_name : str
                'view_name' child.
        """
    def write_views(self, file_name: str, view_list: list[str]):
        """
        Write selected views to a view file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
            view_list : List
                'view_list' child.
        """
    def apply_mirror_planes(self, mirror_planes: list[str]):
        """
        Apply mirror planes for a symmetric or non-symmetric domain.
        
        Parameters
        ----------
            mirror_planes : List
                Apply selectd mirror planes.
        """
    def get_current_mirror_planes(self):
        """
        Get the list of applied mirror planes.
        """
class border(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bottom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class clear_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class left(Real):
    _version: str
    fluent_name: str
    _python_name: str
class right_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class top(Real):
    _version: str
    fluent_name: str
    _python_name: str
class visible_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class axes_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    border: border
    bottom: bottom
    clear: clear_1
    left: left
    right: right_3
    top: top
    visible: visible_2
class border_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bottom_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class left_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class right_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class top_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class visible_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class main(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    border: border_1
    bottom: bottom_1
    left: left_1
    right: right_4
    top: top_1
    visible: visible_3
class border_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bottom_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class clear_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class format_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class font_size_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class left_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class margin(Real):
    _version: str
    fluent_name: str
    _python_name: str
class right_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class top_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class visible_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scale_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    border: border_2
    bottom: bottom_2
    clear: clear_2
    format: format_1
    font_size: font_size_1
    left: left_2
    margin: margin
    right: right_5
    top: top_2
    visible: visible_4
class application(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class border_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bottom_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class clear_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class company(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class date(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class left_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class right_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class top_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class visible_5(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class alignment(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class text_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    application: application
    border: border_3
    bottom: bottom_3
    clear: clear_3
    company: company
    date: date
    left: left_3
    right: right_6
    top: top_3
    visible: visible_5
    alignment: alignment
class background_2(String):
    _version: str
    fluent_name: str
    _python_name: str
class color_filter(String):
    _version: str
    fluent_name: str
    _python_name: str
class foreground_1(String):
    _version: str
    fluent_name: str
    _python_name: str
class on_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class width_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class height_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class margin_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class pixel_size(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    width: width_3
    height: height_2
    margin: margin_1
class video(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    background: background_2
    color_filter: color_filter
    foreground: foreground_1
    on: on_1
    pixel_size: pixel_size
class border_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bottom_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class left_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class right_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class top_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class visible_6(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class xy(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    border: border_4
    bottom: bottom_4
    left: left_4
    right: right_7
    top: top_4
    visible: visible_6
class logo(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ruler_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class logo_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class windows(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axes: axes_3
    main: main
    scale: scale_9
    text: text_1
    video: video
    xy: xy
    logo: logo
    ruler: ruler_1
    logo_color: logo_color
    def aspect_ratio(self, width: float | str, height: float | str):
        """
        Set the aspect ratio of the active window.
        
        Parameters
        ----------
            width : real
                'width' child.
            height : real
                'height' child.
        """
    def open_window(self, window_id: int):
        """
        Open a user graphics window.
        
        Parameters
        ----------
            window_id : int
                'window_id' child.
        """
    def set_window(self, window_id: int):
        """
        Set a user graphics window to be the active window.
        
        Parameters
        ----------
            window_id : int
                'window_id' child.
        """
    def set_window_by_name(self, window_name: str):
        """
        Set a reserved graphics window to be the active window by its name.
        
        Parameters
        ----------
            window_name : str
                'window_name' child.
        """
    def close_window(self, window_id: int):
        """
        Close a user graphics window.
        
        Parameters
        ----------
            window_id : int
                'window_id' child.
        """
    def close_window_by_name(self, window_name: str):
        """
        Close a reserved graphics window by its name.
        
        Parameters
        ----------
            window_name : str
                'window_name' child.
        """
class hide_environment_keep_effects(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class environment_image(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vertical(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class horizontal(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class spin(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class env_color(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class env_intensity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class view_zoom(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class show_backplate(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class backplate_color(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class backplate_image(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class env_light_upvec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class env_light_dirvec(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class activate_env_ground(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class activate_env_ground_shadow(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_scale(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class env_light_ground_height(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class is_ground_shadow_at_fix_axis(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class ground_shadow_axis(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class background_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    hide_environment_keep_effects: hide_environment_keep_effects
    environment_image: environment_image
    vertical: vertical
    horizontal: horizontal
    spin: spin
    env_color: env_color
    env_intensity: env_intensity
    view_zoom: view_zoom
    show_backplate: show_backplate
    backplate_color: backplate_color
    backplate_image: backplate_image
    env_light_upvec: env_light_upvec
    env_light_dirvec: env_light_dirvec
    activate_env_ground: activate_env_ground
    activate_env_ground_shadow: activate_env_ground_shadow
    model_scale: model_scale
    env_light_ground_height: env_light_ground_height
    is_ground_shadow_at_fix_axis: is_ground_shadow_at_fix_axis
    ground_shadow_axis: ground_shadow_axis
class quality_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class denoiser(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class thread_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_rendering_timeout(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class rendering(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    quality: quality_1
    denoiser: denoiser
    thread_count: thread_count
    max_rendering_timeout: max_rendering_timeout
class raytracing_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    background: background_3
    rendering: rendering
    def display_live_preview(self):
        """
        Display the raytracing rendering for the active window.
        """
    def display_in_omniverse(self, usd_output_file: str):
        """
        Display the raytracing rendering in Omniverse.
        
        Parameters
        ----------
            usd_output_file : str
                The file path where USD file should be saved.
        """
    def usd_export_via_connector(self, output_usd_path: str, surface_names: list[str], object_name: str, colormap_name: str, num_levels: int, min_value: float | str, max_value: float | str, node_values: bool, field_name: str):
        """
        Export data for Omniverse rendering.
        
        Parameters
        ----------
            output_usd_path : str
                The path where USD should be saved.
            surface_names : List
                Surface ids to be exported to USD.
            object_name : str
                The object name that needs to be exported to USD.
            colormap_name : str
                The colormap name.
            num_levels : int
                The number of levels.
            min_value : real
                The minimum value.
            max_value : real
                The maximum value.
            node_values : bool
                Whether to use node values.
            field_name : str
                The field name.
        """
class pulse_mode(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class pulse(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    pulse_mode: pulse_mode
    def write(self, object_name: str, write_format: str, file_name: str):
        """
        'write' command.
        """
class periodic_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_16(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class translation(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_origin_4(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_direction_4(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class repeats(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class repeats_in_360_degrees(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class periodic_instances_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    periodic_type: periodic_type
    surfaces: surfaces_16
    translation: translation
    axis_origin: axis_origin_4
    axis_direction: axis_direction_4
    angle: angle_3
    repeats: repeats
    repeats_in_360_degrees: repeats_in_360_degrees
class periodic_instances(NamedObject[periodic_instances_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def detect_surfaces(self, clear_current_instances: bool):
        """
        Detect the surfaces for the periodic instance.
        
        Parameters
        ----------
            clear_current_instances : bool
                Clear the current periodic instances.
        """
    def clear_repeats(self):
        """
        Clear the periodic instance repeats.
        """
    child_object_type: periodic_instances_child
class display_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def surface_mesh(self, surface_names: list[str]):
        """
        Draw the mesh defined by the specified surfaces.
        
        Parameters
        ----------
            surface_names : List
                Surface.
        """
    def zone_mesh(self, zone_names: list[str]):
        """
        Draw the mesh defined by specified face zones.
        
        Parameters
        ----------
            zone_names : List
                Zone name list.
        """
    def hsf_file(self, file_name: str):
        """
        Display hoops stream file data to active graphics window.
        
        Parameters
        ----------
            file_name_1 : str
                HSF file name.
        """
    def surface_cells(self, surface_cell_names_ids: list[str]):
        """
        Draw the cells on the specified surfaces.
        
        Parameters
        ----------
            surface_cell_names_ids : List
                The list of surface names/ids.
        """
class texture_name(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class texture_path(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class diffuse_texture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    texture_name: texture_name
    texture_path: texture_path
class base_color(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class specular_texture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    texture_name: texture_name
    texture_path: texture_path
class specular_color(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class environment_texture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    texture_name: texture_name
    texture_path: texture_path
class bump_texture(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    texture_name: texture_name
    texture_path: texture_path
class emissive_color(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class reflectivity(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transparency_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class glossiness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class scale_10(Real):
    _version: str
    fluent_name: str
    _python_name: str
class axis_8(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class angle_4(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class rotate_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis: axis_8
    angle: angle_4
class texture_transform(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    scale: scale_10
    rotate: rotate_1
class editable(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class material_7_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_24
    diffuse_texture: diffuse_texture
    base_color: base_color
    specular_texture: specular_texture
    specular_color: specular_color
    environment_texture: environment_texture
    bump_texture: bump_texture
    emissive_color: emissive_color
    reflectivity: reflectivity
    transparency: transparency_1
    glossiness: glossiness
    texture_transform: texture_transform
    editable: editable
    type: type_4
class material_7(NamedObject[material_7_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def new(self, name: str, base_mat_name: str):
        """
        Create new material.
        
        Parameters
        ----------
            name : str
                Name of the material you want to create.
            base_mat_name : str
                Name of the base material from which you want to create new material.
        """
    child_object_type: material_7_child
    _child_aliases: dict
class graphics(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mesh: mesh_2
    contour: contour
    vector: vector_1
    pathline: pathline
    particle_track: particle_track
    lic: lic
    olic: olic
    volumes: volumes_4
    contours: contours
    particle_tracks: particle_tracks
    colors: colors
    lighting: lighting
    picture: picture
    views: views
    windows: windows
    raytracing_options: raytracing_options
    pulse: pulse
    periodic_instances: periodic_instances
    display: display_10
    material: material_7
class node_values_6(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class position_on_x_axis(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class position_on_y_axis(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_20(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    node_values: node_values_6
    position_on_x_axis: position_on_x_axis
    position_on_y_axis: position_on_y_axis
class y_axis_function(String, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_function_1(String, AllowedValuesMixin):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
class x_component_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class y_component_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class z_component_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class curve_length(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_direction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_component: x_component_1
    y_component: y_component_1
    z_component: z_component_1
    curve_length: curve_length
class x_axis_function_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    x_axis_direction: x_axis_direction
    x_axis_function: x_axis_function_2
class y_axis_direction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_component: x_component_1
    y_component: y_component_1
    z_component: z_component_1
    curve_length: curve_length
class y_axis_function_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    y_axis_direction: y_axis_direction
    y_axis_function: y_axis_function_1
class node_values_7(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class option_66(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    node_values: node_values_7
class x_component_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class y_component_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class z_component_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class direction_vector_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x_component: x_component_2
    y_component: y_component_2
    z_component: z_component_2
class default(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class reverse_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class curve_length_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    default: default
    reverse: reverse_2
class plot_direction_1(Group):
    _deprecated_version: str
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    option: option_2
    direction_vector: direction_vector_1
    curve_length: curve_length_1
class xy_plot_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    options: options_20
    y_axis_function: y_axis_function
    x_axis_function: x_axis_function_1
    x_axis_data: x_axis_data
    y_axis_data: y_axis_data
    surfaces_list: surfaces_list
    locations: locations_5
    option: option_66
    plot_direction: plot_direction_1
    axes: axes_1
    curves: curves_1
    def display(self):
        """
        Display the plot.
        """
    def write_to_file(self, file_name: str):
        """
        Write data to a file.
        
        Parameters
        ----------
            file_name : str
                Type in the desired file name to save.
        """
    def read_from_file(self, file_name: str):
        """
        Read data from file.
        
        Parameters
        ----------
            file_name_1 : str
                File name.
        """
    def free_file_data(self, file_data_list: list[str]):
        """
        Free file-data.
        
        Parameters
        ----------
            file_data_list : List
                File-data to delete.
        """
class xy_plot(NamedObject[xy_plot_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: xy_plot_child
    _child_aliases: dict
class cell_function_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_range_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_9(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class num_divisions(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class physics_4(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class histogram(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    cell_function: cell_function_1
    auto_range: auto_range_4
    minimum: minimum_9
    maximum: maximum_8
    num_divisions: num_divisions
    zones: zones_3
    physics: physics_4
    axes: axes
    curves: curves
    def print(self):
        """
        Print a histogram of a scalar quantity.
        """
    def plot(self):
        """
        Plot a histogram of a scalar quantity.
        """
    def write(self, file_name: str):
        """
        Write a histogram of a scalar quantity to a file.
        
        Parameters
        ----------
            file_name : str
                The name you want the file saved with.
        """
    def get_values(self):
        """
        Get a histogram of a scalar quantity.
        """
class split_direction(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_divisions(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class force_direction(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class moment_center(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class moment_axis(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_quantity(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class compute_from_stats(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cumulative_plot_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_24
    option: option_2
    zones: zones_2
    locations: locations_5
    split_direction: split_direction
    number_of_divisions: number_of_divisions
    force_direction: force_direction
    moment_center: moment_center
    moment_axis: moment_axis
    x_axis_quantity: x_axis_quantity
    compute_from_stats: compute_from_stats
    axes: axes
    curves: curves
    def plot(self):
        """
        Plot the cumulative plot.
        """
    def write_to_file(self, file_name: str):
        """
        Write the Cumulative Forces/Moments.
        
        Parameters
        ----------
            file_name : str
                The name you want the file saved with.
        """
class cumulative_plot(NamedObject[cumulative_plot_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def plot(self, object_name: str):
        """
        Display cumulative-plot object.
        
        Parameters
        ----------
            object_name : str
                Object name.
        """
    def write(self, object_name: str, file_name: str):
        """
        Write the Cumulative Forces/Moments.
        
        Parameters
        ----------
            object_name : str
                Cumulative-plot object.
            file_name : str
                The name you want the file saved with.
        """
    def print(self, object_name: str):
        """
        Print cumulative-plot object.
        
        Parameters
        ----------
            object_name : str
                Object name.
        """
    child_object_type: cumulative_plot_child
class field_13(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class node_values_8(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class zones_8(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_17(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class geometry_12(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class solution_plot(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    field: field_13
    node_values: node_values_8
    zones: zones_8
    physics: physics_4
    surfaces: surfaces_17
    geometry: geometry_12
    axes: axes
    curves: curves
    def plot(self):
        """
        Provides access to creating new and editing existing XY plots.
        """
    def write(self, file_name: str):
        """
        Write solution to a file.
        
        Parameters
        ----------
            file_name : str
                The name you want the file saved with.
        """
class plot_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axes: axes
    curves: curves
    def plot(self, node_values: bool, file_name: str, order_points: bool, y_axis_direction_vector: bool, direction_along_y_axis: list[float | str], y_axis_curve_length: bool, y_axis_function: str, reverse_direction_along_y_axis: bool, x_axis_direction_vector: bool, direction_along_x_axis: list[float | str], x_axis_curve_length: bool, x_axis_function: str, reverse_direction_along_x_axis: bool, surfaces: list[str], geometry: list[str]):
        """
        Provides access to plot solution on surfaces.
        
        Parameters
        ----------
            node_values : bool
                Specifies whether to include node values.
            file_name : str
                The name you want the file saved with.
            order_points : bool
                Specifies whether to order points.
            y_axis_direction_vector : bool
                Specifies whether to provide the Y Axis direction vector.
            direction_along_y_axis : List
                The direction along y axis.
            y_axis_curve_length : bool
                Specifies whether to provide the Y Axis curve length.
            y_axis_function : str
                The field.
            reverse_direction_along_y_axis : bool
                Specifies whether to provide the reverse direction.
            x_axis_direction_vector : bool
                Specifies whether to provide the X Axis direction vector.
            direction_along_x_axis : List
                The direction along x axis.
            x_axis_curve_length : bool
                Specifies whether to provide the X Axis curve length.
            x_axis_function : str
                The field.
            reverse_direction_along_x_axis : bool
                Specifies whether to provide the reverse direction.
            surfaces : List
                The surface(s).
            geometry : List
                UTL Geometry.
        """
class plot_from_file(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axes: axes
    curves: curves
    def plot(self, file_name: str):
        """
        Plot data from file.
        
        Parameters
        ----------
            file_name_1 : str
                File name.
        """
class plot_from_file_list(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    axes: axes
    curves: curves
    def file_list(self, filenames: list[str], plot_title: str, legend_title: str):
        """
        Plot data from multiple files.
        
        Parameters
        ----------
            filenames : List
                File name.
            plot_title : str
                Plot title.
            legend_title : str
                Legend title.
        """
class profile_5(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class y_axis_function_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class x_axis_function_4(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class profile_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    profile: profile_5
    y_axis_function: y_axis_function_3
    x_axis_function: x_axis_function_4
    axes: axes
    curves: curves
    def plot(self):
        """
        Plot profile data.
        """
class zone_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interpolated_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    zone: zone_3
    y_axis_function: y_axis_function_3
    x_axis_function: x_axis_function_4
    axes: axes
    curves: curves
    def plot(self):
        """
        Plot interpolated data.
        """
class plot_4(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    xy_plot: xy_plot
    histogram: histogram
    cumulative_plot: cumulative_plot
    solution_plot: solution_plot
    plot: plot_6
    plot_from_file: plot_from_file
    plot_from_file_list: plot_from_file_list
    profile_data: profile_data
    interpolated_data: interpolated_data
    def circum_avg_axial(self, field: str, surface: str, number_of_bands: int, method: str, file_name: str, order_point: bool):
        """
        Compute iso-axial band surfaces and plot data vs axial coordinate on them.
        
        Parameters
        ----------
            field : str
                The field variable.
            surface : str
                Surface.
            number_of_bands : int
                The number of divisions of the field variable to be plotted.
            method : str
                The method you want to use to compute.
            file_name : str
                Type in the desired file name to save.
            order_point : bool
                Specifies whether to reorder the points.
        """
    def circum_avg_radial(self, field: str, surface: str, number_of_bands: int, method: str, file_name: str, order_point: bool):
        """
        Compute iso-radial band surfaces and plot data vs radius on them.
        
        Parameters
        ----------
            field : str
                The field variable.
            surface : str
                Surface.
            number_of_bands : int
                The number of divisions of the field variable to be plotted.
            method : str
                The method you want to use to compute.
            file_name : str
                Type in the desired file name to save.
            order_point : bool
                Specifies whether to reorder the points.
        """
    def plot_direction(self, plot_direction: list[float | str]):
        """
        Set plot direction for xy plot.
        
        Parameters
        ----------
            plot_direction : List
                The plot direction.
        """
    def label_alignment(self, y_axis_label_alignment: str):
        """
        Set the alignment of xy plot label to horizontal or axis aligned.
        
        Parameters
        ----------
            y_axis_label_alignment : str
                Y-Axis label alignment.
        """
    def set_boundary_val_off(self, boundary_value: bool):
        """
        Set boundary value off when node values off for XY/Solution Plot.
               
         Note: This setting is valid for current Fluent session only.
        
        Parameters
        ----------
            boundary_value : bool
                Boundary value off when node values off for XY/Solution Plot?.
        """
    def fft(self, process_options: str, receiver: str, filename: str, x_var: str, y_var: str, plot: str, write: str, output_filename: str, acoustics_analysis: bool, ref_acoustic_pressure: float | str, fft_x_func: str, fft_y_func: str, modify_input_signal: bool, window: str, subtract_mean: bool, clip_to_range: bool, x_axis_range: list[float | str], signal_stat: list[float | str], title: str, x_label: str, y_label: str):
        """
        Plot FFT of file data.
        
        Parameters
        ----------
            process_options : str
                Option to process from Receiver or File Data.
            receiver : str
                Receiver for FFT.
            filename : str
                Filename for FFT.
            x_var : str
                The X Axis Field from File.
            y_var : str
                The Y Axis Field from File.
            plot : str
                Specifies whether to Plot FFT, modified Input Signal or None.
            write : str
                Specifies whether to write the FFT to a file, include it in the simulation report, or Write Input Signal.
            output_filename : str
                Type in the desired file name to save FFT or Input Signal.
            acoustics_analysis : bool
                Specifies whether to do acoustics analysis or not.
            ref_acoustic_pressure : real
                Change acoustic reference pressure.
            fft_x_func : str
                X Axis Function for FFT Plot.
            fft_y_func : str
                Y Axis Function for FFT Plot.
            modify_input_signal : bool
                Prune input time signal.
            window : str
                Window type.
            subtract_mean : bool
                Specifies whether to subtract Mean from data or not.
            clip_to_range : bool
                Specifies whether to process the entire dataset or limit it to specific range by specifying the minimum and maximum values for the x-axis.
            x_axis_range : List
                The minimum and maximum values for X axis.
            signal_stat : List
                The minimum and maximum values for X axis.
            title : str
                Title for Plot.
            x_label : str
                X Axis label.
            y_label : str
                Y Axis label.
        """
class title_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class temporary(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class transparency_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class colormap_position(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class colormap_left(Real):
    _version: str
    fluent_name: str
    _python_name: str
class colormap_bottom(Real):
    _version: str
    fluent_name: str
    _python_name: str
class colormap_width(Real):
    _version: str
    fluent_name: str
    _python_name: str
class colormap_height(Real):
    _version: str
    fluent_name: str
    _python_name: str
class graphics_objects_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_24
    transparency: transparency_2
    colormap_position: colormap_position
    colormap_left: colormap_left
    colormap_bottom: colormap_bottom
    colormap_width: colormap_width
    colormap_height: colormap_height
class graphics_objects(NamedObject[graphics_objects_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the object names.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def add(self, name: str):
        """
        Add object.
        
        Parameters
        ----------
            name : str
                Object name to add.
        """
    child_object_type: graphics_objects_child
class scene_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_27
    title: title_3
    temporary: temporary
    graphics_objects: graphics_objects
    display_state_name: display_state_name
    def display(self):
        """
        'display' command.
        """
class scene(NamedObject[scene_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Copy graphics object.
        
        Parameters
        ----------
            from_ : str
                Object name to copy.
            to : str
                Object name for copied object.
        """
    def display(self, object_name: str):
        """
        Display graphics object.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def add_to_graphics(self, object_name: str):
        """
        Add graphics object to existing graphics.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    def clear_history(self, object_name: str):
        """
        Clear object history.
        
        Parameters
        ----------
            object_name : str
                'object_name' child.
        """
    child_object_type: scene_child
    _child_aliases: dict
class name_33(String):
    _version: str
    fluent_name: str
    _python_name: str
class text_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_name_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_size_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_weight(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_slant(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class font_color(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class append_quantity(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_format_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class position_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class annotation_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_33
    text: text_3
    font_name: font_name_1
    font_size: font_size_2
    font_weight: font_weight
    font_slant: font_slant
    font_color: font_color
    append_quantity: append_quantity
    number_format: number_format_1
    position: position_2
class annotation(NamedObject[annotation_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def annotate(self, text: str, append_text: str, start: list[float | str], end: list[float | str]):
        """
        Create new annotation.
        
        Parameters
        ----------
            text : str
                Specifies the text that appears in the annotation.
            append_text : str
                Append the following values to the text: Date | Time | Version | Number of iterations | Number of timesteps | Flow time | <any defined expression>.
            start : List
                The origin point for your annotation's line.
            end : List
                The position for your annotation's placement.
        """
    def show_hide_annotations(self):
        """
        Toggle visibility of annotation texts on the active graphics window.
        """
    child_object_type: annotation_child
class start_frame(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class end_frame(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class increment(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class set_custom_frames(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    start_frame: start_frame
    end_frame: end_frame
    increment: increment
class fps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class format_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class quality_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class name_34(String):
    _version: str
    fluent_name: str
    _python_name: str
class use_original_resolution(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class scale_11(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class set_standard_resolution(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class width_5(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class height_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class bitrate_scale(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enable_h264(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bitrate(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class compression_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class keyframe(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class advance_quality(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    bitrate_scale: bitrate_scale
    enable_h264: enable_h264
    bitrate: bitrate
    compression_method: compression_method
    keyframe: keyframe
class video_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    fps: fps
    format: format_2
    quality: quality_2
    name: name_34
    use_original_resolution: use_original_resolution
    scale: scale_11
    set_standard_resolution: set_standard_resolution
    width: width_5
    height: height_3
    advance_quality: advance_quality
class current_animation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class playback(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    set_custom_frames: set_custom_frames
    video: video_1
    current_animation: current_animation
    def read_animation_file(self, animation_file_name: str):
        """
        Read new animation from file or already-defined animations.
        
        Parameters
        ----------
            animation_file_name : str
                'animation_file_name' child.
        """
    def write_animation(self, format_name: str):
        """
        Write animation sequence to the file.
        
        Parameters
        ----------
            format_name : str
                'format_name' child.
        """
    def stored_view(self, view: bool):
        """
        Play the 3D animation sequence using the view stored in the sequence.
        
        Parameters
        ----------
            view : bool
                Yes: "Stored View", no: "Different View".
        """
    def delete(self, delete_all: bool, name: str):
        """
        Delete animation sequence.
        
        Parameters
        ----------
            delete_all : bool
                Yes: "Delete all animations", no: "Delete single animation.".
            name : str
                Animation to delete.
        """
    def play(self, player: str, start_frame: int, end_frame: int, increment: int, playback_mode: str, speed: int):
        """
        Play the selected animation.
        
        Parameters
        ----------
            player : str
                The Player Operation.
            start_frame : int
                Start Frame Number.
            end_frame : int
                Start Frame Number.
            increment : int
                Skip frame while playing.
            playback_mode : str
                The playback mode.
            speed : int
                Animation play speed.
        """
class start_keyframe(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class end_keyframe(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class increment_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class set_custom_frames_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    start_keyframe: start_keyframe
    end_keyframe: end_keyframe
    increment: increment_2
class scene_animation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    set_custom_frames: set_custom_frames_1
    def read_animation(self, file_name: str):
        """
        'read_animation' command.
        """
    def write_animation(self, format_name: str, file_name: str):
        """
        Write keyframe Animation file.
        
        Parameters
        ----------
            format_name : str
                'format_name' child.
            file_name : str
                'file_name' child.
        """
    def add_keyframe(self, key: int):
        """
        Add keyframe.
        
        Parameters
        ----------
            key : int
                'key' child.
        """
    def delete_keyframe(self, key: int):
        """
        Delete a keyframe.
        
        Parameters
        ----------
            key : int
                'key' child.
        """
    def delete_all_keyframes(self):
        """
        Delete all keyframes.
        """
    def play(self, start_keyframe: int, end_keyframe: int, increment: int):
        """
        Play keyframe animation.
        
        Parameters
        ----------
            start_keyframe : int
                Start keyframe.
            end_keyframe : int
                End keyframe.
            increment : int
                Increment.
        """
class animations(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    playback: playback
    scene_animation: scene_animation
class simulation_reports(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_simulation_reports(self):
        """
        List all report names.
        """
    def add_histogram_to_report(self):
        """
        Add a histogram to the current simulation report.
        """
    def generate_simulation_report(self, report_name: str):
        """
        Generate a new simulation report or regenerate an existing simulation report with the provided name.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def view_simulation_report(self, report_name: str):
        """
        View a simulation report that has already been generated. In batch mode this will print the report's URL.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def view_simulation_report_in_browser(self, report_name: str):
        """
        View a simulation report that has already been generated in your default web browser.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def export_simulation_report_as_pdf(self, report_name: str, file_name: str):
        """
        Export the provided simulation report as a PDF file.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
            file_name : str
                'file_name' child.
        """
    def export_simulation_report_as_html(self, report_name: str, output_dir: str):
        """
        Export the provided simulation report as HTML.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
            output_dir : str
                'output_dir' child.
        """
    def export_simulation_report_as_pptx(self, report_name: str, file_name: str):
        """
        Export the provided simulation report as a PPT file.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
            file_name : str
                'file_name' child.
        """
    def write_simulation_report_names_to_file(self, file_name: str):
        """
        Write the list of currently generated report names to a txt file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def rename_simulation_report(self, report_name: str, new_report_name: str):
        """
        Rename a report which has already been generated.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
            new_report_name : str
                'new_report_name' child.
        """
    def duplicate_simulation_report(self, report_name: str):
        """
        Duplicate a report and all of its settings to a new report.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def reset_report_to_defaults(self, report_name: str):
        """
        Reset all report settings to default for the provided simulation report.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def delete_simulation_report(self, report_name: str):
        """
        Delete the provided simulation report.
        
        Parameters
        ----------
            report_name : str
                'report_name' child.
        """
    def write_simulation_report_template_file(self, file_name: str):
        """
        Write a JSON template file with this case's Simulation Report settings.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
    def read_simulation_report_template_file(self, file_name: str):
        """
        Read a JSON template file with existing Simulation Report settings.
        
        Parameters
        ----------
            file_name_1 : str
                'file_name' child.
        """
class sample(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class variable_to_sample(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class weighting_variable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class correlation_variable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class histogram_selections(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    sample: sample
    variable_to_sample: variable_to_sample
    weighting_variable: weighting_variable
    correlation_variable: correlation_variable
class number_of_bins(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class minimum_val(Real):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_val(Real):
    _version: str
    fluent_name: str
    _python_name: str
class histogram_parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_bins: number_of_bins
    minimum_val: minimum_val
    maximum_val: maximum_val
class auto_range_5(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class logarithmic(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class weighting_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class correlation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class variable_cubed(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class percentage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cumulative_curve(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class histogram_mode(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diameter_statistics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class histogram_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_range: auto_range_5
    logarithmic: logarithmic
    weighting: weighting_1
    correlation: correlation
    variable_cubed: variable_cubed
    percentage: percentage
    cumulative_curve: cumulative_curve
    histogram_mode: histogram_mode
    diameter_statistics: diameter_statistics
    _child_aliases: dict
class plot_write_histogram(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def plot_histogram(self, file_name: str):
        """
        Plot a distribution histogram based on a DPM sample file, using current settings.
        
        Parameters
        ----------
            file_name : str
                A name for a file to write the distribution histogram data to.
        """
    def write_histogram(self, file_name: str):
        """
        Write a data file from a distribution histogram based on a DPM sample file, using current settings.
        
        Parameters
        ----------
            file_name : str
                A name for a file to write the distribution histogram data to.
        """
    def plot_hist_with_args(self, sample: str, variable_to_sample: str, weighting_variable: str, correlation_variable: str, file_name: str):
        """
        Plot a distribution histogram based on a DPM sample file.
        
        Parameters
        ----------
            sample : str
                Pick a loaded sample to then pick a variable from.
            variable_to_sample : str
                Pick a variable to calculate a distribution histogram from.
            weighting_variable : str
                Pick a weighting variable for the distribution histogram to be computed.
            correlation_variable : str
                Pick a second variable to calculate a histogram of its correlation with the first one.
            file_name : str
                A name for a file to write the distribution histogram data to.
        """
    def write_hist_with_args(self, sample: str, variable_to_sample: str, weighting_variable: str, correlation_variable: str, file_name: str):
        """
        Write a data file from a distribution histogram based on a DPM sample file.
        
        Parameters
        ----------
            sample : str
                Pick a loaded sample to then pick a variable from.
            variable_to_sample : str
                Pick a variable to calculate a distribution histogram from.
            weighting_variable : str
                Pick a weighting variable for the distribution histogram to be computed.
            correlation_variable : str
                Pick a second variable to calculate a histogram of its correlation with the first one.
            file_name : str
                A name for a file to write the distribution histogram data to.
        """
class use_weighting(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class make_steady_from_unsteady_file(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class setup_reduction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    use_weighting: use_weighting
    make_steady_from_unsteady_file: make_steady_from_unsteady_file
    def weighting_variable(self, change_curr_sample: bool, sample: str):
        """
        Choose the weighting variable for the averaging in each bin in the data reduction.
        
        Parameters
        ----------
            change_curr_sample : bool
                'change_curr_sample' child.
            sample : str
                'sample' child.
        """
    def reset_min_and_max(self, sample_var: str, reset_range: bool):
        """
        Reset the min and max values of the range to be considered for a specific variable in the data reduction.
        
        Parameters
        ----------
            sample_var : str
                'sample_var' child.
            reset_range : bool
                'reset_range' child.
        """
    def set_minimum(self, sample_var: str, min_val: float | str):
        """
        Set the minimum value of the range to be considered for a specific variable in the data reduction.
        
        Parameters
        ----------
            sample_var : str
                'sample_var' child.
            min_val : real
                'min_val' child.
        """
    def set_maximum(self, sample_var: str, max_val: float | str):
        """
        'set_maximum' command.
        """
    def use_logarithmic(self, sample_var: str, enable_log: bool):
        """
        Switch on or off logarithmic scaling to be used for a specific variable in the data reduction.
        
        Parameters
        ----------
            sample_var : str
                'sample_var' child.
            enable_log : bool
                'enable_log' child.
        """
    def number_of_bins(self, sample_var: str, num_bins: int):
        """
        Set the number of bins to be used for a specific variable in the data reduction.
        
        Parameters
        ----------
            sample_var : str
                'sample_var' child.
            num_bins : int
                'num_bins' child.
        """
    def all_variables_number_of_bins(self, all_var_num_of_bins: int):
        """
        Set the number of bins to be used for ALL variables in the data reduction.
        
        Parameters
        ----------
            all_var_num_of_bins : int
                'all_var_num_of_bins' child.
        """
    def list_settings(self):
        """
        List all user inputs for the sample picked for data reduction.
        """
class reduction(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    setup_reduction: setup_reduction
    def pick_sample_to_reduce(self, change_curr_sample: bool, sample: str):
        """
        Pick a sample for which to first set-up and then perform the data reduction.
        
        Parameters
        ----------
            change_curr_sample : bool
                'change_curr_sample' child.
            sample : str
                'sample' child.
        """
    def reduce_picked_sample(self, check_reduction_wt: bool, file_name: str):
        """
        Reduce a sample after first picking it and setting up all data-reduction options and parameters.
        
        Parameters
        ----------
            check_reduction_wt : bool
                'check_reduction_wt' child.
            file_name : str
                'file_name' child.
        """
class histogram_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    histogram_selections: histogram_selections
    histogram_parameters: histogram_parameters
    histogram_options: histogram_options
    plot_write_histogram: plot_write_histogram
    reduction: reduction
    def read_sample_file(self, sample_file: str):
        """
        Read a sample file and add it to the sample list.
        
        Parameters
        ----------
            sample_file : str
                The name of a sample file to be loaded.
        """
    def compute_sample(self, sample: str, variable: str):
        """
        Compute minimum/maximum of a sample variable.
        
        Parameters
        ----------
            sample : str
                Pick a sample to calculate a variable's range from.
            variable : str
                From the sample, pick a variable to calculate its range.
        """
    def compute_range(self):
        """
        Compute minimum/maximum of a sample variable.
        """
    def list_samples(self):
        """
        Print a list of all samples currently loaded.
        """
    def delete_sample(self, sample: str):
        """
        'delete_sample' command.
        """
    def dpm_sample_contour_plots(self, sample_name: str, interval_size: float | str, writing_radial_profile_files_enabled: bool):
        """
        Prepare named expressions from data in a DPM sample file (collected at a cut plane surface) for contour plotting.
        
        Parameters
        ----------
            sample_name : str
                Pick a sample, for which a .dpm sample file of the same name is available, for creating DPM Sample Contour Plots.
            interval_size : real
                Define the spatial resolution of the DPM Sample Contour Plots. Higher resolution (i.e. a smaller interval size) may cause noisy plots and data points representing too few statistical events in the sample file.
            writing_radial_profile_files_enabled : bool
                If the plane is (parallel to) a cartesian coordinate plane, instead of producing the Expressions for DPM Sample Contour Plots, calculate radial profiles and write them into .csv data files.
        """
    _child_aliases: dict
class output_udf(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class sort_sample_files(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class accumulate_erosion_accretion_rates(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class sample_trajectories(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    output_udf: output_udf
    sort_sample_files: sort_sample_files
    accumulate_erosion_accretion_rates: accumulate_erosion_accretion_rates
    def compute(self, injections: list[str], boundaries: list[str], lines: list[str], planes: list[str], op_udf: str, append_sample: bool, accumulate_rates: bool, sort_sample: bool):
        """
        Compute particle trajectories to record sampling data at planes and boundary zones.
        
        Parameters
        ----------
            injections : List
                'injections' child.
            boundaries : List
                Pick injections for DPM particle sampling.
            lines : List
                Pick line surfaces for DPM particle sampling.
            planes : List
                Pick plane surfaces for DPM particle sampling.
            op_udf : str
                The DPM sampling output UDF.
            append_sample : bool
                Enable appending data to existing sample files.
            accumulate_rates : bool
                Enable accumulation of erosion and accretion rates over multiple tracking passes.
            sort_sample : bool
                Enable writing sorted sample files.
        """
    def start_file_write(self, injections: list[str], boundaries: list[str], lines: list[str], planes: list[str], op_udf: str, append_sample: bool, accumulate_rates: bool, sort_sample: bool):
        """
        Enable recording particle sampling data at planes and boundary zones when the simulation progresses in time.
        
        Parameters
        ----------
            injections : List
                'injections' child.
            boundaries : List
                Pick injections for DPM particle sampling.
            lines : List
                Pick line surfaces for DPM particle sampling.
            planes : List
                Pick plane surfaces for DPM particle sampling.
            op_udf : str
                The DPM sampling output UDF.
            append_sample : bool
                Enable appending data to existing sample files.
            accumulate_rates : bool
                Enable accumulation of erosion and accretion rates over multiple tracking passes.
            sort_sample : bool
                Enable writing sorted sample files.
        """
    def stop_file_write(self):
        """
        Stop recording particle sampling data at planes and boundary zones, finalise the output data files.
        """
    _child_aliases: dict
class zone_types_to_calc_exchange_data_on(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class exch_details_in_dpm_summ_rep_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class discrete_phase_6(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    histogram: histogram_1
    sample_trajectories: sample_trajectories
    zone_types_to_calc_exchange_data_on: zone_types_to_calc_exchange_data_on
    exch_details_in_dpm_summ_rep_enabled: exch_details_in_dpm_summ_rep_enabled
    def summary(self):
        """
        Print discrete phase summary report of particle fates.
        """
    def extended_summary(self, write_to_file: bool, file_name: str, include_in_domain_particles: bool, pick_injection: bool, injection: str):
        """
        Print extended discrete phase summary report of particle fates, with options.
        
        Parameters
        ----------
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            include_in_domain_particles : bool
                Specifies whether to include particle parcels that are currently in the domain in the report.
            pick_injection : bool
                'pick_injection' child.
            injection : str
                'injection' child.
        """
    def particle_summary(self, injection_names: list[str]):
        """
        Print summary report for all current particles.
        
        Parameters
        ----------
            injection_names : List
                The injection[s] whose in-domain particle parcels are to be included in the report.
        """
    def set_per_injection_zone_summaries(self, enable: bool, reset_dpm_summaries: bool):
        """
        Enable per-injection per-zone DPM summary reports.
        """
    _child_aliases: dict
class fluxes(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def mass_flow(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print mass flow rate at inlets and outlets.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def heat_transfer(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def heat_transfer_sensible(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print sensible heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def radiation_heat_transfer(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print radiation heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def film_mass_flow(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print film mass flow rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def film_heat_transfer(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print film heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def electric_current(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print electric current rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def pressure_work(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print pressure work rate at moving boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def viscous_work(self, domain: str, zones: list[str], locations: Any, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print viscous work rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def get_mass_flow(self, domain: str, zones: list[str], locations: Any):
        """
        Print mass flow rate at inlets and outlets.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_heat_transfer(self, domain: str, zones: list[str], locations: Any):
        """
        Print heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_heat_transfer_sensible(self, domain: str, zones: list[str], locations: Any):
        """
        Print sensible heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_radiation_heat_transfer(self, domain: str, zones: list[str], locations: Any):
        """
        Print radiation heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_film_mass_flow(self, domain: str, zones: list[str], locations: Any):
        """
        Print film mass flow rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_film_heat_transfer(self, domain: str, zones: list[str], locations: Any):
        """
        Print film heat transfer rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_electric_current(self, domain: str, zones: list[str], locations: Any):
        """
        Print electric current rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_pressure_work(self, domain: str, zones: list[str], locations: Any):
        """
        Print pressure work rate at moving boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
    def get_viscous_work(self, domain: str, zones: list[str], locations: Any):
        """
        Print viscous work rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
            zones : List
                Zone name.
            locations : Dict
                The object.
        """
class flow(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def species_mass_flow(self, domain: str):
        """
        Print species mass flow rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
        """
    def element_mass_flow(self, domain: str):
        """
        Print element mass flow rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
        """
    def uds_flow(self, domain: str):
        """
        Print flow rate at boundaries.
        
        Parameters
        ----------
            domain : str
                The domain.
        """
class modified_setting_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def modified_setting(self, setting_type: list[str]):
        """
        Specify which settings will be checked for non-default status for generating the Modified Settings Summary table.
        
        Parameters
        ----------
            setting_type : List
                'setting_type' child.
        """
    def write_user_setting(self, file_name: str):
        """
        Write the contents of the Modified Settings Summary table to a file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
        """
class report_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surface_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class volume_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class num_dens_func(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class dia_upper_limit(Real):
    _version: str
    fluent_name: str
    _python_name: str
class number_density(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    report_type: report_type_1
    surface_list: surface_list
    volume_list: volume_list
    num_dens_func: num_dens_func
    dia_upper_limit: dia_upper_limit
    def plot(self):
        """
        Plot number density report.
        """
    def print(self):
        """
        Print number density report.
        """
    def histogram(self):
        """
        Number density histogram.
        """
    def write_to_file(self, file_name: str):
        """
        Write number density report to file.
        
        Parameters
        ----------
            file_name : str
                File name to write number density report.
        """
class population_balance_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    number_density: number_density
    def moments(self, surface_list: list[str], volume_list: list[str], num_of_moments: int, write_to_file: bool, file_name: str):
        """
        Set moments for population balance.
        
        Parameters
        ----------
            surface_list : List
                Surface.
            volume_list : List
                Cell zone name list.
            num_of_moments : int
                'num_of_moments' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                The name you want the file saved with.
        """
class heat_exchanger(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def computed_heat_rejection(self, heat_exchanger: str, fluid_zone: str, boundary_zone: str, report_type: str, write_to_file: bool, file_name: str, append_file: bool):
        """
        Print total heat rejection.
        
        Parameters
        ----------
            heat_exchanger : str
                'heat_exchanger' child.
            fluid_zone : str
                'fluid_zone' child.
            boundary_zone : str
                Face zone name.
            report_type : str
                'report_type' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            append_file : bool
                'append_file' child.
        """
    def inlet_temperature(self, heat_exchanger: str, fluid_zone: str, boundary_zone: str, report_type: str, write_to_file: bool, file_name: str, append_file: bool):
        """
        Print inlet temperature.
        
        Parameters
        ----------
            heat_exchanger : str
                'heat_exchanger' child.
            fluid_zone : str
                'fluid_zone' child.
            boundary_zone : str
                Face zone name.
            report_type : str
                'report_type' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            append_file : bool
                'append_file' child.
        """
    def outlet_temperature(self, heat_exchanger: str, fluid_zone: str, boundary_zone: str, report_type: str, write_to_file: bool, file_name: str, append_file: bool):
        """
        Print outlet temperature.
        
        Parameters
        ----------
            heat_exchanger : str
                'heat_exchanger' child.
            fluid_zone : str
                'fluid_zone' child.
            boundary_zone : str
                Face zone name.
            report_type : str
                'report_type' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            append_file : bool
                'append_file' child.
        """
    def mass_flow_rate(self, heat_exchanger: str, fluid_zone: str, boundary_zone: str, report_type: str, write_to_file: bool, file_name: str, append_file: bool):
        """
        Print mass flow rate.
        
        Parameters
        ----------
            heat_exchanger : str
                'heat_exchanger' child.
            fluid_zone : str
                'fluid_zone' child.
            boundary_zone : str
                Face zone name.
            report_type : str
                'report_type' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            append_file : bool
                'append_file' child.
        """
    def specific_heat(self, heat_exchanger: str, fluid_zone: str, boundary_zone: str, report_type: str, write_to_file: bool, file_name: str, append_file: bool):
        """
        Print fluid's specific heat.
        
        Parameters
        ----------
            heat_exchanger : str
                'heat_exchanger' child.
            fluid_zone : str
                'fluid_zone' child.
            boundary_zone : str
                Face zone name.
            report_type : str
                'report_type' child.
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
            append_file : bool
                'append_file' child.
        """
class system_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def print_process_statistics(self):
        """
        Fluent process information.
        """
    def print_system_statistics(self):
        """
        System information.
        """
    def print_gpgpu_statistics(self):
        """
        GPGPU information.
        """
    def print_time_statistics(self):
        """
        Time usage information.
        """
class surface_integrals(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def area(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print total area of surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def area_weighted_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print area-weighted average of scalar on surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vector_based_flux(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print custom vector based flux.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vector_flux(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print custom vector flux.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vector_weighted_average(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print custom vector weighted average.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def facet_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print average of scalar at facet centroids of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def facet_min(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print minimum of scalar at facet centroids of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def facet_max(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print maximum of scalar at facet centroids of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print flow rate of scalar through surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def integral(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print integral of scalar over surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def mass_flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print mass flow rate through surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def mass_weighted_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print mass-average of scalar over surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def standard_deviation(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print standard deviation of scalar.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def sum(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print sum of scalar at facet centroids of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def uniformity_index_area_weighted(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print uniformity index of scalar over surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def uniformity_index_mass_weighted(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print uniformity index of scalar over surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vertex_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print average of scalar at vertices of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vertex_min(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print minimum of scalar at vertices of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def vertex_max(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print maximum of scalar at vertices of the surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def volume_flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print volume flow rate through surfaces.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def get_area(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_area_weighted_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vector_based_flux(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vector_flux(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vector_weighted_average(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_facet_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_facet_min(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_facet_max(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_integral(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_mass_flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_mass_weighted_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_standard_deviation(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_sum(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_uniformity_index_area_weighted(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_uniformity_index_mass_weighted(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vertex_avg(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vertex_min(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_vertex_max(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
    def get_volume_flow_rate(self, surface_names: list[str], locations: Any, cust_vec_func: str, report_of: str, current_domain: str):
        """
        Create a surface integral report.
        
        Parameters
        ----------
            surface_names : List
                The surfaces.
            locations : Dict
                The object.
            cust_vec_func : str
                The custom vectors.
            report_of : str
                Field.
            current_domain : str
                The domain.
        """
class volume_integrals(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    query_names: list[str]
    def mass_average(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print mass-average of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def mass_integral(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print mass-weighted integral of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def mass(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print total mass of specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def sum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print sum of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def twopisum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print sum of scalar over specified cell zones multiplied by 2\\*Pi.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def minimum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print minimum of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def maximum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print maximum of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def volume(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print total volume of specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def volume_average(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print volume-weighted average of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def volume_integral(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Print volume integral of scalar over specified cell zones.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def get_mass_average(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_mass_integral(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_mass(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_sum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_twopisum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_minimum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_maximum(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_volume(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def get_volume_average(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
    def compute_volume_integral(self, cell_zones: list[str], locations: Any, cell_function: str, current_domain: str):
        """
        Create a volume integral report.
        
        Parameters
        ----------
            cell_zones : List
                Volume id/name.
            locations : Dict
                The object.
            cell_function : str
                Field.
            current_domain : str
                The domain.
        """
class phasic_integrals_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class inlets(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class outlets(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class type_19(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class process(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class ratio(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class expression_name(String):
    _version: str
    fluent_name: str
    _python_name: str
class use_in_turbo_report(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class efficiency(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    inlets: inlets
    outlets: outlets
    type: type_19
    process: process
    ratio: ratio
    expression_name: expression_name
    use_in_turbo_report: use_in_turbo_report
    def compute(self):
        """
        Compute efficiency value.
        """
    def define(self):
        """
        Define named expression for efficiency.
        """
    def display(self):
        """
        Display surfaces selected as inlets and outlets.
        """
    def isentropic(self, inlets: list[str], outlets: list[str], process: str, ratio: str, add_expression: bool, expression_name: str, compute: bool):
        """
        Calculate isentropic efficiency.
        
        Parameters
        ----------
            inlets : List
                List of inlet surfaces to compute efficiency.
            outlets : List
                List of outlet surfaces to compute efficiency.
            process : str
                Process type.
            ratio : str
                Type of efficiency ratio.
            add_expression : bool
                Define the new named expression.
            expression_name : str
                Name for the new expression.
            compute : bool
                Enable computation of efficiency value.
        """
    def polytropic(self, inlets: list[str], outlets: list[str], process: str, ratio: str, add_expression: bool, expression_name: str, compute: bool):
        """
        Calculate polytropic efficiency.
        
        Parameters
        ----------
            inlets : List
                List of inlet surfaces to compute efficiency.
            outlets : List
                List of outlet surfaces to compute efficiency.
            process : str
                Process type.
            ratio : str
                Type of efficiency ratio.
            add_expression : bool
                Define the new named expression.
            expression_name : str
                Name for the new expression.
            compute : bool
                Enable computation of efficiency value.
        """
class report_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    query_names: list[str]
    simulation_reports: simulation_reports
    discrete_phase: discrete_phase_6
    fluxes: fluxes
    flow: flow
    modified_setting_options: modified_setting_options
    population_balance: population_balance_1
    heat_exchanger: heat_exchanger
    system: system_1
    surface_integrals: surface_integrals
    volume_integrals: volume_integrals
    phasic_integrals_enabled: phasic_integrals_enabled
    efficiency: efficiency
    def aero_optical_distortions(self):
        """
        Optics report object.
        """
    def forces(self, option: str, domain: str, locations: Any, wall_zones: list[str], direction_vector: list[float | str], momentum_center: list[float | str], momentum_axis: list[float | str], pressure_coordinate: str, coordinate_value: float | str, write_to_file: bool, file_name: str, append_data: bool):
        """
        Provides access to settings for force reports.
        
        Parameters
        ----------
            option : str
                The type of report (Forces, Moments, or Center of Pressure).
            domain : str
                The domain.
            locations : Dict
                The object.
            wall_zones : List
                Wall zone name list.
            direction_vector : List
                The XYZ components of the direction vector.
            momentum_center : List
                The XYZ coordinates of the moment center.
            momentum_axis : List
                The XYZ components of the moment axis.
            pressure_coordinate : str
                The line on which the center of pressure will be calculated.
            coordinate_value : real
                The coordinate value.
            write_to_file : bool
                Specifies whether to write to a file.
            file_name : str
                The name you want the file saved with.
            append_data : bool
                Specifies whether to append data to existing file.
        """
    def multiphase_summary(self, verbosity_option: str):
        """
        Multiphase Summary and Recommendations.
        
        Parameters
        ----------
            verbosity_option : str
                'verbosity_option' child.
        """
    def particle_summary(self, injection_names: list[str]):
        """
        Print summary report for all current particles.
        
        Parameters
        ----------
            injection_names : List
                The injection[s] whose in-domain particle parcels are to be included in the report.
        """
    def pathline_summary(self):
        """
        Print path-line-summary report.
        """
    def projected_surface_area(self, surfaces: list[str], min_feature_size: float | str, proj_plane_norm_comp: list[float | str]):
        """
        Print total area of the projection of a group of surfaces to a plane.
        
        Parameters
        ----------
            surfaces : List
                Surface.
            min_feature_size : real
                'min_feature_size' child.
            proj_plane_norm_comp : List
                'proj_plane_norm_comp' child.
        """
    def summary(self, write_to_file: bool, file_name: str):
        """
        Print report summary.
        
        Parameters
        ----------
            write_to_file : bool
                'write_to_file' child.
            file_name : str
                'file_name' child.
        """
    def vbm(self, output_quantity: str, rotor_name: str, scale_output: bool, write_to_file: bool, file_name: str, append: bool):
        """
        'vbm' command.
        """
    def get_forces(self, option: str, domain: str, locations: Any, wall_zones: list[str], direction_vector: list[float | str], momentum_center: list[float | str], momentum_axis: list[float | str], pressure_coordinate: str, coordinate_value: float | str):
        """
        Provides access to settings for force reports.
        
        Parameters
        ----------
            option : str
                The type of report (Forces, Moments, or Center of Pressure).
            domain : str
                The domain.
            locations : Dict
                The object.
            wall_zones : List
                Wall zone name list.
            direction_vector : List
                The XYZ components of the direction vector.
            momentum_center : List
                The XYZ coordinates of the moment center.
            momentum_axis : List
                The XYZ components of the moment axis.
            pressure_coordinate : str
                The line on which the center of pressure will be calculated.
            coordinate_value : real
                The coordinate value.
        """
class results(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    custom_field_functions: custom_field_functions_1
    custom_vectors: custom_vectors
    surfaces: surfaces_8
    graphics: graphics
    plot: plot_4
    scene: scene
    annotation: annotation
    animations: animations
    report: report_2
class type_20(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class walls(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class vector_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class center_3(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_9(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class normalized(Boolean, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fluid_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class inlets_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class outlets_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class observable_list(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constant_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class combination_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class coefficient_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class observable_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class power(Real):
    _version: str
    fluent_name: str
    _python_name: str
class entries_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coefficient: coefficient_3
    observable: observable_1
    power: power
class entries(ListObject[entries_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: entries_child
class operator(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class observable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class factor_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class factor_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class penalized_observable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class target_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class normalization_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class numerator(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class denominator(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class integral_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_variable_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class target_field(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_18(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class integration_domain(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class zones_10(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class box_bounds(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class cell_register(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class field_direction(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class definition_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    type: type_20
    walls: walls
    vector: vector_2
    center: center_3
    axis: axis_9
    normalized: normalized
    fluid_zones: fluid_zones
    inlets: inlets_2
    outlets: outlets_2
    fixed_value: fixed_value
    observable_list: observable_list
    constant: constant_3
    combination_type: combination_type
    entries: entries
    operator: operator
    observable: observable
    factor_1: factor_1
    factor_2: factor_2
    penalized_observable: penalized_observable
    target_value: target_value
    normalization: normalization_1
    numerator: numerator
    denominator: denominator
    integral_type: integral_type
    field_variable: field_variable_1
    target_field: target_field
    surfaces: surfaces_18
    integration_domain: integration_domain
    zones: zones_10
    box_bounds: box_bounds
    cell_register: cell_register
    field_direction: field_direction
class definition_1(NamedObject[definition_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: definition_1_child
class adjoint_observable(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class selection(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    adjoint_observable: adjoint_observable
    def evaluate(self):
        """
        Evaluate selected observable.
        """
    def write_to_file(self, file_name: str, append_data: bool):
        """
        Write observable to file.
        
        Parameters
        ----------
            file_name : str
                File name.
            append_data : bool
                Append data to file.
        """
class observables(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    named_expressions: named_expressions
    definition: definition_1
    selection: selection
class flow_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class adjoint_solver(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class adjoint_activation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class adjoint_activation_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class adjoint_equations_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    flow_solver: flow_solver
    adjoint_solver: adjoint_solver
    adjoint_activation: adjoint_activation_1
class adjoint_equations(NamedObject[adjoint_equations_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: adjoint_equations_child
class methods_4_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    flow_solver: flow_solver
    adjoint_solver: adjoint_solver
    adjoint_activation: adjoint_activation
    adjoint_equations: adjoint_equations
class methods_4(NamedObject[methods_4_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def default(self):
        """
        Reset methods to default.
        """
    def balanced(self):
        """
        Set methods to balance accuracy, stability, and speed.
        """
    def best_match(self):
        """
        Set methods to best match flow solver settings for accuracy.
        """
    child_object_type: methods_4_child
class solution_based_initialization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_adjust(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class show_advancement_controls(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class apply_precondition(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class advancement_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class advancement(NamedObject[advancement_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: advancement_child
class under_relaxation_3_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class under_relaxation_3(NamedObject[under_relaxation_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: under_relaxation_3_child
class tolerance_6(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class show_iterations(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class amg_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    tolerance: tolerance_6
    max_iterations: max_iterations
    show_iterations: show_iterations
class strategy(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_16(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class damping_factor_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class damping_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class damping_order(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class suppression(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dissipation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    damping_factor: damping_factor_1
    damping_relaxation: damping_relaxation
    damping_order: damping_order
    suppression: suppression
    def default(self):
        """
        Set residual minimization scheme controls to default.
        """
class number_of_modes(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class manual_expert_controls(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_recycled_modes(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class amg_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class expert_controls(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    number_of_recycled_modes: number_of_recycled_modes
    amg_iterations: amg_iterations
class residual_minimization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    number_of_modes: number_of_modes
    manual_expert_controls: manual_expert_controls
    expert_controls: expert_controls
    def default(self):
        """
        Set residual minimization scheme controls to default.
        """
class current_scheme(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_16
    dissipation: dissipation
    residual_minimization: residual_minimization
class method_17(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_detection(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class iterations_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class first_scheme(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_17
    auto_detection: auto_detection
    iterations: iterations_2
    dissipation: dissipation
class method_18(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class second_scheme(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_18
    iterations: iterations_2
    residual_minimization: residual_minimization
class stabilization_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    strategy: strategy
    current_scheme: current_scheme
    first_scheme: first_scheme
    second_scheme: second_scheme
    def default(self):
        """
        Set stabilization strategy controls to default for most cases.
        """
    def complex_case(self):
        """
        Set stabilization strategy controls to default values for complex case.
        """
class controls_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    solution_based_initialization: solution_based_initialization
    auto_adjust: auto_adjust
    show_advancement_controls: show_advancement_controls
    apply_precondition: apply_precondition
    advancement: advancement
    under_relaxation: under_relaxation_3
    amg: amg_1
    stabilization: stabilization_2
    def default(self):
        """
        Set controls to default.
        """
class adjoint_equations_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    check_convergence: check_convergence
    absolute_criteria: absolute_criteria
class adjoint_equations_1(NamedObject[adjoint_equations_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: adjoint_equations_1_child
class print_8(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class plot_17(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class n_display_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class options_21(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    print: print_8
    plot: plot_17
    n_display: n_display_1
class monitors(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    adjoint_equations: adjoint_equations_1
    options: options_21
    def plot(self):
        """
        Plot residuals.
        """
class iteration_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class initialize_stabilization(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def strategy(self):
        """
        Initialize the blended stabilization strategies: reset to the 1st scheme.
        """
    def scheme(self):
        """
        Initialize the stabilization scheme.
        """
class file_name_25(String):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_7(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_files_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class autosave(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file_name: file_name_25
    frequency: frequency_7
    max_files: max_files_1
class calculation_activities(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    autosave: autosave
class calculation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    iteration_count: iteration_count
    initialize_stabilization: initialize_stabilization
    calculation_activities: calculation_activities
    def initialize(self):
        """
        Initialize adjoint solution and stabilization scheme.
        """
    def calculate(self):
        """
        Start evaluating the adjoint solution.
        """
    def interrupt(self):
        """
        Interrupt the adjoint calculation.
        """
class sensitivity_orientation(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_19(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smoothness(Real):
    _version: str
    fluent_name: str
    _python_name: str
class surface_shape_sensitivity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_19
    smoothness: smoothness
class postprocess_options(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    sensitivity_orientation: sensitivity_orientation
    surface_shape_sensitivity: surface_shape_sensitivity
    def reset_default(self):
        """
        Set postprocess options to default values.
        """
class boundary_choice(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class reporting(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    boundary_choice: boundary_choice
    def report(self):
        """
        Boundary condition sensitivity report in console.
        """
    def write_to_file(self, file_name: str, append_data: bool):
        """
        Write report to file.
        
        Parameters
        ----------
            file_name : str
                File name.
            append_data : bool
                Append data to file.
        """
class method_20(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class constraint_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class auto_select_smoothness(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class constraint_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class preconditioning(Real):
    _version: str
    fluent_name: str
    _python_name: str
class prescribed_motions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_iterations: max_iterations_1
    constraint_relaxation: constraint_relaxation
    preconditioning: preconditioning
class mask_shape_sensitivity(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solving_primary_morpher(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations_standard(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations_enhanced(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class constraint_relaxation_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameter_relaxation(Real):
    _version: str
    fluent_name: str
    _python_name: str
class preconditioning_standard(Real):
    _version: str
    fluent_name: str
    _python_name: str
class preconditioning_enhanced(Real):
    _version: str
    fluent_name: str
    _python_name: str
class freeform_motions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mask_shape_sensitivity: mask_shape_sensitivity
    solving_primary_morpher: solving_primary_morpher
    max_iterations_standard: max_iterations_standard
    max_iterations_enhanced: max_iterations_enhanced
    constraint_relaxation: constraint_relaxation_1
    parameter_relaxation: parameter_relaxation
    preconditioning_standard: preconditioning_standard
    preconditioning_enhanced: preconditioning_enhanced
class second_order_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class increase_local_smoothness(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class increase_global_smoothness(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_7(Real):
    _version: str
    fluent_name: str
    _python_name: str
class constraint_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    second_order: second_order_1
    increase_local_smoothness: increase_local_smoothness
    increase_global_smoothness: increase_global_smoothness
    tolerance: tolerance_7
class constraints(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerances(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    constraints: constraints
    parameters: parameters_8
class polynomials(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_select_smoothness: auto_select_smoothness
    prescribed_motions: prescribed_motions
    freeform_motions: freeform_motions
    constraint_settings: constraint_settings
    tolerances: tolerances
class kernel_type_1(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_8(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_subiteration(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_modes_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class linear_solver(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    tolerance: tolerance_8
    max_subiteration: max_subiteration
    number_of_modes: number_of_modes_1
class freeform_motions_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    mask_shape_sensitivity: mask_shape_sensitivity
    solving_primary_morpher: solving_primary_morpher
    kernel_type: kernel_type_1
    max_iterations: max_iterations_2
    linear_solver: linear_solver
class rbf(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    freeform_motions: freeform_motions_1
    constraint_settings: constraint_settings
class max_iterations_3(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class freeform_motions_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    max_iterations: max_iterations_3
class direct_interpolation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    freeform_motions: freeform_motions_2
class numerics_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    polynomials: polynomials
    rbf: rbf
    direct_interpolation: direct_interpolation
    constraint_settings: constraint_settings
    def default(self):
        """
        Reset morphing numerics to default.
        """
class morpher(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_20
    constraint_method: constraint_method
    numerics: numerics_1
class modifiable_zones(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class region_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class show_bounding_region(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_display(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_8(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class y_8(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class z_8(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class extent(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_8
    y: y_8
    z: z_8
class points(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class motion_enabled(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class invariant(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class invariant_expert_controls_child(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class invariant_expert_controls(ListObject[invariant_expert_controls_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: invariant_expert_controls_child
class symmetric(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class enabled_76(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class plane_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class custom_plane(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_76
    plane: plane_1
class periodicity_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class x_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class y_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class z_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class theta_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class radial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class axial(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    points: points
    motion_enabled: motion_enabled
    invariant: invariant
    invariant_expert_controls: invariant_expert_controls
    symmetric: symmetric
    custom_plane: custom_plane
    periodicity: periodicity_1
class enabled_77(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class definition_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class continuity_order(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class in_plane_motion_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class x_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class y_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class y_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class z_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class z_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class theta_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class theta_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class radial_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class radial_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class axial_motion(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class axial_continuity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class specify_boundary_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    in_plane_motion_only: in_plane_motion_only
    x_motion: x_motion
    x_continuity: x_continuity
    y_motion: y_motion
    y_continuity: y_continuity
    z_motion: z_motion
    z_continuity: z_continuity
    theta_motion: theta_motion
    theta_continuity: theta_continuity
    radial_motion: radial_motion
    radial_continuity: radial_continuity
    axial_motion: axial_motion
    axial_continuity: axial_continuity
class specify_boundary(NamedObject[specify_boundary_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: specify_boundary_child
class boundary_continuity(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_77
    definition: definition_2
    continuity_order: continuity_order
    specify_boundary: specify_boundary
class conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_9
    y: y_9
    z: z_9
    theta: theta_2
    radial: radial
    axial: axial
    boundary_continuity: boundary_continuity
class cartesian(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    extent: extent
    conditions: conditions
class origin_8(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_10(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radial_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class coordinate_system_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    origin: origin_8
    axis: axis_10
    radial: radial_1
class theta_3(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class radial_2(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axial_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class extent_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    theta: theta_3
    radial: radial_2
    axial: axial_1
class cylindrical(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coordinate_system: coordinate_system_1
    extent: extent_1
    conditions: conditions
class region(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    modifiable_zones: modifiable_zones
    region_type: region_type
    show_bounding_region: show_bounding_region
    auto_display: auto_display
    cartesian: cartesian
    cylindrical: cylindrical
    def get_bounds(self, bounded_zones: list[str], comfortable_region: bool, automatic_coordinate: bool):
        """
        Get bounds based on selects zones.
        
        Parameters
        ----------
            bounded_zones : List
                Zones used to determine region bounds.
            comfortable_region : bool
                Use comfortable region than the selected zones.
            automatic_coordinate : bool
                Update the cylindrical coordinate system automatically.
        """
    def larger_region(self):
        """
        Enlarge current region extent.
        """
    def smaller_region(self):
        """
        Shrink current region extent.
        """
class surfaces_19(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class imported_surfaces(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fit_imported_surfaces(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class bounding_offset(Real):
    _version: str
    fluent_name: str
    _python_name: str
class deformation_profile(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class prescribed(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class value_21(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_9_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class parameters_9(NamedObject[parameters_9_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: parameters_9_child
class x_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class y_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class z_10(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class displacement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    x: x_10
    y: y_10
    z: z_10
class scaling_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_factor_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class angle_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class factor_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class axis_1_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class axis_2_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class axis_3_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    prescribed: prescribed
    value: value_21
class axis_factor(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    axis_1: axis_1_2
    axis_2: axis_2_2
    axis_3: axis_3_1
class origin_9(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class normal_5(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_11(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_1_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class axis_2_1(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class distance_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class skip_6(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class orientation_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    skip: skip_6
    def reverse_surfaces(self, surfaces: list[str]):
        """
        Reverse selected surfaces.
        
        Parameters
        ----------
            surfaces : List
                Surfaces orientations to be reverse.
        """
class method_21(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class conditions_1(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class compound(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_21
    conditions: conditions_1
class definition_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    name: name_4
    type: type_20
    surfaces: surfaces_19
    imported_surfaces: imported_surfaces
    fit_imported_surfaces: fit_imported_surfaces
    bounding_offset: bounding_offset
    deformation_profile: deformation_profile
    parameters: parameters_9
    displacement: displacement
    scaling_type: scaling_type
    scale_factor: scale_factor_2
    angle: angle_5
    factor: factor_3
    axis_factor: axis_factor
    origin: origin_9
    normal: normal_5
    axis: axis_11
    axis_1: axis_1_1
    axis_2: axis_2_1
    distance: distance_2
    orientation: orientation_2
    compound: compound
    def get_center(self):
        """
        Set the origin fields to the coordinates of the center of the selected surfaces.
        """
    def import_surfaces(self, file_name: str, unit: str):
        """
        Read surface meshes.
        
        Parameters
        ----------
            file_name : str
                Path to surface mesh file.
            unit : str
                Unit in which the mesh was created.
        """
    def delete_surfaces(self, surfaces: list[str]):
        """
        Delete imported surfaces.
        
        Parameters
        ----------
            surfaces : List
                Surfaces to be deleted.
        """
    def display_imported_surfaces(self, original_surfaces: list[str]):
        """
        Display imported surfaces.
        
        Parameters
        ----------
            original_surfaces : List
                Surface.
        """
    def display(self):
        """
        Display design condition.
        """
class definition_3(NamedObject[definition_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: definition_3_child
class applied_conditions(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_22(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class layers(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class distance_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class applied_moving_conditions(StringList):
    _version: str
    fluent_name: str
    _python_name: str
class fix_surfaces(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    method: method_22
    layers: layers
    distance: distance_3
    applied_moving_conditions: applied_moving_conditions
    def update(self):
        """
        Update the disconnected surfaces and fix them.
        """
    def display_morphable_surfaces(self):
        """
        Display the disconnected surfaces.
        """
    def display_fixed_surfaces(self):
        """
        Display the disconnected surfaces.
        """
class selection_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    applied_conditions: applied_conditions
    fix_surfaces: fix_surfaces
    def display(self):
        """
        Display the applied design conditions.
        """
class list_surfaces_inside_region_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_display_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class schematic(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class constrained_nodes(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class surfaces_inside_region_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class display_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    auto_display: auto_display_1
    schematic: schematic
    constrained_nodes: constrained_nodes
    surfaces_inside_region_only: surfaces_inside_region_only
class options_22(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    list_surfaces_inside_region_only: list_surfaces_inside_region_only
    display_settings: display_settings
class design_conditions(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    definition: definition_3
    selection: selection_1
    options: options_22
class include_current_data(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class observable_2(String):
    _version: str
    fluent_name: str
    _python_name: str
class value_22(Real):
    _version: str
    fluent_name: str
    _python_name: str
class step_direction(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class target_change(Real):
    _version: str
    fluent_name: str
    _python_name: str
class change_as_percentage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class weight_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class objectives_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    observable: observable_2
    value: value_22
    step_direction: step_direction
    target_change: target_change
    change_as_percentage: change_as_percentage
    weight: weight_4
class objectives_1(NamedObject[objectives_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: objectives_1_child
class freeform_scaling_scheme(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class manage_data(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def export_sensitivity(self, file_name: str):
        """
        Write current data sensitivities to file.
        
        Parameters
        ----------
            file_name : str
                Sensitivities file output name.
        """
    def import_sensitivity(self, file_name: str):
        """
        Read sensitivities from data file.
        
        Parameters
        ----------
            file_name : str
                Sensitivities file input name.
        """
    def reload(self, file_list: list[str]):
        """
        Reload sensitivities from data file.
        
        Parameters
        ----------
            file_list : List
                Sensitivities list to reload.
        """
    def remove(self, file_list: list[str]):
        """
        Reload sensitivities from data file.
        
        Parameters
        ----------
            file_list : List
                Sensitivities list to remove.
        """
    def reload_all(self):
        """
        Reset morphing numerics to default.
        """
    def remove_all(self):
        """
        Reset morphing numerics to default.
        """
class objectives(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    include_current_data: include_current_data
    objectives: objectives_1
    freeform_scaling_scheme: freeform_scaling_scheme
    manage_data: manage_data
class value_23(Real):
    _version: str
    fluent_name: str
    _python_name: str
class affected_conditions(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_10_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    value: value_23
    affected_conditions: affected_conditions
class parameters_10(NamedObject[parameters_10_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: parameters_10_child
class file_name_30(String):
    _version: str
    fluent_name: str
    _python_name: str
class weight_5(Real):
    _version: str
    fluent_name: str
    _python_name: str
class expected_change(Real):
    _version: str
    fluent_name: str
    _python_name: str
class results_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file_name: file_name_30
    observable: observable_2
    value: value_22
    weight: weight_5
    expected_change: expected_change
class results_1(NamedObject[results_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: results_1_child
class export_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def expected_changes(self, file_name: str, append_data: bool):
        """
        Write expected changes to file.
        
        Parameters
        ----------
            file_name : str
                Expected changes report name.
            append_data : bool
                Append data to file.
        """
    def optimal_displacements(self, file_name: str):
        """
        Export the computed optimal displacements.
        
        Parameters
        ----------
            file_name : str
                Displacements file name.
        """
    def stl_surfaces(self, surfaces: list[str], file_name: str):
        """
        Export specified surfaces from 3D cases as an .stl file.
        
        Parameters
        ----------
            surfaces : List
                Surfaces to be exported as .stl file.
            file_name : str
                Export specified surfaces from 3D cases as an .stl file.
        """
class surfaces_23(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class scale_12(Real):
    _version: str
    fluent_name: str
    _python_name: str
class transparency_3(Real):
    _version: str
    fluent_name: str
    _python_name: str
class displayed_meshes(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class preview_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    surfaces: surfaces_23
    scale: scale_12
    transparency: transparency_3
    displayed_meshes: displayed_meshes
    def outline(self):
        """
        Select boundary surfaces.
        """
    def interior(self):
        """
        Select interior surfaces.
        """
    def display(self):
        """
        Select interior surfaces.
        """
    def export_stl(self, file_name: str):
        """
        Export specified surfaces from as an .stl file.
        
        Parameters
        ----------
            file_name : str
                Export specified surfaces from 3D cases as an .stl file.
        """
class history(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    surfaces: surfaces_23
    def reset_reference_mesh(self):
        """
        Save the current mesh as the reference mesh.
        """
    def overlay_reference(self):
        """
        Overlay reference mesh.
        """
    def export_displacements(self, file_name: str):
        """
        Export the total computed optimal displacements.
        
        Parameters
        ----------
            file_name : str
                Displacements file name.
        """
class design_change(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    parameters: parameters_10
    results: results_1
    export: export_2
    preview: preview_1
    history: history
    def check(self):
        """
        Design tool check.
        """
    def calculate_design_change(self):
        """
        Calculates design change.
        """
    def print_expected_changes(self):
        """
        Print expected changes.
        """
    def modify(self):
        """
        Apply the computed optimal displacement to the mesh.
        """
    def revert(self):
        """
        Revert to the unmodified mesh.
        """
    def remesh(self):
        """
        Remesh.
        """
class design_tool(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    morpher: morpher
    region: region
    design_conditions: design_conditions
    objectives: objectives
    design_change: design_change
class optimizer_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class selection_2(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class method_23(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_8(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class sampling_after(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class evaluation(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_23
    frequency: frequency_8
    sampling_after: sampling_after
class observables_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    selection: selection_2
    evaluation: evaluation
    def default(self):
        """
        If no observables are selected, include a default
                      observable. Does nothing if there is already a selection.
        """
class count_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_11_child(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_11(ListObject[parameters_11_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: parameters_11_child
class id_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class active_4(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_12_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class parameters_12(NamedObject[parameters_12_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: parameters_12_child
class conditions_2_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    id: id_1
    active: active_4
    parameters: parameters_12
class conditions_2(ListObject[conditions_2_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: conditions_2_child
class operating_conditions_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    count: count_1
    parameters_count: parameters_count
    parameters: parameters_11
    conditions: conditions_2
class id_2(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class condition_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class observable_3(String):
    _version: str
    fluent_name: str
    _python_name: str
class goal(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class value_24(Real):
    _version: str
    fluent_name: str
    _python_name: str
class value_as_percentage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class lower_bound(Real):
    _version: str
    fluent_name: str
    _python_name: str
class upper_bound(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_9(Real):
    _version: str
    fluent_name: str
    _python_name: str
class tolerance_as_percentage(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class objectives_3_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    id: id_2
    condition: condition_1
    observable: observable_3
    goal: goal
    value: value_24
    value_as_percentage: value_as_percentage
    lower_bound: lower_bound
    upper_bound: upper_bound
    tolerance: tolerance_9
    tolerance_as_percentage: tolerance_as_percentage
    _child_aliases: dict
class objectives_3(ListObject[objectives_3_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: objectives_3_child
class objectives_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    observables: observables_1
    operating_conditions: operating_conditions_1
    objectives: objectives_3
class method_24(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class current_design_iteration(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class design_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class convergence_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class flow_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class adjoint_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class optimizer_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_24
    current_design_iteration: current_design_iteration
    design_iterations: design_iterations
    convergence_criteria: convergence_criteria
    flow_iterations: flow_iterations
    adjoint_iterations: adjoint_iterations
class design_region(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class selection_3(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class enable_turbulence_source_term(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class options_23(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_turbulence_source_term: enable_turbulence_source_term
class limits_1_child(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class limits_1(NamedObject[limits_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: limits_1_child
class design_variables(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    selection: selection_3
    options: options_23
    limits: limits_1
    def default_limits(self):
        """
        Reset design variables limits to default.
        """
    def initialize(self):
        """
        Initialize the design variables with the current values.
        """
class type_21(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_sensitivities(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class activation_function(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class neural_network_topology_child(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class neural_network_topology(ListObject[neural_network_topology_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: neural_network_topology_child
class input_features(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class settings_33(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    smooth_sensitivities: smooth_sensitivities
    activation_function: activation_function
    neural_network_topology: neural_network_topology
    input_features: input_features
class max_epochs(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class mini_batch_size(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class learning_rate(Real):
    _version: str
    fluent_name: str
    _python_name: str
class initialize_neural_network(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class include_current_data_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class training_data_files(StringList, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class manage_data_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    include_current_data: include_current_data_1
    training_data_files: training_data_files
    def export_data(self, file_name: str):
        """
        Export training data to file.
        
        Parameters
        ----------
            file_name : str
                Training data file name.
        """
    def import_data(self, file_name: str):
        """
        Export training data to file.
        
        Parameters
        ----------
            file_name : str
                Training data file name.
        """
    def remove(self, files: list[str]):
        """
        Remove a selection of imported training data files.
        
        Parameters
        ----------
            files : List
                List of training data files to remove.
        """
class offline_training(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    max_epochs: max_epochs
    mini_batch_size: mini_batch_size
    learning_rate: learning_rate
    initialize_neural_network: initialize_neural_network
    manage_data: manage_data_1
    def train(self):
        """
        Train the design variables using neural network.
        """
    def apply_trained_model(self, update_design_variables: bool):
        """
        Adopt the trained neural network for the turbulence modeling.
        
        Parameters
        ----------
            update_design_variables : bool
                Update design variables using the neural network model after applying the trained model.
        """
    def default(self):
        """
        Use the default training parameters.
        """
class management(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def clear_model(self):
        """
        Initialize the model coefficients.
        """
    def export_model(self, file_name: str):
        """
        Write the model setting and coefficient to a file.
        
        Parameters
        ----------
            file_name : str
                Model data file name.
        """
    def import_model(self, file_name: str):
        """
        Read the model setting and coefficients from a file.
        
        Parameters
        ----------
            file_name : str
                Model data file name.
        """
class model_9(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    type: type_21
    settings: settings_33
    offline_training: offline_training
    management: management
    def default(self):
        """
        Use the default model and training parameters settings.
        """
    def unhook(self):
        """
        Unhook the model related to turbulence model optimizer.
        """
class turbulence_model_design_tool(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    design_region: design_region
    design_variables: design_variables
    model: model_9
class min_cell_volume(Real):
    _version: str
    fluent_name: str
    _python_name: str
class min_orthogonal(Real):
    _version: str
    fluent_name: str
    _python_name: str
class criteria(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    min_cell_volume: min_cell_volume
    min_orthogonal: min_orthogonal
    def print_current_status(self):
        """
        Print current mesh quality metrics.
        """
class smoothing_3(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class remeshing_2(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class post_morph(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    smoothing: smoothing_3
    remeshing: remeshing_2
class mesh_quality(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    criteria: criteria
    post_morph: post_morph
class plot_during_optimization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class observables_values(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class expected_observables_values(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class normalize_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class plot_all_optimization_ids(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class optimization_id_to_plot(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class monitor_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    plot_during_optimization: plot_during_optimization
    observables_values: observables_values
    expected_observables_values: expected_observables_values
    normalize: normalize_1
    plot_all_optimization_ids: plot_all_optimization_ids
    optimization_id_to_plot: optimization_id_to_plot
    def plot(self):
        """
        Initialize gradient-based optimizer.
        """
class frequency_9(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_10(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class save_files(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    frequency: frequency_9
    maximum: maximum_10
class save_optimal(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_10(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class export_stl_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    frequency: frequency_10
    surfaces: surfaces_22
class autosave_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file_name: file_name_26
    save_files: save_files
    save_optimal: save_optimal
    export_stl: export_stl_1
class execute_commands_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    enable: enable_27
    execution_type: execution_type
    execution_command: execution_command
    when_to_execute: when_to_execute
    frequency_cmd: frequency_cmd
    python_cmd: python_cmd
class execute_commands_1(NamedObject[execute_commands_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def export(self, command_name: list[str], tsv_file_name: str):
        """
        Export Commands.
        """
    def import_(self, tsv_file_name: str):
        """
        Import commands from .tsv file.
        """
    child_object_type: execute_commands_1_child
class calculation_activities_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    monitor: monitor_3
    autosave: autosave_1
    execute_commands: execute_commands_1
class optimizer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    optimizer_type: optimizer_type
    objectives: objectives_2
    optimizer_settings: optimizer_settings
    turbulence_model_design_tool: turbulence_model_design_tool
    mesh_quality: mesh_quality
    calculation_activities: calculation_activities_1
    def initialize(self, turbulence_design_variables: bool):
        """
        Initialize gradient-based optimizer.
        
        Parameters
        ----------
            turbulence_design_variables : bool
                Initialize the turbulence design variables in the design region?.
        """
    def reset(self):
        """
        Reset gradient-based optimizer.
        """
    def optimize(self, current_warnings: list[str], disable_settings_validation: bool):
        """
        Disable warnings detecting possibly wrong settings before running the optimizer.
        
        Parameters
        ----------
            current_warnings : List
                Warnings based on current settings.
            disable_settings_validation : bool
                Ignore warnings and proceed with optimization.
        """
    def interrupt(self, interrupt_at: str):
        """
        Interrupt optimization process.
        
        Parameters
        ----------
            interrupt_at : str
                When should the solution be interrupted.
        """
    def summarize(self):
        """
        Summarize results from gradient-based optimizer.
        """
    def default(self):
        """
        Summarize results from gradient-based optimizer.
        """
class print_residuals_by_zone(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class print_residuals_by_distribution(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class retain_cell_residuals(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class diagnosis(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    print_residuals_by_zone: print_residuals_by_zone
    print_residuals_by_distribution: print_residuals_by_distribution
    retain_cell_residuals: retain_cell_residuals
class match_fluent_flux_type(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class expert_11(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    diagnosis: diagnosis
    match_fluent_flux_type: match_fluent_flux_type
class interpolate_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def export_data(self, field: str, file_name: str):
        """
        Export data for interpolation.
        
        Parameters
        ----------
            field : str
                Field to interpolate.
            file_name : str
                Interpolated data file name.
        """
    def import_data(self, memory_id: int, file_name: str, ok_to_discard_data: bool):
        """
        Import data for interpolation.
        
        Parameters
        ----------
            memory_id : int
                User-defined memory id to stored interpolated data.
            file_name : str
                Interpolated data file name.
            ok_to_discard_data : bool
                Current data has not been saved, including solution data and any report files, animation files, etc.
        Confirm you want to discard the data and proceed with initialization.
        """
class utilities(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    expert: expert_11
    interpolate: interpolate_2
    def create_region_clip_surface(self, surface_name: str, type: str, inclusion: str, input_coordinates: list[float | str], surfaces: list[str]):
        """
        Create a surface by clipping other surfaces.
        
        Parameters
        ----------
            surface_name : str
                Name of the surface to be created.
            type : str
                Type of the surface to be created.
            inclusion : str
                Domain included inside or outside specified shape.
            input_coordinates : List
                Design variable minimum and maximum.
            surfaces : List
                Surfaces to clip.
        """
class gradient_based(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    observables: observables
    methods: methods_4
    controls: controls_2
    monitors: monitors
    calculation: calculation
    postprocess_options: postprocess_options
    reporting: reporting
    design_tool: design_tool
    optimizer: optimizer
    utilities: utilities
    def enable(self):
        """
        Enables and loads adjoint module.
        """
class parameterize_and_explore(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    morpher: morpher
    region: region
    design_conditions: design_conditions
    objectives: objectives
    design_change: design_change
class geometry_13(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    parameterize_and_explore: parameterize_and_explore
    def enable(self):
        """
        Enables and loads adjoint module.
        """
class design(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    gradient_based: gradient_based
    geometry: geometry_13
class input_parameters_1_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class input_parameters_1(NamedObject[input_parameters_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: input_parameters_1_child
class output_parameters_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class output_parameters(NamedObject[output_parameters_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: output_parameters_child
class status(String):
    _version: str
    fluent_name: str
    _python_name: str
class design_points_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    input_parameters: input_parameters_1
    output_parameters: output_parameters
    status: status
    write_data: write_data_3
    capture_simulation_report_data: capture_simulation_report_data
class design_points(NamedObject[design_points_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, write_data: bool, capture_simulation_report_data: bool):
        """
        Add new Design Point.
        
        Parameters
        ----------
            write_data : bool
                Write Data option for Design Point.
            capture_simulation_report_data : bool
                Capture Simulation Report Data option for Design Point.
        """
    def delete(self, design_points: list[str]):
        """
        Delete Design Points.
        
        Parameters
        ----------
            design_points : List
                Design Point Name(s).
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def duplicate(self, design_point: str):
        """
        Duplicate Design Point.
        
        Parameters
        ----------
            design_point : str
                'design_point' child.
        """
    def load_case_data(self):
        """
        Loads relevant case/data file for current design point.
        """
    def set_as_current(self, design_point: str):
        """
        Set current design point.
        
        Parameters
        ----------
            design_point : str
                'design_point' child.
        """
    def save_journals(self, separate_journals: bool):
        """
        Save Journals.
        
        Parameters
        ----------
            separate_journals : bool
                'separate_journals' child.
        """
    def clear_generated_data(self, design_points: list[str]):
        """
        Clear Generated Data.
        
        Parameters
        ----------
            design_points : List
                'design_points' child.
        """
    def status_of_all_dps(self):
        """
        Status of All Design Points.
        """
    def update_current(self):
        """
        Update Current Design Point.
        """
    def update_all(self):
        """
        Update All Design Point.
        """
    def update_selected(self, design_points: list[str]):
        """
        Update Selected Design Points.
        
        Parameters
        ----------
            design_points : List
                'design_points' child.
        """
    def interrupt(self, design_points: list[str]):
        """
        Interrupt Design Point(s).
        
        Parameters
        ----------
            design_points : List
                Design Point Name(s).
        """
    def abort(self, design_points: list[str]):
        """
        Abort Design Point(s).
        
        Parameters
        ----------
            design_points : List
                Design Point Name(s).
        """
    def connect_to_web_session(self, design_points: list[str]):
        """
        Connect to Web Interface of the Design Point.
        
        Parameters
        ----------
            design_points : List
                Design Point Name(s).
        """
    def download_output_files(self, design_points: list[str]):
        """
        Download Output Files.
        
        Parameters
        ----------
            design_points : List
                Design Point Name(s).
        """
    def interrupt_all_concurrent_dps(self):
        """
        Interrupt All Concurrent Design Points.
        """
    def abort_all_concurrent_dps(self):
        """
        Abort All Concurrent Design Points.
        """
    def refresh_status_of_concurrent_dps(self):
        """
        Refresh Status of Concurrent Design Points.
        """
    child_object_type: design_points_child
    _child_aliases: dict
class current_design_point(String):
    _version: str
    fluent_name: str
    _python_name: str
class initialize_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class read_case_before_each_dp_update(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class update_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class mode_2(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class capability(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_concurrent_dps(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_cores(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class use_gpu_solver(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_gpus_per_node(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class launch_web_server(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class web_server_token(String):
    _version: str
    fluent_name: str
    _python_name: str
class maximum_execution_time(Real):
    _version: str
    fluent_name: str
    _python_name: str
class exclusive(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_cpus_per_node(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class mpi_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interconnect_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class current_queue(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class current_endpoint(String):
    _version: str
    fluent_name: str
    _python_name: str
class keep_all_output_files(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class keep_specific_output_files(String):
    _version: str
    fluent_name: str
    _python_name: str
class type_23(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class optislang_license_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class optislang_license_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class licensing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    type: type_23
    optislang_license_type: optislang_license_type
    optislang_license_count: optislang_license_count
class concurrent_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    mode: mode_2
    capability: capability
    number_of_concurrent_dps: number_of_concurrent_dps
    number_of_cores: number_of_cores
    use_gpu_solver: use_gpu_solver
    number_of_gpus_per_node: number_of_gpus_per_node
    launch_web_server: launch_web_server
    web_server_token: web_server_token
    maximum_execution_time: maximum_execution_time
    exclusive: exclusive
    number_of_cpus_per_node: number_of_cpus_per_node
    mpi_type: mpi_type
    interconnect_type: interconnect_type
    current_queue: current_queue
    current_endpoint: current_endpoint
    keep_all_output_files: keep_all_output_files
    keep_specific_output_files: keep_specific_output_files
    licensing: licensing
    def connect_to_cluster(self, url: str, username: str, password: str):
        """
        Set Cluster Details.
        
        Parameters
        ----------
            url : str
                URL.
            username : str
                Username.
            password : str
                Password.
        """
class algorithm(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class refinement_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class max_number_of_samples(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class iteration_sampling_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class refinement_sampling_type(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class iteration_number_of_samples_or_levels(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class refinement_number_of_samples(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class consider_failed_designs(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class target_cop(Real):
    _version: str
    fluent_name: str
    _python_name: str
class max_iterations_4(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class imp_of_sample_density(Real):
    _version: str
    fluent_name: str
    _python_name: str
class imp_of_local_cop(Real):
    _version: str
    fluent_name: str
    _python_name: str
class imp_of_criteria(Real):
    _version: str
    fluent_name: str
    _python_name: str
class export_fmu(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_mop(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_designs_in_parallel(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class number_of_stagnation_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class seed_value(Real):
    _version: str
    fluent_name: str
    _python_name: str
class use_start_designs_only(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class algorithm_settings(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    refinement_type: refinement_type
    max_number_of_samples: max_number_of_samples
    iteration_sampling_type: iteration_sampling_type
    refinement_sampling_type: refinement_sampling_type
    iteration_number_of_samples_or_levels: iteration_number_of_samples_or_levels
    refinement_number_of_samples: refinement_number_of_samples
    consider_failed_designs: consider_failed_designs
    target_cop: target_cop
    max_iterations: max_iterations_4
    imp_of_sample_density: imp_of_sample_density
    imp_of_local_cop: imp_of_local_cop
    imp_of_criteria: imp_of_criteria
    export_fmu: export_fmu
    use_mop: use_mop
    number_of_designs_in_parallel: number_of_designs_in_parallel
    number_of_stagnation_iterations: number_of_stagnation_iterations
    seed_value: seed_value
    use_start_designs_only: use_start_designs_only
class best_design(String):
    _version: str
    fluent_name: str
    _python_name: str
class results_csv_path(String):
    _version: str
    fluent_name: str
    _python_name: str
class type_24(String):
    _version: str
    fluent_name: str
    _python_name: str
class criteria_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class criteria_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    type: type_24
    expression: expression_8
    criteria: criteria_3
    limit: limit
class criteria_1(NamedObject[criteria_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, names: list[str]):
        """
        Delete Criterion.
        
        Parameters
        ----------
            names : List
                Criterion Name.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def add_objective(self, name: str, expression: str, criteria: str):
        """
        Add Objective.
        
        Parameters
        ----------
            name : str
                Criterion Name.
            expression : str
                Criterion Expression.
            criteria : str
                Criterion.
        """
    def add_constraint(self, name: str, expression: str, criteria: str, limit: float | str):
        """
        Add Constraint.
        
        Parameters
        ----------
            name : str
                Criterion Name.
            expression : str
                Criterion Expression.
            criteria : str
                Criterion.
            limit : real
                Criterion Limit.
        """
    child_object_type: criteria_1_child
class optimize_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    algorithm: algorithm
    algorithm_settings: algorithm_settings
    best_design: best_design
    results_csv_path: results_csv_path
    criteria: criteria_1
    def configure_algorithm_settings(self):
        """
        Configure Algorithm Settings.
        """
    def run_optimization(self):
        """
        Run optimization.
        """
    def new_optimization(self):
        """
        New Optimization.
        """
    def export_omdb_in_optislang_postprocessor(self):
        """
        Export OMDB in optiSLang Postprocessor.
        """
    def export_optimization_results_to_csv(self, filepath: str):
        """
        Export Optimization Results to CSV.
        
        Parameters
        ----------
            filepath : str
                CSV Path.
        """
class active_parameters(StringList):
    _version: str
    fluent_name: str
    _python_name: str
class inactive_parameters(StringList):
    _version: str
    fluent_name: str
    _python_name: str
class optislang_capabilities(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    optimize: optimize_1
    active_parameters: active_parameters
    inactive_parameters: inactive_parameters
    def create_doe(self, sampling_type: str, number_of_samples_or_levels: int, delete_existing_dps: bool):
        """
        Create Design of Experiments using optiSLang.
        
        Parameters
        ----------
            sampling_type : str
                Sampling Type.
            number_of_samples_or_levels : int
                Number of Samples or Levels.
            delete_existing_dps : bool
                Delete Existing Design Points.
        """
    def set_active_parameters(self, names: list[str]):
        """
        Set Active Parameters.
        
        Parameters
        ----------
            names : List
                Active Parameters.
        """
    def set_inactive_parameter(self, name: str, default_val: float | str):
        """
        Set Inactive Parameters.
        
        Parameters
        ----------
            name : str
                Inactive Parameters.
            default_val : real
                Default Value.
        """
    def set_bounds(self, name: str, lower_bound: float | str, upper_bound: float | str):
        """
        Set Bounds.
        
        Parameters
        ----------
            name : str
                Parameter Name.
            lower_bound : real
                Lower Bound.
            upper_bound : real
                Upper Bound.
        """
    def get_number_of_designs(self, sampling_type: str, number_of_levels: int):
        """
        Get Number of Designs.
        
        Parameters
        ----------
            sampling_type : str
                Sampling Type.
            number_of_levels : int
                Number of Levels.
        """
    def export_designs(self, filepath: str):
        """
        Export Designs.
        
        Parameters
        ----------
            filepath : str
                Export Path to save JSON.
        """
    def open_designs_in_optislang_postprocessor(self):
        """
        Open Designs in optiSLang Postprocessor.
        """
    def go_to_optislang(self):
        """
        Open optiSLang project.
        """
class auto_update_mesh_morphs(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_dp_report_generation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_parametric_report_generation(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_dp_report_html_export(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_dp_report_pdf_export(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_dp_report_pptx_export(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_parametric_report_update_dp_data(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto_parametric_report_html_export(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class parametric_studies_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    design_points: design_points
    current_design_point: current_design_point
    initialize_method: initialize_method
    read_case_before_each_dp_update: read_case_before_each_dp_update
    update_method: update_method
    concurrent_settings: concurrent_settings
    optislang_capabilities: optislang_capabilities
    auto_update_mesh_morphs: auto_update_mesh_morphs
    auto_dp_report_generation: auto_dp_report_generation
    auto_parametric_report_generation: auto_parametric_report_generation
    auto_dp_report_html_export: auto_dp_report_html_export
    auto_dp_report_pdf_export: auto_dp_report_pdf_export
    auto_dp_report_pptx_export: auto_dp_report_pptx_export
    auto_parametric_report_update_dp_data: auto_parametric_report_update_dp_data
    auto_parametric_report_html_export: auto_parametric_report_html_export
class parametric_studies(NamedObject[parametric_studies_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def initialize(self, project_filename: str):
        """
        Start Parametric Study.
        
        Parameters
        ----------
            project_filename : str
                The project file name for initialization.
        """
    def duplicate(self, copy_design_points: bool):
        """
        Duplicate Parametric Study.
        
        Parameters
        ----------
            copy_design_points : bool
                'copy_design_points' child.
        """
    def set_as_current(self, study_name: str):
        """
        Set As Current Study.
        
        Parameters
        ----------
            study_name : str
                'study_name' child.
        """
    def export_design_table(self, filepath: str):
        """
        Export Design Point Table.
        
        Parameters
        ----------
            filepath : str
                'filepath' child.
        """
    def import_design_table(self, filepath: str, delete_existing: bool):
        """
        Import Design Point Table.
        
        Parameters
        ----------
            filepath : str
                'filepath' child.
            delete_existing : bool
                'delete_existing' child.
        """
    child_object_type: parametric_studies_child
class current_parametric_study(String):
    _version: str
    fluent_name: str
    _python_name: str
class enable_in_tui(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class value_25(Real):
    _version: str
    fluent_name: str
    _python_name: str
class apply_function(String):
    _version: str
    fluent_name: str
    _python_name: str
class scheme_proc_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    value: value_25
    apply_function: apply_function
class scheme_proc(NamedObject[scheme_proc_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: scheme_proc_child
class udf_side_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    value: value_25
class udf_side(NamedObject[udf_side_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: udf_side_child
class expression_9_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    value: value_25
class expression_9(NamedObject[expression_9_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    child_object_type: expression_9_child
class input_parameters_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    scheme_proc: scheme_proc
    udf_side: udf_side
    expression: expression_9
    def list(self):
        """
        List all input parameters.
        """
class report_definition(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class report_definitions_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    report_definition: report_definition
class report_definitions_1(NamedObject[report_definitions_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, report_def_name: str):
        """
        Create output parameter from report definition.
        
        Parameters
        ----------
            report_def_name : str
                Report definition to create output parameter.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def print_to_console(self, name: str):
        """
        Print parameter value to console.
        
        Parameters
        ----------
            name : str
                Parameter name.
        """
    def write_to_file(self, param_name: str, file_name: str, append_data: bool):
        """
        Write parameter value to file.
        
        Parameters
        ----------
            param_name : str
                Parameter name.
            file_name : str
                File name.
            append_data : bool
                Yes if you want to append data to file .
        """
    child_object_type: report_definitions_1_child
class named_expression(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class named_expressions_1_child(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    name: name_4
    named_expression: named_expression
class named_expressions_1(NamedObject[named_expressions_1_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def create(self, name: str):
        """
        Create a new instance of the current object type.
        
        Parameters
        ----------
            name : str
                Object name.
        """
    def delete(self, name_list: list[str]):
        """
        Delete selected objects.
        
        Parameters
        ----------
            name_list : List
                Objects to be deleted.
        """
    def rename(self, new: str, old: str):
        """
        Rename the object.
        
        Parameters
        ----------
            new : str
                New name for the object.
            old : str
                Object to rename.
        """
    def list(self):
        """
        List the names of the objects.
        """
    def list_properties(self, object_name: str):
        """
        List active properties of the object.
        
        Parameters
        ----------
            object_name : str
                Object for which properties are to be listed.
        """
    def make_a_copy(self, from_: str, to: str):
        """
        Create a copy of the object.
        
        Parameters
        ----------
            from_ : str
                The object to duplicate.
            to : str
                The name of the new object.
        """
    def print_to_console(self, name: str):
        """
        Print parameter value to console.
        
        Parameters
        ----------
            name : str
                Parameter name.
        """
    def write_to_file(self, param_name: str, file_name: str, append_data: bool):
        """
        Write parameter value to file.
        
        Parameters
        ----------
            param_name : str
                Parameter name.
            file_name : str
                File name.
            append_data : bool
                Yes if you want to append data to file .
        """
    child_object_type: named_expressions_1_child
class output_parameters_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    report_definitions: report_definitions_1
    named_expressions: named_expressions_1
    def list(self):
        """
        List all output parameters.
        """
    def print_all_to_console(self):
        """
        Print all parameters value to console.
        """
    def write_all_to_file(self, file_name: str, append_data: bool):
        """
        Write all parameters value to file.
        
        Parameters
        ----------
            file_name : str
                'file_name' child.
            append_data : bool
                'append_data' child.
        """
class parameters(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enable_in_tui: enable_in_tui
    input_parameters: input_parameters_2
    output_parameters: output_parameters_1
class thread_number_method(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class fixed_thread_number(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class thread_number_control(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    thread_number_method: thread_number_method
    fixed_thread_number: fixed_thread_number
class check_verbosity_1(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class case_file(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class across_zones(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class method_26(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class load_vector(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class pre_test(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class auto(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    case_file: case_file
    across_zones: across_zones
    method: method_26
    load_vector: load_vector
    pre_test: pre_test
class across_zone_boundaries(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class cell_function_3(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class load_distribution(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class merge_small_regions(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_merge_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class merge(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    merge_small_regions: merge_small_regions
    max_merge_iterations: max_merge_iterations
class partition_origin_vector_child(Real):
    _version: str
    fluent_name: str
    _python_name: str
class partition_origin_vector(ListObject[partition_origin_vector_child]):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def list_properties(self, object_at: int):
        """
        List properties of selected object.
        
        Parameters
        ----------
            object_at : int
                Object index to delete.
        """
    def resize(self, size: int):
        """
        Set number of objects for list-object.
        
        Parameters
        ----------
            size : int
                New size for list-object.
        """
    child_object_type: partition_origin_vector_child
class pre_test_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_partitioning(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class max_smoothing_iterations(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class smooth_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    smooth_partitioning: smooth_partitioning
    max_smoothing_iterations: max_smoothing_iterations
class print_verbosity(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class origin_10(RealList):
    _version: str
    fluent_name: str
    _python_name: str
class set_4(Real):
    _version: str
    fluent_name: str
    _python_name: str
class laplace_smoothing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_59
    set: set_4
class nfaces_as_weights_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class user_defined_value(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class nfaces_as_weights(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    nfaces_as_weights: nfaces_as_weights_1
    user_defined_value: user_defined_value
    value: value_25
class face_area_as_weights(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_layering(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class base_face_zone_for_partitioning(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class layering_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_layering: use_layering
    base_face_zone_for_partitioning: base_face_zone_for_partitioning
class use(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class use_user_define_value(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class solid_thread_weight(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    use_user_define_value: use_user_define_value
    value: value_25
class use_enhancement(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class aspect_ratio_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class stretched_mesh_enhancement(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_enhancement: use_enhancement
    aspect_ratio: aspect_ratio_1
class user_defined_17(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class hybrid_optimization(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class particle_weight(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    user_defined: user_defined_17
    value: value_25
    hybrid_optimization: hybrid_optimization
class vof_free_surface_weight(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    user_defined: user_defined_17
    value: value_25
class isat_weight(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    user_defined: user_defined_17
    value: value_25
class stiff_chemistry_weight(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    user_defined: user_defined_17
    value: value_25
class fluid_solid_rebalance_after_read_case(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class model_weighted_partition(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class load_balancing(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class threshold_2(Real):
    _version: str
    fluent_name: str
    _python_name: str
class interval(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class dpm_load_balancing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    load_balancing: load_balancing
    threshold: threshold_2
    interval: interval
class set_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    across_zone_boundaries: across_zone_boundaries
    cell_function: cell_function_3
    load_distribution: load_distribution
    merge: merge
    partition_origin_vector: partition_origin_vector
    pre_test: pre_test_1
    smooth: smooth_1
    print_verbosity: print_verbosity
    origin: origin_10
    laplace_smoothing: laplace_smoothing
    nfaces_as_weights: nfaces_as_weights
    face_area_as_weights: face_area_as_weights
    layering: layering_1
    solid_thread_weight: solid_thread_weight
    stretched_mesh_enhancement: stretched_mesh_enhancement
    particle_weight: particle_weight
    vof_free_surface_weight: vof_free_surface_weight
    isat_weight: isat_weight
    stiff_chemistry_weight: stiff_chemistry_weight
    fluid_solid_rebalance_after_read_case: fluid_solid_rebalance_after_read_case
    model_weighted_partition: model_weighted_partition
    dpm_load_balancing: dpm_load_balancing
    def across_zones(self, across_zone_boundaries: bool):
        """
        Enable partitioning by zone or by domain.
        
        Parameters
        ----------
            across_zone_boundaries : bool
                'across_zone_boundaries' child.
        """
    def all_off(self):
        """
        Disable all optimization.
        """
    def all_on(self):
        """
        Enable all optimization.
        """
class partition_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    auto: auto
    set: set_3
    def combine_partition(self, number_of_partitions: int):
        """
        Merge every N partitions.
        
        Parameters
        ----------
            number_of_partitions : int
                'number_of_partitions' child.
        """
    def merge_clusters(self, merge_iterations: int):
        """
        Merge partition clusters.
        
        Parameters
        ----------
            merge_iterations : int
                'merge_iterations' child.
        """
    def method(self, partition_method: str, count: int):
        """
        Partition the domain.
        
        Parameters
        ----------
            partition_method : str
                'partition_method' child.
            count : int
                'count' child.
        """
    def print_partitions(self):
        """
        Print partition information.
        """
    def print_active_partitions(self):
        """
        Print active partition information.
        """
    def print_stored_partitions(self):
        """
        Print stored partition information.
        """
    def reorder_partitions(self):
        """
        Reorder partitions.
        """
    def reorder_partitions_to_architecture(self):
        """
        Reorder partitions to architecture.
        """
    def smooth_partition(self, smoothing_iteration: int):
        """
        Smooth partition interface.
        
        Parameters
        ----------
            smoothing_iteration : int
                Maximum number of smoothing iterations.
        """
    def use_stored_partitions(self):
        """
        Use stored partitioning.
        """
class partition_mask(IntegerList):
    _version: str
    fluent_name: str
    _python_name: str
class verbosity_21(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class time_out(Real):
    _version: str
    fluent_name: str
    _python_name: str
class fast_io(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    partition_mask: partition_mask
    verbosity: verbosity_21
    time_out: time_out
    fast_io: fast_io
class use_multi_physics(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class physical_models_2(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use_multi_physics: use_multi_physics
    threshold: threshold_2
    interval: interval
class auto_1(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class dynamic_mesh_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    auto: auto_1
    threshold: threshold_2
    interval: interval
class mesh_adaption(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    use: use
    threshold: threshold_2
class load_balance(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    physical_models: physical_models_2
    dynamic_mesh: dynamic_mesh_1
    mesh_adaption: mesh_adaption
class enabled_78(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class iter_per_coupling_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class method_27(String, AllowedValuesMixin):
    _version: str
    fluent_name: str
    _python_name: str
class interval_1(Real):
    _version: str
    fluent_name: str
    _python_name: str
class frequency_11(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class iteration(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class single_session_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_27
    type: type_4
    interval: interval_1
    frequency: frequency_11
    iteration: iteration
class two_session_coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    method: method_27
    type: type_4
    frequency: frequency_11
class coupling(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    iter_per_coupling_count: iter_per_coupling_count
    single_session_coupling: single_session_coupling
    two_session_coupling: two_session_coupling
class process_count(Integer):
    _version: str
    fluent_name: str
    _python_name: str
class host_name(String):
    _version: str
    fluent_name: str
    _python_name: str
class helper_session_setup(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    process_count: process_count
    host_name: host_name
class helper_session(Boolean):
    _version: str
    fluent_name: str
    _python_name: str
class set_5(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    coupling: coupling
    helper_session_setup: helper_session_setup
    helper_session: helper_session
class conjugate_heat_transfer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    enabled: enabled_78
    set: set_5
class solve_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def iterate(self, iter_count: int, time_steps_count: int, iter_per_time_step_count: int):
        """
        Iteration the multidomain conjugate heat transfer.
        
        Parameters
        ----------
            iter_count : int
                'iter_count' child.
            time_steps_count : int
                'time_steps_count' child.
            iter_per_time_step_count : int
                'iter_per_time_step_count' child.
        """
    def dual_time_iterate(self, iter_count: int, time_steps_count: int, iter_per_time_step_count: int):
        """
        Dual-time iterate the multidomain conjugate heat transfer.
        
        Parameters
        ----------
            iter_count : int
                'iter_count' child.
            time_steps_count : int
                'time_steps_count' child.
            iter_per_time_step_count : int
                'iter_per_time_step_count' child.
        """
class multidomain(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    conjugate_heat_transfer: conjugate_heat_transfer
    solve: solve_1
class shell_script_path(String):
    _version: str
    fluent_name: str
    _python_name: str
class network_3(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    shell_script_path: shell_script_path
    def kill_all_nodes(self, delete_all_compute_nodes: bool):
        """
        Delete all compute nodes from virtual machine.
        
        Parameters
        ----------
            delete_all_compute_nodes : bool
                'delete_all_compute_nodes' child.
        """
    def kill_node(self, compute_node: int, invalidate_case: bool):
        """
        'kill_node' command.
        """
    def spawn_node(self, hostname: str, username: str):
        """
        Spawn a compute node process on a specified machine.
        
        Parameters
        ----------
            hostname : str
                'hostname' child.
            username : str
                'username' child.
        """
    def load_hosts(self, host_file: str):
        """
        Read a hosts file.
        
        Parameters
        ----------
            host_file : str
                'host_file' child.
        """
    def save_hosts(self, host_file: str):
        """
        Write a hosts file.
        
        Parameters
        ----------
            host_file_1 : str
                'host_file' child.
        """
class timer(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def usage(self):
        """
        Print solver timer.
        """
    def reset(self):
        """
        Reset domain timers.
        """
class parallel(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    thread_number_control: thread_number_control
    check_verbosity: check_verbosity_1
    partition: partition_3
    set: set_2
    load_balance: load_balance
    multidomain: multidomain
    network: network_3
    timer: timer
    def check(self):
        """
        Parallel check.
        """
    def show_connectivity(self, compute_node: int):
        """
        Show machine connectivity.
        
        Parameters
        ----------
            compute_node : int
                'compute_node' child.
        """
    def latency(self):
        """
        Show network latency.
        """
    def bandwidth(self):
        """
        Show network bandwidth.
        """
class custom_1(Group):
    _version: str
    fluent_name: str
    _python_name: str
    command_names: list[str]
    def uniform(self, begin: int, end: int, increment: int):
        """
        Pick the first and last timestep and specify an increment to select the timesteps in-between.
        
        Parameters
        ----------
            begin : int
                Begin-timestep for timestep-selector.
            end : int
                End-timestep for timestep-selector.
            increment : int
                Increment for timestep-selector.
        """
    def timestep_list(self, timesteps: list[int]):
        """
        Select individual timesteps to be used for transient postprocessing.
        
        Parameters
        ----------
            timesteps : List
                A list of timesteps.
        """
class timestep_selector(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    custom: custom_1
    def first(self):
        """
        Select only the first timestep in the list.
        """
    def last(self):
        """
        Select only the last timestep in the list.
        """
    def all(self):
        """
        Select all of the timesteps for transient postprocessing. These are the data files that the software finds in the working directory according to the latest data file loaded in the session.
        """
class transient_post_processing(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    command_names: list[str]
    timestep_selector: timestep_selector
    def enable(self, enabled: bool):
        """
        Choose whether or not to perform transient postprocessing on a completed transient run. If you intend to perform additional calculations, you must start a new Fluent session to avoid any issues.
        
        Parameters
        ----------
            enabled : bool
                Enable/Disable transient postprocessing?.
        """
    def display(self, display: str):
        """
        Select a defined graphics object to have the software perform a transient display of the evolution of that plot in the graphics window. This is akin to an animation except no files are saved.
        
        Parameters
        ----------
            display : str
                Graphics object name for transient display.
        """
    def monitor(self, monitor: list[str]):
        """
        Select a report file to generate the complete data for the report definitions contained within it based on the selected dataset.
        
        Parameters
        ----------
            monitor : List
                Report file name(s) for transient monitor.
        """
    def animation(self, animate: list[str]):
        """
        Create one or more transient animations from defined animation definitions, using the selected data.
        
        Parameters
        ----------
            animate : List
                Animation object name(s) for transient animation.
        """
    def compare_results(self, data_file1: str, data_file2: str, compare: str):
        """
        Compare contour plots from two different data files and generate a difference plot.
        
        Parameters
        ----------
            data_file1 : str
                First data file for result comparison.
            data_file2 : str
                Second data file for result comparison.
            compare : str
                Object for result comparison.
        """
    def compute_and_clip_range(self, compute_and_clip_range: str):
        """
        Select a defined graphics object, and the software calculates the minimum and maximum values for the field variable based on the selected timesteps.
        
        Parameters
        ----------
            compute_and_clip_range : str
                Graphics object name to compute and clip range for transient post processing.
        """
class root(Group):
    _version: str
    fluent_name: str
    _python_name: str
    child_names: list[str]
    file: file
    mesh: mesh
    server: server
    setup: setup
    solution: solution
    results: results
    design: design
    parametric_studies: parametric_studies
    current_parametric_study: current_parametric_study
    parameters: parameters
    parallel: parallel
    transient_post_processing: transient_post_processing
