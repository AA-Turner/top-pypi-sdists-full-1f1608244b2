/* Generated by Cython 3.0.8 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__plyvel___plyvel
#define __PYX_HAVE_API__plyvel___plyvel
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include "pythread.h"
#include <stdint.h>
#include <stdlib.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "leveldb/db.h"
#include "leveldb/status.h"
#include "leveldb/options.h"
#include "leveldb/slice.h"
#include "leveldb/write_batch.h"
#include "leveldb/iterator.h"
#include "leveldb/comparator.h"
#include "leveldb/filter_policy.h"
#include "leveldb/cache.h"
#include "comparator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "plyvel/_plyvel.pyx",
  "<stringsource>",
  "contextvars.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6plyvel_7_plyvel_DB;
struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB;
struct __pyx_obj_6plyvel_7_plyvel_WriteBatch;
struct __pyx_obj_6plyvel_7_plyvel_BaseIterator;
struct __pyx_obj_6plyvel_7_plyvel_Iterator;
struct __pyx_obj_6plyvel_7_plyvel_RawIterator;
struct __pyx_obj_6plyvel_7_plyvel_Snapshot;
struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "plyvel/_plyvel.pyx":660
 * #
 * 
 * cdef enum IteratorState:             # <<<<<<<<<<<<<<
 *     BEFORE_START
 *     AFTER_STOP
 */
enum __pyx_t_6plyvel_7_plyvel_IteratorState {
  __pyx_e_6plyvel_7_plyvel_BEFORE_START,
  __pyx_e_6plyvel_7_plyvel_AFTER_STOP,
  __pyx_e_6plyvel_7_plyvel_IN_BETWEEN,
  __pyx_e_6plyvel_7_plyvel_IN_BETWEEN_ALREADY_POSITIONED
};

/* "plyvel/_plyvel.pyx":667
 * 
 * 
 * cdef enum IteratorDirection:             # <<<<<<<<<<<<<<
 *     FORWARD
 *     REVERSE
 */
enum __pyx_t_6plyvel_7_plyvel_IteratorDirection {
  __pyx_e_6plyvel_7_plyvel_FORWARD,
  __pyx_e_6plyvel_7_plyvel_REVERSE
};

/* "plyvel/_plyvel.pyx":221
 * 
 * @cython.final
 * cdef class DB:             # <<<<<<<<<<<<<<
 *     cdef leveldb.DB* _db
 *     cdef Options options
 */
struct __pyx_obj_6plyvel_7_plyvel_DB {
  PyObject_HEAD
  struct __pyx_vtabstruct_6plyvel_7_plyvel_DB *__pyx_vtab;
  leveldb::DB *_db;
  leveldb::Options options;
  PyObject *name;
  PyObject *lock;
  PyObject *iterators;
};


/* "plyvel/_plyvel.pyx":459
 * 
 * 
 * cdef class PrefixedDB:             # <<<<<<<<<<<<<<
 *     cdef readonly DB db
 *     cdef readonly bytes prefix
 */
struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB {
  PyObject_HEAD
  struct __pyx_obj_6plyvel_7_plyvel_DB *db;
  PyObject *prefix;
};


/* "plyvel/_plyvel.pyx":559
 * 
 * @cython.final
 * cdef class WriteBatch:             # <<<<<<<<<<<<<<
 *     cdef leveldb.WriteBatch* _write_batch
 *     cdef WriteOptions write_options
 */
struct __pyx_obj_6plyvel_7_plyvel_WriteBatch {
  PyObject_HEAD
  leveldb::WriteBatch *_write_batch;
  leveldb::WriteOptions write_options;
  struct __pyx_obj_6plyvel_7_plyvel_DB *db;
  PyObject *prefix;
  bool transaction;
};


/* "plyvel/_plyvel.pyx":672
 * 
 * 
 * cdef class BaseIterator:             # <<<<<<<<<<<<<<
 *     cdef DB db
 *     cdef leveldb.Iterator* _iter
 */
struct __pyx_obj_6plyvel_7_plyvel_BaseIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator *__pyx_vtab;
  struct __pyx_obj_6plyvel_7_plyvel_DB *db;
  leveldb::Iterator *_iter;
  PyObject *__weakref__;
};


/* "plyvel/_plyvel.pyx":721
 * 
 * @cython.final
 * cdef class Iterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef IteratorDirection direction
 *     cdef IteratorState state
 */
struct __pyx_obj_6plyvel_7_plyvel_Iterator {
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator __pyx_base;
  enum __pyx_t_6plyvel_7_plyvel_IteratorDirection direction;
  enum __pyx_t_6plyvel_7_plyvel_IteratorState state;
  leveldb::Comparator *comparator;
  PyObject *start;
  PyObject *stop;
  leveldb::Slice start_slice;
  leveldb::Slice stop_slice;
  bool include_start;
  bool include_stop;
  bool include_key;
  bool include_value;
  PyObject *db_prefix;
  size_t db_prefix_len;
};


/* "plyvel/_plyvel.pyx":1028
 * 
 * @cython.final
 * cdef class RawIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     def valid(self):
 *         if self._iter is NULL:
 */
struct __pyx_obj_6plyvel_7_plyvel_RawIterator {
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator __pyx_base;
};


/* "plyvel/_plyvel.pyx":1118
 * 
 * @cython.final
 * cdef class Snapshot:             # <<<<<<<<<<<<<<
 *     cdef leveldb.Snapshot* _snapshot
 *     cdef DB db
 */
struct __pyx_obj_6plyvel_7_plyvel_Snapshot {
  PyObject_HEAD
  struct __pyx_vtabstruct_6plyvel_7_plyvel_Snapshot *__pyx_vtab;
  leveldb::Snapshot *_snapshot;
  struct __pyx_obj_6plyvel_7_plyvel_DB *db;
  PyObject *prefix;
};


/* "plyvel/_plyvel.pyx":680
 *     cdef object __weakref__
 * 
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,             # <<<<<<<<<<<<<<
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 */
struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ {
  PyObject_HEAD
  PyObject *__pyx_v_iterator_id;
  PyObject *__pyx_v_ref_dict;
};



/* "plyvel/_plyvel.pyx":221
 * 
 * @cython.final
 * cdef class DB:             # <<<<<<<<<<<<<<
 *     cdef leveldb.DB* _db
 *     cdef Options options
 */

struct __pyx_vtabstruct_6plyvel_7_plyvel_DB {
  PyObject *(*close)(struct __pyx_obj_6plyvel_7_plyvel_DB *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6plyvel_7_plyvel_DB *__pyx_vtabptr_6plyvel_7_plyvel_DB;
static PyObject *__pyx_f_6plyvel_7_plyvel_2DB_close(struct __pyx_obj_6plyvel_7_plyvel_DB *, int __pyx_skip_dispatch);


/* "plyvel/_plyvel.pyx":672
 * 
 * 
 * cdef class BaseIterator:             # <<<<<<<<<<<<<<
 *     cdef DB db
 *     cdef leveldb.Iterator* _iter
 */

struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator {
  PyObject *(*close)(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator *__pyx_vtabptr_6plyvel_7_plyvel_BaseIterator;


/* "plyvel/_plyvel.pyx":721
 * 
 * @cython.final
 * cdef class Iterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     cdef IteratorDirection direction
 *     cdef IteratorState state
 */

struct __pyx_vtabstruct_6plyvel_7_plyvel_Iterator {
  struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator __pyx_base;
  PyObject *(*current)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);
  PyObject *(*real_next)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);
  PyObject *(*real_prev)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);
};
static struct __pyx_vtabstruct_6plyvel_7_plyvel_Iterator *__pyx_vtabptr_6plyvel_7_plyvel_Iterator;
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_current(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_next(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_prev(struct __pyx_obj_6plyvel_7_plyvel_Iterator *);


/* "plyvel/_plyvel.pyx":1028
 * 
 * @cython.final
 * cdef class RawIterator(BaseIterator):             # <<<<<<<<<<<<<<
 *     def valid(self):
 *         if self._iter is NULL:
 */

struct __pyx_vtabstruct_6plyvel_7_plyvel_RawIterator {
  struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator __pyx_base;
  PyObject *(*key)(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch);
  PyObject *(*value)(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6plyvel_7_plyvel_RawIterator *__pyx_vtabptr_6plyvel_7_plyvel_RawIterator;
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_key(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_value(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch);


/* "plyvel/_plyvel.pyx":1118
 * 
 * @cython.final
 * cdef class Snapshot:             # <<<<<<<<<<<<<<
 *     cdef leveldb.Snapshot* _snapshot
 *     cdef DB db
 */

struct __pyx_vtabstruct_6plyvel_7_plyvel_Snapshot {
  PyObject *(*close)(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6plyvel_7_plyvel_Snapshot *__pyx_vtabptr_6plyvel_7_plyvel_Snapshot;
static PyObject *__pyx_f_6plyvel_7_plyvel_8Snapshot_close(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *, int __pyx_skip_dispatch);
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetItemIntByteArray.proto */
#define __Pyx_GetItemInt_ByteArray(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_ByteArray_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "bytearray index out of range"), -1))
static CYTHON_INLINE int __Pyx_GetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i,
                                                         int wraparound, int boundscheck);

/* SetItemIntByteArray.proto */
#define __Pyx_SetItemInt_ByteArray(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_ByteArray_Fast(o, (Py_ssize_t)i, v, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "bytearray index out of range"), -1))
static CYTHON_INLINE int __Pyx_SetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i, unsigned char v,
                                                         int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseKeywordRequired.proto */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_2DB_close(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_12BaseIterator_close(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_current(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_next(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_prev(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_key(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_value(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_8Snapshot_close(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/

/* Module declarations from "cython" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp" */

/* Module declarations from "plyvel.leveldb" */

/* Module declarations from "plyvel.comparator" */

/* Module declarations from "plyvel._plyvel" */
static int __pyx_f_6plyvel_7_plyvel_raise_for_status(leveldb::Status); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6plyvel_7_plyvel_db_get(struct __pyx_obj_6plyvel_7_plyvel_DB *, PyObject *, PyObject *, leveldb::ReadOptions); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_to_file_system_name(PyObject *); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_bytes_increment(PyObject *); /*proto*/
static int __pyx_f_6plyvel_7_plyvel_parse_options(leveldb::Options *, bool, bool, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel___pyx_unpickle_PrefixedDB__set_state(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "plyvel._plyvel"
extern int __pyx_module_is_main_plyvel___plyvel;
int __pyx_module_is_main_plyvel___plyvel = 0;

/* Implementation of "plyvel._plyvel" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_UnicodeEncodeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_hex;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_AssertionError;
/* #### Code section: string_decls ### */
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_DB[] = "DB";
static const char __pyx_k__7[] = "";
static const char __pyx_k__8[] = ">";
static const char __pyx_k_db[] = "db";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_sl[] = "sl";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_wr[] = "wr";
static const char __pyx_k__16[] = ".";
static const char __pyx_k__17[] = "*";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_put[] = "put";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Lock[] = "Lock";
static const char __pyx_k_None[] = "None";
static const char __pyx_k__115[] = "?";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_prev[] = "prev";
static const char __pyx_k_seek[] = "seek";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_sync[] = "sync";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Error[] = "Error";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_at_0x[] = " at 0x";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sizes[] = "sizes";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_valid[] = "valid";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_DB_get[] = "DB.get";
static const char __pyx_k_DB_put[] = "DB.put";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_closed[] = "closed";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_fsname[] = "fsname";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_ranges[] = "ranges";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_snappy[] = "snappy";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_popitem[] = "popitem";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_release[] = "release";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_DB_close[] = "DB.close";
static const char __pyx_k_Iterator[] = "Iterator";
static const char __pyx_k_Snapshot[] = "Snapshot";
static const char __pyx_k_c_ranges[] = "c_ranges";
static const char __pyx_k_closed_2[] = " (closed)";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_iterator[] = "iterator";
static const char __pyx_k_n_ranges[] = "n_ranges";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_snapshot[] = "snapshot";
static const char __pyx_k_DB___exit[] = "DB.__exit__";
static const char __pyx_k_DB_delete[] = "DB.delete";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_db_prefix[] = "db_prefix";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_key_slice[] = "key_slice";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_repair_db[] = "repair_db";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_DB___enter[] = "DB.__enter__";
static const char __pyx_k_PrefixedDB[] = "PrefixedDB";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_WriteBatch[] = "WriteBatch";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_comparator[] = "comparator";
static const char __pyx_k_destroy_db[] = "destroy_db";
static const char __pyx_k_fill_cache[] = "fill_cache";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_stop_slice[] = "stop_slice";
static const char __pyx_k_DB_iterator[] = "DB.iterator";
static const char __pyx_k_DB_snapshot[] = "DB.snapshot";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_RawIterator[] = "RawIterator";
static const char __pyx_k_compression[] = "compression";
static const char __pyx_k_include_key[] = "include_key";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_prefixed_db[] = "prefixed_db";
static const char __pyx_k_start_slice[] = "start_slice";
static const char __pyx_k_transaction[] = "transaction";
static const char __pyx_k_weakref_ref[] = "weakref_ref";
static const char __pyx_k_write_batch[] = "write_batch";
static const char __pyx_k_BaseIterator[] = "BaseIterator";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Snapshot_get[] = "Snapshot.get";
static const char __pyx_k_get_property[] = "get_property";
static const char __pyx_k_include_stop[] = "include_stop";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_raw_iterator[] = "raw_iterator";
static const char __pyx_k_read_options[] = "read_options";
static const char __pyx_k_seek_to_last[] = "seek_to_last";
static const char __pyx_k_seek_to_stop[] = "seek_to_stop";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_target_slice[] = "target_slice";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_value_buffer[] = "value_buffer";
static const char __pyx_k_Iterator_prev[] = "Iterator.prev";
static const char __pyx_k_Iterator_seek[] = "Iterator.seek";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_compact_range[] = "compact_range";
static const char __pyx_k_include_start[] = "include_start";
static const char __pyx_k_include_value[] = "include_value";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_max_file_size[] = "max_file_size";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_seek_to_first[] = "seek_to_first";
static const char __pyx_k_seek_to_start[] = "seek_to_start";
static const char __pyx_k_write_options[] = "write_options";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_DB_prefixed_db[] = "DB.prefixed_db";
static const char __pyx_k_DB_write_batch[] = "DB.write_batch";
static const char __pyx_k_PrefixedDB_get[] = "PrefixedDB.get";
static const char __pyx_k_PrefixedDB_put[] = "PrefixedDB.put";
static const char __pyx_k_Snapshot_close[] = "Snapshot.close";
static const char __pyx_k_WriteBatch_put[] = "WriteBatch.put";
static const char __pyx_k_lru_cache_size[] = "lru_cache_size";
static const char __pyx_k_max_open_files[] = "max_open_files";
static const char __pyx_k_plyvel__plyvel[] = "plyvel._plyvel";
static const char __pyx_k_CorruptionError[] = "CorruptionError";
static const char __pyx_k_DB_get_property[] = "DB.get_property";
static const char __pyx_k_DB_raw_iterator[] = "DB.raw_iterator";
static const char __pyx_k_RawIterator_key[] = "RawIterator.key";
static const char __pyx_k_Snapshot___exit[] = "Snapshot.__exit__";
static const char __pyx_k_comparator_name[] = "comparator_name";
static const char __pyx_k_error_if_exists[] = "error_if_exists";
static const char __pyx_k_leveldb_version[] = "__leveldb_version__";
static const char __pyx_k_paranoid_checks[] = "paranoid_checks";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_DB_compact_range[] = "DB.compact_range";
static const char __pyx_k_RawIterator_item[] = "RawIterator.item";
static const char __pyx_k_RawIterator_next[] = "RawIterator.next";
static const char __pyx_k_RawIterator_prev[] = "RawIterator.prev";
static const char __pyx_k_RawIterator_seek[] = "RawIterator.seek";
static const char __pyx_k_Snapshot___enter[] = "Snapshot.__enter__";
static const char __pyx_k_Snapshot_release[] = "Snapshot.release";
static const char __pyx_k_WriteBatch_clear[] = "WriteBatch.clear";
static const char __pyx_k_WriteBatch_write[] = "WriteBatch.write";
static const char __pyx_k_approximate_size[] = "approximate_size";
static const char __pyx_k_verify_checksums[] = "verify_checksums";
static const char __pyx_k_PrefixedDB_delete[] = "PrefixedDB.delete";
static const char __pyx_k_RawIterator_valid[] = "RawIterator.valid";
static const char __pyx_k_RawIterator_value[] = "RawIterator.value";
static const char __pyx_k_Snapshot_iterator[] = "Snapshot.iterator";
static const char __pyx_k_WriteBatch___exit[] = "WriteBatch.__exit__";
static const char __pyx_k_WriteBatch_append[] = "WriteBatch.append";
static const char __pyx_k_WriteBatch_delete[] = "WriteBatch.delete";
static const char __pyx_k_approximate_sizes[] = "approximate_sizes";
static const char __pyx_k_bloom_filter_bits[] = "bloom_filter_bits";
static const char __pyx_k_create_if_missing[] = "create_if_missing";
static const char __pyx_k_write_buffer_size[] = "write_buffer_size";
static const char __pyx_k_BaseIterator_close[] = "BaseIterator.close";
static const char __pyx_k_DB___reduce_cython[] = "DB.__reduce_cython__";
static const char __pyx_k_Database_is_closed[] = "Database is closed";
static const char __pyx_k_UnicodeEncodeError[] = "UnicodeEncodeError";
static const char __pyx_k_WriteBatch___enter[] = "WriteBatch.__enter__";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_plyvel__plyvel_pyx[] = "plyvel/_plyvel.pyx";
static const char __pyx_k_BaseIterator___exit[] = "BaseIterator.__exit__";
static const char __pyx_k_DB_approximate_size[] = "DB.approximate_size";
static const char __pyx_k_PrefixedDB_iterator[] = "PrefixedDB.iterator";
static const char __pyx_k_PrefixedDB_snapshot[] = "PrefixedDB.snapshot";
static const char __pyx_k_plyvel_DB_with_name[] = "<plyvel.DB with name ";
static const char __pyx_k_BaseIterator___enter[] = "BaseIterator.__enter__";
static const char __pyx_k_DB___setstate_cython[] = "DB.__setstate_cython__";
static const char __pyx_k_DB_approximate_sizes[] = "DB.approximate_sizes";
static const char __pyx_k_IteratorInvalidError[] = "IteratorInvalidError";
static const char __pyx_k_init___locals_lambda[] = "__init__.<locals>.<lambda>";
static const char __pyx_k_Iterator_seek_to_stop[] = "Iterator.seek_to_stop";
static const char __pyx_k_Snapshot_raw_iterator[] = "Snapshot.raw_iterator";
static const char __pyx_k_getfilesystemencoding[] = "getfilesystemencoding";
static const char __pyx_k_Iterator_seek_to_start[] = "Iterator.seek_to_start";
static const char __pyx_k_PrefixedDB_prefixed_db[] = "PrefixedDB.prefixed_db";
static const char __pyx_k_PrefixedDB_write_batch[] = "PrefixedDB.write_batch";
static const char __pyx_k_block_restart_interval[] = "block_restart_interval";
static const char __pyx_k_pyx_unpickle_PrefixedDB[] = "__pyx_unpickle_PrefixedDB";
static const char __pyx_k_Iterator___reduce_cython[] = "Iterator.__reduce_cython__";
static const char __pyx_k_RawIterator_seek_to_last[] = "RawIterator.seek_to_last";
static const char __pyx_k_Snapshot___reduce_cython[] = "Snapshot.__reduce_cython__";
static const char __pyx_k_RawIterator_seek_to_first[] = "RawIterator.seek_to_first";
static const char __pyx_k_Iterator___setstate_cython[] = "Iterator.__setstate_cython__";
static const char __pyx_k_PrefixedDB___reduce_cython[] = "PrefixedDB.__reduce_cython__";
static const char __pyx_k_Snapshot___setstate_cython[] = "Snapshot.__setstate_cython__";
static const char __pyx_k_WriteBatch___reduce_cython[] = "WriteBatch.__reduce_cython__";
static const char __pyx_k_RawIterator___reduce_cython[] = "RawIterator.__reduce_cython__";
static const char __pyx_k_WriteBatch_approximate_size[] = "WriteBatch.approximate_size";
static const char __pyx_k_BaseIterator___reduce_cython[] = "BaseIterator.__reduce_cython__";
static const char __pyx_k_PrefixedDB___setstate_cython[] = "PrefixedDB.__setstate_cython__";
static const char __pyx_k_WriteBatch___setstate_cython[] = "WriteBatch.__setstate_cython__";
static const char __pyx_k_RawIterator___setstate_cython[] = "RawIterator.__setstate_cython__";
static const char __pyx_k_plyvel_PrefixedDB_with_prefix[] = "<plyvel.PrefixedDB with prefix ";
static const char __pyx_k_BaseIterator___setstate_cython[] = "BaseIterator.__setstate_cython__";
static const char __pyx_k_Database_or_iterator_is_closed[] = "Database or iterator is closed";
static const char __pyx_k_Database_or_snapshot_is_closed[] = "Database or snapshot is closed";
static const char __pyx_k_comparator_and_comparator_name[] = "'comparator' and 'comparator_name' must be specified together";
static const char __pyx_k_name_arg_must_be_a_byte_string[] = "'name' arg must be a byte string or a unicode string";
static const char __pyx_k_prefix_cannot_be_used_together[] = "'prefix' cannot be used together with 'start' or 'stop'";
static const char __pyx_k_Plyvel_a_Python_LevelDB_interfa[] = "\nPlyvel, a Python LevelDB interface.\n\nUse plyvel.DB() to create or open a database.\n";
static const char __pyx_k_Start_and_stop_of_range_must_be[] = "Start and stop of range must be byte strings";
static const char __pyx_k_compression_must_be_None_or_a_s[] = "'compression' must be None or a string";
static const char __pyx_k_compression_must_be_None_or_sna[] = "'compression' must be None or 'snappy'";
static const char __pyx_k_self__db_self_options_cannot_be[] = "self._db,self.options cannot be converted to a Python object for pickling";
static const char __pyx_k_self__iter_self_comparator_self[] = "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling";
static const char __pyx_k_Cannot_convert_unicode_name_to_a[] = "Cannot convert unicode 'name' to a file system name: %s";
static const char __pyx_k_Cannot_operate_on_closed_LevelDB[] = "Cannot operate on closed LevelDB database";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))";
static const char __pyx_k_custom_comparator_object_must_be[] = "custom comparator object must be callable";
static const char __pyx_k_self__iter_cannot_be_converted_t[] = "self._iter cannot be converted to a Python object for pickling";
static const char __pyx_k_self__snapshot_cannot_be_convert[] = "self._snapshot cannot be converted to a Python object for pickling";
static const char __pyx_k_self__write_batch_self_write_opt[] = "self._write_batch,self.write_options cannot be converted to a Python object for pickling";
/* #### Code section: decls ### */
static int __pyx_pf_6plyvel_7_plyvel_2DB___init__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_name, PyBoolObject *__pyx_v_create_if_missing, PyBoolObject *__pyx_v_error_if_exists, PyObject *__pyx_v_paranoid_checks, PyObject *__pyx_v_write_buffer_size, PyObject *__pyx_v_max_open_files, PyObject *__pyx_v_lru_cache_size, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_max_file_size, PyObject *__pyx_v_compression, int __pyx_v_bloom_filter_bits, PyObject *__pyx_v_comparator, PyObject *__pyx_v_comparator_name); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_2close(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_6closed___get__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static void __pyx_pf_6plyvel_7_plyvel_2DB_4__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_6__repr__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_8get(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_10put(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_12delete(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_14write_batch(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyBoolObject *__pyx_v_transaction, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_16__iter__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_18iterator(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_20raw_iterator(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_22snapshot(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_24get_property(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_26compact_range(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_28approximate_size(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_30approximate_sizes(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_ranges); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_32prefixed_db(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_34__enter__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_36__exit__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_4name___get__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6plyvel_7_plyvel_10PrefixedDB___init__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2__repr__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_4get(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6put(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_8delete(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_10write_batch(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_transaction, PyBoolObject *__pyx_v_sync); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_12__iter__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_14iterator(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_16snapshot(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2db___get__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6prefix___get__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_paranoid_checks, PyObject *__pyx_v_write_buffer_size, PyObject *__pyx_v_max_open_files, PyObject *__pyx_v_lru_cache_size, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_max_file_size, PyObject *__pyx_v_compression, int __pyx_v_bloom_filter_bits, PyObject *__pyx_v_comparator, PyObject *__pyx_v_comparator_name); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_2destroy_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static int __pyx_pf_6plyvel_7_plyvel_10WriteBatch___init__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix, PyBoolObject *__pyx_v_transaction, PyObject *__pyx_v_sync); /* proto */
static void __pyx_pf_6plyvel_7_plyvel_10WriteBatch_2__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_4put(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_6delete(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_8clear(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_10write(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_12approximate_size(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_14append(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_16__enter__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_18__exit__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_wr); /* proto */
static int __pyx_pf_6plyvel_7_plyvel_12BaseIterator___init__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache, struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_2close(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self); /* proto */
static void __pyx_pf_6plyvel_7_plyvel_12BaseIterator_4__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_6__enter__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_8__exit__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6plyvel_7_plyvel_8Iterator___init__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_db_prefix, PyBoolObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyBoolObject *__pyx_v_include_start, PyBoolObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyBoolObject *__pyx_v_include_key, PyBoolObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache, struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_2__iter__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_4__next__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_6prev(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_8seek_to_start(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_10seek_to_stop(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_12seek(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_valid(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_2seek_to_first(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_4seek_to_last(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_6seek(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_8next(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_10prev(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_12key(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_14value(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_16item(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6plyvel_7_plyvel_8Snapshot___init__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix); /* proto */
static void __pyx_pf_6plyvel_7_plyvel_8Snapshot_2__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_4close(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_6release(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_8__enter__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_10__exit__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_12get(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_14__iter__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_16iterator(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_18raw_iterator(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6plyvel_7_plyvel_4__pyx_unpickle_PrefixedDB(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_DB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_PrefixedDB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_WriteBatch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_BaseIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_Iterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_RawIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel_Snapshot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6plyvel_7_plyvel___pyx_scope_struct____init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_6plyvel_7_plyvel_DB;
  PyObject *__pyx_type_6plyvel_7_plyvel_PrefixedDB;
  PyObject *__pyx_type_6plyvel_7_plyvel_WriteBatch;
  PyObject *__pyx_type_6plyvel_7_plyvel_BaseIterator;
  PyObject *__pyx_type_6plyvel_7_plyvel_Iterator;
  PyObject *__pyx_type_6plyvel_7_plyvel_RawIterator;
  PyObject *__pyx_type_6plyvel_7_plyvel_Snapshot;
  PyObject *__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__;
  #endif
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_DB;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_PrefixedDB;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_WriteBatch;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_BaseIterator;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_Iterator;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_RawIterator;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel_Snapshot;
  PyTypeObject *__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_BaseIterator;
  PyObject *__pyx_n_s_BaseIterator___enter;
  PyObject *__pyx_n_s_BaseIterator___exit;
  PyObject *__pyx_n_s_BaseIterator___reduce_cython;
  PyObject *__pyx_n_s_BaseIterator___setstate_cython;
  PyObject *__pyx_n_s_BaseIterator_close;
  PyObject *__pyx_kp_u_Cannot_convert_unicode_name_to_a;
  PyObject *__pyx_kp_u_Cannot_operate_on_closed_LevelDB;
  PyObject *__pyx_n_s_CorruptionError;
  PyObject *__pyx_n_s_DB;
  PyObject *__pyx_n_s_DB___enter;
  PyObject *__pyx_n_s_DB___exit;
  PyObject *__pyx_n_s_DB___reduce_cython;
  PyObject *__pyx_n_s_DB___setstate_cython;
  PyObject *__pyx_n_s_DB_approximate_size;
  PyObject *__pyx_n_s_DB_approximate_sizes;
  PyObject *__pyx_n_s_DB_close;
  PyObject *__pyx_n_s_DB_compact_range;
  PyObject *__pyx_n_s_DB_delete;
  PyObject *__pyx_n_s_DB_get;
  PyObject *__pyx_n_s_DB_get_property;
  PyObject *__pyx_n_s_DB_iterator;
  PyObject *__pyx_n_s_DB_prefixed_db;
  PyObject *__pyx_n_s_DB_put;
  PyObject *__pyx_n_s_DB_raw_iterator;
  PyObject *__pyx_n_s_DB_snapshot;
  PyObject *__pyx_n_s_DB_write_batch;
  PyObject *__pyx_kp_u_Database_is_closed;
  PyObject *__pyx_kp_u_Database_or_iterator_is_closed;
  PyObject *__pyx_kp_u_Database_or_snapshot_is_closed;
  PyObject *__pyx_n_s_Error;
  PyObject *__pyx_n_s_IOError;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_Iterator;
  PyObject *__pyx_n_s_IteratorInvalidError;
  PyObject *__pyx_n_s_Iterator___reduce_cython;
  PyObject *__pyx_n_s_Iterator___setstate_cython;
  PyObject *__pyx_n_s_Iterator_prev;
  PyObject *__pyx_n_s_Iterator_seek;
  PyObject *__pyx_n_s_Iterator_seek_to_start;
  PyObject *__pyx_n_s_Iterator_seek_to_stop;
  PyObject *__pyx_n_s_Lock;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_PrefixedDB;
  PyObject *__pyx_n_s_PrefixedDB___reduce_cython;
  PyObject *__pyx_n_s_PrefixedDB___setstate_cython;
  PyObject *__pyx_n_s_PrefixedDB_delete;
  PyObject *__pyx_n_s_PrefixedDB_get;
  PyObject *__pyx_n_s_PrefixedDB_iterator;
  PyObject *__pyx_n_s_PrefixedDB_prefixed_db;
  PyObject *__pyx_n_s_PrefixedDB_put;
  PyObject *__pyx_n_s_PrefixedDB_snapshot;
  PyObject *__pyx_n_s_PrefixedDB_write_batch;
  PyObject *__pyx_n_s_RawIterator;
  PyObject *__pyx_n_s_RawIterator___reduce_cython;
  PyObject *__pyx_n_s_RawIterator___setstate_cython;
  PyObject *__pyx_n_s_RawIterator_item;
  PyObject *__pyx_n_s_RawIterator_key;
  PyObject *__pyx_n_s_RawIterator_next;
  PyObject *__pyx_n_s_RawIterator_prev;
  PyObject *__pyx_n_s_RawIterator_seek;
  PyObject *__pyx_n_s_RawIterator_seek_to_first;
  PyObject *__pyx_n_s_RawIterator_seek_to_last;
  PyObject *__pyx_n_s_RawIterator_valid;
  PyObject *__pyx_n_s_RawIterator_value;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_Snapshot;
  PyObject *__pyx_n_s_Snapshot___enter;
  PyObject *__pyx_n_s_Snapshot___exit;
  PyObject *__pyx_n_s_Snapshot___reduce_cython;
  PyObject *__pyx_n_s_Snapshot___setstate_cython;
  PyObject *__pyx_n_s_Snapshot_close;
  PyObject *__pyx_n_s_Snapshot_get;
  PyObject *__pyx_n_s_Snapshot_iterator;
  PyObject *__pyx_n_s_Snapshot_raw_iterator;
  PyObject *__pyx_n_s_Snapshot_release;
  PyObject *__pyx_kp_u_Start_and_stop_of_range_must_be;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_UTF_8;
  PyObject *__pyx_n_s_UnicodeEncodeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_WriteBatch;
  PyObject *__pyx_n_s_WriteBatch___enter;
  PyObject *__pyx_n_s_WriteBatch___exit;
  PyObject *__pyx_n_s_WriteBatch___reduce_cython;
  PyObject *__pyx_n_s_WriteBatch___setstate_cython;
  PyObject *__pyx_n_s_WriteBatch_append;
  PyObject *__pyx_n_s_WriteBatch_approximate_size;
  PyObject *__pyx_n_s_WriteBatch_clear;
  PyObject *__pyx_n_s_WriteBatch_delete;
  PyObject *__pyx_n_s_WriteBatch_put;
  PyObject *__pyx_n_s_WriteBatch_write;
  PyObject *__pyx_n_s__115;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_n_s__17;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_approximate_size;
  PyObject *__pyx_n_s_approximate_sizes;
  PyObject *__pyx_n_u_ascii;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_kp_u_at_0x;
  PyObject *__pyx_n_s_block_restart_interval;
  PyObject *__pyx_n_s_block_size;
  PyObject *__pyx_n_s_bloom_filter_bits;
  PyObject *__pyx_n_s_c_ranges;
  PyObject *__pyx_n_s_clear;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_closed;
  PyObject *__pyx_kp_u_closed_2;
  PyObject *__pyx_n_s_compact_range;
  PyObject *__pyx_n_s_comparator;
  PyObject *__pyx_kp_u_comparator_and_comparator_name;
  PyObject *__pyx_n_s_comparator_name;
  PyObject *__pyx_n_s_compression;
  PyObject *__pyx_kp_u_compression_must_be_None_or_a_s;
  PyObject *__pyx_kp_u_compression_must_be_None_or_sna;
  PyObject *__pyx_n_s_create_if_missing;
  PyObject *__pyx_kp_u_custom_comparator_object_must_be;
  PyObject *__pyx_n_u_d;
  PyObject *__pyx_n_s_db;
  PyObject *__pyx_n_s_db_prefix;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_s_default;
  PyObject *__pyx_n_s_delete;
  PyObject *__pyx_n_s_destroy_db;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_error_if_exists;
  PyObject *__pyx_n_s_exc_tb;
  PyObject *__pyx_n_s_exc_type;
  PyObject *__pyx_n_s_exc_val;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_fill_cache;
  PyObject *__pyx_n_s_fsname;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_get_property;
  PyObject *__pyx_n_s_getfilesystemencoding;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_hex;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_include_key;
  PyObject *__pyx_n_s_include_start;
  PyObject *__pyx_n_s_include_stop;
  PyObject *__pyx_n_s_include_value;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init___locals_lambda;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_item;
  PyObject *__pyx_n_s_iterator;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_key_slice;
  PyObject *__pyx_n_s_leveldb_version;
  PyObject *__pyx_n_s_lru_cache_size;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_max_file_size;
  PyObject *__pyx_n_s_max_open_files;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_n_ranges;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_kp_u_name_arg_must_be_a_byte_string;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_next;
  PyObject *__pyx_n_s_options;
  PyObject *__pyx_n_s_paranoid_checks;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_kp_u_plyvel_DB_with_name;
  PyObject *__pyx_kp_u_plyvel_PrefixedDB_with_prefix;
  PyObject *__pyx_n_s_plyvel__plyvel;
  PyObject *__pyx_kp_s_plyvel__plyvel_pyx;
  PyObject *__pyx_n_s_pop;
  PyObject *__pyx_n_s_popitem;
  PyObject *__pyx_n_s_prefix;
  PyObject *__pyx_kp_u_prefix_cannot_be_used_together;
  PyObject *__pyx_n_s_prefixed_db;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_prev;
  PyObject *__pyx_n_s_put;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_PrefixedDB;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ranges;
  PyObject *__pyx_n_s_raw_iterator;
  PyObject *__pyx_n_s_read_options;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_ref;
  PyObject *__pyx_n_s_release;
  PyObject *__pyx_n_s_repair_db;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_reverse;
  PyObject *__pyx_n_s_seek;
  PyObject *__pyx_n_s_seek_to_first;
  PyObject *__pyx_n_s_seek_to_last;
  PyObject *__pyx_n_s_seek_to_start;
  PyObject *__pyx_n_s_seek_to_stop;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__db_self_options_cannot_be;
  PyObject *__pyx_kp_s_self__iter_cannot_be_converted_t;
  PyObject *__pyx_kp_s_self__iter_self_comparator_self;
  PyObject *__pyx_kp_s_self__snapshot_cannot_be_convert;
  PyObject *__pyx_kp_s_self__write_batch_self_write_opt;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_sizes;
  PyObject *__pyx_n_s_sl;
  PyObject *__pyx_n_u_snappy;
  PyObject *__pyx_n_s_snapshot;
  PyObject *__pyx_n_s_source;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_st;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_start_slice;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_stop_slice;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_sync;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_target;
  PyObject *__pyx_n_s_target_slice;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_threading;
  PyObject *__pyx_n_s_transaction;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_valid;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_value_buffer;
  PyObject *__pyx_n_s_verify_checksums;
  PyObject *__pyx_n_s_weakref;
  PyObject *__pyx_n_s_weakref_ref;
  PyObject *__pyx_n_s_wr;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_write_batch;
  PyObject *__pyx_n_s_write_buffer_size;
  PyObject *__pyx_n_s_write_options;
  PyObject *__pyx_n_s_xrange;
  PyObject *__pyx_int_18786289;
  PyObject *__pyx_int_146446941;
  PyObject *__pyx_int_245107514;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__114;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_DB);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_DB);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_PrefixedDB);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_BaseIterator);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_BaseIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_Iterator);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_Iterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_RawIterator);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_RawIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel_Snapshot);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel_Snapshot);
  Py_CLEAR(clear_module_state->__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__);
  Py_CLEAR(clear_module_state->__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseIterator_close);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_convert_unicode_name_to_a);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_operate_on_closed_LevelDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_CorruptionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_approximate_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_approximate_sizes);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_compact_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_get_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_prefixed_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_raw_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_DB_write_batch);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Database_is_closed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Database_or_iterator_is_closed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Database_or_snapshot_is_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_Error);
  Py_CLEAR(clear_module_state->__pyx_n_s_IOError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_IteratorInvalidError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator_seek_to_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_Iterator_seek_to_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lock);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_prefixed_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_PrefixedDB_write_batch);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_next);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_seek_to_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_seek_to_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_valid);
  Py_CLEAR(clear_module_state->__pyx_n_s_RawIterator_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot_raw_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_Snapshot_release);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Start_and_stop_of_range_must_be);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_UTF_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_UnicodeEncodeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_approximate_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_WriteBatch_write);
  Py_CLEAR(clear_module_state->__pyx_n_s__115);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_n_s__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_approximate_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_approximate_sizes);
  Py_CLEAR(clear_module_state->__pyx_n_u_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at_0x);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_restart_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_bloom_filter_bits);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_ranges);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_closed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_closed_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_compact_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_comparator);
  Py_CLEAR(clear_module_state->__pyx_kp_u_comparator_and_comparator_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_comparator_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_compression);
  Py_CLEAR(clear_module_state->__pyx_kp_u_compression_must_be_None_or_a_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_compression_must_be_None_or_sna);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_if_missing);
  Py_CLEAR(clear_module_state->__pyx_kp_u_custom_comparator_object_must_be);
  Py_CLEAR(clear_module_state->__pyx_n_u_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_db_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_default);
  Py_CLEAR(clear_module_state->__pyx_n_s_delete);
  Py_CLEAR(clear_module_state->__pyx_n_s_destroy_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_error_if_exists);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_tb);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_val);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_fill_cache);
  Py_CLEAR(clear_module_state->__pyx_n_s_fsname);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_getfilesystemencoding);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hex);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_include_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_include_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_include_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_include_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init___locals_lambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_leveldb_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_lru_cache_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_file_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_open_files);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_ranges);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_name_arg_must_be_a_byte_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_next);
  Py_CLEAR(clear_module_state->__pyx_n_s_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_paranoid_checks);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_kp_u_plyvel_DB_with_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_plyvel_PrefixedDB_with_prefix);
  Py_CLEAR(clear_module_state->__pyx_n_s_plyvel__plyvel);
  Py_CLEAR(clear_module_state->__pyx_kp_s_plyvel__plyvel_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_pop);
  Py_CLEAR(clear_module_state->__pyx_n_s_popitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefix);
  Py_CLEAR(clear_module_state->__pyx_kp_u_prefix_cannot_be_used_together);
  Py_CLEAR(clear_module_state->__pyx_n_s_prefixed_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_prev);
  Py_CLEAR(clear_module_state->__pyx_n_s_put);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_PrefixedDB);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ranges);
  Py_CLEAR(clear_module_state->__pyx_n_s_raw_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_release);
  Py_CLEAR(clear_module_state->__pyx_n_s_repair_db);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_reverse);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_first);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_last);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_seek_to_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__db_self_options_cannot_be);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__iter_cannot_be_converted_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__iter_self_comparator_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__snapshot_cannot_be_convert);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__write_batch_self_write_opt);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizes);
  Py_CLEAR(clear_module_state->__pyx_n_s_sl);
  Py_CLEAR(clear_module_state->__pyx_n_u_snappy);
  Py_CLEAR(clear_module_state->__pyx_n_s_snapshot);
  Py_CLEAR(clear_module_state->__pyx_n_s_source);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_st);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_slice);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_sync);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_target);
  Py_CLEAR(clear_module_state->__pyx_n_s_target_slice);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_threading);
  Py_CLEAR(clear_module_state->__pyx_n_s_transaction);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_valid);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_value_buffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_verify_checksums);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_wr);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_batch);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_buffer_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_write_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_xrange);
  Py_CLEAR(clear_module_state->__pyx_int_18786289);
  Py_CLEAR(clear_module_state->__pyx_int_146446941);
  Py_CLEAR(clear_module_state->__pyx_int_245107514);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__70);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_DB);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_DB);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_PrefixedDB);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_BaseIterator);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_BaseIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_Iterator);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_Iterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_RawIterator);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_RawIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel_Snapshot);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel_Snapshot);
  Py_VISIT(traverse_module_state->__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__);
  Py_VISIT(traverse_module_state->__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseIterator_close);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_convert_unicode_name_to_a);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_operate_on_closed_LevelDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_CorruptionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_approximate_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_approximate_sizes);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_compact_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_get_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_prefixed_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_raw_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_DB_write_batch);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Database_is_closed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Database_or_iterator_is_closed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Database_or_snapshot_is_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_Error);
  Py_VISIT(traverse_module_state->__pyx_n_s_IOError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_IteratorInvalidError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator_seek_to_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_Iterator_seek_to_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lock);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_prefixed_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_PrefixedDB_write_batch);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_next);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_seek_to_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_seek_to_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_valid);
  Py_VISIT(traverse_module_state->__pyx_n_s_RawIterator_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot_raw_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_Snapshot_release);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Start_and_stop_of_range_must_be);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_UTF_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_UnicodeEncodeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_approximate_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_WriteBatch_write);
  Py_VISIT(traverse_module_state->__pyx_n_s__115);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_n_s__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_approximate_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_approximate_sizes);
  Py_VISIT(traverse_module_state->__pyx_n_u_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at_0x);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_restart_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_bloom_filter_bits);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_ranges);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_closed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_closed_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_compact_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_comparator);
  Py_VISIT(traverse_module_state->__pyx_kp_u_comparator_and_comparator_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_comparator_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_compression);
  Py_VISIT(traverse_module_state->__pyx_kp_u_compression_must_be_None_or_a_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_compression_must_be_None_or_sna);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_if_missing);
  Py_VISIT(traverse_module_state->__pyx_kp_u_custom_comparator_object_must_be);
  Py_VISIT(traverse_module_state->__pyx_n_u_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_db_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_default);
  Py_VISIT(traverse_module_state->__pyx_n_s_delete);
  Py_VISIT(traverse_module_state->__pyx_n_s_destroy_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_error_if_exists);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_tb);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_val);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_fill_cache);
  Py_VISIT(traverse_module_state->__pyx_n_s_fsname);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_getfilesystemencoding);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hex);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_include_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_include_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_include_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_include_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init___locals_lambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_leveldb_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_lru_cache_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_file_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_open_files);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_ranges);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_name_arg_must_be_a_byte_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_next);
  Py_VISIT(traverse_module_state->__pyx_n_s_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_paranoid_checks);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_kp_u_plyvel_DB_with_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_plyvel_PrefixedDB_with_prefix);
  Py_VISIT(traverse_module_state->__pyx_n_s_plyvel__plyvel);
  Py_VISIT(traverse_module_state->__pyx_kp_s_plyvel__plyvel_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_pop);
  Py_VISIT(traverse_module_state->__pyx_n_s_popitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefix);
  Py_VISIT(traverse_module_state->__pyx_kp_u_prefix_cannot_be_used_together);
  Py_VISIT(traverse_module_state->__pyx_n_s_prefixed_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_prev);
  Py_VISIT(traverse_module_state->__pyx_n_s_put);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_PrefixedDB);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ranges);
  Py_VISIT(traverse_module_state->__pyx_n_s_raw_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_release);
  Py_VISIT(traverse_module_state->__pyx_n_s_repair_db);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_reverse);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_first);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_last);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_seek_to_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__db_self_options_cannot_be);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__iter_cannot_be_converted_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__iter_self_comparator_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__snapshot_cannot_be_convert);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__write_batch_self_write_opt);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizes);
  Py_VISIT(traverse_module_state->__pyx_n_s_sl);
  Py_VISIT(traverse_module_state->__pyx_n_u_snappy);
  Py_VISIT(traverse_module_state->__pyx_n_s_snapshot);
  Py_VISIT(traverse_module_state->__pyx_n_s_source);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_st);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_slice);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_sync);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_target);
  Py_VISIT(traverse_module_state->__pyx_n_s_target_slice);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_threading);
  Py_VISIT(traverse_module_state->__pyx_n_s_transaction);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_valid);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_value_buffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_verify_checksums);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_wr);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_batch);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_buffer_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_write_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_xrange);
  Py_VISIT(traverse_module_state->__pyx_int_18786289);
  Py_VISIT(traverse_module_state->__pyx_int_146446941);
  Py_VISIT(traverse_module_state->__pyx_int_245107514);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__70);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_6plyvel_7_plyvel_DB __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_DB
#define __pyx_type_6plyvel_7_plyvel_PrefixedDB __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_PrefixedDB
#define __pyx_type_6plyvel_7_plyvel_WriteBatch __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_WriteBatch
#define __pyx_type_6plyvel_7_plyvel_BaseIterator __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_BaseIterator
#define __pyx_type_6plyvel_7_plyvel_Iterator __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_Iterator
#define __pyx_type_6plyvel_7_plyvel_RawIterator __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_RawIterator
#define __pyx_type_6plyvel_7_plyvel_Snapshot __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel_Snapshot
#define __pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__ __pyx_mstate_global->__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__
#endif
#define __pyx_ptype_6plyvel_7_plyvel_DB __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_DB
#define __pyx_ptype_6plyvel_7_plyvel_PrefixedDB __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_PrefixedDB
#define __pyx_ptype_6plyvel_7_plyvel_WriteBatch __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_WriteBatch
#define __pyx_ptype_6plyvel_7_plyvel_BaseIterator __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_BaseIterator
#define __pyx_ptype_6plyvel_7_plyvel_Iterator __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_Iterator
#define __pyx_ptype_6plyvel_7_plyvel_RawIterator __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_RawIterator
#define __pyx_ptype_6plyvel_7_plyvel_Snapshot __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel_Snapshot
#define __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__ __pyx_mstate_global->__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_BaseIterator __pyx_mstate_global->__pyx_n_s_BaseIterator
#define __pyx_n_s_BaseIterator___enter __pyx_mstate_global->__pyx_n_s_BaseIterator___enter
#define __pyx_n_s_BaseIterator___exit __pyx_mstate_global->__pyx_n_s_BaseIterator___exit
#define __pyx_n_s_BaseIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_BaseIterator___reduce_cython
#define __pyx_n_s_BaseIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_BaseIterator___setstate_cython
#define __pyx_n_s_BaseIterator_close __pyx_mstate_global->__pyx_n_s_BaseIterator_close
#define __pyx_kp_u_Cannot_convert_unicode_name_to_a __pyx_mstate_global->__pyx_kp_u_Cannot_convert_unicode_name_to_a
#define __pyx_kp_u_Cannot_operate_on_closed_LevelDB __pyx_mstate_global->__pyx_kp_u_Cannot_operate_on_closed_LevelDB
#define __pyx_n_s_CorruptionError __pyx_mstate_global->__pyx_n_s_CorruptionError
#define __pyx_n_s_DB __pyx_mstate_global->__pyx_n_s_DB
#define __pyx_n_s_DB___enter __pyx_mstate_global->__pyx_n_s_DB___enter
#define __pyx_n_s_DB___exit __pyx_mstate_global->__pyx_n_s_DB___exit
#define __pyx_n_s_DB___reduce_cython __pyx_mstate_global->__pyx_n_s_DB___reduce_cython
#define __pyx_n_s_DB___setstate_cython __pyx_mstate_global->__pyx_n_s_DB___setstate_cython
#define __pyx_n_s_DB_approximate_size __pyx_mstate_global->__pyx_n_s_DB_approximate_size
#define __pyx_n_s_DB_approximate_sizes __pyx_mstate_global->__pyx_n_s_DB_approximate_sizes
#define __pyx_n_s_DB_close __pyx_mstate_global->__pyx_n_s_DB_close
#define __pyx_n_s_DB_compact_range __pyx_mstate_global->__pyx_n_s_DB_compact_range
#define __pyx_n_s_DB_delete __pyx_mstate_global->__pyx_n_s_DB_delete
#define __pyx_n_s_DB_get __pyx_mstate_global->__pyx_n_s_DB_get
#define __pyx_n_s_DB_get_property __pyx_mstate_global->__pyx_n_s_DB_get_property
#define __pyx_n_s_DB_iterator __pyx_mstate_global->__pyx_n_s_DB_iterator
#define __pyx_n_s_DB_prefixed_db __pyx_mstate_global->__pyx_n_s_DB_prefixed_db
#define __pyx_n_s_DB_put __pyx_mstate_global->__pyx_n_s_DB_put
#define __pyx_n_s_DB_raw_iterator __pyx_mstate_global->__pyx_n_s_DB_raw_iterator
#define __pyx_n_s_DB_snapshot __pyx_mstate_global->__pyx_n_s_DB_snapshot
#define __pyx_n_s_DB_write_batch __pyx_mstate_global->__pyx_n_s_DB_write_batch
#define __pyx_kp_u_Database_is_closed __pyx_mstate_global->__pyx_kp_u_Database_is_closed
#define __pyx_kp_u_Database_or_iterator_is_closed __pyx_mstate_global->__pyx_kp_u_Database_or_iterator_is_closed
#define __pyx_kp_u_Database_or_snapshot_is_closed __pyx_mstate_global->__pyx_kp_u_Database_or_snapshot_is_closed
#define __pyx_n_s_Error __pyx_mstate_global->__pyx_n_s_Error
#define __pyx_n_s_IOError __pyx_mstate_global->__pyx_n_s_IOError
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_Iterator __pyx_mstate_global->__pyx_n_s_Iterator
#define __pyx_n_s_IteratorInvalidError __pyx_mstate_global->__pyx_n_s_IteratorInvalidError
#define __pyx_n_s_Iterator___reduce_cython __pyx_mstate_global->__pyx_n_s_Iterator___reduce_cython
#define __pyx_n_s_Iterator___setstate_cython __pyx_mstate_global->__pyx_n_s_Iterator___setstate_cython
#define __pyx_n_s_Iterator_prev __pyx_mstate_global->__pyx_n_s_Iterator_prev
#define __pyx_n_s_Iterator_seek __pyx_mstate_global->__pyx_n_s_Iterator_seek
#define __pyx_n_s_Iterator_seek_to_start __pyx_mstate_global->__pyx_n_s_Iterator_seek_to_start
#define __pyx_n_s_Iterator_seek_to_stop __pyx_mstate_global->__pyx_n_s_Iterator_seek_to_stop
#define __pyx_n_s_Lock __pyx_mstate_global->__pyx_n_s_Lock
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_PrefixedDB __pyx_mstate_global->__pyx_n_s_PrefixedDB
#define __pyx_n_s_PrefixedDB___reduce_cython __pyx_mstate_global->__pyx_n_s_PrefixedDB___reduce_cython
#define __pyx_n_s_PrefixedDB___setstate_cython __pyx_mstate_global->__pyx_n_s_PrefixedDB___setstate_cython
#define __pyx_n_s_PrefixedDB_delete __pyx_mstate_global->__pyx_n_s_PrefixedDB_delete
#define __pyx_n_s_PrefixedDB_get __pyx_mstate_global->__pyx_n_s_PrefixedDB_get
#define __pyx_n_s_PrefixedDB_iterator __pyx_mstate_global->__pyx_n_s_PrefixedDB_iterator
#define __pyx_n_s_PrefixedDB_prefixed_db __pyx_mstate_global->__pyx_n_s_PrefixedDB_prefixed_db
#define __pyx_n_s_PrefixedDB_put __pyx_mstate_global->__pyx_n_s_PrefixedDB_put
#define __pyx_n_s_PrefixedDB_snapshot __pyx_mstate_global->__pyx_n_s_PrefixedDB_snapshot
#define __pyx_n_s_PrefixedDB_write_batch __pyx_mstate_global->__pyx_n_s_PrefixedDB_write_batch
#define __pyx_n_s_RawIterator __pyx_mstate_global->__pyx_n_s_RawIterator
#define __pyx_n_s_RawIterator___reduce_cython __pyx_mstate_global->__pyx_n_s_RawIterator___reduce_cython
#define __pyx_n_s_RawIterator___setstate_cython __pyx_mstate_global->__pyx_n_s_RawIterator___setstate_cython
#define __pyx_n_s_RawIterator_item __pyx_mstate_global->__pyx_n_s_RawIterator_item
#define __pyx_n_s_RawIterator_key __pyx_mstate_global->__pyx_n_s_RawIterator_key
#define __pyx_n_s_RawIterator_next __pyx_mstate_global->__pyx_n_s_RawIterator_next
#define __pyx_n_s_RawIterator_prev __pyx_mstate_global->__pyx_n_s_RawIterator_prev
#define __pyx_n_s_RawIterator_seek __pyx_mstate_global->__pyx_n_s_RawIterator_seek
#define __pyx_n_s_RawIterator_seek_to_first __pyx_mstate_global->__pyx_n_s_RawIterator_seek_to_first
#define __pyx_n_s_RawIterator_seek_to_last __pyx_mstate_global->__pyx_n_s_RawIterator_seek_to_last
#define __pyx_n_s_RawIterator_valid __pyx_mstate_global->__pyx_n_s_RawIterator_valid
#define __pyx_n_s_RawIterator_value __pyx_mstate_global->__pyx_n_s_RawIterator_value
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_Snapshot __pyx_mstate_global->__pyx_n_s_Snapshot
#define __pyx_n_s_Snapshot___enter __pyx_mstate_global->__pyx_n_s_Snapshot___enter
#define __pyx_n_s_Snapshot___exit __pyx_mstate_global->__pyx_n_s_Snapshot___exit
#define __pyx_n_s_Snapshot___reduce_cython __pyx_mstate_global->__pyx_n_s_Snapshot___reduce_cython
#define __pyx_n_s_Snapshot___setstate_cython __pyx_mstate_global->__pyx_n_s_Snapshot___setstate_cython
#define __pyx_n_s_Snapshot_close __pyx_mstate_global->__pyx_n_s_Snapshot_close
#define __pyx_n_s_Snapshot_get __pyx_mstate_global->__pyx_n_s_Snapshot_get
#define __pyx_n_s_Snapshot_iterator __pyx_mstate_global->__pyx_n_s_Snapshot_iterator
#define __pyx_n_s_Snapshot_raw_iterator __pyx_mstate_global->__pyx_n_s_Snapshot_raw_iterator
#define __pyx_n_s_Snapshot_release __pyx_mstate_global->__pyx_n_s_Snapshot_release
#define __pyx_kp_u_Start_and_stop_of_range_must_be __pyx_mstate_global->__pyx_kp_u_Start_and_stop_of_range_must_be
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_UTF_8 __pyx_mstate_global->__pyx_kp_u_UTF_8
#define __pyx_n_s_UnicodeEncodeError __pyx_mstate_global->__pyx_n_s_UnicodeEncodeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_WriteBatch __pyx_mstate_global->__pyx_n_s_WriteBatch
#define __pyx_n_s_WriteBatch___enter __pyx_mstate_global->__pyx_n_s_WriteBatch___enter
#define __pyx_n_s_WriteBatch___exit __pyx_mstate_global->__pyx_n_s_WriteBatch___exit
#define __pyx_n_s_WriteBatch___reduce_cython __pyx_mstate_global->__pyx_n_s_WriteBatch___reduce_cython
#define __pyx_n_s_WriteBatch___setstate_cython __pyx_mstate_global->__pyx_n_s_WriteBatch___setstate_cython
#define __pyx_n_s_WriteBatch_append __pyx_mstate_global->__pyx_n_s_WriteBatch_append
#define __pyx_n_s_WriteBatch_approximate_size __pyx_mstate_global->__pyx_n_s_WriteBatch_approximate_size
#define __pyx_n_s_WriteBatch_clear __pyx_mstate_global->__pyx_n_s_WriteBatch_clear
#define __pyx_n_s_WriteBatch_delete __pyx_mstate_global->__pyx_n_s_WriteBatch_delete
#define __pyx_n_s_WriteBatch_put __pyx_mstate_global->__pyx_n_s_WriteBatch_put
#define __pyx_n_s_WriteBatch_write __pyx_mstate_global->__pyx_n_s_WriteBatch_write
#define __pyx_n_s__115 __pyx_mstate_global->__pyx_n_s__115
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_n_s__17 __pyx_mstate_global->__pyx_n_s__17
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_approximate_size __pyx_mstate_global->__pyx_n_s_approximate_size
#define __pyx_n_s_approximate_sizes __pyx_mstate_global->__pyx_n_s_approximate_sizes
#define __pyx_n_u_ascii __pyx_mstate_global->__pyx_n_u_ascii
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_kp_u_at_0x __pyx_mstate_global->__pyx_kp_u_at_0x
#define __pyx_n_s_block_restart_interval __pyx_mstate_global->__pyx_n_s_block_restart_interval
#define __pyx_n_s_block_size __pyx_mstate_global->__pyx_n_s_block_size
#define __pyx_n_s_bloom_filter_bits __pyx_mstate_global->__pyx_n_s_bloom_filter_bits
#define __pyx_n_s_c_ranges __pyx_mstate_global->__pyx_n_s_c_ranges
#define __pyx_n_s_clear __pyx_mstate_global->__pyx_n_s_clear
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_closed __pyx_mstate_global->__pyx_n_s_closed
#define __pyx_kp_u_closed_2 __pyx_mstate_global->__pyx_kp_u_closed_2
#define __pyx_n_s_compact_range __pyx_mstate_global->__pyx_n_s_compact_range
#define __pyx_n_s_comparator __pyx_mstate_global->__pyx_n_s_comparator
#define __pyx_kp_u_comparator_and_comparator_name __pyx_mstate_global->__pyx_kp_u_comparator_and_comparator_name
#define __pyx_n_s_comparator_name __pyx_mstate_global->__pyx_n_s_comparator_name
#define __pyx_n_s_compression __pyx_mstate_global->__pyx_n_s_compression
#define __pyx_kp_u_compression_must_be_None_or_a_s __pyx_mstate_global->__pyx_kp_u_compression_must_be_None_or_a_s
#define __pyx_kp_u_compression_must_be_None_or_sna __pyx_mstate_global->__pyx_kp_u_compression_must_be_None_or_sna
#define __pyx_n_s_create_if_missing __pyx_mstate_global->__pyx_n_s_create_if_missing
#define __pyx_kp_u_custom_comparator_object_must_be __pyx_mstate_global->__pyx_kp_u_custom_comparator_object_must_be
#define __pyx_n_u_d __pyx_mstate_global->__pyx_n_u_d
#define __pyx_n_s_db __pyx_mstate_global->__pyx_n_s_db
#define __pyx_n_s_db_prefix __pyx_mstate_global->__pyx_n_s_db_prefix
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_s_default __pyx_mstate_global->__pyx_n_s_default
#define __pyx_n_s_delete __pyx_mstate_global->__pyx_n_s_delete
#define __pyx_n_s_destroy_db __pyx_mstate_global->__pyx_n_s_destroy_db
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_error_if_exists __pyx_mstate_global->__pyx_n_s_error_if_exists
#define __pyx_n_s_exc_tb __pyx_mstate_global->__pyx_n_s_exc_tb
#define __pyx_n_s_exc_type __pyx_mstate_global->__pyx_n_s_exc_type
#define __pyx_n_s_exc_val __pyx_mstate_global->__pyx_n_s_exc_val
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_fill_cache __pyx_mstate_global->__pyx_n_s_fill_cache
#define __pyx_n_s_fsname __pyx_mstate_global->__pyx_n_s_fsname
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_get_property __pyx_mstate_global->__pyx_n_s_get_property
#define __pyx_n_s_getfilesystemencoding __pyx_mstate_global->__pyx_n_s_getfilesystemencoding
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_hex __pyx_mstate_global->__pyx_n_s_hex
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_include_key __pyx_mstate_global->__pyx_n_s_include_key
#define __pyx_n_s_include_start __pyx_mstate_global->__pyx_n_s_include_start
#define __pyx_n_s_include_stop __pyx_mstate_global->__pyx_n_s_include_stop
#define __pyx_n_s_include_value __pyx_mstate_global->__pyx_n_s_include_value
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init___locals_lambda __pyx_mstate_global->__pyx_n_s_init___locals_lambda
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_item __pyx_mstate_global->__pyx_n_s_item
#define __pyx_n_s_iterator __pyx_mstate_global->__pyx_n_s_iterator
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_key_slice __pyx_mstate_global->__pyx_n_s_key_slice
#define __pyx_n_s_leveldb_version __pyx_mstate_global->__pyx_n_s_leveldb_version
#define __pyx_n_s_lru_cache_size __pyx_mstate_global->__pyx_n_s_lru_cache_size
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_max_file_size __pyx_mstate_global->__pyx_n_s_max_file_size
#define __pyx_n_s_max_open_files __pyx_mstate_global->__pyx_n_s_max_open_files
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_n_ranges __pyx_mstate_global->__pyx_n_s_n_ranges
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_kp_u_name_arg_must_be_a_byte_string __pyx_mstate_global->__pyx_kp_u_name_arg_must_be_a_byte_string
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_next __pyx_mstate_global->__pyx_n_s_next
#define __pyx_n_s_options __pyx_mstate_global->__pyx_n_s_options
#define __pyx_n_s_paranoid_checks __pyx_mstate_global->__pyx_n_s_paranoid_checks
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_kp_u_plyvel_DB_with_name __pyx_mstate_global->__pyx_kp_u_plyvel_DB_with_name
#define __pyx_kp_u_plyvel_PrefixedDB_with_prefix __pyx_mstate_global->__pyx_kp_u_plyvel_PrefixedDB_with_prefix
#define __pyx_n_s_plyvel__plyvel __pyx_mstate_global->__pyx_n_s_plyvel__plyvel
#define __pyx_kp_s_plyvel__plyvel_pyx __pyx_mstate_global->__pyx_kp_s_plyvel__plyvel_pyx
#define __pyx_n_s_pop __pyx_mstate_global->__pyx_n_s_pop
#define __pyx_n_s_popitem __pyx_mstate_global->__pyx_n_s_popitem
#define __pyx_n_s_prefix __pyx_mstate_global->__pyx_n_s_prefix
#define __pyx_kp_u_prefix_cannot_be_used_together __pyx_mstate_global->__pyx_kp_u_prefix_cannot_be_used_together
#define __pyx_n_s_prefixed_db __pyx_mstate_global->__pyx_n_s_prefixed_db
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_prev __pyx_mstate_global->__pyx_n_s_prev
#define __pyx_n_s_put __pyx_mstate_global->__pyx_n_s_put
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_PrefixedDB __pyx_mstate_global->__pyx_n_s_pyx_unpickle_PrefixedDB
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ranges __pyx_mstate_global->__pyx_n_s_ranges
#define __pyx_n_s_raw_iterator __pyx_mstate_global->__pyx_n_s_raw_iterator
#define __pyx_n_s_read_options __pyx_mstate_global->__pyx_n_s_read_options
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_ref __pyx_mstate_global->__pyx_n_s_ref
#define __pyx_n_s_release __pyx_mstate_global->__pyx_n_s_release
#define __pyx_n_s_repair_db __pyx_mstate_global->__pyx_n_s_repair_db
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_reverse __pyx_mstate_global->__pyx_n_s_reverse
#define __pyx_n_s_seek __pyx_mstate_global->__pyx_n_s_seek
#define __pyx_n_s_seek_to_first __pyx_mstate_global->__pyx_n_s_seek_to_first
#define __pyx_n_s_seek_to_last __pyx_mstate_global->__pyx_n_s_seek_to_last
#define __pyx_n_s_seek_to_start __pyx_mstate_global->__pyx_n_s_seek_to_start
#define __pyx_n_s_seek_to_stop __pyx_mstate_global->__pyx_n_s_seek_to_stop
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__db_self_options_cannot_be __pyx_mstate_global->__pyx_kp_s_self__db_self_options_cannot_be
#define __pyx_kp_s_self__iter_cannot_be_converted_t __pyx_mstate_global->__pyx_kp_s_self__iter_cannot_be_converted_t
#define __pyx_kp_s_self__iter_self_comparator_self __pyx_mstate_global->__pyx_kp_s_self__iter_self_comparator_self
#define __pyx_kp_s_self__snapshot_cannot_be_convert __pyx_mstate_global->__pyx_kp_s_self__snapshot_cannot_be_convert
#define __pyx_kp_s_self__write_batch_self_write_opt __pyx_mstate_global->__pyx_kp_s_self__write_batch_self_write_opt
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_sizes __pyx_mstate_global->__pyx_n_s_sizes
#define __pyx_n_s_sl __pyx_mstate_global->__pyx_n_s_sl
#define __pyx_n_u_snappy __pyx_mstate_global->__pyx_n_u_snappy
#define __pyx_n_s_snapshot __pyx_mstate_global->__pyx_n_s_snapshot
#define __pyx_n_s_source __pyx_mstate_global->__pyx_n_s_source
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_st __pyx_mstate_global->__pyx_n_s_st
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_start_slice __pyx_mstate_global->__pyx_n_s_start_slice
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_stop_slice __pyx_mstate_global->__pyx_n_s_stop_slice
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_sync __pyx_mstate_global->__pyx_n_s_sync
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_target __pyx_mstate_global->__pyx_n_s_target
#define __pyx_n_s_target_slice __pyx_mstate_global->__pyx_n_s_target_slice
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_threading __pyx_mstate_global->__pyx_n_s_threading
#define __pyx_n_s_transaction __pyx_mstate_global->__pyx_n_s_transaction
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_valid __pyx_mstate_global->__pyx_n_s_valid
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_value_buffer __pyx_mstate_global->__pyx_n_s_value_buffer
#define __pyx_n_s_verify_checksums __pyx_mstate_global->__pyx_n_s_verify_checksums
#define __pyx_n_s_weakref __pyx_mstate_global->__pyx_n_s_weakref
#define __pyx_n_s_weakref_ref __pyx_mstate_global->__pyx_n_s_weakref_ref
#define __pyx_n_s_wr __pyx_mstate_global->__pyx_n_s_wr
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_write_batch __pyx_mstate_global->__pyx_n_s_write_batch
#define __pyx_n_s_write_buffer_size __pyx_mstate_global->__pyx_n_s_write_buffer_size
#define __pyx_n_s_write_options __pyx_mstate_global->__pyx_n_s_write_options
#define __pyx_n_s_xrange __pyx_mstate_global->__pyx_n_s_xrange
#define __pyx_int_18786289 __pyx_mstate_global->__pyx_int_18786289
#define __pyx_int_146446941 __pyx_mstate_global->__pyx_int_146446941
#define __pyx_int_245107514 __pyx_mstate_global->__pyx_int_245107514
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__70 __pyx_mstate_global->__pyx_codeobj__70
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
/* #### Code section: module_code ### */

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 1);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 1);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 1);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 1);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 1);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":83
 * 
 * 
 * cdef int raise_for_status(Status st) except -1:             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return 0
 */

static int __pyx_f_6plyvel_7_plyvel_raise_for_status(leveldb::Status __pyx_v_st) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("raise_for_status", 1);

  /* "plyvel/_plyvel.pyx":84
 * 
 * cdef int raise_for_status(Status st) except -1:
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_t_1 = (__pyx_v_st.ok() != 0);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":85
 * cdef int raise_for_status(Status st) except -1:
 *     if st.ok():
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     if st.IsIOError():
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":84
 * 
 * cdef int raise_for_status(Status st) except -1:
 *     if st.ok():             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":87
 *         return 0
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise IOError(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsIOError() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":88
 * 
 *     if st.IsIOError():
 *         raise IOError(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     if st.IsCorruption():
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IOError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_st.ToString()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":87
 *         return 0
 * 
 *     if st.IsIOError():             # <<<<<<<<<<<<<<
 *         raise IOError(st.ToString())
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":90
 *         raise IOError(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise CorruptionError(st.ToString())
 * 
 */
  __pyx_t_1 = (__pyx_v_st.IsCorruption() != 0);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":91
 * 
 *     if st.IsCorruption():
 *         raise CorruptionError(st.ToString())             # <<<<<<<<<<<<<<
 * 
 *     # Generic fallback
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CorruptionError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_st.ToString()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 91, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":90
 *         raise IOError(st.ToString())
 * 
 *     if st.IsCorruption():             # <<<<<<<<<<<<<<
 *         raise CorruptionError(st.ToString())
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":94
 * 
 *     # Generic fallback
 *     raise Error(st.ToString())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_st.ToString()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 94, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":83
 * 
 * 
 * cdef int raise_for_status(Status st) except -1:             # <<<<<<<<<<<<<<
 *     if st.ok():
 *         return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.raise_for_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":101
 * #
 * 
 * cdef inline db_get(DB db, bytes key, object default, ReadOptions read_options):             # <<<<<<<<<<<<<<
 *     cdef string value
 *     cdef Status st
 */

static CYTHON_INLINE PyObject *__pyx_f_6plyvel_7_plyvel_db_get(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_key, PyObject *__pyx_v_default, leveldb::ReadOptions __pyx_v_read_options) {
  std::string __pyx_v_value;
  leveldb::Status __pyx_v_st;
  leveldb::Slice __pyx_v_key_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("db_get", 1);

  /* "plyvel/_plyvel.pyx":104
 *     cdef string value
 *     cdef Status st
 *     cdef Slice key_slice = Slice(key, len(key))             # <<<<<<<<<<<<<<
 * 
 *     with nogil:
 */
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L1_error)
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_GET_SIZE(__pyx_v_key); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_v_key_slice = leveldb::Slice(__pyx_t_1, __pyx_t_2);

  /* "plyvel/_plyvel.pyx":106
 *     cdef Slice key_slice = Slice(key, len(key))
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = db._db.Get(read_options, key_slice, &value)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":107
 * 
 *     with nogil:
 *         st = db._db.Get(read_options, key_slice, &value)             # <<<<<<<<<<<<<<
 * 
 *     if st.IsNotFound():
 */
        __pyx_v_st = __pyx_v_db->_db->Get(__pyx_v_read_options, __pyx_v_key_slice, (&__pyx_v_value));
      }

      /* "plyvel/_plyvel.pyx":106
 *     cdef Slice key_slice = Slice(key, len(key))
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = db._db.Get(read_options, key_slice, &value)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "plyvel/_plyvel.pyx":109
 *         st = db._db.Get(read_options, key_slice, &value)
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         return default
 *     raise_for_status(st)
 */
  __pyx_t_3 = (__pyx_v_st.IsNotFound() != 0);
  if (__pyx_t_3) {

    /* "plyvel/_plyvel.pyx":110
 * 
 *     if st.IsNotFound():
 *         return default             # <<<<<<<<<<<<<<
 *     raise_for_status(st)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_default);
    __pyx_r = __pyx_v_default;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":109
 *         st = db._db.Get(read_options, key_slice, &value)
 * 
 *     if st.IsNotFound():             # <<<<<<<<<<<<<<
 *         return default
 *     raise_for_status(st)
 */
  }

  /* "plyvel/_plyvel.pyx":111
 *     if st.IsNotFound():
 *         return default
 *     raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 *     return value
 */
  __pyx_t_4 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":113
 *     raise_for_status(st)
 * 
 *     return value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":101
 * #
 * 
 * cdef inline db_get(DB db, bytes key, object default, ReadOptions read_options):             # <<<<<<<<<<<<<<
 *     cdef string value
 *     cdef Status st
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.db_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":116
 * 
 * 
 * cdef bytes to_file_system_name(name):             # <<<<<<<<<<<<<<
 *     if isinstance(name, bytes):
 *         return name
 */

static PyObject *__pyx_f_6plyvel_7_plyvel_to_file_system_name(PyObject *__pyx_v_name) {
  PyObject *__pyx_v_encoding = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_file_system_name", 1);

  /* "plyvel/_plyvel.pyx":117
 * 
 * cdef bytes to_file_system_name(name):
 *     if isinstance(name, bytes):             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_name); 
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":118
 * cdef bytes to_file_system_name(name):
 *     if isinstance(name, bytes):
 *         return name             # <<<<<<<<<<<<<<
 * 
 *     if not isinstance(name, unicode):
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(PyBytes_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_v_name))) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_name);
    __pyx_r = ((PyObject*)__pyx_v_name);
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":117
 * 
 * cdef bytes to_file_system_name(name):
 *     if isinstance(name, bytes):             # <<<<<<<<<<<<<<
 *         return name
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":120
 *         return name
 * 
 *     if not isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             "'name' arg must be a byte string or a unicode string")
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_name); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "plyvel/_plyvel.pyx":121
 * 
 *     if not isinstance(name, unicode):
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             "'name' arg must be a byte string or a unicode string")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 121, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":120
 *         return name
 * 
 *     if not isinstance(name, unicode):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             "'name' arg must be a byte string or a unicode string")
 */
  }

  /* "plyvel/_plyvel.pyx":124
 *             "'name' arg must be a byte string or a unicode string")
 * 
 *     encoding = sys.getfilesystemencoding() or 'ascii'             # <<<<<<<<<<<<<<
 *     try:
 *         return name.encode(encoding)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_sys); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 124, __pyx_L1_error)
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_n_u_ascii);
  __pyx_t_3 = __pyx_n_u_ascii;
  __pyx_L5_bool_binop_done:;
  __pyx_v_encoding = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "plyvel/_plyvel.pyx":125
 * 
 *     encoding = sys.getfilesystemencoding() or 'ascii'
 *     try:             # <<<<<<<<<<<<<<
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "plyvel/_plyvel.pyx":126
 *     encoding = sys.getfilesystemencoding() or 'ascii'
 *     try:
 *         return name.encode(encoding)             # <<<<<<<<<<<<<<
 *     except UnicodeEncodeError as exc:
 *         raise ValueError(
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_encoding};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(0, 126, __pyx_L7_error)
      __pyx_r = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L11_try_return;

      /* "plyvel/_plyvel.pyx":125
 * 
 *     encoding = sys.getfilesystemencoding() or 'ascii'
 *     try:             # <<<<<<<<<<<<<<
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:
 */
    }
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "plyvel/_plyvel.pyx":127
 *     try:
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Cannot convert unicode 'name' to a file system name: %s" % exc)
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_UnicodeEncodeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("plyvel._plyvel.to_file_system_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 127, __pyx_L9_except_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_v_exc = __pyx_t_4;
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":129
 *     except UnicodeEncodeError as exc:
 *         raise ValueError(
 *             "Cannot convert unicode 'name' to a file system name: %s" % exc)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_5 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_convert_unicode_name_to_a, __pyx_v_exc); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_5);

        /* "plyvel/_plyvel.pyx":128
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Cannot convert unicode 'name' to a file system name: %s" % exc)
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 128, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(0, 128, __pyx_L18_error)
      }

      /* "plyvel/_plyvel.pyx":127
 *     try:
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Cannot convert unicode 'name' to a file system name: %s" % exc)
 */
      /*finally:*/ {
        __pyx_L18_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_7 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_exc); __pyx_v_exc = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L9_except_error;
        }
      }
    }
    goto __pyx_L9_except_error;

    /* "plyvel/_plyvel.pyx":125
 * 
 *     encoding = sys.getfilesystemencoding() or 'ascii'
 *     try:             # <<<<<<<<<<<<<<
 *         return name.encode(encoding)
 *     except UnicodeEncodeError as exc:
 */
    __pyx_L9_except_error:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L11_try_return:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L0;
  }

  /* "plyvel/_plyvel.pyx":116
 * 
 * 
 * cdef bytes to_file_system_name(name):             # <<<<<<<<<<<<<<
 *     if isinstance(name, bytes):
 *         return name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("plyvel._plyvel.to_file_system_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoding);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":132
 * 
 * 
 * cdef bytes bytes_increment(bytes s):             # <<<<<<<<<<<<<<
 *     # Increment the last byte that is not 0xff, and returned a new byte
 *     # string truncated after the position that was incremented. We use
 */

static PyObject *__pyx_f_6plyvel_7_plyvel_bytes_increment(PyObject *__pyx_v_s) {
  PyObject *__pyx_v_b = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_increment", 1);

  /* "plyvel/_plyvel.pyx":138
 *     # works the same in Python 2 and Python 3.
 * 
 *     b = bytearray(s)             # <<<<<<<<<<<<<<
 *     cdef int i = len(s) - 1
 *     while i >= 0:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_b = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":139
 * 
 *     b = bytearray(s)
 *     cdef int i = len(s) - 1             # <<<<<<<<<<<<<<
 *     while i >= 0:
 *         if b[i] == 0xff:
 */
  if (unlikely(__pyx_v_s == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 139, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_GET_SIZE(__pyx_v_s); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_v_i = (__pyx_t_2 - 1);

  /* "plyvel/_plyvel.pyx":140
 *     b = bytearray(s)
 *     cdef int i = len(s) - 1
 *     while i >= 0:             # <<<<<<<<<<<<<<
 *         if b[i] == 0xff:
 *             i = i - 1
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_i >= 0);
    if (!__pyx_t_3) break;

    /* "plyvel/_plyvel.pyx":141
 *     cdef int i = len(s) - 1
 *     while i >= 0:
 *         if b[i] == 0xff:             # <<<<<<<<<<<<<<
 *             i = i - 1
 *             continue
 */
    __pyx_t_4 = __Pyx_GetItemInt_ByteArray(__pyx_v_b, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_4 == 0xff);
    if (__pyx_t_3) {

      /* "plyvel/_plyvel.pyx":142
 *     while i >= 0:
 *         if b[i] == 0xff:
 *             i = i - 1             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "plyvel/_plyvel.pyx":143
 *         if b[i] == 0xff:
 *             i = i - 1
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         # Found byte smaller than 0xff: increment and truncate
 */
      goto __pyx_L3_continue;

      /* "plyvel/_plyvel.pyx":141
 *     cdef int i = len(s) - 1
 *     while i >= 0:
 *         if b[i] == 0xff:             # <<<<<<<<<<<<<<
 *             i = i - 1
 *             continue
 */
    }

    /* "plyvel/_plyvel.pyx":146
 * 
 *         # Found byte smaller than 0xff: increment and truncate
 *         b[i] += 1             # <<<<<<<<<<<<<<
 *         return bytes(b[:i + 1])
 * 
 */
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = __Pyx_GetItemInt_ByteArray(__pyx_v_b, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 146, __pyx_L1_error)
    if (unlikely((__pyx_t_5 + 1) < 0 || (__pyx_t_5 + 1) > 255)) {
      PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(0, 146, __pyx_L1_error)
    }
    if (unlikely((__Pyx_SetItemInt_ByteArray(__pyx_v_b, __pyx_t_4, ((unsigned char)(__pyx_t_5 + 1)), int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0))) __PYX_ERR(0, 146, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":147
 *         # Found byte smaller than 0xff: increment and truncate
 *         b[i] += 1
 *         return bytes(b[:i + 1])             # <<<<<<<<<<<<<<
 * 
 *     # Input contained only 0xff bytes
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_GetSlice(__pyx_v_b, 0, (__pyx_v_i + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L0;
    __pyx_L3_continue:;
  }

  /* "plyvel/_plyvel.pyx":150
 * 
 *     # Input contained only 0xff bytes
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":132
 * 
 * 
 * cdef bytes bytes_increment(bytes s):             # <<<<<<<<<<<<<<
 *     # Increment the last byte that is not 0xff, and returned a new byte
 *     # string truncated after the position that was incremented. We use
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("plyvel._plyvel.bytes_increment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":153
 * 
 * 
 * cdef int parse_options(Options *options, c_bool create_if_missing,             # <<<<<<<<<<<<<<
 *                        c_bool error_if_exists, object paranoid_checks,
 *                        object write_buffer_size, object max_open_files,
 */

static int __pyx_f_6plyvel_7_plyvel_parse_options(leveldb::Options *__pyx_v_options, bool __pyx_v_create_if_missing, bool __pyx_v_error_if_exists, PyObject *__pyx_v_paranoid_checks, PyObject *__pyx_v_write_buffer_size, PyObject *__pyx_v_max_open_files, PyObject *__pyx_v_lru_cache_size, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_max_file_size, PyObject *__pyx_v_compression, int __pyx_v_bloom_filter_bits, PyObject *__pyx_v_comparator, PyObject *__pyx_v_comparator_name) {
  size_t __pyx_v_c_lru_cache_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  const char *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_options", 0);
  __Pyx_INCREF(__pyx_v_compression);

  /* "plyvel/_plyvel.pyx":162
 *     cdef size_t c_lru_cache_size
 * 
 *     options.create_if_missing = create_if_missing             # <<<<<<<<<<<<<<
 *     options.error_if_exists = error_if_exists
 * 
 */
  __pyx_v_options->create_if_missing = __pyx_v_create_if_missing;

  /* "plyvel/_plyvel.pyx":163
 * 
 *     options.create_if_missing = create_if_missing
 *     options.error_if_exists = error_if_exists             # <<<<<<<<<<<<<<
 * 
 *     if paranoid_checks is not None:
 */
  __pyx_v_options->error_if_exists = __pyx_v_error_if_exists;

  /* "plyvel/_plyvel.pyx":165
 *     options.error_if_exists = error_if_exists
 * 
 *     if paranoid_checks is not None:             # <<<<<<<<<<<<<<
 *         options.paranoid_checks = paranoid_checks
 * 
 */
  __pyx_t_1 = (__pyx_v_paranoid_checks != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":166
 * 
 *     if paranoid_checks is not None:
 *         options.paranoid_checks = paranoid_checks             # <<<<<<<<<<<<<<
 * 
 *     if write_buffer_size is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_paranoid_checks); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
    __pyx_v_options->paranoid_checks = __pyx_t_2;

    /* "plyvel/_plyvel.pyx":165
 *     options.error_if_exists = error_if_exists
 * 
 *     if paranoid_checks is not None:             # <<<<<<<<<<<<<<
 *         options.paranoid_checks = paranoid_checks
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":168
 *         options.paranoid_checks = paranoid_checks
 * 
 *     if write_buffer_size is not None:             # <<<<<<<<<<<<<<
 *         options.write_buffer_size = write_buffer_size
 * 
 */
  __pyx_t_1 = (__pyx_v_write_buffer_size != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":169
 * 
 *     if write_buffer_size is not None:
 *         options.write_buffer_size = write_buffer_size             # <<<<<<<<<<<<<<
 * 
 *     if max_open_files is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_write_buffer_size); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
    __pyx_v_options->write_buffer_size = __pyx_t_3;

    /* "plyvel/_plyvel.pyx":168
 *         options.paranoid_checks = paranoid_checks
 * 
 *     if write_buffer_size is not None:             # <<<<<<<<<<<<<<
 *         options.write_buffer_size = write_buffer_size
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":171
 *         options.write_buffer_size = write_buffer_size
 * 
 *     if max_open_files is not None:             # <<<<<<<<<<<<<<
 *         options.max_open_files = max_open_files
 * 
 */
  __pyx_t_1 = (__pyx_v_max_open_files != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":172
 * 
 *     if max_open_files is not None:
 *         options.max_open_files = max_open_files             # <<<<<<<<<<<<<<
 * 
 *     if lru_cache_size is not None:
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_max_open_files); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L1_error)
    __pyx_v_options->max_open_files = __pyx_t_4;

    /* "plyvel/_plyvel.pyx":171
 *         options.write_buffer_size = write_buffer_size
 * 
 *     if max_open_files is not None:             # <<<<<<<<<<<<<<
 *         options.max_open_files = max_open_files
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":174
 *         options.max_open_files = max_open_files
 * 
 *     if lru_cache_size is not None:             # <<<<<<<<<<<<<<
 *         c_lru_cache_size = lru_cache_size
 *         with nogil:
 */
  __pyx_t_1 = (__pyx_v_lru_cache_size != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":175
 * 
 *     if lru_cache_size is not None:
 *         c_lru_cache_size = lru_cache_size             # <<<<<<<<<<<<<<
 *         with nogil:
 *             options.block_cache = NewLRUCache(c_lru_cache_size)
 */
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_lru_cache_size); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __pyx_v_c_lru_cache_size = __pyx_t_3;

    /* "plyvel/_plyvel.pyx":176
 *     if lru_cache_size is not None:
 *         c_lru_cache_size = lru_cache_size
 *         with nogil:             # <<<<<<<<<<<<<<
 *             options.block_cache = NewLRUCache(c_lru_cache_size)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":177
 *         c_lru_cache_size = lru_cache_size
 *         with nogil:
 *             options.block_cache = NewLRUCache(c_lru_cache_size)             # <<<<<<<<<<<<<<
 * 
 *     if block_size is not None:
 */
          __pyx_v_options->block_cache = leveldb::NewLRUCache(__pyx_v_c_lru_cache_size);
        }

        /* "plyvel/_plyvel.pyx":176
 *     if lru_cache_size is not None:
 *         c_lru_cache_size = lru_cache_size
 *         with nogil:             # <<<<<<<<<<<<<<
 *             options.block_cache = NewLRUCache(c_lru_cache_size)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L9;
          }
          __pyx_L9:;
        }
    }

    /* "plyvel/_plyvel.pyx":174
 *         options.max_open_files = max_open_files
 * 
 *     if lru_cache_size is not None:             # <<<<<<<<<<<<<<
 *         c_lru_cache_size = lru_cache_size
 *         with nogil:
 */
  }

  /* "plyvel/_plyvel.pyx":179
 *             options.block_cache = NewLRUCache(c_lru_cache_size)
 * 
 *     if block_size is not None:             # <<<<<<<<<<<<<<
 *         options.block_size = block_size
 * 
 */
  __pyx_t_1 = (__pyx_v_block_size != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":180
 * 
 *     if block_size is not None:
 *         options.block_size = block_size             # <<<<<<<<<<<<<<
 * 
 *     if block_restart_interval is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_block_size); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_v_options->block_size = __pyx_t_3;

    /* "plyvel/_plyvel.pyx":179
 *             options.block_cache = NewLRUCache(c_lru_cache_size)
 * 
 *     if block_size is not None:             # <<<<<<<<<<<<<<
 *         options.block_size = block_size
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":182
 *         options.block_size = block_size
 * 
 *     if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *         options.block_restart_interval = block_restart_interval
 * 
 */
  __pyx_t_1 = (__pyx_v_block_restart_interval != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":183
 * 
 *     if block_restart_interval is not None:
 *         options.block_restart_interval = block_restart_interval             # <<<<<<<<<<<<<<
 * 
 *     if max_file_size is not None:
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_block_restart_interval); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L1_error)
    __pyx_v_options->block_restart_interval = __pyx_t_4;

    /* "plyvel/_plyvel.pyx":182
 *         options.block_size = block_size
 * 
 *     if block_restart_interval is not None:             # <<<<<<<<<<<<<<
 *         options.block_restart_interval = block_restart_interval
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":185
 *         options.block_restart_interval = block_restart_interval
 * 
 *     if max_file_size is not None:             # <<<<<<<<<<<<<<
 *         options.max_file_size = max_file_size
 * 
 */
  __pyx_t_1 = (__pyx_v_max_file_size != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":186
 * 
 *     if max_file_size is not None:
 *         options.max_file_size = max_file_size             # <<<<<<<<<<<<<<
 * 
 *     if compression is None:
 */
    __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_v_max_file_size); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
    __pyx_v_options->max_file_size = __pyx_t_3;

    /* "plyvel/_plyvel.pyx":185
 *         options.block_restart_interval = block_restart_interval
 * 
 *     if max_file_size is not None:             # <<<<<<<<<<<<<<
 *         options.max_file_size = max_file_size
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":188
 *         options.max_file_size = max_file_size
 * 
 *     if compression is None:             # <<<<<<<<<<<<<<
 *         options.compression = leveldb.kNoCompression
 *     else:
 */
  __pyx_t_1 = (__pyx_v_compression == Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":189
 * 
 *     if compression is None:
 *         options.compression = leveldb.kNoCompression             # <<<<<<<<<<<<<<
 *     else:
 *         if isinstance(compression, bytes):
 */
    __pyx_v_options->compression = leveldb::kNoCompression;

    /* "plyvel/_plyvel.pyx":188
 *         options.max_file_size = max_file_size
 * 
 *     if compression is None:             # <<<<<<<<<<<<<<
 *         options.compression = leveldb.kNoCompression
 *     else:
 */
    goto __pyx_L13;
  }

  /* "plyvel/_plyvel.pyx":191
 *         options.compression = leveldb.kNoCompression
 *     else:
 *         if isinstance(compression, bytes):             # <<<<<<<<<<<<<<
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):
 */
  /*else*/ {
    __pyx_t_1 = PyBytes_Check(__pyx_v_compression); 
    if (__pyx_t_1) {

      /* "plyvel/_plyvel.pyx":192
 *     else:
 *         if isinstance(compression, bytes):
 *             compression = compression.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         if not isinstance(compression, unicode):
 *             raise TypeError("'compression' must be None or a string")
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_compression, __pyx_n_s_decode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_UTF_8};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_compression, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "plyvel/_plyvel.pyx":191
 *         options.compression = leveldb.kNoCompression
 *     else:
 *         if isinstance(compression, bytes):             # <<<<<<<<<<<<<<
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):
 */
    }

    /* "plyvel/_plyvel.pyx":193
 *         if isinstance(compression, bytes):
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):             # <<<<<<<<<<<<<<
 *             raise TypeError("'compression' must be None or a string")
 *         if compression == u'snappy':
 */
    __pyx_t_1 = PyUnicode_Check(__pyx_v_compression); 
    __pyx_t_8 = (!__pyx_t_1);
    if (unlikely(__pyx_t_8)) {

      /* "plyvel/_plyvel.pyx":194
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):
 *             raise TypeError("'compression' must be None or a string")             # <<<<<<<<<<<<<<
 *         if compression == u'snappy':
 *             options.compression = leveldb.kSnappyCompression
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 194, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":193
 *         if isinstance(compression, bytes):
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):             # <<<<<<<<<<<<<<
 *             raise TypeError("'compression' must be None or a string")
 *         if compression == u'snappy':
 */
    }

    /* "plyvel/_plyvel.pyx":195
 *         if not isinstance(compression, unicode):
 *             raise TypeError("'compression' must be None or a string")
 *         if compression == u'snappy':             # <<<<<<<<<<<<<<
 *             options.compression = leveldb.kSnappyCompression
 *         else:
 */
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_compression, __pyx_n_u_snappy, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 195, __pyx_L1_error)
    if (likely(__pyx_t_8)) {

      /* "plyvel/_plyvel.pyx":196
 *             raise TypeError("'compression' must be None or a string")
 *         if compression == u'snappy':
 *             options.compression = leveldb.kSnappyCompression             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("'compression' must be None or 'snappy'")
 */
      __pyx_v_options->compression = leveldb::kSnappyCompression;

      /* "plyvel/_plyvel.pyx":195
 *         if not isinstance(compression, unicode):
 *             raise TypeError("'compression' must be None or a string")
 *         if compression == u'snappy':             # <<<<<<<<<<<<<<
 *             options.compression = leveldb.kSnappyCompression
 *         else:
 */
      goto __pyx_L16;
    }

    /* "plyvel/_plyvel.pyx":198
 *             options.compression = leveldb.kSnappyCompression
 *         else:
 *             raise ValueError("'compression' must be None or 'snappy'")             # <<<<<<<<<<<<<<
 * 
 *     if bloom_filter_bits > 0:
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 198, __pyx_L1_error)
    }
    __pyx_L16:;
  }
  __pyx_L13:;

  /* "plyvel/_plyvel.pyx":200
 *             raise ValueError("'compression' must be None or 'snappy'")
 * 
 *     if bloom_filter_bits > 0:             # <<<<<<<<<<<<<<
 *         with nogil:
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 */
  __pyx_t_8 = (__pyx_v_bloom_filter_bits > 0);
  if (__pyx_t_8) {

    /* "plyvel/_plyvel.pyx":201
 * 
 *     if bloom_filter_bits > 0:
 *         with nogil:             # <<<<<<<<<<<<<<
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":202
 *     if bloom_filter_bits > 0:
 *         with nogil:
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)             # <<<<<<<<<<<<<<
 * 
 *     if (comparator is None) != (comparator_name is None):
 */
          __pyx_v_options->filter_policy = leveldb::NewBloomFilterPolicy(__pyx_v_bloom_filter_bits);
        }

        /* "plyvel/_plyvel.pyx":201
 * 
 *     if bloom_filter_bits > 0:
 *         with nogil:             # <<<<<<<<<<<<<<
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L20;
          }
          __pyx_L20:;
        }
    }

    /* "plyvel/_plyvel.pyx":200
 *             raise ValueError("'compression' must be None or 'snappy'")
 * 
 *     if bloom_filter_bits > 0:             # <<<<<<<<<<<<<<
 *         with nogil:
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 */
  }

  /* "plyvel/_plyvel.pyx":204
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 * 
 *     if (comparator is None) != (comparator_name is None):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "'comparator' and 'comparator_name' must be specified together")
 */
  __pyx_t_8 = (__pyx_v_comparator == Py_None);
  __pyx_t_1 = (__pyx_v_comparator_name == ((PyObject*)Py_None));
  __pyx_t_9 = (__pyx_t_8 != __pyx_t_1);
  if (unlikely(__pyx_t_9)) {

    /* "plyvel/_plyvel.pyx":205
 * 
 *     if (comparator is None) != (comparator_name is None):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "'comparator' and 'comparator_name' must be specified together")
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 205, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":204
 *             options.filter_policy = NewBloomFilterPolicy(bloom_filter_bits)
 * 
 *     if (comparator is None) != (comparator_name is None):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "'comparator' and 'comparator_name' must be specified together")
 */
  }

  /* "plyvel/_plyvel.pyx":208
 *             "'comparator' and 'comparator_name' must be specified together")
 * 
 *     if comparator is not None:             # <<<<<<<<<<<<<<
 *         if not callable(comparator):
 *             raise TypeError("custom comparator object must be callable")
 */
  __pyx_t_9 = (__pyx_v_comparator != Py_None);
  if (__pyx_t_9) {

    /* "plyvel/_plyvel.pyx":209
 * 
 *     if comparator is not None:
 *         if not callable(comparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("custom comparator object must be callable")
 * 
 */
    __pyx_t_9 = __Pyx_PyCallable_Check(__pyx_v_comparator); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 209, __pyx_L1_error)
    __pyx_t_1 = (!__pyx_t_9);
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":210
 *     if comparator is not None:
 *         if not callable(comparator):
 *             raise TypeError("custom comparator object must be callable")             # <<<<<<<<<<<<<<
 * 
 *         options.comparator = NewPlyvelCallbackComparator(
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 210, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":209
 * 
 *     if comparator is not None:
 *         if not callable(comparator):             # <<<<<<<<<<<<<<
 *             raise TypeError("custom comparator object must be callable")
 * 
 */
    }

    /* "plyvel/_plyvel.pyx":213
 * 
 *         options.comparator = NewPlyvelCallbackComparator(
 *             comparator_name, comparator)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(__pyx_v_comparator_name == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 213, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyBytes_AsString(__pyx_v_comparator_name); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":212
 *             raise TypeError("custom comparator object must be callable")
 * 
 *         options.comparator = NewPlyvelCallbackComparator(             # <<<<<<<<<<<<<<
 *             comparator_name, comparator)
 * 
 */
    __pyx_v_options->comparator = NewPlyvelCallbackComparator(__pyx_t_10, __pyx_v_comparator);

    /* "plyvel/_plyvel.pyx":208
 *             "'comparator' and 'comparator_name' must be specified together")
 * 
 *     if comparator is not None:             # <<<<<<<<<<<<<<
 *         if not callable(comparator):
 *             raise TypeError("custom comparator object must be callable")
 */
  }

  /* "plyvel/_plyvel.pyx":153
 * 
 * 
 * cdef int parse_options(Options *options, c_bool create_if_missing,             # <<<<<<<<<<<<<<
 *                        c_bool error_if_exists, object paranoid_checks,
 *                        object write_buffer_size, object max_open_files,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("plyvel._plyvel.parse_options", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_compression);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":228
 *     cdef dict iterators
 * 
 *     def __init__(self, name, *, bool create_if_missing=False,             # <<<<<<<<<<<<<<
 *                  bool error_if_exists=False, paranoid_checks=None,
 *                  write_buffer_size=None, max_open_files=None,
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_2DB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_2DB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyBoolObject *__pyx_v_create_if_missing = 0;
  PyBoolObject *__pyx_v_error_if_exists = 0;
  PyObject *__pyx_v_paranoid_checks = 0;
  PyObject *__pyx_v_write_buffer_size = 0;
  PyObject *__pyx_v_max_open_files = 0;
  PyObject *__pyx_v_lru_cache_size = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_block_restart_interval = 0;
  PyObject *__pyx_v_max_file_size = 0;
  PyObject *__pyx_v_compression = 0;
  int __pyx_v_bloom_filter_bits;
  PyObject *__pyx_v_comparator = 0;
  PyObject *__pyx_v_comparator_name = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_create_if_missing,&__pyx_n_s_error_if_exists,&__pyx_n_s_paranoid_checks,&__pyx_n_s_write_buffer_size,&__pyx_n_s_max_open_files,&__pyx_n_s_lru_cache_size,&__pyx_n_s_block_size,&__pyx_n_s_block_restart_interval,&__pyx_n_s_max_file_size,&__pyx_n_s_compression,&__pyx_n_s_bloom_filter_bits,&__pyx_n_s_comparator,&__pyx_n_s_comparator_name,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((PyBoolObject *)Py_False));

    /* "plyvel/_plyvel.pyx":229
 * 
 *     def __init__(self, name, *, bool create_if_missing=False,
 *                  bool error_if_exists=False, paranoid_checks=None,             # <<<<<<<<<<<<<<
 *                  write_buffer_size=None, max_open_files=None,
 *                  lru_cache_size=None, block_size=None,
 */
    values[2] = __Pyx_Arg_NewRef_VARARGS((PyObject *)((PyBoolObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":230
 *     def __init__(self, name, *, bool create_if_missing=False,
 *                  bool error_if_exists=False, paranoid_checks=None,
 *                  write_buffer_size=None, max_open_files=None,             # <<<<<<<<<<<<<<
 *                  lru_cache_size=None, block_size=None,
 *                  block_restart_interval=None, max_file_size=None,
 */
    values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":231
 *                  bool error_if_exists=False, paranoid_checks=None,
 *                  write_buffer_size=None, max_open_files=None,
 *                  lru_cache_size=None, block_size=None,             # <<<<<<<<<<<<<<
 *                  block_restart_interval=None, max_file_size=None,
 *                  compression='snappy', int bloom_filter_bits=0,
 */
    values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[7] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":232
 *                  write_buffer_size=None, max_open_files=None,
 *                  lru_cache_size=None, block_size=None,
 *                  block_restart_interval=None, max_file_size=None,             # <<<<<<<<<<<<<<
 *                  compression='snappy', int bloom_filter_bits=0,
 *                  object comparator=None, bytes comparator_name=None):
 */
    values[8] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[9] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[10] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_u_snappy));

    /* "plyvel/_plyvel.pyx":234
 *                  block_restart_interval=None, max_file_size=None,
 *                  compression='snappy', int bloom_filter_bits=0,
 *                  object comparator=None, bytes comparator_name=None):             # <<<<<<<<<<<<<<
 *         cdef Status st
 *         cdef string fsname
 */
    values[12] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[13] = __Pyx_Arg_NewRef_VARARGS(((PyObject*)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 13)) {
        Py_ssize_t index;
        for (index = 1; index < 14 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 228, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
    __pyx_v_create_if_missing = ((PyBoolObject *)values[1]);
    __pyx_v_error_if_exists = ((PyBoolObject *)values[2]);
    __pyx_v_paranoid_checks = values[3];
    __pyx_v_write_buffer_size = values[4];
    __pyx_v_max_open_files = values[5];
    __pyx_v_lru_cache_size = values[6];
    __pyx_v_block_size = values[7];
    __pyx_v_block_restart_interval = values[8];
    __pyx_v_max_file_size = values[9];
    __pyx_v_compression = values[10];
    if (values[11]) {
      __pyx_v_bloom_filter_bits = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_bloom_filter_bits == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L3_error)
    } else {
      __pyx_v_bloom_filter_bits = ((int)0);
    }
    __pyx_v_comparator = values[12];
    __pyx_v_comparator_name = ((PyObject*)values[13]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 228, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_create_if_missing), __pyx_ptype_7cpython_4bool_bool, 1, "create_if_missing", 0))) __PYX_ERR(0, 228, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_error_if_exists), __pyx_ptype_7cpython_4bool_bool, 1, "error_if_exists", 0))) __PYX_ERR(0, 229, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comparator_name), (&PyBytes_Type), 1, "comparator_name", 1))) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB___init__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_name, __pyx_v_create_if_missing, __pyx_v_error_if_exists, __pyx_v_paranoid_checks, __pyx_v_write_buffer_size, __pyx_v_max_open_files, __pyx_v_lru_cache_size, __pyx_v_block_size, __pyx_v_block_restart_interval, __pyx_v_max_file_size, __pyx_v_compression, __pyx_v_bloom_filter_bits, __pyx_v_comparator, __pyx_v_comparator_name);

  /* "plyvel/_plyvel.pyx":228
 *     cdef dict iterators
 * 
 *     def __init__(self, name, *, bool create_if_missing=False,             # <<<<<<<<<<<<<<
 *                  bool error_if_exists=False, paranoid_checks=None,
 *                  write_buffer_size=None, max_open_files=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6plyvel_7_plyvel_2DB___init__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_name, PyBoolObject *__pyx_v_create_if_missing, PyBoolObject *__pyx_v_error_if_exists, PyObject *__pyx_v_paranoid_checks, PyObject *__pyx_v_write_buffer_size, PyObject *__pyx_v_max_open_files, PyObject *__pyx_v_lru_cache_size, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_max_file_size, PyObject *__pyx_v_compression, int __pyx_v_bloom_filter_bits, PyObject *__pyx_v_comparator, PyObject *__pyx_v_comparator_name) {
  leveldb::Status __pyx_v_st;
  std::string __pyx_v_fsname;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  bool __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "plyvel/_plyvel.pyx":237
 *         cdef Status st
 *         cdef string fsname
 *         self.name = name             # <<<<<<<<<<<<<<
 * 
 *         fsname = to_file_system_name(name)
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "plyvel/_plyvel.pyx":239
 *         self.name = name
 * 
 *         fsname = to_file_system_name(name)             # <<<<<<<<<<<<<<
 *         parse_options(
 *             &self.options, create_if_missing, error_if_exists, paranoid_checks,
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_to_file_system_name(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fsname = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "plyvel/_plyvel.pyx":241
 *         fsname = to_file_system_name(name)
 *         parse_options(
 *             &self.options, create_if_missing, error_if_exists, paranoid_checks,             # <<<<<<<<<<<<<<
 *             write_buffer_size, max_open_files, lru_cache_size, block_size,
 *             block_restart_interval, max_file_size, compression, bloom_filter_bits,
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_create_if_missing)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_error_if_exists)); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":240
 * 
 *         fsname = to_file_system_name(name)
 *         parse_options(             # <<<<<<<<<<<<<<
 *             &self.options, create_if_missing, error_if_exists, paranoid_checks,
 *             write_buffer_size, max_open_files, lru_cache_size, block_size,
 */
  __pyx_t_5 = __pyx_f_6plyvel_7_plyvel_parse_options((&__pyx_v_self->options), __pyx_t_3, __pyx_t_4, __pyx_v_paranoid_checks, __pyx_v_write_buffer_size, __pyx_v_max_open_files, __pyx_v_lru_cache_size, __pyx_v_block_size, __pyx_v_block_restart_interval, __pyx_v_max_file_size, __pyx_v_compression, __pyx_v_bloom_filter_bits, __pyx_v_comparator, __pyx_v_comparator_name); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 240, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":245
 *             block_restart_interval, max_file_size, compression, bloom_filter_bits,
 *             comparator, comparator_name)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = leveldb.DB_Open(self.options, fsname, &self._db)
 *         raise_for_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":246
 *             comparator, comparator_name)
 *         with nogil:
 *             st = leveldb.DB_Open(self.options, fsname, &self._db)             # <<<<<<<<<<<<<<
 *         raise_for_status(st)
 * 
 */
        __pyx_v_st = leveldb::DB::Open(__pyx_v_self->options, __pyx_v_fsname, (&__pyx_v_self->_db));
      }

      /* "plyvel/_plyvel.pyx":245
 *             block_restart_interval, max_file_size, compression, bloom_filter_bits,
 *             comparator, comparator_name)
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = leveldb.DB_Open(self.options, fsname, &self._db)
 *         raise_for_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "plyvel/_plyvel.pyx":247
 *         with nogil:
 *             st = leveldb.DB_Open(self.options, fsname, &self._db)
 *         raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 *         # Keep weak references to open iterators, since deleting a C++
 */
  __pyx_t_5 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 247, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":254
 *         # leveldb/db.h). We don't use weakref.WeakValueDictionary here
 *         # for performance reasons.
 *         self.lock = threading.Lock()             # <<<<<<<<<<<<<<
 *         self.iterators = dict()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_threading); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_Lock); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->lock);
  __Pyx_DECREF(__pyx_v_self->lock);
  __pyx_v_self->lock = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":255
 *         # for performance reasons.
 *         self.lock = threading.Lock()
 *         self.iterators = dict()             # <<<<<<<<<<<<<<
 * 
 *     cpdef close(self):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->iterators);
  __Pyx_DECREF(__pyx_v_self->iterators);
  __pyx_v_self->iterators = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":228
 *     cdef dict iterators
 * 
 *     def __init__(self, name, *, bool create_if_missing=False,             # <<<<<<<<<<<<<<
 *                  bool error_if_exists=False, paranoid_checks=None,
 *                  write_buffer_size=None, max_open_files=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("plyvel._plyvel.DB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":257
 *         self.iterators = dict()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # If the constructor raised an exception (and hence never
 *         # completed), self.iterators can be None. In that case no
 */

static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_2DB_close(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_iterator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);

  /* "plyvel/_plyvel.pyx":262
 *         # iterators need to be cleaned anyway.
 *         cdef BaseIterator iterator
 *         if self.iterators is not None:             # <<<<<<<<<<<<<<
 *             with self.lock:
 *                 while self.iterators:
 */
  __pyx_t_1 = (__pyx_v_self->iterators != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":263
 *         cdef BaseIterator iterator
 *         if self.iterators is not None:
 *             with self.lock:             # <<<<<<<<<<<<<<
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()
 */
    /*with:*/ {
      __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_v_self->lock, __pyx_n_s_exit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_v_self->lock, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 263, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {

            /* "plyvel/_plyvel.pyx":264
 *         if self.iterators is not None:
 *             with self.lock:
 *                 while self.iterators:             # <<<<<<<<<<<<<<
 *                     iterator = self.iterators.popitem()[1]()
 *                     if iterator is not None:
 */
            while (1) {
              __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->iterators); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 264, __pyx_L8_error)
              if (!__pyx_t_1) break;

              /* "plyvel/_plyvel.pyx":265
 *             with self.lock:
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()             # <<<<<<<<<<<<<<
 *                     if iterator is not None:
 *                         iterator.close()
 */
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->iterators, __pyx_n_s_popitem); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_10 = NULL;
              __pyx_t_6 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_10)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_10);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                  __pyx_t_6 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
                __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
                __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              }
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = NULL;
              __pyx_t_6 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                  __pyx_t_6 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
                __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              }
              if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6plyvel_7_plyvel_BaseIterator))))) __PYX_ERR(0, 265, __pyx_L8_error)
              __Pyx_XDECREF_SET(__pyx_v_iterator, ((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_t_3));
              __pyx_t_3 = 0;

              /* "plyvel/_plyvel.pyx":266
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()
 *                     if iterator is not None:             # <<<<<<<<<<<<<<
 *                         iterator.close()
 * 
 */
              __pyx_t_1 = (((PyObject *)__pyx_v_iterator) != Py_None);
              if (__pyx_t_1) {

                /* "plyvel/_plyvel.pyx":267
 *                     iterator = self.iterators.popitem()[1]()
 *                     if iterator is not None:
 *                         iterator.close()             # <<<<<<<<<<<<<<
 * 
 *         if self._db is not NULL:
 */
                __pyx_t_3 = ((struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator *)__pyx_v_iterator->__pyx_vtab)->close(__pyx_v_iterator, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "plyvel/_plyvel.pyx":266
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()
 *                     if iterator is not None:             # <<<<<<<<<<<<<<
 *                         iterator.close()
 * 
 */
              }
            }

            /* "plyvel/_plyvel.pyx":263
 *         cdef BaseIterator iterator
 *         if self.iterators is not None:
 *             with self.lock:             # <<<<<<<<<<<<<<
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()
 */
          }
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L13_try_end;
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("plyvel._plyvel.DB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 263, __pyx_L10_except_error)
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_5);
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_10 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 263, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 263, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 263, __pyx_L10_except_error)
            __pyx_t_12 = (!__pyx_t_1);
            if (unlikely(__pyx_t_12)) {
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_5);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_5, __pyx_t_4);
              __pyx_t_3 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 263, __pyx_L10_except_error)
            }
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
          __pyx_L13_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_2) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
      goto __pyx_L20;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L1_error;
      __pyx_L20:;
    }

    /* "plyvel/_plyvel.pyx":262
 *         # iterators need to be cleaned anyway.
 *         cdef BaseIterator iterator
 *         if self.iterators is not None:             # <<<<<<<<<<<<<<
 *             with self.lock:
 *                 while self.iterators:
 */
  }

  /* "plyvel/_plyvel.pyx":269
 *                         iterator.close()
 * 
 *         if self._db is not NULL:             # <<<<<<<<<<<<<<
 *             del self._db
 *             self._db = NULL
 */
  __pyx_t_12 = (__pyx_v_self->_db != NULL);
  if (__pyx_t_12) {

    /* "plyvel/_plyvel.pyx":270
 * 
 *         if self._db is not NULL:
 *             del self._db             # <<<<<<<<<<<<<<
 *             self._db = NULL
 * 
 */
    delete __pyx_v_self->_db;

    /* "plyvel/_plyvel.pyx":271
 *         if self._db is not NULL:
 *             del self._db
 *             self._db = NULL             # <<<<<<<<<<<<<<
 * 
 *         if self.options.block_cache is not NULL:
 */
    __pyx_v_self->_db = NULL;

    /* "plyvel/_plyvel.pyx":269
 *                         iterator.close()
 * 
 *         if self._db is not NULL:             # <<<<<<<<<<<<<<
 *             del self._db
 *             self._db = NULL
 */
  }

  /* "plyvel/_plyvel.pyx":273
 *             self._db = NULL
 * 
 *         if self.options.block_cache is not NULL:             # <<<<<<<<<<<<<<
 *             del self.options.block_cache
 *             self.options.block_cache = NULL
 */
  __pyx_t_12 = (__pyx_v_self->options.block_cache != NULL);
  if (__pyx_t_12) {

    /* "plyvel/_plyvel.pyx":274
 * 
 *         if self.options.block_cache is not NULL:
 *             del self.options.block_cache             # <<<<<<<<<<<<<<
 *             self.options.block_cache = NULL
 * 
 */
    delete __pyx_v_self->options.block_cache;

    /* "plyvel/_plyvel.pyx":275
 *         if self.options.block_cache is not NULL:
 *             del self.options.block_cache
 *             self.options.block_cache = NULL             # <<<<<<<<<<<<<<
 * 
 *         if self.options.filter_policy is not NULL:
 */
    __pyx_v_self->options.block_cache = NULL;

    /* "plyvel/_plyvel.pyx":273
 *             self._db = NULL
 * 
 *         if self.options.block_cache is not NULL:             # <<<<<<<<<<<<<<
 *             del self.options.block_cache
 *             self.options.block_cache = NULL
 */
  }

  /* "plyvel/_plyvel.pyx":277
 *             self.options.block_cache = NULL
 * 
 *         if self.options.filter_policy is not NULL:             # <<<<<<<<<<<<<<
 *             del self.options.filter_policy
 *             self.options.filter_policy = NULL
 */
  __pyx_t_12 = (__pyx_v_self->options.filter_policy != NULL);
  if (__pyx_t_12) {

    /* "plyvel/_plyvel.pyx":278
 * 
 *         if self.options.filter_policy is not NULL:
 *             del self.options.filter_policy             # <<<<<<<<<<<<<<
 *             self.options.filter_policy = NULL
 * 
 */
    delete __pyx_v_self->options.filter_policy;

    /* "plyvel/_plyvel.pyx":279
 *         if self.options.filter_policy is not NULL:
 *             del self.options.filter_policy
 *             self.options.filter_policy = NULL             # <<<<<<<<<<<<<<
 * 
 *         if self.options.comparator is not NULL:
 */
    __pyx_v_self->options.filter_policy = NULL;

    /* "plyvel/_plyvel.pyx":277
 *             self.options.block_cache = NULL
 * 
 *         if self.options.filter_policy is not NULL:             # <<<<<<<<<<<<<<
 *             del self.options.filter_policy
 *             self.options.filter_policy = NULL
 */
  }

  /* "plyvel/_plyvel.pyx":281
 *             self.options.filter_policy = NULL
 * 
 *         if self.options.comparator is not NULL:             # <<<<<<<<<<<<<<
 *             # The built-in BytewiseComparator must not be deleted
 *             if self.options.comparator is not BytewiseComparator():
 */
  __pyx_t_12 = (__pyx_v_self->options.comparator != NULL);
  if (__pyx_t_12) {

    /* "plyvel/_plyvel.pyx":283
 *         if self.options.comparator is not NULL:
 *             # The built-in BytewiseComparator must not be deleted
 *             if self.options.comparator is not BytewiseComparator():             # <<<<<<<<<<<<<<
 *                 del self.options.comparator
 *                 self.options.comparator = NULL
 */
    __pyx_t_12 = (__pyx_v_self->options.comparator != leveldb::BytewiseComparator());
    if (__pyx_t_12) {

      /* "plyvel/_plyvel.pyx":284
 *             # The built-in BytewiseComparator must not be deleted
 *             if self.options.comparator is not BytewiseComparator():
 *                 del self.options.comparator             # <<<<<<<<<<<<<<
 *                 self.options.comparator = NULL
 * 
 */
      delete __pyx_v_self->options.comparator;

      /* "plyvel/_plyvel.pyx":285
 *             if self.options.comparator is not BytewiseComparator():
 *                 del self.options.comparator
 *                 self.options.comparator = NULL             # <<<<<<<<<<<<<<
 * 
 *     property closed:
 */
      __pyx_v_self->options.comparator = NULL;

      /* "plyvel/_plyvel.pyx":283
 *         if self.options.comparator is not NULL:
 *             # The built-in BytewiseComparator must not be deleted
 *             if self.options.comparator is not BytewiseComparator():             # <<<<<<<<<<<<<<
 *                 del self.options.comparator
 *                 self.options.comparator = NULL
 */
    }

    /* "plyvel/_plyvel.pyx":281
 *             self.options.filter_policy = NULL
 * 
 *         if self.options.comparator is not NULL:             # <<<<<<<<<<<<<<
 *             # The built-in BytewiseComparator must not be deleted
 *             if self.options.comparator is not BytewiseComparator():
 */
  }

  /* "plyvel/_plyvel.pyx":257
 *         self.iterators = dict()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # If the constructor raised an exception (and hence never
 *         # completed), self.iterators can be None. In that case no
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("plyvel._plyvel.DB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_iterator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_2close, "DB.close(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_3close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_2close};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_2close(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_2close(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_2DB_close(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.DB.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":288
 * 
 *     property closed:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._db is NULL
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_6closed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_6closed_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_6closed___get__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_6closed___get__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "plyvel/_plyvel.pyx":289
 *     property closed:
 *         def __get__(self):
 *             return self._db is NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->_db == NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":288
 * 
 *     property closed:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._db is NULL
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.DB.closed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":291
 *             return self._db is NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static void __pyx_pw_6plyvel_7_plyvel_2DB_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6plyvel_7_plyvel_2DB_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6plyvel_7_plyvel_2DB_4__dealloc__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6plyvel_7_plyvel_2DB_4__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "plyvel/_plyvel.pyx":292
 * 
 *     def __dealloc__(self):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_2DB_close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":291
 *             return self._db is NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("plyvel._plyvel.DB.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "plyvel/_plyvel.pyx":294
 *         self.close()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (
 *             self.name,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_7__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_6__repr__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_6__repr__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "plyvel/_plyvel.pyx":295
 * 
 *     def __repr__(self):
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (             # <<<<<<<<<<<<<<
 *             self.name,
 *             ' (closed)' if self.closed else '',
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_plyvel_DB_with_name);
  __pyx_t_2 += 21;
  __Pyx_GIVEREF(__pyx_kp_u_plyvel_DB_with_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_plyvel_DB_with_name);

  /* "plyvel/_plyvel.pyx":296
 *     def __repr__(self):
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (
 *             self.name,             # <<<<<<<<<<<<<<
 *             ' (closed)' if self.closed else '',
 *             hex(id(self)),
 */
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_self->name), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "plyvel/_plyvel.pyx":297
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (
 *             self.name,
 *             ' (closed)' if self.closed else '',             # <<<<<<<<<<<<<<
 *             hex(id(self)),
 *         )
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_closed); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_kp_u_closed_2);
    __pyx_t_4 = __pyx_kp_u_closed_2;
  } else {
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_4 = __pyx_kp_u__7;
  }
  __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_at_0x);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_at_0x);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_at_0x);

  /* "plyvel/_plyvel.pyx":298
 *             self.name,
 *             ' (closed)' if self.closed else '',
 *             hex(id(self)),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_4), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_kp_u__8);

  /* "plyvel/_plyvel.pyx":295
 * 
 *     def __repr__(self):
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (             # <<<<<<<<<<<<<<
 *             self.name,
 *             ' (closed)' if self.closed else '',
 */
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":294
 *         self.close()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<plyvel.DB with name %r%s at 0x%s>' % (
 *             self.name,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.DB.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_9get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_8get, "DB.get(self, bytes key, default=None, *, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_9get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_9get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_8get};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_9get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_default,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":302
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_default);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get") < 0)) __PYX_ERR(0, 301, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_default = values[1];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[2]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 301, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 301, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 302, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 302, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_8get(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_default, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_8get(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  leveldb::ReadOptions __pyx_v_read_options;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 1);

  /* "plyvel/_plyvel.pyx":303
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":304
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef ReadOptions read_options
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 304, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":303
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":307
 * 
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums             # <<<<<<<<<<<<<<
 *         read_options.fill_cache = fill_cache
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_verify_checksums)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_v_read_options.verify_checksums = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":308
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache             # <<<<<<<<<<<<<<
 * 
 *         return db_get(self, key, default, read_options)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_fill_cache)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_v_read_options.fill_cache = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":310
 *         read_options.fill_cache = fill_cache
 * 
 *         return db_get(self, key, default, read_options)             # <<<<<<<<<<<<<<
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_db_get(__pyx_v_self, __pyx_v_key, __pyx_v_default, __pyx_v_read_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":312
 *         return db_get(self, key, default, read_options)
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_11put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_10put, "DB.put(self, bytes key, value, *, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_11put = {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_11put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_10put};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_11put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, 1); __PYX_ERR(0, 312, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "put") < 0)) __PYX_ERR(0, 312, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_value = values[1];
    __pyx_v_sync = ((PyBoolObject *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 312, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 312, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_value) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "value"); __PYX_ERR(0, 312, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_10put(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_10put(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyBoolObject *__pyx_v_sync) {
  leveldb::WriteOptions __pyx_v_write_options;
  leveldb::Slice __pyx_v_key_slice;
  Py_buffer __pyx_v_value_buffer;
  leveldb::Status __pyx_v_st;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  const char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("put", 1);

  /* "plyvel/_plyvel.pyx":313
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":314
 *     def put(self, bytes key not None, value not None, *, bool sync=False):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef WriteOptions write_options = WriteOptions()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 314, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":313
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":316
 *             raise RuntimeError("Database is closed")
 * 
 *         cdef WriteOptions write_options = WriteOptions()             # <<<<<<<<<<<<<<
 *         write_options.sync = sync
 * 
 */
  __pyx_v_write_options = leveldb::WriteOptions();

  /* "plyvel/_plyvel.pyx":317
 * 
 *         cdef WriteOptions write_options = WriteOptions()
 *         write_options.sync = sync             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_sync)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_v_write_options.sync = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":319
 *         write_options.sync = sync
 * 
 *         cdef Slice key_slice = Slice(key, len(key))             # <<<<<<<<<<<<<<
 *         cdef Py_buffer value_buffer
 *         cdef Status st
 */
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyBytes_GET_SIZE(__pyx_v_key); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 319, __pyx_L1_error)
  __pyx_v_key_slice = leveldb::Slice(__pyx_t_4, __pyx_t_5);

  /* "plyvel/_plyvel.pyx":322
 *         cdef Py_buffer value_buffer
 *         cdef Status st
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)             # <<<<<<<<<<<<<<
 *         try:
 *             with nogil:
 */
  __pyx_t_6 = PyObject_GetBuffer(__pyx_v_value, (&__pyx_v_value_buffer), PyBUF_SIMPLE); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":323
 *         cdef Status st
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 st = self._db.Put(
 */
  /*try:*/ {

    /* "plyvel/_plyvel.pyx":324
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = self._db.Put(
 *                     write_options,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":325
 *         try:
 *             with nogil:
 *                 st = self._db.Put(             # <<<<<<<<<<<<<<
 *                     write_options,
 *                     key_slice,
 */
          __pyx_v_st = __pyx_v_self->_db->Put(__pyx_v_write_options, __pyx_v_key_slice, leveldb::Slice(((const char *)__pyx_v_value_buffer.buf), __pyx_v_value_buffer.len));
        }

        /* "plyvel/_plyvel.pyx":324
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 st = self._db.Put(
 *                     write_options,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L9;
          }
          __pyx_L9:;
        }
    }
  }

  /* "plyvel/_plyvel.pyx":330
 *                     Slice(<const_char *>value_buffer.buf, value_buffer.len))
 *         finally:
 *             PyBuffer_Release(&value_buffer)             # <<<<<<<<<<<<<<
 *         raise_for_status(st)
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyBuffer_Release((&__pyx_v_value_buffer));
      goto __pyx_L6;
    }
    __pyx_L6:;
  }

  /* "plyvel/_plyvel.pyx":331
 *         finally:
 *             PyBuffer_Release(&value_buffer)
 *         raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):
 */
  __pyx_t_6 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":312
 *         return db_get(self, key, default, read_options)
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":333
 *         raise_for_status(st)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_13delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_12delete, "DB.delete(self, bytes key, *, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_13delete = {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_13delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_12delete};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_13delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_sync,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete") < 0)) __PYX_ERR(0, 333, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_sync = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 333, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 333, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_12delete(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_key, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_12delete(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_key, PyBoolObject *__pyx_v_sync) {
  leveldb::Status __pyx_v_st;
  leveldb::WriteOptions __pyx_v_write_options;
  leveldb::Slice __pyx_v_key_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  const char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 1);

  /* "plyvel/_plyvel.pyx":334
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":335
 *     def delete(self, bytes key not None, *, bool sync=False):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 335, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":334
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":339
 *         cdef Status st
 *         cdef WriteOptions write_options
 *         write_options.sync = sync             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_sync)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_v_write_options.sync = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":341
 *         write_options.sync = sync
 * 
 *         cdef Slice key_slice = Slice(key, len(key))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             st = self._db.Delete(write_options, key_slice)
 */
  __pyx_t_4 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyBytes_GET_SIZE(__pyx_v_key); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 341, __pyx_L1_error)
  __pyx_v_key_slice = leveldb::Slice(__pyx_t_4, __pyx_t_5);

  /* "plyvel/_plyvel.pyx":342
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self._db.Delete(write_options, key_slice)
 *         raise_for_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":343
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:
 *             st = self._db.Delete(write_options, key_slice)             # <<<<<<<<<<<<<<
 *         raise_for_status(st)
 * 
 */
        __pyx_v_st = __pyx_v_self->_db->Delete(__pyx_v_write_options, __pyx_v_key_slice);
      }

      /* "plyvel/_plyvel.pyx":342
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self._db.Delete(write_options, key_slice)
 *         raise_for_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":344
 *         with nogil:
 *             st = self._db.Delete(write_options, key_slice)
 *         raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):
 */
  __pyx_t_6 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 344, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":333
 *         raise_for_status(st)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":346
 *         raise_for_status(st)
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_15write_batch(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_14write_batch, "DB.write_batch(self, *, bool transaction=False, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_15write_batch = {"write_batch", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_15write_batch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_14write_batch};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_15write_batch(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyBoolObject *__pyx_v_transaction = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_batch (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_transaction,&__pyx_n_s_sync,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 0; index < 2 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "write_batch") < 0)) __PYX_ERR(0, 346, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_transaction = ((PyBoolObject *)values[0]);
    __pyx_v_sync = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_batch", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 346, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.write_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_transaction), __pyx_ptype_7cpython_4bool_bool, 1, "transaction", 0))) __PYX_ERR(0, 346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_14write_batch(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_transaction, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_14write_batch(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyBoolObject *__pyx_v_transaction, PyBoolObject *__pyx_v_sync) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_batch", 1);

  /* "plyvel/_plyvel.pyx":347
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":348
 *     def write_batch(self, *, bool transaction=False, bool sync=False):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         return WriteBatch(self, None, transaction, sync)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 348, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":347
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":350
 *             raise RuntimeError("Database is closed")
 * 
 *         return WriteBatch(self, None, transaction, sync)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 350, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None)) __PYX_ERR(0, 350, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_transaction);
  __Pyx_GIVEREF((PyObject *)__pyx_v_transaction);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_transaction))) __PYX_ERR(0, 350, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_sync);
  __Pyx_GIVEREF((PyObject *)__pyx_v_sync);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_sync))) __PYX_ERR(0, 350, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":346
 *         raise_for_status(st)
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("plyvel._plyvel.DB.write_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":352
 *         return WriteBatch(self, None, transaction, sync)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_17__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_17__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_16__iter__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_16__iter__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "plyvel/_plyvel.pyx":353
 * 
 *     def __iter__(self):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":354
 *     def __iter__(self):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         return self.iterator()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 354, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":353
 * 
 *     def __iter__(self):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":356
 *             raise RuntimeError("Database is closed")
 * 
 *         return self.iterator()             # <<<<<<<<<<<<<<
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":352
 *         return WriteBatch(self, None, transaction, sync)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.DB.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_19iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_18iterator, "DB.iterator(self, *, reverse=False, start=None, stop=None, include_start=True, include_stop=False, prefix=None, include_key=True, include_value=True, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_19iterator = {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_19iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_18iterator};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_19iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_reverse = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_include_start = 0;
  PyObject *__pyx_v_include_stop = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_include_key = 0;
  PyObject *__pyx_v_include_value = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reverse,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_include_start,&__pyx_n_s_include_stop,&__pyx_n_s_prefix,&__pyx_n_s_include_key,&__pyx_n_s_include_value,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":359
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":360
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));

    /* "plyvel/_plyvel.pyx":361
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return Iterator(
 *             self,  # db
 */
    values[8] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[9] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 10)) {
        Py_ssize_t index;
        for (index = 0; index < 10 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "iterator") < 0)) __PYX_ERR(0, 358, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_reverse = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
    __pyx_v_include_start = values[3];
    __pyx_v_include_stop = values[4];
    __pyx_v_prefix = values[5];
    __pyx_v_include_key = values[6];
    __pyx_v_include_value = values[7];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[8]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[9]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iterator", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 358, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_18iterator(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_reverse, __pyx_v_start, __pyx_v_stop, __pyx_v_include_start, __pyx_v_include_stop, __pyx_v_prefix, __pyx_v_include_key, __pyx_v_include_value, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_18iterator(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterator", 1);

  /* "plyvel/_plyvel.pyx":362
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             self,  # db
 *             None,  # db_prefix
 */
  __Pyx_XDECREF(__pyx_r);

  /* "plyvel/_plyvel.pyx":375
 *             verify_checksums,
 *             fill_cache,
 *             None,  # snapshot             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = PyTuple_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_reverse);
  __Pyx_GIVEREF(__pyx_v_reverse);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_reverse)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_GIVEREF(__pyx_v_start);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_start)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_stop);
  __Pyx_GIVEREF(__pyx_v_stop);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_stop)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_start);
  __Pyx_GIVEREF(__pyx_v_include_start);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_include_start)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_stop);
  __Pyx_GIVEREF(__pyx_v_include_stop);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_include_stop)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_v_prefix)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_key);
  __Pyx_GIVEREF(__pyx_v_include_key);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_v_include_key)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_value);
  __Pyx_GIVEREF(__pyx_v_include_value);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_v_include_value)) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_verify_checksums);
  __Pyx_GIVEREF((PyObject *)__pyx_v_verify_checksums);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 10, ((PyObject *)__pyx_v_verify_checksums))) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_fill_cache);
  __Pyx_GIVEREF((PyObject *)__pyx_v_fill_cache);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 11, ((PyObject *)__pyx_v_fill_cache))) __PYX_ERR(0, 362, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 12, Py_None)) __PYX_ERR(0, 362, __pyx_L1_error);

  /* "plyvel/_plyvel.pyx":362
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             self,  # db
 *             None,  # db_prefix
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":378
 *         )
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return RawIterator(
 *             self,  # db
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_21raw_iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_20raw_iterator, "DB.raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_21raw_iterator = {"raw_iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_21raw_iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_20raw_iterator};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_21raw_iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("raw_iterator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 0; index < 2 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "raw_iterator") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_verify_checksums = ((PyBoolObject *)values[0]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("raw_iterator", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.raw_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 378, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_20raw_iterator(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_20raw_iterator(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("raw_iterator", 1);

  /* "plyvel/_plyvel.pyx":379
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):
 *         return RawIterator(             # <<<<<<<<<<<<<<
 *             self,  # db
 *             verify_checksums,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "plyvel/_plyvel.pyx":383
 *             verify_checksums,
 *             fill_cache,
 *             None,  # snapshot             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 379, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_verify_checksums);
  __Pyx_GIVEREF((PyObject *)__pyx_v_verify_checksums);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_verify_checksums))) __PYX_ERR(0, 379, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_fill_cache);
  __Pyx_GIVEREF((PyObject *)__pyx_v_fill_cache);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_fill_cache))) __PYX_ERR(0, 379, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, Py_None)) __PYX_ERR(0, 379, __pyx_L1_error);

  /* "plyvel/_plyvel.pyx":379
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):
 *         return RawIterator(             # <<<<<<<<<<<<<<
 *             self,  # db
 *             verify_checksums,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":378
 *         )
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return RawIterator(
 *             self,  # db
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.raw_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":386
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_23snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_22snapshot, "DB.snapshot(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_23snapshot = {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_23snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_22snapshot};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_23snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snapshot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("snapshot", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "snapshot", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_22snapshot(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_22snapshot(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("snapshot", 1);

  /* "plyvel/_plyvel.pyx":387
 * 
 *     def snapshot(self):
 *         return Snapshot(db=self)             # <<<<<<<<<<<<<<
 * 
 *     def get_property(self, bytes name not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_db, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":386
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":389
 *         return Snapshot(db=self)
 * 
 *     def get_property(self, bytes name not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_25get_property(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_24get_property, "DB.get_property(self, bytes name)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_25get_property = {"get_property", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_25get_property, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_24get_property};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_25get_property(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_property (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_property") < 0)) __PYX_ERR(0, 389, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_name = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_property", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 389, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.get_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 0, "name", 1))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_24get_property(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_24get_property(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_name) {
  leveldb::Slice __pyx_v_sl;
  std::string __pyx_v_value;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_property", 1);

  /* "plyvel/_plyvel.pyx":390
 * 
 *     def get_property(self, bytes name not None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":391
 *     def get_property(self, bytes name not None):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice sl = Slice(name, len(name))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 391, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":390
 * 
 *     def get_property(self, bytes name not None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":393
 *             raise RuntimeError("Database is closed")
 * 
 *         cdef Slice sl = Slice(name, len(name))             # <<<<<<<<<<<<<<
 *         cdef string value
 *         cdef c_bool result
 */
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_name); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_v_sl = leveldb::Slice(__pyx_t_3, __pyx_t_4);

  /* "plyvel/_plyvel.pyx":397
 *         cdef c_bool result
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self._db.GetProperty(sl, &value)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":398
 * 
 *         with nogil:
 *             result = self._db.GetProperty(sl, &value)             # <<<<<<<<<<<<<<
 * 
 *         return value if result else None
 */
        __pyx_v_result = __pyx_v_self->_db->GetProperty(__pyx_v_sl, (&__pyx_v_value));
      }

      /* "plyvel/_plyvel.pyx":397
 *         cdef c_bool result
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             result = self._db.GetProperty(sl, &value)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":400
 *             result = self._db.GetProperty(sl, &value)
 * 
 *         return value if result else None             # <<<<<<<<<<<<<<
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_result != 0);
  if (__pyx_t_1) {
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":389
 *         return Snapshot(db=self)
 * 
 *     def get_property(self, bytes name not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.DB.get_property", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":402
 *         return value if result else None
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_27compact_range(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_26compact_range, "DB.compact_range(self, *, bytes start=None, bytes stop=None)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_27compact_range = {"compact_range", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_27compact_range, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_26compact_range};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_27compact_range(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compact_range (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject*)Py_None));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject*)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 0; index < 2 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "compact_range") < 0)) __PYX_ERR(0, 402, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_start = ((PyObject*)values[0]);
    __pyx_v_stop = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compact_range", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 402, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_start), (&PyBytes_Type), 1, "start", 1))) __PYX_ERR(0, 402, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stop), (&PyBytes_Type), 1, "stop", 1))) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_26compact_range(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_26compact_range(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  leveldb::Slice __pyx_v_start_slice;
  leveldb::Slice __pyx_v_stop_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compact_range", 1);

  /* "plyvel/_plyvel.pyx":403
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":404
 *     def compact_range(self, *, bytes start=None, bytes stop=None):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice start_slice
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 404, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":403
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":409
 *         cdef Slice stop_slice
 * 
 *         if start is not None:             # <<<<<<<<<<<<<<
 *             start_slice = Slice(start, len(start))
 * 
 */
  __pyx_t_1 = (__pyx_v_start != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":410
 * 
 *         if start is not None:
 *             start_slice = Slice(start, len(start))             # <<<<<<<<<<<<<<
 * 
 *         if stop is not None:
 */
    if (unlikely(__pyx_v_start == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 410, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_start); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)
    if (unlikely(__pyx_v_start == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 410, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_start); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 410, __pyx_L1_error)
    __pyx_v_start_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

    /* "plyvel/_plyvel.pyx":409
 *         cdef Slice stop_slice
 * 
 *         if start is not None:             # <<<<<<<<<<<<<<
 *             start_slice = Slice(start, len(start))
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":412
 *             start_slice = Slice(start, len(start))
 * 
 *         if stop is not None:             # <<<<<<<<<<<<<<
 *             stop_slice = Slice(stop, len(stop))
 * 
 */
  __pyx_t_1 = (__pyx_v_stop != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":413
 * 
 *         if stop is not None:
 *             stop_slice = Slice(stop, len(stop))             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    if (unlikely(__pyx_v_stop == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 413, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_stop); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    if (unlikely(__pyx_v_stop == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 413, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_stop); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 413, __pyx_L1_error)
    __pyx_v_stop_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

    /* "plyvel/_plyvel.pyx":412
 *             start_slice = Slice(start, len(start))
 * 
 *         if stop is not None:             # <<<<<<<<<<<<<<
 *             stop_slice = Slice(stop, len(stop))
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":415
 *             stop_slice = Slice(stop, len(stop))
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":416
 * 
 *         with nogil:
 *             self._db.CompactRange(&start_slice, &stop_slice)             # <<<<<<<<<<<<<<
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):
 */
        __pyx_v_self->_db->CompactRange((&__pyx_v_start_slice), (&__pyx_v_stop_slice));
      }

      /* "plyvel/_plyvel.pyx":415
 *             stop_slice = Slice(stop, len(stop))
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "plyvel/_plyvel.pyx":402
 *         return value if result else None
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.compact_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":418
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_29approximate_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_28approximate_size, "DB.approximate_size(self, bytes start, bytes stop)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_29approximate_size = {"approximate_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_29approximate_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_28approximate_size};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_29approximate_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approximate_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_stop,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_stop)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("approximate_size", 1, 2, 2, 1); __PYX_ERR(0, 418, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "approximate_size") < 0)) __PYX_ERR(0, 418, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_start = ((PyObject*)values[0]);
    __pyx_v_stop = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("approximate_size", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 418, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.approximate_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_start), (&PyBytes_Type), 0, "start", 1))) __PYX_ERR(0, 418, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stop), (&PyBytes_Type), 0, "stop", 1))) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_28approximate_size(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_28approximate_size(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("approximate_size", 1);

  /* "plyvel/_plyvel.pyx":419
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":420
 *     def approximate_size(self, bytes start not None, bytes stop not None):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         return self.approximate_sizes((start, stop))[0]
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 420, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":419
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":422
 *             raise RuntimeError("Database is closed")
 * 
 *         return self.approximate_sizes((start, stop))[0]             # <<<<<<<<<<<<<<
 * 
 *     def approximate_sizes(self, *ranges):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_approximate_sizes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_GIVEREF(__pyx_v_start);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_start)) __PYX_ERR(0, 422, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_stop);
  __Pyx_GIVEREF(__pyx_v_stop);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_stop)) __PYX_ERR(0, 422, __pyx_L1_error);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":418
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.DB.approximate_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":424
 *         return self.approximate_sizes((start, stop))[0]
 * 
 *     def approximate_sizes(self, *ranges):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_31approximate_sizes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_30approximate_sizes, "DB.approximate_sizes(self, *ranges)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_31approximate_sizes = {"approximate_sizes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_31approximate_sizes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_30approximate_sizes};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_31approximate_sizes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ranges = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approximate_sizes (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "approximate_sizes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_ranges = __pyx_args;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_30approximate_sizes(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_ranges);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_ranges);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_30approximate_sizes(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_ranges) {
  int __pyx_v_n_ranges;
  leveldb::Range *__pyx_v_c_ranges;
  uint64_t *__pyx_v_sizes;
  int __pyx_v_i;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_stop = NULL;
  int __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  const char *__pyx_t_13;
  const char *__pyx_t_14;
  Py_ssize_t __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("approximate_sizes", 1);

  /* "plyvel/_plyvel.pyx":425
 * 
 *     def approximate_sizes(self, *ranges):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":426
 *     def approximate_sizes(self, *ranges):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef int n_ranges = len(ranges)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 426, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":425
 * 
 *     def approximate_sizes(self, *ranges):
 *         if self._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":428
 *             raise RuntimeError("Database is closed")
 * 
 *         cdef int n_ranges = len(ranges)             # <<<<<<<<<<<<<<
 *         cdef Range *c_ranges = <Range *>malloc(n_ranges * sizeof(Range))
 *         cdef uint64_t *sizes = <uint64_t *>malloc(n_ranges * sizeof(uint64_t))
 */
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v_ranges); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_v_n_ranges = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":429
 * 
 *         cdef int n_ranges = len(ranges)
 *         cdef Range *c_ranges = <Range *>malloc(n_ranges * sizeof(Range))             # <<<<<<<<<<<<<<
 *         cdef uint64_t *sizes = <uint64_t *>malloc(n_ranges * sizeof(uint64_t))
 *         try:
 */
  __pyx_v_c_ranges = ((leveldb::Range *)malloc((__pyx_v_n_ranges * (sizeof(leveldb::Range)))));

  /* "plyvel/_plyvel.pyx":430
 *         cdef int n_ranges = len(ranges)
 *         cdef Range *c_ranges = <Range *>malloc(n_ranges * sizeof(Range))
 *         cdef uint64_t *sizes = <uint64_t *>malloc(n_ranges * sizeof(uint64_t))             # <<<<<<<<<<<<<<
 *         try:
 *             for i in xrange(n_ranges):
 */
  __pyx_v_sizes = ((uint64_t *)malloc((__pyx_v_n_ranges * (sizeof(uint64_t)))));

  /* "plyvel/_plyvel.pyx":431
 *         cdef Range *c_ranges = <Range *>malloc(n_ranges * sizeof(Range))
 *         cdef uint64_t *sizes = <uint64_t *>malloc(n_ranges * sizeof(uint64_t))
 *         try:             # <<<<<<<<<<<<<<
 *             for i in xrange(n_ranges):
 *                 start, stop = ranges[i]
 */
  /*try:*/ {

    /* "plyvel/_plyvel.pyx":432
 *         cdef uint64_t *sizes = <uint64_t *>malloc(n_ranges * sizeof(uint64_t))
 *         try:
 *             for i in xrange(n_ranges):             # <<<<<<<<<<<<<<
 *                 start, stop = ranges[i]
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):
 */
    __pyx_t_4 = __pyx_v_n_ranges;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "plyvel/_plyvel.pyx":433
 *         try:
 *             for i in xrange(n_ranges):
 *                 start, stop = ranges[i]             # <<<<<<<<<<<<<<
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):
 *                     raise TypeError(
 */
      __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_ranges, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 433, __pyx_L5_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 433, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 433, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 433, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 433, __pyx_L5_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 433, __pyx_L5_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_start, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_stop, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "plyvel/_plyvel.pyx":434
 *             for i in xrange(n_ranges):
 *                 start, stop = ranges[i]
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         "Start and stop of range must be byte strings")
 */
      __pyx_t_11 = PyBytes_Check(__pyx_v_start); 
      __pyx_t_12 = (!__pyx_t_11);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_1 = __pyx_t_12;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_12 = PyBytes_Check(__pyx_v_stop); 
      __pyx_t_11 = (!__pyx_t_12);
      __pyx_t_1 = __pyx_t_11;
      __pyx_L12_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "plyvel/_plyvel.pyx":435
 *                 start, stop = ranges[i]
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         "Start and stop of range must be byte strings")
 *                 c_ranges[i] = Range(
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 435, __pyx_L5_error)

        /* "plyvel/_plyvel.pyx":434
 *             for i in xrange(n_ranges):
 *                 start, stop = ranges[i]
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):             # <<<<<<<<<<<<<<
 *                     raise TypeError(
 *                         "Start and stop of range must be byte strings")
 */
      }

      /* "plyvel/_plyvel.pyx":438
 *                         "Start and stop of range must be byte strings")
 *                 c_ranges[i] = Range(
 *                     Slice(start, len(start)),             # <<<<<<<<<<<<<<
 *                     Slice(stop, len(stop)))
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_start); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L5_error)
      __pyx_t_3 = PyObject_Length(__pyx_v_start); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 438, __pyx_L5_error)

      /* "plyvel/_plyvel.pyx":439
 *                 c_ranges[i] = Range(
 *                     Slice(start, len(start)),
 *                     Slice(stop, len(stop)))             # <<<<<<<<<<<<<<
 * 
 *             with nogil:
 */
      __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_stop); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L5_error)
      __pyx_t_15 = PyObject_Length(__pyx_v_stop); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 439, __pyx_L5_error)

      /* "plyvel/_plyvel.pyx":437
 *                     raise TypeError(
 *                         "Start and stop of range must be byte strings")
 *                 c_ranges[i] = Range(             # <<<<<<<<<<<<<<
 *                     Slice(start, len(start)),
 *                     Slice(stop, len(stop)))
 */
      (__pyx_v_c_ranges[__pyx_v_i]) = leveldb::Range(leveldb::Slice(__pyx_t_13, __pyx_t_3), leveldb::Slice(__pyx_t_14, __pyx_t_15));
    }

    /* "plyvel/_plyvel.pyx":441
 *                     Slice(stop, len(stop)))
 * 
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._db.GetApproximateSizes(c_ranges, n_ranges, sizes)
 * 
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":442
 * 
 *             with nogil:
 *                 self._db.GetApproximateSizes(c_ranges, n_ranges, sizes)             # <<<<<<<<<<<<<<
 * 
 *             return [sizes[i] for i in xrange(n_ranges)]
 */
          __pyx_v_self->_db->GetApproximateSizes(__pyx_v_c_ranges, __pyx_v_n_ranges, __pyx_v_sizes);
        }

        /* "plyvel/_plyvel.pyx":441
 *                     Slice(stop, len(stop)))
 * 
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._db.GetApproximateSizes(c_ranges, n_ranges, sizes)
 * 
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L16;
          }
          __pyx_L16:;
        }
    }

    /* "plyvel/_plyvel.pyx":444
 *                 self._db.GetApproximateSizes(c_ranges, n_ranges, sizes)
 * 
 *             return [sizes[i] for i in xrange(n_ranges)]             # <<<<<<<<<<<<<<
 *         finally:
 *             free(c_ranges)
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __pyx_v_n_ranges;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_7genexpr__pyx_v_i = __pyx_t_6;
        __pyx_t_8 = __Pyx_PyInt_From_uint64_t((__pyx_v_sizes[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 444, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 444, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    } /* exit inner scope */
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "plyvel/_plyvel.pyx":446
 *             return [sizes[i] for i in xrange(n_ranges)]
 *         finally:
 *             free(c_ranges)             # <<<<<<<<<<<<<<
 *             free(sizes)
 * 
 */
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_c_ranges);

        /* "plyvel/_plyvel.pyx":447
 *         finally:
 *             free(c_ranges)
 *             free(sizes)             # <<<<<<<<<<<<<<
 * 
 *     def prefixed_db(self, bytes prefix not None):
 */
        free(__pyx_v_sizes);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "plyvel/_plyvel.pyx":446
 *             return [sizes[i] for i in xrange(n_ranges)]
 *         finally:
 *             free(c_ranges)             # <<<<<<<<<<<<<<
 *             free(sizes)
 * 
 */
      free(__pyx_v_c_ranges);

      /* "plyvel/_plyvel.pyx":447
 *         finally:
 *             free(c_ranges)
 *             free(sizes)             # <<<<<<<<<<<<<<
 * 
 *     def prefixed_db(self, bytes prefix not None):
 */
      free(__pyx_v_sizes);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "plyvel/_plyvel.pyx":424
 *         return self.approximate_sizes((start, stop))[0]
 * 
 *     def approximate_sizes(self, *ranges):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("plyvel._plyvel.DB.approximate_sizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_stop);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":449
 *             free(sizes)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_33prefixed_db(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_32prefixed_db, "DB.prefixed_db(self, bytes prefix)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_33prefixed_db = {"prefixed_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_33prefixed_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_32prefixed_db};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_33prefixed_db(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prefix = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefixed_db (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prefix,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prefix)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefixed_db") < 0)) __PYX_ERR(0, 449, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_prefix = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefixed_db", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.prefixed_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 0, "prefix", 1))) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_32prefixed_db(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_32prefixed_db(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prefixed_db", 1);

  /* "plyvel/_plyvel.pyx":450
 * 
 *     def prefixed_db(self, bytes prefix not None):
 *         return PrefixedDB(db=self, prefix=prefix)             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_db, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_prefix, __pyx_v_prefix) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":449
 *             free(sizes)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.DB.prefixed_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":452
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_35__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_34__enter__, "DB.__enter__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_35__enter__ = {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_35__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_34__enter__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_35__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__enter__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__enter__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_34__enter__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_34__enter__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 1);

  /* "plyvel/_plyvel.pyx":453
 * 
 *     def __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":452
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":455
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_37__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_36__exit__, "DB.__exit__(self, exc_type, exc_val, exc_tb)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_37__exit__ = {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_37__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_36__exit__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_37__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_tb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 455, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__exit__") < 0)) __PYX_ERR(0, 455, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 455, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_36__exit__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_36__exit__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 1);

  /* "plyvel/_plyvel.pyx":456
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_2DB_close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":455
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.DB.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":224
 *     cdef leveldb.DB* _db
 *     cdef Options options
 *     cdef readonly object name             # <<<<<<<<<<<<<<
 *     cdef object lock
 *     cdef dict iterators
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_4name___get__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_4name___get__(struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_39__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_38__reduce_cython__, "DB.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_39__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_39__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_38__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_39__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_38__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_38__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__db_self_options_cannot_be, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.DB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_41__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2DB_40__setstate_cython__, "DB.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_2DB_41__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_41__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_40__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_2DB_41__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.DB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2DB_40__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2DB_40__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__db_self_options_cannot_be, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.DB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":463
 *     cdef readonly bytes prefix
 * 
 *     def __init__(self, *, DB db not None, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.prefix = prefix
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_prefix = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_prefix,0};
    if (likely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
        (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
        kw_args--;
      }
      else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
      else {
        __Pyx_RaiseKeywordRequired("__init__", __pyx_n_s_db); __PYX_ERR(0, 463, __pyx_L3_error)
      }
      if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prefix)) != 0)) {
        (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
        kw_args--;
      }
      else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
      else {
        __Pyx_RaiseKeywordRequired("__init__", __pyx_n_s_prefix); __PYX_ERR(0, 463, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "__init__") < 0)) __PYX_ERR(0, 463, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("__init__", __pyx_n_s_db); __PYX_ERR(0, 463, __pyx_L3_error)
    }
    __pyx_v_db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)values[0]);
    __pyx_v_prefix = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 463, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_6plyvel_7_plyvel_DB, 0, "db", 0))) __PYX_ERR(0, 463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 0, "prefix", 1))) __PYX_ERR(0, 463, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB___init__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_db, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6plyvel_7_plyvel_10PrefixedDB___init__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "plyvel/_plyvel.pyx":464
 * 
 *     def __init__(self, *, DB db not None, bytes prefix not None):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.prefix = prefix
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "plyvel/_plyvel.pyx":465
 *     def __init__(self, *, DB db not None, bytes prefix not None):
 *         self.db = db
 *         self.prefix = prefix             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  __Pyx_GOTREF(__pyx_v_self->prefix);
  __Pyx_DECREF(__pyx_v_self->prefix);
  __pyx_v_self->prefix = __pyx_v_prefix;

  /* "plyvel/_plyvel.pyx":463
 *     cdef readonly bytes prefix
 * 
 *     def __init__(self, *, DB db not None, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.prefix = prefix
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":467
 *         self.prefix = prefix
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (
 *             self.prefix,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2__repr__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2__repr__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "plyvel/_plyvel.pyx":468
 * 
 *     def __repr__(self):
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (             # <<<<<<<<<<<<<<
 *             self.prefix,
 *             hex(id(self)),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_plyvel_PrefixedDB_with_prefix);
  __pyx_t_2 += 31;
  __Pyx_GIVEREF(__pyx_kp_u_plyvel_PrefixedDB_with_prefix);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_plyvel_PrefixedDB_with_prefix);

  /* "plyvel/_plyvel.pyx":469
 *     def __repr__(self):
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (
 *             self.prefix,             # <<<<<<<<<<<<<<
 *             hex(id(self)),
 *         )
 */
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_self->prefix), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_at_0x);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_at_0x);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at_0x);

  /* "plyvel/_plyvel.pyx":470
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (
 *             self.prefix,
 *             hex(id(self)),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__8);

  /* "plyvel/_plyvel.pyx":468
 * 
 *     def __repr__(self):
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (             # <<<<<<<<<<<<<<
 *             self.prefix,
 *             hex(id(self)),
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":467
 *         self.prefix = prefix
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<plyvel.PrefixedDB with prefix %r at 0x%s>' % (
 *             self.prefix,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_5get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_4get, "PrefixedDB.get(self, bytes key, default=None, *, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_5get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_5get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_4get};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_5get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_default,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":474
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return self.db.get(
 *             self.prefix + key,
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_default);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get") < 0)) __PYX_ERR(0, 473, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_default = values[1];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[2]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 473, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 473, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 474, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_4get(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_key, __pyx_v_default, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_4get(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 1);

  /* "plyvel/_plyvel.pyx":475
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(             # <<<<<<<<<<<<<<
 *             self.prefix + key,
 *             default=default,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->db), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "plyvel/_plyvel.pyx":476
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 *             self.prefix + key,             # <<<<<<<<<<<<<<
 *             default=default,
 *             verify_checksums=verify_checksums,
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "plyvel/_plyvel.pyx":475
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(             # <<<<<<<<<<<<<<
 *             self.prefix + key,
 *             default=default,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error);
  __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":477
 *         return self.db.get(
 *             self.prefix + key,
 *             default=default,             # <<<<<<<<<<<<<<
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_default, __pyx_v_default) < 0) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":478
 *             self.prefix + key,
 *             default=default,
 *             verify_checksums=verify_checksums,             # <<<<<<<<<<<<<<
 *             fill_cache=fill_cache)
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_verify_checksums, ((PyObject *)__pyx_v_verify_checksums)) < 0) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":479
 *             default=default,
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache)             # <<<<<<<<<<<<<<
 * 
 *     def put(self, bytes key not None, value not None, *,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fill_cache, ((PyObject *)__pyx_v_fill_cache)) < 0) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":475
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(             # <<<<<<<<<<<<<<
 *             self.prefix + key,
 *             default=default,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_7put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_6put, "PrefixedDB.put(self, bytes key, value, *, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_7put = {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_7put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_6put};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_7put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,&__pyx_n_s_sync,0};

    /* "plyvel/_plyvel.pyx":482
 * 
 *     def put(self, bytes key not None, value not None, *,
 *             bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, 1); __PYX_ERR(0, 481, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "put") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_value = values[1];
    __pyx_v_sync = ((PyBoolObject *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 481, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_value) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "value"); __PYX_ERR(0, 481, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6put(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_key, __pyx_v_value, __pyx_v_sync);

  /* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6put(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyBoolObject *__pyx_v_sync) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("put", 1);

  /* "plyvel/_plyvel.pyx":483
 *     def put(self, bytes key not None, value not None, *,
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->db), __pyx_n_s_put); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_value)) __PYX_ERR(0, 483, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sync, ((PyObject *)__pyx_v_sync)) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":485
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_9delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_8delete, "PrefixedDB.delete(self, bytes key, *, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_9delete = {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_9delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_8delete};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_9delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_sync,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 485, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 485, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete") < 0)) __PYX_ERR(0, 485, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_sync = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 485, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 485, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 485, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_8delete(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_key, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_8delete(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_key, PyBoolObject *__pyx_v_sync) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 1);

  /* "plyvel/_plyvel.pyx":486
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):
 *         return self.db.delete(self.prefix + key, sync=sync)             # <<<<<<<<<<<<<<
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->db), __pyx_n_s_delete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sync, ((PyObject *)__pyx_v_sync)) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":485
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":488
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_11write_batch(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_10write_batch, "PrefixedDB.write_batch(self, *, transaction=False, bool sync=False)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_11write_batch = {"write_batch", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_11write_batch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_10write_batch};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_11write_batch(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_transaction = 0;
  PyBoolObject *__pyx_v_sync = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_batch (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_transaction,&__pyx_n_s_sync,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 0; index < 2 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "write_batch") < 0)) __PYX_ERR(0, 488, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_transaction = values[0];
    __pyx_v_sync = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_batch", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 488, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.write_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync), __pyx_ptype_7cpython_4bool_bool, 1, "sync", 0))) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_10write_batch(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_transaction, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_10write_batch(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_transaction, PyBoolObject *__pyx_v_sync) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_batch", 1);

  /* "plyvel/_plyvel.pyx":489
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):
 *         return WriteBatch(self.db, self.prefix, transaction, sync)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->db);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->db))) __PYX_ERR(0, 489, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->prefix);
  __Pyx_GIVEREF(__pyx_v_self->prefix);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->prefix)) __PYX_ERR(0, 489, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_transaction);
  __Pyx_GIVEREF(__pyx_v_transaction);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_transaction)) __PYX_ERR(0, 489, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_sync);
  __Pyx_GIVEREF((PyObject *)__pyx_v_sync);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_sync))) __PYX_ERR(0, 489, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":488
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.write_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":491
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self.iterator()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_13__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_12__iter__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_12__iter__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "plyvel/_plyvel.pyx":492
 * 
 *     def __iter__(self):
 *         return self.iterator()             # <<<<<<<<<<<<<<
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":491
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self.iterator()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_15iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_14iterator, "PrefixedDB.iterator(self, *, reverse=False, start=None, stop=None, include_start=True, include_stop=False, prefix=None, include_key=True, include_value=True, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_15iterator = {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_15iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_14iterator};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_15iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_reverse = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_include_start = 0;
  PyObject *__pyx_v_include_stop = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_include_key = 0;
  PyObject *__pyx_v_include_value = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reverse,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_include_start,&__pyx_n_s_include_stop,&__pyx_n_s_prefix,&__pyx_n_s_include_key,&__pyx_n_s_include_value,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":495
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":496
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));

    /* "plyvel/_plyvel.pyx":497
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return Iterator(
 *             self.db,
 */
    values[8] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[9] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 10)) {
        Py_ssize_t index;
        for (index = 0; index < 10 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "iterator") < 0)) __PYX_ERR(0, 494, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_reverse = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
    __pyx_v_include_start = values[3];
    __pyx_v_include_stop = values[4];
    __pyx_v_prefix = values[5];
    __pyx_v_include_key = values[6];
    __pyx_v_include_value = values[7];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[8]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[9]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iterator", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 494, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 497, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_14iterator(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_reverse, __pyx_v_start, __pyx_v_stop, __pyx_v_include_start, __pyx_v_include_stop, __pyx_v_prefix, __pyx_v_include_key, __pyx_v_include_value, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_14iterator(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterator", 1);

  /* "plyvel/_plyvel.pyx":498
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             self.db,
 *             self.prefix,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "plyvel/_plyvel.pyx":511
 *             verify_checksums,
 *             fill_cache,
 *             None,  # snapshot             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_1 = PyTuple_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->db);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->db))) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->prefix);
  __Pyx_GIVEREF(__pyx_v_self->prefix);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->prefix)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_reverse);
  __Pyx_GIVEREF(__pyx_v_reverse);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_reverse)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_GIVEREF(__pyx_v_start);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_start)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_stop);
  __Pyx_GIVEREF(__pyx_v_stop);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_stop)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_start);
  __Pyx_GIVEREF(__pyx_v_include_start);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_include_start)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_stop);
  __Pyx_GIVEREF(__pyx_v_include_stop);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_include_stop)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_v_prefix)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_key);
  __Pyx_GIVEREF(__pyx_v_include_key);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_v_include_key)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_include_value);
  __Pyx_GIVEREF(__pyx_v_include_value);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_v_include_value)) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_verify_checksums);
  __Pyx_GIVEREF((PyObject *)__pyx_v_verify_checksums);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 10, ((PyObject *)__pyx_v_verify_checksums))) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_fill_cache);
  __Pyx_GIVEREF((PyObject *)__pyx_v_fill_cache);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 11, ((PyObject *)__pyx_v_fill_cache))) __PYX_ERR(0, 498, __pyx_L1_error);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 12, Py_None)) __PYX_ERR(0, 498, __pyx_L1_error);

  /* "plyvel/_plyvel.pyx":498
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             self.db,
 *             self.prefix,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":514
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_17snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_16snapshot, "PrefixedDB.snapshot(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_17snapshot = {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_17snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_16snapshot};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_17snapshot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snapshot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("snapshot", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "snapshot", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_16snapshot(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_16snapshot(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("snapshot", 1);

  /* "plyvel/_plyvel.pyx":515
 * 
 *     def snapshot(self):
 *         return Snapshot(db=self.db, prefix=self.prefix)             # <<<<<<<<<<<<<<
 * 
 *     def prefixed_db(self, bytes prefix not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_db, ((PyObject *)__pyx_v_self->db)) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_prefix, __pyx_v_self->prefix) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":514
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":517
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self.db, prefix=self.prefix + prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db, "PrefixedDB.prefixed_db(self, bytes prefix)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db = {"prefixed_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_prefix = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefixed_db (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prefix,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prefix)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "prefixed_db") < 0)) __PYX_ERR(0, 517, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_prefix = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prefixed_db", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 517, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.prefixed_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 0, "prefix", 1))) __PYX_ERR(0, 517, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prefixed_db", 1);

  /* "plyvel/_plyvel.pyx":518
 * 
 *     def prefixed_db(self, bytes prefix not None):
 *         return PrefixedDB(db=self.db, prefix=self.prefix + prefix)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_db, ((PyObject *)__pyx_v_self->db)) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_prefix, __pyx_t_2) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":517
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self.db, prefix=self.prefix + prefix)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.prefixed_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":460
 * 
 * cdef class PrefixedDB:
 *     cdef readonly DB db             # <<<<<<<<<<<<<<
 *     cdef readonly bytes prefix
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_2db_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_2db_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2db___get__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_2db___get__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->db);
  __pyx_r = ((PyObject *)__pyx_v_self->db);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":461
 * cdef class PrefixedDB:
 *     cdef readonly DB db
 *     cdef readonly bytes prefix             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *, DB db not None, bytes prefix not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_6prefix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_6prefix_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6prefix___get__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_6prefix___get__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->prefix);
  __pyx_r = __pyx_v_self->prefix;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__, "PrefixedDB.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.db, self.prefix)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->db);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->db))) __PYX_ERR(1, 5, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_self->prefix);
  __Pyx_GIVEREF(__pyx_v_self->prefix);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->prefix)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.db, self.prefix)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.db, self.prefix)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.db is not None or self.prefix is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.db, self.prefix)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.db is not None or self.prefix is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, None), state
 */
  /*else*/ {
    __pyx_t_4 = (((PyObject *)__pyx_v_self->db) != Py_None);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->prefix != ((PyObject*)Py_None));
    __pyx_t_2 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.db is not None or self.prefix is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.db is not None or self.prefix is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_PrefixedDB); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_245107514);
    __Pyx_GIVEREF(__pyx_int_245107514);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_245107514)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.db is not None or self.prefix is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, None), state
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PrefixedDB); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_245107514);
    __Pyx_GIVEREF(__pyx_int_245107514);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_245107514)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__, "PrefixedDB.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel___pyx_unpickle_PrefixedDB__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.PrefixedDB.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_1repair_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_repair_db, "repair_db(name, *, paranoid_checks=None, write_buffer_size=None, max_open_files=None, lru_cache_size=None, block_size=None, block_restart_interval=None, max_file_size=None, compression=u'snappy', int bloom_filter_bits=0, comparator=None, bytes comparator_name=None)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_1repair_db = {"repair_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_1repair_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_repair_db};
static PyObject *__pyx_pw_6plyvel_7_plyvel_1repair_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_paranoid_checks = 0;
  PyObject *__pyx_v_write_buffer_size = 0;
  PyObject *__pyx_v_max_open_files = 0;
  PyObject *__pyx_v_lru_cache_size = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_block_restart_interval = 0;
  PyObject *__pyx_v_max_file_size = 0;
  PyObject *__pyx_v_compression = 0;
  int __pyx_v_bloom_filter_bits;
  PyObject *__pyx_v_comparator = 0;
  PyObject *__pyx_v_comparator_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("repair_db (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_paranoid_checks,&__pyx_n_s_write_buffer_size,&__pyx_n_s_max_open_files,&__pyx_n_s_lru_cache_size,&__pyx_n_s_block_size,&__pyx_n_s_block_restart_interval,&__pyx_n_s_max_file_size,&__pyx_n_s_compression,&__pyx_n_s_bloom_filter_bits,&__pyx_n_s_comparator,&__pyx_n_s_comparator_name,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":522
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,
 *               max_open_files=None, lru_cache_size=None, block_size=None,             # <<<<<<<<<<<<<<
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":523
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,             # <<<<<<<<<<<<<<
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 *               bytes comparator_name=None):
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[8] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_n_u_snappy)));

    /* "plyvel/_plyvel.pyx":524
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,             # <<<<<<<<<<<<<<
 *               bytes comparator_name=None):
 *     cdef Options options = Options()
 */
    values[10] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":525
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 *               bytes comparator_name=None):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */
    values[11] = __Pyx_Arg_NewRef_FASTCALL(((PyObject*)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && likely(kw_args <= 11)) {
        Py_ssize_t index;
        for (index = 1; index < 12 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "repair_db") < 0)) __PYX_ERR(0, 521, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
    __pyx_v_paranoid_checks = values[1];
    __pyx_v_write_buffer_size = values[2];
    __pyx_v_max_open_files = values[3];
    __pyx_v_lru_cache_size = values[4];
    __pyx_v_block_size = values[5];
    __pyx_v_block_restart_interval = values[6];
    __pyx_v_max_file_size = values[7];
    __pyx_v_compression = values[8];
    if (values[9]) {
      __pyx_v_bloom_filter_bits = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_bloom_filter_bits == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L3_error)
    } else {
      __pyx_v_bloom_filter_bits = ((int)((int)0));
    }
    __pyx_v_comparator = values[10];
    __pyx_v_comparator_name = ((PyObject*)values[11]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repair_db", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 521, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comparator_name), (&PyBytes_Type), 1, "comparator_name", 1))) __PYX_ERR(0, 525, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_repair_db(__pyx_self, __pyx_v_name, __pyx_v_paranoid_checks, __pyx_v_write_buffer_size, __pyx_v_max_open_files, __pyx_v_lru_cache_size, __pyx_v_block_size, __pyx_v_block_restart_interval, __pyx_v_max_file_size, __pyx_v_compression, __pyx_v_bloom_filter_bits, __pyx_v_comparator, __pyx_v_comparator_name);

  /* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_repair_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_paranoid_checks, PyObject *__pyx_v_write_buffer_size, PyObject *__pyx_v_max_open_files, PyObject *__pyx_v_lru_cache_size, PyObject *__pyx_v_block_size, PyObject *__pyx_v_block_restart_interval, PyObject *__pyx_v_max_file_size, PyObject *__pyx_v_compression, int __pyx_v_bloom_filter_bits, PyObject *__pyx_v_comparator, PyObject *__pyx_v_comparator_name) {
  leveldb::Options __pyx_v_options;
  leveldb::Status __pyx_v_st;
  std::string __pyx_v_fsname;
  int __pyx_v_create_if_missing;
  int __pyx_v_error_if_exists;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("repair_db", 1);

  /* "plyvel/_plyvel.pyx":526
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 *               bytes comparator_name=None):
 *     cdef Options options = Options()             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string fsname
 */
  __pyx_v_options = leveldb::Options();

  /* "plyvel/_plyvel.pyx":530
 *     cdef string fsname
 * 
 *     fsname = to_file_system_name(name)             # <<<<<<<<<<<<<<
 *     create_if_missing = False
 *     error_if_exists = True
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_to_file_system_name(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fsname = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "plyvel/_plyvel.pyx":531
 * 
 *     fsname = to_file_system_name(name)
 *     create_if_missing = False             # <<<<<<<<<<<<<<
 *     error_if_exists = True
 *     parse_options(
 */
  __pyx_v_create_if_missing = 0;

  /* "plyvel/_plyvel.pyx":532
 *     fsname = to_file_system_name(name)
 *     create_if_missing = False
 *     error_if_exists = True             # <<<<<<<<<<<<<<
 *     parse_options(
 *         &options, create_if_missing, error_if_exists, paranoid_checks,
 */
  __pyx_v_error_if_exists = 1;

  /* "plyvel/_plyvel.pyx":533
 *     create_if_missing = False
 *     error_if_exists = True
 *     parse_options(             # <<<<<<<<<<<<<<
 *         &options, create_if_missing, error_if_exists, paranoid_checks,
 *         write_buffer_size, max_open_files, lru_cache_size, block_size,
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_parse_options((&__pyx_v_options), __pyx_v_create_if_missing, __pyx_v_error_if_exists, __pyx_v_paranoid_checks, __pyx_v_write_buffer_size, __pyx_v_max_open_files, __pyx_v_lru_cache_size, __pyx_v_block_size, __pyx_v_block_restart_interval, __pyx_v_max_file_size, __pyx_v_compression, __pyx_v_bloom_filter_bits, __pyx_v_comparator, __pyx_v_comparator_name); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 533, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":538
 *         block_restart_interval, max_file_size, compression, bloom_filter_bits,
 *         comparator, comparator_name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = RepairDB(fsname, options)
 *     raise_for_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":539
 *         comparator, comparator_name)
 *     with nogil:
 *         st = RepairDB(fsname, options)             # <<<<<<<<<<<<<<
 *     raise_for_status(st)
 * 
 */
        __pyx_v_st = leveldb::RepairDB(__pyx_v_fsname, __pyx_v_options);
      }

      /* "plyvel/_plyvel.pyx":538
 *         block_restart_interval, max_file_size, compression, bloom_filter_bits,
 *         comparator, comparator_name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = RepairDB(fsname, options)
 *     raise_for_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "plyvel/_plyvel.pyx":540
 *     with nogil:
 *         st = RepairDB(fsname, options)
 *     raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 540, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.repair_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":543
 * 
 * 
 * def destroy_db(name):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_3destroy_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_2destroy_db, "destroy_db(name)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_3destroy_db = {"destroy_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_3destroy_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2destroy_db};
static PyObject *__pyx_pw_6plyvel_7_plyvel_3destroy_db(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy_db (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "destroy_db") < 0)) __PYX_ERR(0, 543, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroy_db", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 543, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.destroy_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_2destroy_db(__pyx_self, __pyx_v_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_2destroy_db(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  leveldb::Options __pyx_v_options;
  leveldb::Status __pyx_v_st;
  std::string __pyx_v_fsname;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy_db", 1);

  /* "plyvel/_plyvel.pyx":544
 * 
 * def destroy_db(name):
 *     cdef Options options = Options()             # <<<<<<<<<<<<<<
 *     cdef Status st
 *     cdef string fsname
 */
  __pyx_v_options = leveldb::Options();

  /* "plyvel/_plyvel.pyx":548
 *     cdef string fsname
 * 
 *     fsname = to_file_system_name(name)             # <<<<<<<<<<<<<<
 *     with nogil:
 *         st = DestroyDB(fsname, options)
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_to_file_system_name(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fsname = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "plyvel/_plyvel.pyx":549
 * 
 *     fsname = to_file_system_name(name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = DestroyDB(fsname, options)
 *     raise_for_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":550
 *     fsname = to_file_system_name(name)
 *     with nogil:
 *         st = DestroyDB(fsname, options)             # <<<<<<<<<<<<<<
 *     raise_for_status(st)
 * 
 */
        __pyx_v_st = leveldb::DestroyDB(__pyx_v_fsname, __pyx_v_options);
      }

      /* "plyvel/_plyvel.pyx":549
 * 
 *     fsname = to_file_system_name(name)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         st = DestroyDB(fsname, options)
 *     raise_for_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "plyvel/_plyvel.pyx":551
 *     with nogil:
 *         st = DestroyDB(fsname, options)
 *     raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 551, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":543
 * 
 * 
 * def destroy_db(name):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.destroy_db", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":566
 *     cdef c_bool transaction
 * 
 *     def __init__(self, DB db not None, bytes prefix, bool transaction, sync):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.prefix = prefix
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_10WriteBatch_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_10WriteBatch_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_prefix = 0;
  PyBoolObject *__pyx_v_transaction = 0;
  PyObject *__pyx_v_sync = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_prefix,&__pyx_n_s_transaction,&__pyx_n_s_sync,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prefix)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 566, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_transaction)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 566, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sync)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 566, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 566, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
    }
    __pyx_v_db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)values[0]);
    __pyx_v_prefix = ((PyObject*)values[1]);
    __pyx_v_transaction = ((PyBoolObject *)values[2]);
    __pyx_v_sync = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 566, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_6plyvel_7_plyvel_DB, 0, "db", 0))) __PYX_ERR(0, 566, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 1, "prefix", 1))) __PYX_ERR(0, 566, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_transaction), __pyx_ptype_7cpython_4bool_bool, 1, "transaction", 0))) __PYX_ERR(0, 566, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch___init__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v_db, __pyx_v_prefix, __pyx_v_transaction, __pyx_v_sync);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6plyvel_7_plyvel_10WriteBatch___init__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix, PyBoolObject *__pyx_v_transaction, PyObject *__pyx_v_sync) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "plyvel/_plyvel.pyx":567
 * 
 *     def __init__(self, DB db not None, bytes prefix, bool transaction, sync):
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.prefix = prefix
 *         self.transaction = transaction
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "plyvel/_plyvel.pyx":568
 *     def __init__(self, DB db not None, bytes prefix, bool transaction, sync):
 *         self.db = db
 *         self.prefix = prefix             # <<<<<<<<<<<<<<
 *         self.transaction = transaction
 * 
 */
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  __Pyx_GOTREF(__pyx_v_self->prefix);
  __Pyx_DECREF(__pyx_v_self->prefix);
  __pyx_v_self->prefix = __pyx_v_prefix;

  /* "plyvel/_plyvel.pyx":569
 *         self.db = db
 *         self.prefix = prefix
 *         self.transaction = transaction             # <<<<<<<<<<<<<<
 * 
 *         self.write_options = WriteOptions()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_transaction)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L1_error)
  __pyx_v_self->transaction = __pyx_t_1;

  /* "plyvel/_plyvel.pyx":571
 *         self.transaction = transaction
 * 
 *         self.write_options = WriteOptions()             # <<<<<<<<<<<<<<
 *         if sync is not None:
 *             self.write_options.sync = sync
 */
  __pyx_v_self->write_options = leveldb::WriteOptions();

  /* "plyvel/_plyvel.pyx":572
 * 
 *         self.write_options = WriteOptions()
 *         if sync is not None:             # <<<<<<<<<<<<<<
 *             self.write_options.sync = sync
 * 
 */
  __pyx_t_2 = (__pyx_v_sync != Py_None);
  if (__pyx_t_2) {

    /* "plyvel/_plyvel.pyx":573
 *         self.write_options = WriteOptions()
 *         if sync is not None:
 *             self.write_options.sync = sync             # <<<<<<<<<<<<<<
 * 
 *         self._write_batch = new leveldb.WriteBatch()
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_sync); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L1_error)
    __pyx_v_self->write_options.sync = __pyx_t_1;

    /* "plyvel/_plyvel.pyx":572
 * 
 *         self.write_options = WriteOptions()
 *         if sync is not None:             # <<<<<<<<<<<<<<
 *             self.write_options.sync = sync
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":575
 *             self.write_options.sync = sync
 * 
 *         self._write_batch = new leveldb.WriteBatch()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_write_batch = new leveldb::WriteBatch();

  /* "plyvel/_plyvel.pyx":566
 *     cdef c_bool transaction
 * 
 *     def __init__(self, DB db not None, bytes prefix, bool transaction, sync):             # <<<<<<<<<<<<<<
 *         self.db = db
 *         self.prefix = prefix
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":577
 *         self._write_batch = new leveldb.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._write_batch
 * 
 */

/* Python wrapper */
static void __pyx_pw_6plyvel_7_plyvel_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6plyvel_7_plyvel_10WriteBatch_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6plyvel_7_plyvel_10WriteBatch_2__dealloc__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6plyvel_7_plyvel_10WriteBatch_2__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {

  /* "plyvel/_plyvel.pyx":578
 * 
 *     def __dealloc__(self):
 *         del self._write_batch             # <<<<<<<<<<<<<<
 * 
 *     def put(self, bytes key not None, value not None):
 */
  delete __pyx_v_self->_write_batch;

  /* "plyvel/_plyvel.pyx":577
 *         self._write_batch = new leveldb.WriteBatch()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._write_batch
 * 
 */

  /* function exit code */
}

/* "plyvel/_plyvel.pyx":580
 *         del self._write_batch
 * 
 *     def put(self, bytes key not None, value not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_5put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_4put, "WriteBatch.put(self, bytes key, value)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_5put = {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_5put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_4put};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_5put(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("put (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, 1); __PYX_ERR(0, 580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "put") < 0)) __PYX_ERR(0, 580, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("put", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 580, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 580, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_value) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "value"); __PYX_ERR(0, 580, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_4put(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_4put(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  leveldb::Slice __pyx_v_key_slice;
  Py_buffer __pyx_v_value_buffer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("put", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "plyvel/_plyvel.pyx":581
 * 
 *     def put(self, bytes key not None, value not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":582
 *     def put(self, bytes key not None, value not None):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.prefix is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 582, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":581
 * 
 *     def put(self, bytes key not None, value not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":584
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  __pyx_t_1 = (__pyx_v_self->prefix != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":585
 * 
 *         if self.prefix is not None:
 *             key = self.prefix + key             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":584
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":587
 *             key = self.prefix + key
 * 
 *         cdef Slice key_slice = Slice(key, len(key))             # <<<<<<<<<<<<<<
 *         cdef Py_buffer value_buffer
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 */
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_key); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_v_key_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

  /* "plyvel/_plyvel.pyx":589
 *         cdef Slice key_slice = Slice(key, len(key))
 *         cdef Py_buffer value_buffer
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)             # <<<<<<<<<<<<<<
 *         try:
 *             with nogil:
 */
  __pyx_t_5 = PyObject_GetBuffer(__pyx_v_value, (&__pyx_v_value_buffer), PyBUF_SIMPLE); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 589, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":590
 *         cdef Py_buffer value_buffer
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self._write_batch.Put(
 */
  /*try:*/ {

    /* "plyvel/_plyvel.pyx":591
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._write_batch.Put(
 *                     key_slice,
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":592
 *         try:
 *             with nogil:
 *                 self._write_batch.Put(             # <<<<<<<<<<<<<<
 *                     key_slice,
 *                     Slice(<const_char *>value_buffer.buf, value_buffer.len))
 */
          __pyx_v_self->_write_batch->Put(__pyx_v_key_slice, leveldb::Slice(((const char *)__pyx_v_value_buffer.buf), __pyx_v_value_buffer.len));
        }

        /* "plyvel/_plyvel.pyx":591
 *         PyObject_GetBuffer(value, &value_buffer, PyBUF_SIMPLE)
 *         try:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._write_batch.Put(
 *                     key_slice,
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L10;
          }
          __pyx_L10:;
        }
    }
  }

  /* "plyvel/_plyvel.pyx":596
 *                     Slice(<const_char *>value_buffer.buf, value_buffer.len))
 *         finally:
 *             PyBuffer_Release(&value_buffer)             # <<<<<<<<<<<<<<
 * 
 *     def delete(self, bytes key not None):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyBuffer_Release((&__pyx_v_value_buffer));
      goto __pyx_L7;
    }
    __pyx_L7:;
  }

  /* "plyvel/_plyvel.pyx":580
 *         del self._write_batch
 * 
 *     def put(self, bytes key not None, value not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.put", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":598
 *             PyBuffer_Release(&value_buffer)
 * 
 *     def delete(self, bytes key not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_7delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_6delete, "WriteBatch.delete(self, bytes key)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_7delete = {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_7delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_6delete};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_7delete(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "delete") < 0)) __PYX_ERR(0, 598, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_key = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 598, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_6delete(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v_key);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_6delete(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_key) {
  leveldb::Slice __pyx_v_key_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "plyvel/_plyvel.pyx":599
 * 
 *     def delete(self, bytes key not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":600
 *     def delete(self, bytes key not None):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.prefix is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 600, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":599
 * 
 *     def delete(self, bytes key not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":602
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  __pyx_t_1 = (__pyx_v_self->prefix != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":603
 * 
 *         if self.prefix is not None:
 *             key = self.prefix + key             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":602
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":605
 *             key = self.prefix + key
 * 
 *         cdef Slice key_slice = Slice(key, len(key))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._write_batch.Delete(key_slice)
 */
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_key); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_key); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_v_key_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

  /* "plyvel/_plyvel.pyx":606
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._write_batch.Delete(key_slice)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":607
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:
 *             self._write_batch.Delete(key_slice)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
        __pyx_v_self->_write_batch->Delete(__pyx_v_key_slice);
      }

      /* "plyvel/_plyvel.pyx":606
 * 
 *         cdef Slice key_slice = Slice(key, len(key))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._write_batch.Delete(key_slice)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "plyvel/_plyvel.pyx":598
 *             PyBuffer_Release(&value_buffer)
 * 
 *     def delete(self, bytes key not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":609
 *             self._write_batch.Delete(key_slice)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_9clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_8clear, "WriteBatch.clear(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_9clear = {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_9clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_8clear};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_9clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_8clear(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_8clear(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear", 1);

  /* "plyvel/_plyvel.pyx":610
 * 
 *     def clear(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":611
 *     def clear(self):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 611, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":610
 * 
 *     def clear(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":613
 *             raise RuntimeError("Database is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._write_batch.Clear()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":614
 * 
 *         with nogil:
 *             self._write_batch.Clear()             # <<<<<<<<<<<<<<
 * 
 *     def write(self):
 */
        __pyx_v_self->_write_batch->Clear();
      }

      /* "plyvel/_plyvel.pyx":613
 *             raise RuntimeError("Database is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._write_batch.Clear()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":609
 *             self._write_batch.Delete(key_slice)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":616
 *             self._write_batch.Clear()
 * 
 *     def write(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_11write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_10write, "WriteBatch.write(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_11write = {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_11write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_10write};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_11write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("write", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "write", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_10write(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_10write(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {
  leveldb::Status __pyx_v_st;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 1);

  /* "plyvel/_plyvel.pyx":617
 * 
 *     def write(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":618
 *     def write(self):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef Status st
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 618, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":617
 * 
 *     def write(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":621
 * 
 *         cdef Status st
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db._db.Write(self.write_options, self._write_batch)
 *         raise_for_status(st)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":622
 *         cdef Status st
 *         with nogil:
 *             st = self.db._db.Write(self.write_options, self._write_batch)             # <<<<<<<<<<<<<<
 *         raise_for_status(st)
 * 
 */
        __pyx_v_st = __pyx_v_self->db->_db->Write(__pyx_v_self->write_options, __pyx_v_self->_write_batch);
      }

      /* "plyvel/_plyvel.pyx":621
 * 
 *         cdef Status st
 *         with nogil:             # <<<<<<<<<<<<<<
 *             st = self.db._db.Write(self.write_options, self._write_batch)
 *         raise_for_status(st)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":623
 *         with nogil:
 *             st = self.db._db.Write(self.write_options, self._write_batch)
 *         raise_for_status(st)             # <<<<<<<<<<<<<<
 * 
 *     def approximate_size(self):
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_st); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 623, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":616
 *             self._write_batch.Clear()
 * 
 *     def write(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":625
 *         raise_for_status(st)
 * 
 *     def approximate_size(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_13approximate_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_12approximate_size, "WriteBatch.approximate_size(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_13approximate_size = {"approximate_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_13approximate_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_12approximate_size};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_13approximate_size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approximate_size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("approximate_size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "approximate_size", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_12approximate_size(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_12approximate_size(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("approximate_size", 1);

  /* "plyvel/_plyvel.pyx":626
 * 
 *     def approximate_size(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":627
 *     def approximate_size(self):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         return self._write_batch.ApproximateSize()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 627, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":626
 * 
 *     def approximate_size(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":629
 *             raise RuntimeError("Database is closed")
 * 
 *         return self._write_batch.ApproximateSize()             # <<<<<<<<<<<<<<
 * 
 *     def append(self, WriteBatch source not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_write_batch->ApproximateSize()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":625
 *         raise_for_status(st)
 * 
 *     def approximate_size(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.approximate_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":631
 *         return self._write_batch.ApproximateSize()
 * 
 *     def append(self, WriteBatch source not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_15append(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_14append, "WriteBatch.append(self, WriteBatch source)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_15append = {"append", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_15append, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_14append};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_15append(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_source = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_source)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "append") < 0)) __PYX_ERR(0, 631, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_source = ((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 631, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source), __pyx_ptype_6plyvel_7_plyvel_WriteBatch, 0, "source", 0))) __PYX_ERR(0, 631, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_14append(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v_source);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_14append(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_source) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append", 1);

  /* "plyvel/_plyvel.pyx":632
 * 
 *     def append(self, WriteBatch source not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":633
 *     def append(self, WriteBatch source not None):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         self._write_batch.Append(source._write_batch[0])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 633, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":632
 * 
 *     def append(self, WriteBatch source not None):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":635
 *             raise RuntimeError("Database is closed")
 * 
 *         self._write_batch.Append(source._write_batch[0])             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __pyx_v_self->_write_batch->Append((__pyx_v_source->_write_batch[0]));

  /* "plyvel/_plyvel.pyx":631
 *         return self._write_batch.ApproximateSize()
 * 
 *     def append(self, WriteBatch source not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":637
 *         self._write_batch.Append(source._write_batch[0])
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_17__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_16__enter__, "WriteBatch.__enter__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_17__enter__ = {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_17__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_16__enter__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_17__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__enter__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__enter__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_16__enter__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_16__enter__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 1);

  /* "plyvel/_plyvel.pyx":638
 * 
 *     def __enter__(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":639
 *     def __enter__(self):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 639, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":638
 * 
 *     def __enter__(self):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":641
 *             raise RuntimeError("Database is closed")
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":637
 *         self._write_batch.Append(source._write_batch[0])
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":643
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_19__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_18__exit__, "WriteBatch.__exit__(self, exc_type, exc_val, exc_tb)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_19__exit__ = {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_19__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_18__exit__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_19__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 643, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_tb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 643, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__exit__") < 0)) __PYX_ERR(0, 643, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 643, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_18__exit__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_18__exit__(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 1);

  /* "plyvel/_plyvel.pyx":644
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":645
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.transaction and exc_type is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 645, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":644
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         if self.db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":647
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.transaction and exc_type is not None:             # <<<<<<<<<<<<<<
 *             # Exception occurred in transaction; do not write the batch
 *             self.clear()
 */
  __pyx_t_3 = (__pyx_v_self->transaction != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_exc_type != Py_None);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":649
 *         if self.transaction and exc_type is not None:
 *             # Exception occurred in transaction; do not write the batch
 *             self.clear()             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_clear); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":650
 *             # Exception occurred in transaction; do not write the batch
 *             self.clear()
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.write()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":647
 *             raise RuntimeError("Database is closed")
 * 
 *         if self.transaction and exc_type is not None:             # <<<<<<<<<<<<<<
 *             # Exception occurred in transaction; do not write the batch
 *             self.clear()
 */
  }

  /* "plyvel/_plyvel.pyx":652
 *             return
 * 
 *         self.write()             # <<<<<<<<<<<<<<
 *         self.clear()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":653
 * 
 *         self.write()
 *         self.clear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_clear); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":643
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__, "WriteBatch.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__write_batch_self_write_opt, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__, "WriteBatch.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__write_batch_self_write_opt, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.WriteBatch.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":680
 *     cdef object __weakref__
 * 
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,             # <<<<<<<<<<<<<<
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_12BaseIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_12BaseIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,&__pyx_n_s_snapshot,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_verify_checksums)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 680, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fill_cache)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 680, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_snapshot)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 680, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 680, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 680, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
    }
    __pyx_v_db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)values[0]);
    __pyx_v_verify_checksums = ((PyBoolObject *)values[1]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[2]);
    __pyx_v_snapshot = ((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 680, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_6plyvel_7_plyvel_DB, 1, "db", 0))) __PYX_ERR(0, 680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_snapshot), __pyx_ptype_6plyvel_7_plyvel_Snapshot, 1, "snapshot", 0))) __PYX_ERR(0, 681, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator___init__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self), __pyx_v_db, __pyx_v_verify_checksums, __pyx_v_fill_cache, __pyx_v_snapshot);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":701
 *         ref_dict[iterator_id] = weakref_ref(
 *             self,
 *             lambda wr: ref_dict.pop(iterator_id))             # <<<<<<<<<<<<<<
 * 
 *     cpdef close(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_8__init___lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_8__init___lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_8__init___lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_8__init___lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_wr = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wr,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 701, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_wr = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 701, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__init__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_wr);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_wr) {
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *__pyx_cur_scope;
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 1);
  __pyx_outer_scope = (struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_ref_dict)) { __Pyx_RaiseClosureNameError("ref_dict"); __PYX_ERR(0, 701, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_ref_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
    __PYX_ERR(0, 701, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_v_iterator_id)) { __Pyx_RaiseClosureNameError("iterator_id"); __PYX_ERR(0, 701, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyDict_Pop(__pyx_cur_scope->__pyx_v_ref_dict, __pyx_cur_scope->__pyx_v_iterator_id, ((PyObject *)NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__init__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":680
 *     cdef object __weakref__
 * 
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,             # <<<<<<<<<<<<<<
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 */

static int __pyx_pf_6plyvel_7_plyvel_12BaseIterator___init__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache, struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot) {
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *__pyx_cur_scope;
  leveldb::ReadOptions __pyx_v_read_options;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  bool __pyx_t_3;
  leveldb::Snapshot *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)__pyx_tp_new_6plyvel_7_plyvel___pyx_scope_struct____init__(__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 680, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "plyvel/_plyvel.pyx":682
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,
 *                  Snapshot snapshot):
 *         if db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":683
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         self.db = db
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 683, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":682
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,
 *                  Snapshot snapshot):
 *         if db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":685
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         self.db = db             # <<<<<<<<<<<<<<
 * 
 *         cdef ReadOptions read_options
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "plyvel/_plyvel.pyx":688
 * 
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums             # <<<<<<<<<<<<<<
 *         read_options.fill_cache = fill_cache
 *         if snapshot is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_verify_checksums)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_v_read_options.verify_checksums = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":689
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache             # <<<<<<<<<<<<<<
 *         if snapshot is not None:
 *             read_options.snapshot = snapshot._snapshot
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_fill_cache)); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
  __pyx_v_read_options.fill_cache = __pyx_t_3;

  /* "plyvel/_plyvel.pyx":690
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache
 *         if snapshot is not None:             # <<<<<<<<<<<<<<
 *             read_options.snapshot = snapshot._snapshot
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_snapshot) != Py_None);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":691
 *         read_options.fill_cache = fill_cache
 *         if snapshot is not None:
 *             read_options.snapshot = snapshot._snapshot             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_4 = __pyx_v_snapshot->_snapshot;
    __pyx_v_read_options.snapshot = __pyx_t_4;

    /* "plyvel/_plyvel.pyx":690
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache
 *         if snapshot is not None:             # <<<<<<<<<<<<<<
 *             read_options.snapshot = snapshot._snapshot
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":693
 *             read_options.snapshot = snapshot._snapshot
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter = db._db.NewIterator(read_options)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":694
 * 
 *         with nogil:
 *             self._iter = db._db.NewIterator(read_options)             # <<<<<<<<<<<<<<
 * 
 *         # Store a weak reference on the db (needed when closing db)
 */
        __pyx_v_self->_iter = __pyx_v_db->_db->NewIterator(__pyx_v_read_options);
      }

      /* "plyvel/_plyvel.pyx":693
 *             read_options.snapshot = snapshot._snapshot
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter = db._db.NewIterator(read_options)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "plyvel/_plyvel.pyx":697
 * 
 *         # Store a weak reference on the db (needed when closing db)
 *         iterator_id = id(self)             # <<<<<<<<<<<<<<
 *         ref_dict = db.iterators
 *         ref_dict[iterator_id] = weakref_ref(
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_iterator_id = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":698
 *         # Store a weak reference on the db (needed when closing db)
 *         iterator_id = id(self)
 *         ref_dict = db.iterators             # <<<<<<<<<<<<<<
 *         ref_dict[iterator_id] = weakref_ref(
 *             self,
 */
  __pyx_t_2 = __pyx_v_db->iterators;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_ref_dict = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":699
 *         iterator_id = id(self)
 *         ref_dict = db.iterators
 *         ref_dict[iterator_id] = weakref_ref(             # <<<<<<<<<<<<<<
 *             self,
 *             lambda wr: ref_dict.pop(iterator_id))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_weakref_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "plyvel/_plyvel.pyx":701
 *         ref_dict[iterator_id] = weakref_ref(
 *             self,
 *             lambda wr: ref_dict.pop(iterator_id))             # <<<<<<<<<<<<<<
 * 
 *     cpdef close(self):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_8__init___lambda, 0, __pyx_n_s_init___locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_plyvel__plyvel, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self), __pyx_t_6};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "plyvel/_plyvel.pyx":699
 *         iterator_id = id(self)
 *         ref_dict = db.iterators
 *         ref_dict[iterator_id] = weakref_ref(             # <<<<<<<<<<<<<<
 *             self,
 *             lambda wr: ref_dict.pop(iterator_id))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_ref_dict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 699, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_ref_dict, __pyx_cur_scope->__pyx_v_iterator_id, __pyx_t_2) < 0))) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":680
 *     cdef object __weakref__
 * 
 *     def __init__(self, DB db, bool verify_checksums, bool fill_cache,             # <<<<<<<<<<<<<<
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":703
 *             lambda wr: ref_dict.pop(iterator_id))
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._iter is not NULL:
 *             del self._iter
 */

static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_12BaseIterator_close(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void*) __pyx_pw_6plyvel_7_plyvel_12BaseIterator_3close)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "plyvel/_plyvel.pyx":704
 * 
 *     cpdef close(self):
 *         if self._iter is not NULL:             # <<<<<<<<<<<<<<
 *             del self._iter
 *             self._iter = NULL
 */
  __pyx_t_6 = (__pyx_v_self->_iter != NULL);
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":705
 *     cpdef close(self):
 *         if self._iter is not NULL:
 *             del self._iter             # <<<<<<<<<<<<<<
 *             self._iter = NULL
 * 
 */
    delete __pyx_v_self->_iter;

    /* "plyvel/_plyvel.pyx":706
 *         if self._iter is not NULL:
 *             del self._iter
 *             self._iter = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->_iter = NULL;

    /* "plyvel/_plyvel.pyx":704
 * 
 *     cpdef close(self):
 *         if self._iter is not NULL:             # <<<<<<<<<<<<<<
 *             del self._iter
 *             self._iter = NULL
 */
  }

  /* "plyvel/_plyvel.pyx":703
 *             lambda wr: ref_dict.pop(iterator_id))
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._iter is not NULL:
 *             del self._iter
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_12BaseIterator_2close, "BaseIterator.close(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_3close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_3close, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_2close};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_3close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator_2close(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_2close(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_12BaseIterator_close(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":708
 *             self._iter = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static void __pyx_pw_6plyvel_7_plyvel_12BaseIterator_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6plyvel_7_plyvel_12BaseIterator_5__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6plyvel_7_plyvel_12BaseIterator_4__dealloc__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6plyvel_7_plyvel_12BaseIterator_4__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "plyvel/_plyvel.pyx":709
 * 
 *     def __dealloc__(self):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self->__pyx_vtab)->close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":708
 *             self._iter = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("plyvel._plyvel.BaseIterator.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "plyvel/_plyvel.pyx":711
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_7__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_12BaseIterator_6__enter__, "BaseIterator.__enter__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_7__enter__ = {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_7__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_6__enter__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_7__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__enter__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__enter__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator_6__enter__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_6__enter__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 1);

  /* "plyvel/_plyvel.pyx":712
 * 
 *     def __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":711
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":714
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_9__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_12BaseIterator_8__exit__, "BaseIterator.__exit__(self, exc_type, exc_val, exc_tb)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_9__exit__ = {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_9__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_8__exit__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_9__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_tb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 714, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__exit__") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator_8__exit__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_8__exit__(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 1);

  /* "plyvel/_plyvel.pyx":715
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()             # <<<<<<<<<<<<<<
 *         return False  # propagate exceptions
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self->__pyx_vtab)->close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":716
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()
 *         return False  # propagate exceptions             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":714
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__, "BaseIterator.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__, "BaseIterator.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.BaseIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":736
 *     cdef size_t db_prefix_len
 * 
 *     def __init__(self, DB db, bytes db_prefix, bool reverse, bytes start,             # <<<<<<<<<<<<<<
 *                  bytes stop, bool include_start, bool include_stop,
 *                  bytes prefix, bool include_key, bool include_value,
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_8Iterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_8Iterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_db_prefix = 0;
  PyBoolObject *__pyx_v_reverse = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyBoolObject *__pyx_v_include_start = 0;
  PyBoolObject *__pyx_v_include_stop = 0;
  PyObject *__pyx_v_prefix = 0;
  PyBoolObject *__pyx_v_include_key = 0;
  PyBoolObject *__pyx_v_include_value = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_db_prefix,&__pyx_n_s_reverse,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_include_start,&__pyx_n_s_include_stop,&__pyx_n_s_prefix,&__pyx_n_s_include_key,&__pyx_n_s_include_value,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,&__pyx_n_s_snapshot,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 13: values[12] = __Pyx_Arg_VARARGS(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = __Pyx_Arg_VARARGS(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_VARARGS(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_VARARGS(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db_prefix)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 1); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reverse)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 2); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 3); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_stop)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 4); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_include_start)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 5); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_include_stop)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 6); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prefix)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[7]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 7); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_include_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[8]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 8); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_include_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[9]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 9); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_verify_checksums)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[10]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 10); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fill_cache)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[11]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 11); __PYX_ERR(0, 736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_snapshot)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[12]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, 12); __PYX_ERR(0, 736, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 736, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 13)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
      values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
      values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
      values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
      values[7] = __Pyx_Arg_VARARGS(__pyx_args, 7);
      values[8] = __Pyx_Arg_VARARGS(__pyx_args, 8);
      values[9] = __Pyx_Arg_VARARGS(__pyx_args, 9);
      values[10] = __Pyx_Arg_VARARGS(__pyx_args, 10);
      values[11] = __Pyx_Arg_VARARGS(__pyx_args, 11);
      values[12] = __Pyx_Arg_VARARGS(__pyx_args, 12);
    }
    __pyx_v_db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)values[0]);
    __pyx_v_db_prefix = ((PyObject*)values[1]);
    __pyx_v_reverse = ((PyBoolObject *)values[2]);
    __pyx_v_start = ((PyObject*)values[3]);
    __pyx_v_stop = ((PyObject*)values[4]);
    __pyx_v_include_start = ((PyBoolObject *)values[5]);
    __pyx_v_include_stop = ((PyBoolObject *)values[6]);
    __pyx_v_prefix = ((PyObject*)values[7]);
    __pyx_v_include_key = ((PyBoolObject *)values[8]);
    __pyx_v_include_value = ((PyBoolObject *)values[9]);
    __pyx_v_verify_checksums = ((PyBoolObject *)values[10]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[11]);
    __pyx_v_snapshot = ((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)values[12]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 13, 13, __pyx_nargs); __PYX_ERR(0, 736, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_6plyvel_7_plyvel_DB, 1, "db", 0))) __PYX_ERR(0, 736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db_prefix), (&PyBytes_Type), 1, "db_prefix", 1))) __PYX_ERR(0, 736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reverse), __pyx_ptype_7cpython_4bool_bool, 1, "reverse", 0))) __PYX_ERR(0, 736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_start), (&PyBytes_Type), 1, "start", 1))) __PYX_ERR(0, 736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stop), (&PyBytes_Type), 1, "stop", 1))) __PYX_ERR(0, 737, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_include_start), __pyx_ptype_7cpython_4bool_bool, 1, "include_start", 0))) __PYX_ERR(0, 737, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_include_stop), __pyx_ptype_7cpython_4bool_bool, 1, "include_stop", 0))) __PYX_ERR(0, 737, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 1, "prefix", 1))) __PYX_ERR(0, 738, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_include_key), __pyx_ptype_7cpython_4bool_bool, 1, "include_key", 0))) __PYX_ERR(0, 738, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_include_value), __pyx_ptype_7cpython_4bool_bool, 1, "include_value", 0))) __PYX_ERR(0, 738, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 739, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 739, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_snapshot), __pyx_ptype_6plyvel_7_plyvel_Snapshot, 1, "snapshot", 0))) __PYX_ERR(0, 739, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator___init__(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self), __pyx_v_db, __pyx_v_db_prefix, __pyx_v_reverse, __pyx_v_start, __pyx_v_stop, __pyx_v_include_start, __pyx_v_include_stop, __pyx_v_prefix, __pyx_v_include_key, __pyx_v_include_value, __pyx_v_verify_checksums, __pyx_v_fill_cache, __pyx_v_snapshot);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6plyvel_7_plyvel_8Iterator___init__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_db_prefix, PyBoolObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyBoolObject *__pyx_v_include_start, PyBoolObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyBoolObject *__pyx_v_include_key, PyBoolObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache, struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_snapshot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  enum __pyx_t_6plyvel_7_plyvel_IteratorDirection __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  const char *__pyx_t_8;
  bool __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_INCREF(__pyx_v_stop);
  __Pyx_INCREF((PyObject *)__pyx_v_include_start);
  __Pyx_INCREF((PyObject *)__pyx_v_include_stop);
  __Pyx_INCREF(__pyx_v_prefix);

  /* "plyvel/_plyvel.pyx":741
 *                  bool verify_checksums, bool fill_cache, Snapshot snapshot):
 * 
 *         super(Iterator, self).__init__(             # <<<<<<<<<<<<<<
 *             db=db,
 *             verify_checksums=verify_checksums,
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator))) __PYX_ERR(0, 741, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 741, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":742
 * 
 *         super(Iterator, self).__init__(
 *             db=db,             # <<<<<<<<<<<<<<
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_db, ((PyObject *)__pyx_v_db)) < 0) __PYX_ERR(0, 742, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":743
 *         super(Iterator, self).__init__(
 *             db=db,
 *             verify_checksums=verify_checksums,             # <<<<<<<<<<<<<<
 *             fill_cache=fill_cache,
 *             snapshot=snapshot)
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_verify_checksums, ((PyObject *)__pyx_v_verify_checksums)) < 0) __PYX_ERR(0, 742, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":744
 *             db=db,
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,             # <<<<<<<<<<<<<<
 *             snapshot=snapshot)
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fill_cache, ((PyObject *)__pyx_v_fill_cache)) < 0) __PYX_ERR(0, 742, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":745
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,
 *             snapshot=snapshot)             # <<<<<<<<<<<<<<
 * 
 *         self.comparator = <leveldb.Comparator*>db.options.comparator
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_snapshot, ((PyObject *)__pyx_v_snapshot)) < 0) __PYX_ERR(0, 742, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":741
 *                  bool verify_checksums, bool fill_cache, Snapshot snapshot):
 * 
 *         super(Iterator, self).__init__(             # <<<<<<<<<<<<<<
 *             db=db,
 *             verify_checksums=verify_checksums,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "plyvel/_plyvel.pyx":747
 *             snapshot=snapshot)
 * 
 *         self.comparator = <leveldb.Comparator*>db.options.comparator             # <<<<<<<<<<<<<<
 *         self.direction = FORWARD if not reverse else REVERSE
 * 
 */
  __pyx_v_self->comparator = ((leveldb::Comparator *)__pyx_v_db->options.comparator);

  /* "plyvel/_plyvel.pyx":748
 * 
 *         self.comparator = <leveldb.Comparator*>db.options.comparator
 *         self.direction = FORWARD if not reverse else REVERSE             # <<<<<<<<<<<<<<
 * 
 *         if db_prefix is None:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_reverse)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_t_6 = (!__pyx_t_5);
  if (__pyx_t_6) {
    __pyx_t_4 = __pyx_e_6plyvel_7_plyvel_FORWARD;
  } else {
    __pyx_t_4 = __pyx_e_6plyvel_7_plyvel_REVERSE;
  }
  __pyx_v_self->direction = __pyx_t_4;

  /* "plyvel/_plyvel.pyx":750
 *         self.direction = FORWARD if not reverse else REVERSE
 * 
 *         if db_prefix is None:             # <<<<<<<<<<<<<<
 *             self.db_prefix_len = 0
 *         else:
 */
  __pyx_t_6 = (__pyx_v_db_prefix == ((PyObject*)Py_None));
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":751
 * 
 *         if db_prefix is None:
 *             self.db_prefix_len = 0             # <<<<<<<<<<<<<<
 *         else:
 *             # This is an iterator on a PrefixedDB.
 */
    __pyx_v_self->db_prefix_len = 0;

    /* "plyvel/_plyvel.pyx":750
 *         self.direction = FORWARD if not reverse else REVERSE
 * 
 *         if db_prefix is None:             # <<<<<<<<<<<<<<
 *             self.db_prefix_len = 0
 *         else:
 */
    goto __pyx_L3;
  }

  /* "plyvel/_plyvel.pyx":754
 *         else:
 *             # This is an iterator on a PrefixedDB.
 *             self.db_prefix = db_prefix             # <<<<<<<<<<<<<<
 *             self.db_prefix_len = len(db_prefix)
 * 
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_db_prefix);
    __Pyx_GIVEREF(__pyx_v_db_prefix);
    __Pyx_GOTREF(__pyx_v_self->db_prefix);
    __Pyx_DECREF(__pyx_v_self->db_prefix);
    __pyx_v_self->db_prefix = __pyx_v_db_prefix;

    /* "plyvel/_plyvel.pyx":755
 *             # This is an iterator on a PrefixedDB.
 *             self.db_prefix = db_prefix
 *             self.db_prefix_len = len(db_prefix)             # <<<<<<<<<<<<<<
 * 
 *             # Transform args so that the database key prefix is taken
 */
    if (unlikely(__pyx_v_db_prefix == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 755, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyBytes_GET_SIZE(__pyx_v_db_prefix); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 755, __pyx_L1_error)
    __pyx_v_self->db_prefix_len = __pyx_t_7;

    /* "plyvel/_plyvel.pyx":759
 *             # Transform args so that the database key prefix is taken
 *             # into account.
 *             if prefix is not None:             # <<<<<<<<<<<<<<
 *                 # Both database key prefix and prefix on the iterator
 *                 prefix = db_prefix + prefix
 */
    __pyx_t_6 = (__pyx_v_prefix != ((PyObject*)Py_None));
    if (__pyx_t_6) {

      /* "plyvel/_plyvel.pyx":761
 *             if prefix is not None:
 *                 # Both database key prefix and prefix on the iterator
 *                 prefix = db_prefix + prefix             # <<<<<<<<<<<<<<
 *             else:
 *                 # Adapt start and stop keys to use the database key
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_db_prefix, __pyx_v_prefix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_prefix, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "plyvel/_plyvel.pyx":759
 *             # Transform args so that the database key prefix is taken
 *             # into account.
 *             if prefix is not None:             # <<<<<<<<<<<<<<
 *                 # Both database key prefix and prefix on the iterator
 *                 prefix = db_prefix + prefix
 */
      goto __pyx_L4;
    }

    /* "plyvel/_plyvel.pyx":765
 *                 # Adapt start and stop keys to use the database key
 *                 # prefix.
 *                 if start is None:             # <<<<<<<<<<<<<<
 *                     start = db_prefix
 *                     include_start = True
 */
    /*else*/ {
      __pyx_t_6 = (__pyx_v_start == ((PyObject*)Py_None));
      if (__pyx_t_6) {

        /* "plyvel/_plyvel.pyx":766
 *                 # prefix.
 *                 if start is None:
 *                     start = db_prefix             # <<<<<<<<<<<<<<
 *                     include_start = True
 *                 else:
 */
        __Pyx_INCREF(__pyx_v_db_prefix);
        __Pyx_DECREF_SET(__pyx_v_start, __pyx_v_db_prefix);

        /* "plyvel/_plyvel.pyx":767
 *                 if start is None:
 *                     start = db_prefix
 *                     include_start = True             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = db_prefix + start
 */
        __Pyx_INCREF(Py_True);
        __Pyx_DECREF_SET(__pyx_v_include_start, ((PyBoolObject *)Py_True));

        /* "plyvel/_plyvel.pyx":765
 *                 # Adapt start and stop keys to use the database key
 *                 # prefix.
 *                 if start is None:             # <<<<<<<<<<<<<<
 *                     start = db_prefix
 *                     include_start = True
 */
        goto __pyx_L5;
      }

      /* "plyvel/_plyvel.pyx":769
 *                     include_start = True
 *                 else:
 *                     start = db_prefix + start             # <<<<<<<<<<<<<<
 * 
 *                 if stop is None:
 */
      /*else*/ {
        __pyx_t_3 = PyNumber_Add(__pyx_v_db_prefix, __pyx_v_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_start, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;
      }
      __pyx_L5:;

      /* "plyvel/_plyvel.pyx":771
 *                     start = db_prefix + start
 * 
 *                 if stop is None:             # <<<<<<<<<<<<<<
 *                     stop = bytes_increment(db_prefix)
 *                     include_stop = False
 */
      __pyx_t_6 = (__pyx_v_stop == ((PyObject*)Py_None));
      if (__pyx_t_6) {

        /* "plyvel/_plyvel.pyx":772
 * 
 *                 if stop is None:
 *                     stop = bytes_increment(db_prefix)             # <<<<<<<<<<<<<<
 *                     include_stop = False
 *                 else:
 */
        __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_bytes_increment(__pyx_v_db_prefix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_stop, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "plyvel/_plyvel.pyx":773
 *                 if stop is None:
 *                     stop = bytes_increment(db_prefix)
 *                     include_stop = False             # <<<<<<<<<<<<<<
 *                 else:
 *                     stop = db_prefix + stop
 */
        __Pyx_INCREF(Py_False);
        __Pyx_DECREF_SET(__pyx_v_include_stop, ((PyBoolObject *)Py_False));

        /* "plyvel/_plyvel.pyx":771
 *                     start = db_prefix + start
 * 
 *                 if stop is None:             # <<<<<<<<<<<<<<
 *                     stop = bytes_increment(db_prefix)
 *                     include_stop = False
 */
        goto __pyx_L6;
      }

      /* "plyvel/_plyvel.pyx":775
 *                     include_stop = False
 *                 else:
 *                     stop = db_prefix + stop             # <<<<<<<<<<<<<<
 * 
 *         if prefix is not None:
 */
      /*else*/ {
        __pyx_t_3 = PyNumber_Add(__pyx_v_db_prefix, __pyx_v_stop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_stop, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;
      }
      __pyx_L6:;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "plyvel/_plyvel.pyx":777
 *                     stop = db_prefix + stop
 * 
 *         if prefix is not None:             # <<<<<<<<<<<<<<
 *             if start is not None or stop is not None:
 *                 raise TypeError(
 */
  __pyx_t_6 = (__pyx_v_prefix != ((PyObject*)Py_None));
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":778
 * 
 *         if prefix is not None:
 *             if start is not None or stop is not None:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "'prefix' cannot be used together with 'start' or 'stop'")
 */
    __pyx_t_5 = (__pyx_v_start != ((PyObject*)Py_None));
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_stop != ((PyObject*)Py_None));
    __pyx_t_6 = __pyx_t_5;
    __pyx_L9_bool_binop_done:;
    if (unlikely(__pyx_t_6)) {

      /* "plyvel/_plyvel.pyx":779
 *         if prefix is not None:
 *             if start is not None or stop is not None:
 *                 raise TypeError(             # <<<<<<<<<<<<<<
 *                     "'prefix' cannot be used together with 'start' or 'stop'")
 *             # Use prefix to construct start and stop keys, and ignore
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 779, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":778
 * 
 *         if prefix is not None:
 *             if start is not None or stop is not None:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "'prefix' cannot be used together with 'start' or 'stop'")
 */
    }

    /* "plyvel/_plyvel.pyx":783
 *             # Use prefix to construct start and stop keys, and ignore
 *             # include_start and include_stop args
 *             start = prefix             # <<<<<<<<<<<<<<
 *             stop = bytes_increment(prefix)
 *             include_start = True
 */
    __Pyx_INCREF(__pyx_v_prefix);
    __Pyx_DECREF_SET(__pyx_v_start, __pyx_v_prefix);

    /* "plyvel/_plyvel.pyx":784
 *             # include_start and include_stop args
 *             start = prefix
 *             stop = bytes_increment(prefix)             # <<<<<<<<<<<<<<
 *             include_start = True
 *             include_stop = False
 */
    __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_bytes_increment(__pyx_v_prefix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_stop, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "plyvel/_plyvel.pyx":785
 *             start = prefix
 *             stop = bytes_increment(prefix)
 *             include_start = True             # <<<<<<<<<<<<<<
 *             include_stop = False
 * 
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_include_start, ((PyBoolObject *)Py_True));

    /* "plyvel/_plyvel.pyx":786
 *             stop = bytes_increment(prefix)
 *             include_start = True
 *             include_stop = False             # <<<<<<<<<<<<<<
 * 
 *         if start is not None:
 */
    __Pyx_INCREF(Py_False);
    __Pyx_DECREF_SET(__pyx_v_include_stop, ((PyBoolObject *)Py_False));

    /* "plyvel/_plyvel.pyx":777
 *                     stop = db_prefix + stop
 * 
 *         if prefix is not None:             # <<<<<<<<<<<<<<
 *             if start is not None or stop is not None:
 *                 raise TypeError(
 */
  }

  /* "plyvel/_plyvel.pyx":788
 *             include_stop = False
 * 
 *         if start is not None:             # <<<<<<<<<<<<<<
 *             self.start = start
 *             self.start_slice = Slice(start, len(start))
 */
  __pyx_t_6 = (__pyx_v_start != ((PyObject*)Py_None));
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":789
 * 
 *         if start is not None:
 *             self.start = start             # <<<<<<<<<<<<<<
 *             self.start_slice = Slice(start, len(start))
 * 
 */
    __Pyx_INCREF(__pyx_v_start);
    __Pyx_GIVEREF(__pyx_v_start);
    __Pyx_GOTREF(__pyx_v_self->start);
    __Pyx_DECREF(__pyx_v_self->start);
    __pyx_v_self->start = __pyx_v_start;

    /* "plyvel/_plyvel.pyx":790
 *         if start is not None:
 *             self.start = start
 *             self.start_slice = Slice(start, len(start))             # <<<<<<<<<<<<<<
 * 
 *         if stop is not None:
 */
    if (unlikely(__pyx_v_start == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 790, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_v_start); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L1_error)
    if (unlikely(__pyx_v_start == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 790, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyBytes_GET_SIZE(__pyx_v_start); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 790, __pyx_L1_error)
    __pyx_v_self->start_slice = leveldb::Slice(__pyx_t_8, __pyx_t_7);

    /* "plyvel/_plyvel.pyx":788
 *             include_stop = False
 * 
 *         if start is not None:             # <<<<<<<<<<<<<<
 *             self.start = start
 *             self.start_slice = Slice(start, len(start))
 */
  }

  /* "plyvel/_plyvel.pyx":792
 *             self.start_slice = Slice(start, len(start))
 * 
 *         if stop is not None:             # <<<<<<<<<<<<<<
 *             self.stop = stop
 *             self.stop_slice = Slice(stop, len(stop))
 */
  __pyx_t_6 = (__pyx_v_stop != ((PyObject*)Py_None));
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":793
 * 
 *         if stop is not None:
 *             self.stop = stop             # <<<<<<<<<<<<<<
 *             self.stop_slice = Slice(stop, len(stop))
 * 
 */
    __Pyx_INCREF(__pyx_v_stop);
    __Pyx_GIVEREF(__pyx_v_stop);
    __Pyx_GOTREF(__pyx_v_self->stop);
    __Pyx_DECREF(__pyx_v_self->stop);
    __pyx_v_self->stop = __pyx_v_stop;

    /* "plyvel/_plyvel.pyx":794
 *         if stop is not None:
 *             self.stop = stop
 *             self.stop_slice = Slice(stop, len(stop))             # <<<<<<<<<<<<<<
 * 
 *         self.include_start = include_start
 */
    if (unlikely(__pyx_v_stop == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(0, 794, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_v_stop); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
    if (unlikely(__pyx_v_stop == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 794, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyBytes_GET_SIZE(__pyx_v_stop); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 794, __pyx_L1_error)
    __pyx_v_self->stop_slice = leveldb::Slice(__pyx_t_8, __pyx_t_7);

    /* "plyvel/_plyvel.pyx":792
 *             self.start_slice = Slice(start, len(start))
 * 
 *         if stop is not None:             # <<<<<<<<<<<<<<
 *             self.stop = stop
 *             self.stop_slice = Slice(stop, len(stop))
 */
  }

  /* "plyvel/_plyvel.pyx":796
 *             self.stop_slice = Slice(stop, len(stop))
 * 
 *         self.include_start = include_start             # <<<<<<<<<<<<<<
 *         self.include_stop = include_stop
 *         self.include_key = include_key
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_include_start)); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
  __pyx_v_self->include_start = __pyx_t_9;

  /* "plyvel/_plyvel.pyx":797
 * 
 *         self.include_start = include_start
 *         self.include_stop = include_stop             # <<<<<<<<<<<<<<
 *         self.include_key = include_key
 *         self.include_value = include_value
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_include_stop)); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_v_self->include_stop = __pyx_t_9;

  /* "plyvel/_plyvel.pyx":798
 *         self.include_start = include_start
 *         self.include_stop = include_stop
 *         self.include_key = include_key             # <<<<<<<<<<<<<<
 *         self.include_value = include_value
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_include_key)); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_v_self->include_key = __pyx_t_9;

  /* "plyvel/_plyvel.pyx":799
 *         self.include_stop = include_stop
 *         self.include_key = include_key
 *         self.include_value = include_value             # <<<<<<<<<<<<<<
 * 
 *         if self.direction == FORWARD:
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_include_value)); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_v_self->include_value = __pyx_t_9;

  /* "plyvel/_plyvel.pyx":801
 *         self.include_value = include_value
 * 
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             self.seek_to_start()
 *         else:
 */
  __pyx_t_6 = (__pyx_v_self->direction == __pyx_e_6plyvel_7_plyvel_FORWARD);
  if (__pyx_t_6) {

    /* "plyvel/_plyvel.pyx":802
 * 
 *         if self.direction == FORWARD:
 *             self.seek_to_start()             # <<<<<<<<<<<<<<
 *         else:
 *             self.seek_to_stop()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "plyvel/_plyvel.pyx":801
 *         self.include_value = include_value
 * 
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             self.seek_to_start()
 *         else:
 */
    goto __pyx_L13;
  }

  /* "plyvel/_plyvel.pyx":804
 *             self.seek_to_start()
 *         else:
 *             self.seek_to_stop()             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_seek_to_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L13:;

  /* "plyvel/_plyvel.pyx":806
 *             self.seek_to_stop()
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_10 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 806, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":736
 *     cdef size_t db_prefix_len
 * 
 *     def __init__(self, DB db, bytes db_prefix, bool reverse, bytes start,             # <<<<<<<<<<<<<<
 *                  bytes stop, bool include_start, bool include_stop,
 *                  bytes prefix, bool include_key, bool include_value,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_stop);
  __Pyx_XDECREF((PyObject *)__pyx_v_include_start);
  __Pyx_XDECREF((PyObject *)__pyx_v_include_stop);
  __Pyx_XDECREF(__pyx_v_prefix);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":808
 *         raise_for_status(self._iter.status())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_3__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_2__iter__(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_2__iter__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "plyvel/_plyvel.pyx":809
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef object current(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":808
 *         raise_for_status(self._iter.status())
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":811
 *         return self
 * 
 *     cdef object current(self):             # <<<<<<<<<<<<<<
 *         """Return the current iterator key/value.
 * 
 */

static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_current(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  leveldb::Slice __pyx_v_key_slice;
  PyObject *__pyx_v_key = 0;
  leveldb::Slice __pyx_v_value_slice;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("current", 1);

  /* "plyvel/_plyvel.pyx":818
 *         """
 *         cdef Slice key_slice
 *         cdef bytes key = None             # <<<<<<<<<<<<<<
 *         cdef Slice value_slice
 *         cdef bytes value = None
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_key = ((PyObject*)Py_None);

  /* "plyvel/_plyvel.pyx":820
 *         cdef bytes key = None
 *         cdef Slice value_slice
 *         cdef bytes value = None             # <<<<<<<<<<<<<<
 * 
 *         # Only build Python strings that will be returned. Also chop off
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_value = ((PyObject*)Py_None);

  /* "plyvel/_plyvel.pyx":824
 *         # Only build Python strings that will be returned. Also chop off
 *         # the db prefix (for PrefixedDB iterators).
 *         if self.include_key:             # <<<<<<<<<<<<<<
 *             key_slice = self._iter.key()
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]
 */
  __pyx_t_1 = (__pyx_v_self->include_key != 0);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":825
 *         # the db prefix (for PrefixedDB iterators).
 *         if self.include_key:
 *             key_slice = self._iter.key()             # <<<<<<<<<<<<<<
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]
 * 
 */
    __pyx_v_key_slice = __pyx_v_self->__pyx_base._iter->key();

    /* "plyvel/_plyvel.pyx":826
 *         if self.include_key:
 *             key_slice = self._iter.key()
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]             # <<<<<<<<<<<<<<
 * 
 *         if self.include_value:
 */
    __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_key_slice.data() + __pyx_v_self->db_prefix_len, __pyx_v_key_slice.size() - __pyx_v_self->db_prefix_len); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":824
 *         # Only build Python strings that will be returned. Also chop off
 *         # the db prefix (for PrefixedDB iterators).
 *         if self.include_key:             # <<<<<<<<<<<<<<
 *             key_slice = self._iter.key()
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]
 */
  }

  /* "plyvel/_plyvel.pyx":828
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]
 * 
 *         if self.include_value:             # <<<<<<<<<<<<<<
 *             value_slice = self._iter.value()
 *             value = value_slice.data()[:value_slice.size()]
 */
  __pyx_t_1 = (__pyx_v_self->include_value != 0);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":829
 * 
 *         if self.include_value:
 *             value_slice = self._iter.value()             # <<<<<<<<<<<<<<
 *             value = value_slice.data()[:value_slice.size()]
 * 
 */
    __pyx_v_value_slice = __pyx_v_self->__pyx_base._iter->value();

    /* "plyvel/_plyvel.pyx":830
 *         if self.include_value:
 *             value_slice = self._iter.value()
 *             value = value_slice.data()[:value_slice.size()]             # <<<<<<<<<<<<<<
 * 
 *         if self.include_key and self.include_value:
 */
    __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_value_slice.data() + 0, __pyx_v_value_slice.size() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 830, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_value, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":828
 *             key = key_slice.data()[self.db_prefix_len:key_slice.size()]
 * 
 *         if self.include_value:             # <<<<<<<<<<<<<<
 *             value_slice = self._iter.value()
 *             value = value_slice.data()[:value_slice.size()]
 */
  }

  /* "plyvel/_plyvel.pyx":832
 *             value = value_slice.data()[:value_slice.size()]
 * 
 *         if self.include_key and self.include_value:             # <<<<<<<<<<<<<<
 *             return (key, value)
 *         if self.include_key:
 */
  __pyx_t_3 = (__pyx_v_self->include_key != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->include_value != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":833
 * 
 *         if self.include_key and self.include_value:
 *             return (key, value)             # <<<<<<<<<<<<<<
 *         if self.include_key:
 *             return key
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key)) __PYX_ERR(0, 833, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_value)) __PYX_ERR(0, 833, __pyx_L1_error);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":832
 *             value = value_slice.data()[:value_slice.size()]
 * 
 *         if self.include_key and self.include_value:             # <<<<<<<<<<<<<<
 *             return (key, value)
 *         if self.include_key:
 */
  }

  /* "plyvel/_plyvel.pyx":834
 *         if self.include_key and self.include_value:
 *             return (key, value)
 *         if self.include_key:             # <<<<<<<<<<<<<<
 *             return key
 *         if self.include_value:
 */
  __pyx_t_1 = (__pyx_v_self->include_key != 0);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":835
 *             return (key, value)
 *         if self.include_key:
 *             return key             # <<<<<<<<<<<<<<
 *         if self.include_value:
 *             return value
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_key);
    __pyx_r = __pyx_v_key;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":834
 *         if self.include_key and self.include_value:
 *             return (key, value)
 *         if self.include_key:             # <<<<<<<<<<<<<<
 *             return key
 *         if self.include_value:
 */
  }

  /* "plyvel/_plyvel.pyx":836
 *         if self.include_key:
 *             return key
 *         if self.include_value:             # <<<<<<<<<<<<<<
 *             return value
 *         return None
 */
  __pyx_t_1 = (__pyx_v_self->include_value != 0);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":837
 *             return key
 *         if self.include_value:
 *             return value             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_value);
    __pyx_r = __pyx_v_value;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":836
 *         if self.include_key:
 *             return key
 *         if self.include_value:             # <<<<<<<<<<<<<<
 *             return value
 *         return None
 */
  }

  /* "plyvel/_plyvel.pyx":838
 *         if self.include_value:
 *             return value
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":811
 *         return self
 * 
 *     cdef object current(self):             # <<<<<<<<<<<<<<
 *         """Return the current iterator key/value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.current", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":840
 *         return None
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Return the next iterator entry.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_4__next__, "Return the next iterator entry.\n\n        Note: Cython will also create a .next() method that does the\n        same as this method.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6plyvel_7_plyvel_8Iterator_4__next__;
#endif
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_4__next__(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_4__next__(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 1);

  /* "plyvel/_plyvel.pyx":846
 *         same as this method.
 *         """
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             return self.real_next()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->direction == __pyx_e_6plyvel_7_plyvel_FORWARD);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":847
 *         """
 *         if self.direction == FORWARD:
 *             return self.real_next()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.real_prev()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_real_next(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":846
 *         same as this method.
 *         """
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             return self.real_next()
 *         else:
 */
  }

  /* "plyvel/_plyvel.pyx":849
 *             return self.real_next()
 *         else:
 *             return self.real_prev()             # <<<<<<<<<<<<<<
 * 
 *     def prev(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_real_prev(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "plyvel/_plyvel.pyx":840
 *         return None
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Return the next iterator entry.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":851
 *             return self.real_prev()
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self.direction == FORWARD:
 *             return self.real_prev()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_7prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_6prev, "Iterator.prev(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_7prev = {"prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_7prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_6prev};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_7prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prev (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("prev", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "prev", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_6prev(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_6prev(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prev", 1);

  /* "plyvel/_plyvel.pyx":852
 * 
 *     def prev(self):
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             return self.real_prev()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->direction == __pyx_e_6plyvel_7_plyvel_FORWARD);
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":853
 *     def prev(self):
 *         if self.direction == FORWARD:
 *             return self.real_prev()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.real_next()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_real_prev(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":852
 * 
 *     def prev(self):
 *         if self.direction == FORWARD:             # <<<<<<<<<<<<<<
 *             return self.real_prev()
 *         else:
 */
  }

  /* "plyvel/_plyvel.pyx":855
 *             return self.real_prev()
 *         else:
 *             return self.real_next()             # <<<<<<<<<<<<<<
 * 
 *     cdef real_next(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_real_next(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "plyvel/_plyvel.pyx":851
 *             return self.real_prev()
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self.direction == FORWARD:
 *             return self.real_prev()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":857
 *             return self.real_next()
 * 
 *     cdef real_next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_next(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("real_next", 1);

  /* "plyvel/_plyvel.pyx":858
 * 
 *     cdef real_next(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":859
 *     cdef real_next(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.state == IN_BETWEEN:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 859, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":858
 * 
 *     cdef real_next(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":861
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if self.state == IN_BETWEEN:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self._iter.Next()
 */
  switch (__pyx_v_self->state) {
    case __pyx_e_6plyvel_7_plyvel_IN_BETWEEN:

    /* "plyvel/_plyvel.pyx":862
 * 
 *         if self.state == IN_BETWEEN:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._iter.Next()
 *             if not self._iter.Valid():
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":863
 *         if self.state == IN_BETWEEN:
 *             with nogil:
 *                 self._iter.Next()             # <<<<<<<<<<<<<<
 *             if not self._iter.Valid():
 *                 self.state = AFTER_STOP
 */
          __pyx_v_self->__pyx_base._iter->Next();
        }

        /* "plyvel/_plyvel.pyx":862
 * 
 *         if self.state == IN_BETWEEN:
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._iter.Next()
 *             if not self._iter.Valid():
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "plyvel/_plyvel.pyx":864
 *             with nogil:
 *                 self._iter.Next()
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 self.state = AFTER_STOP
 *                 raise StopIteration
 */
    __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":865
 *                 self._iter.Next()
 *             if not self._iter.Valid():
 *                 self.state = AFTER_STOP             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 */
      __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_AFTER_STOP;

      /* "plyvel/_plyvel.pyx":866
 *             if not self._iter.Valid():
 *                 self.state = AFTER_STOP
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             self.state = IN_BETWEEN
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 866, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":864
 *             with nogil:
 *                 self._iter.Next()
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 self.state = AFTER_STOP
 *                 raise StopIteration
 */
    }

    /* "plyvel/_plyvel.pyx":861
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if self.state == IN_BETWEEN:             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self._iter.Next()
 */
    break;
    case __pyx_e_6plyvel_7_plyvel_IN_BETWEEN_ALREADY_POSITIONED:

    /* "plyvel/_plyvel.pyx":868
 *                 raise StopIteration
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             self.state = IN_BETWEEN             # <<<<<<<<<<<<<<
 *         elif self.state == BEFORE_START:
 *             if self.start is None:
 */
    __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_IN_BETWEEN;

    /* "plyvel/_plyvel.pyx":867
 *                 self.state = AFTER_STOP
 *                 raise StopIteration
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:             # <<<<<<<<<<<<<<
 *             self.state = IN_BETWEEN
 *         elif self.state == BEFORE_START:
 */
    break;
    case __pyx_e_6plyvel_7_plyvel_BEFORE_START:

    /* "plyvel/_plyvel.pyx":870
 *             self.state = IN_BETWEEN
 *         elif self.state == BEFORE_START:
 *             if self.start is None:             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     self._iter.SeekToFirst()
 */
    __pyx_t_1 = (__pyx_v_self->start == ((PyObject*)Py_None));
    if (__pyx_t_1) {

      /* "plyvel/_plyvel.pyx":871
 *         elif self.state == BEFORE_START:
 *             if self.start is None:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.SeekToFirst()
 *             else:
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          _save = NULL;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "plyvel/_plyvel.pyx":872
 *             if self.start is None:
 *                 with nogil:
 *                     self._iter.SeekToFirst()             # <<<<<<<<<<<<<<
 *             else:
 *                 with nogil:
 */
            __pyx_v_self->__pyx_base._iter->SeekToFirst();
          }

          /* "plyvel/_plyvel.pyx":871
 *         elif self.state == BEFORE_START:
 *             if self.start is None:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.SeekToFirst()
 *             else:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L11;
            }
            __pyx_L11:;
          }
      }

      /* "plyvel/_plyvel.pyx":870
 *             self.state = IN_BETWEEN
 *         elif self.state == BEFORE_START:
 *             if self.start is None:             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     self._iter.SeekToFirst()
 */
      goto __pyx_L8;
    }

    /* "plyvel/_plyvel.pyx":874
 *                     self._iter.SeekToFirst()
 *             else:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.Seek(self.start_slice)
 *             if not self._iter.Valid():
 */
    /*else*/ {
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          _save = NULL;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "plyvel/_plyvel.pyx":875
 *             else:
 *                 with nogil:
 *                     self._iter.Seek(self.start_slice)             # <<<<<<<<<<<<<<
 *             if not self._iter.Valid():
 *                 # Iterator is empty
 */
            __pyx_v_self->__pyx_base._iter->Seek(__pyx_v_self->start_slice);
          }

          /* "plyvel/_plyvel.pyx":874
 *                     self._iter.SeekToFirst()
 *             else:
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.Seek(self.start_slice)
 *             if not self._iter.Valid():
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L14;
            }
            __pyx_L14:;
          }
      }
    }
    __pyx_L8:;

    /* "plyvel/_plyvel.pyx":876
 *                 with nogil:
 *                     self._iter.Seek(self.start_slice)
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # Iterator is empty
 *                 raise StopIteration
 */
    __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":878
 *             if not self._iter.Valid():
 *                 # Iterator is empty
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             if self.start is not None and not self.include_start:
 *                 # Start key is excluded, so skip past it if the db
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 878, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":876
 *                 with nogil:
 *                     self._iter.Seek(self.start_slice)
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # Iterator is empty
 *                 raise StopIteration
 */
    }

    /* "plyvel/_plyvel.pyx":879
 *                 # Iterator is empty
 *                 raise StopIteration
 *             if self.start is not None and not self.include_start:             # <<<<<<<<<<<<<<
 *                 # Start key is excluded, so skip past it if the db
 *                 # contains it.
 */
    __pyx_t_3 = (__pyx_v_self->start != ((PyObject*)Py_None));
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_3 = (!(__pyx_v_self->include_start != 0));
    __pyx_t_1 = __pyx_t_3;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_1) {

      /* "plyvel/_plyvel.pyx":883
 *                 # contains it.
 *                 if self.comparator.Compare(self._iter.key(),
 *                                            self.start_slice) == 0:             # <<<<<<<<<<<<<<
 *                     with nogil:
 *                         self._iter.Next()
 */
      __pyx_t_1 = (__pyx_v_self->comparator->Compare(__pyx_v_self->__pyx_base._iter->key(), __pyx_v_self->start_slice) == 0);

      /* "plyvel/_plyvel.pyx":882
 *                 # Start key is excluded, so skip past it if the db
 *                 # contains it.
 *                 if self.comparator.Compare(self._iter.key(),             # <<<<<<<<<<<<<<
 *                                            self.start_slice) == 0:
 *                     with nogil:
 */
      if (__pyx_t_1) {

        /* "plyvel/_plyvel.pyx":884
 *                 if self.comparator.Compare(self._iter.key(),
 *                                            self.start_slice) == 0:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.Next()
 *                     if not self._iter.Valid():
 */
        {
            #ifdef WITH_THREAD
            PyThreadState *_save;
            _save = NULL;
            Py_UNBLOCK_THREADS
            __Pyx_FastGIL_Remember();
            #endif
            /*try:*/ {

              /* "plyvel/_plyvel.pyx":885
 *                                            self.start_slice) == 0:
 *                     with nogil:
 *                         self._iter.Next()             # <<<<<<<<<<<<<<
 *                     if not self._iter.Valid():
 *                         raise StopIteration
 */
              __pyx_v_self->__pyx_base._iter->Next();
            }

            /* "plyvel/_plyvel.pyx":884
 *                 if self.comparator.Compare(self._iter.key(),
 *                                            self.start_slice) == 0:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.Next()
 *                     if not self._iter.Valid():
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                __Pyx_FastGIL_Forget();
                Py_BLOCK_THREADS
                #endif
                goto __pyx_L22;
              }
              __pyx_L22:;
            }
        }

        /* "plyvel/_plyvel.pyx":886
 *                     with nogil:
 *                         self._iter.Next()
 *                     if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *             self.state = IN_BETWEEN
 */
        __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
        if (unlikely(__pyx_t_1)) {

          /* "plyvel/_plyvel.pyx":887
 *                         self._iter.Next()
 *                     if not self._iter.Valid():
 *                         raise StopIteration             # <<<<<<<<<<<<<<
 *             self.state = IN_BETWEEN
 *         elif self.state == AFTER_STOP:
 */
          __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
          __PYX_ERR(0, 887, __pyx_L1_error)

          /* "plyvel/_plyvel.pyx":886
 *                     with nogil:
 *                         self._iter.Next()
 *                     if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                         raise StopIteration
 *             self.state = IN_BETWEEN
 */
        }

        /* "plyvel/_plyvel.pyx":882
 *                 # Start key is excluded, so skip past it if the db
 *                 # contains it.
 *                 if self.comparator.Compare(self._iter.key(),             # <<<<<<<<<<<<<<
 *                                            self.start_slice) == 0:
 *                     with nogil:
 */
      }

      /* "plyvel/_plyvel.pyx":879
 *                 # Iterator is empty
 *                 raise StopIteration
 *             if self.start is not None and not self.include_start:             # <<<<<<<<<<<<<<
 *                 # Start key is excluded, so skip past it if the db
 *                 # contains it.
 */
    }

    /* "plyvel/_plyvel.pyx":888
 *                     if not self._iter.Valid():
 *                         raise StopIteration
 *             self.state = IN_BETWEEN             # <<<<<<<<<<<<<<
 *         elif self.state == AFTER_STOP:
 *             raise StopIteration
 */
    __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_IN_BETWEEN;

    /* "plyvel/_plyvel.pyx":869
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             self.state = IN_BETWEEN
 *         elif self.state == BEFORE_START:             # <<<<<<<<<<<<<<
 *             if self.start is None:
 *                 with nogil:
 */
    break;
    case __pyx_e_6plyvel_7_plyvel_AFTER_STOP:

    /* "plyvel/_plyvel.pyx":890
 *             self.state = IN_BETWEEN
 *         elif self.state == AFTER_STOP:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 890, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":889
 *                         raise StopIteration
 *             self.state = IN_BETWEEN
 *         elif self.state == AFTER_STOP:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
    break;
    default: break;
  }

  /* "plyvel/_plyvel.pyx":892
 *             raise StopIteration
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *         # Check range boundaries
 */
  __pyx_t_4 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 892, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":895
 * 
 *         # Check range boundaries
 *         if self.stop is not None:             # <<<<<<<<<<<<<<
 *             n = 1 if self.include_stop else 0
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:
 */
  __pyx_t_1 = (__pyx_v_self->stop != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":896
 *         # Check range boundaries
 *         if self.stop is not None:
 *             n = 1 if self.include_stop else 0             # <<<<<<<<<<<<<<
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:
 *                 self.state = AFTER_STOP
 */
    __pyx_t_1 = (__pyx_v_self->include_stop != 0);
    if (__pyx_t_1) {
      __pyx_t_5 = 1;
    } else {
      __pyx_t_5 = 0;
    }
    __pyx_v_n = __pyx_t_5;

    /* "plyvel/_plyvel.pyx":897
 *         if self.stop is not None:
 *             n = 1 if self.include_stop else 0
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:             # <<<<<<<<<<<<<<
 *                 self.state = AFTER_STOP
 *                 raise StopIteration
 */
    __pyx_t_1 = (__pyx_v_self->comparator->Compare(__pyx_v_self->__pyx_base._iter->key(), __pyx_v_self->stop_slice) >= __pyx_v_n);
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":898
 *             n = 1 if self.include_stop else 0
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:
 *                 self.state = AFTER_STOP             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 * 
 */
      __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_AFTER_STOP;

      /* "plyvel/_plyvel.pyx":899
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:
 *                 self.state = AFTER_STOP
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         return self.current()
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 899, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":897
 *         if self.stop is not None:
 *             n = 1 if self.include_stop else 0
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:             # <<<<<<<<<<<<<<
 *                 self.state = AFTER_STOP
 *                 raise StopIteration
 */
    }

    /* "plyvel/_plyvel.pyx":895
 * 
 *         # Check range boundaries
 *         if self.stop is not None:             # <<<<<<<<<<<<<<
 *             n = 1 if self.include_stop else 0
 *             if self.comparator.Compare(self._iter.key(), self.stop_slice) >= n:
 */
  }

  /* "plyvel/_plyvel.pyx":901
 *                 raise StopIteration
 * 
 *         return self.current()             # <<<<<<<<<<<<<<
 * 
 *     cdef real_prev(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_current(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":857
 *             return self.real_next()
 * 
 *     cdef real_next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.real_next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":903
 *         return self.current()
 * 
 *     cdef real_prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

static PyObject *__pyx_f_6plyvel_7_plyvel_8Iterator_real_prev(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_v_out = NULL;
  long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("real_prev", 1);

  /* "plyvel/_plyvel.pyx":904
 * 
 *     cdef real_prev(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":905
 *     cdef real_prev(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.state == IN_BETWEEN:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 905, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":904
 * 
 *     cdef real_prev(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":907
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if self.state == IN_BETWEEN:             # <<<<<<<<<<<<<<
 *             pass
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 */
  switch (__pyx_v_self->state) {
    case __pyx_e_6plyvel_7_plyvel_IN_BETWEEN:
    break;
    case __pyx_e_6plyvel_7_plyvel_IN_BETWEEN_ALREADY_POSITIONED:

    /* "plyvel/_plyvel.pyx":910
 *             pass
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             assert self._iter.Valid()             # <<<<<<<<<<<<<<
 *             with nogil:
 *                 self._iter.Prev()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_1 = (__pyx_v_self->__pyx_base._iter->Valid() != 0);
      if (unlikely(!__pyx_t_1)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 910, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 910, __pyx_L1_error)
    #endif

    /* "plyvel/_plyvel.pyx":911
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             assert self._iter.Valid()
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._iter.Prev()
 *             if not self._iter.Valid():
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        _save = NULL;
        Py_UNBLOCK_THREADS
        __Pyx_FastGIL_Remember();
        #endif
        /*try:*/ {

          /* "plyvel/_plyvel.pyx":912
 *             assert self._iter.Valid()
 *             with nogil:
 *                 self._iter.Prev()             # <<<<<<<<<<<<<<
 *             if not self._iter.Valid():
 *                 # The .seek() resulted in the first key in the database
 */
          __pyx_v_self->__pyx_base._iter->Prev();
        }

        /* "plyvel/_plyvel.pyx":911
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:
 *             assert self._iter.Valid()
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 self._iter.Prev()
 *             if not self._iter.Valid():
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            __Pyx_FastGIL_Forget();
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L6;
          }
          __pyx_L6:;
        }
    }

    /* "plyvel/_plyvel.pyx":913
 *             with nogil:
 *                 self._iter.Prev()
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # The .seek() resulted in the first key in the database
 *                 self.state = BEFORE_START
 */
    __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":915
 *             if not self._iter.Valid():
 *                 # The .seek() resulted in the first key in the database
 *                 self.state = BEFORE_START             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             raise_for_status(self._iter.status())
 */
      __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_BEFORE_START;

      /* "plyvel/_plyvel.pyx":916
 *                 # The .seek() resulted in the first key in the database
 *                 self.state = BEFORE_START
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             raise_for_status(self._iter.status())
 *         elif self.state == BEFORE_START:
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 916, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":913
 *             with nogil:
 *                 self._iter.Prev()
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # The .seek() resulted in the first key in the database
 *                 self.state = BEFORE_START
 */
    }

    /* "plyvel/_plyvel.pyx":917
 *                 self.state = BEFORE_START
 *                 raise StopIteration
 *             raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 *         elif self.state == BEFORE_START:
 *             raise StopIteration
 */
    __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 917, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":909
 *         if self.state == IN_BETWEEN:
 *             pass
 *         elif self.state == IN_BETWEEN_ALREADY_POSITIONED:             # <<<<<<<<<<<<<<
 *             assert self._iter.Valid()
 *             with nogil:
 */
    break;
    case __pyx_e_6plyvel_7_plyvel_BEFORE_START:

    /* "plyvel/_plyvel.pyx":919
 *             raise_for_status(self._iter.status())
 *         elif self.state == BEFORE_START:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         elif self.state == AFTER_STOP:
 *             if self.stop is None:
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 919, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":918
 *                 raise StopIteration
 *             raise_for_status(self._iter.status())
 *         elif self.state == BEFORE_START:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         elif self.state == AFTER_STOP:
 */
    break;
    case __pyx_e_6plyvel_7_plyvel_AFTER_STOP:

    /* "plyvel/_plyvel.pyx":921
 *             raise StopIteration
 *         elif self.state == AFTER_STOP:
 *             if self.stop is None:             # <<<<<<<<<<<<<<
 *                 # No stop key, seek to last entry
 *                 with nogil:
 */
    __pyx_t_1 = (__pyx_v_self->stop == ((PyObject*)Py_None));
    if (__pyx_t_1) {

      /* "plyvel/_plyvel.pyx":923
 *             if self.stop is None:
 *                 # No stop key, seek to last entry
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.SeekToLast()
 *             else:
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          _save = NULL;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "plyvel/_plyvel.pyx":924
 *                 # No stop key, seek to last entry
 *                 with nogil:
 *                     self._iter.SeekToLast()             # <<<<<<<<<<<<<<
 *             else:
 *                 # Seek to stop key
 */
            __pyx_v_self->__pyx_base._iter->SeekToLast();
          }

          /* "plyvel/_plyvel.pyx":923
 *             if self.stop is None:
 *                 # No stop key, seek to last entry
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.SeekToLast()
 *             else:
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L11;
            }
            __pyx_L11:;
          }
      }

      /* "plyvel/_plyvel.pyx":921
 *             raise StopIteration
 *         elif self.state == AFTER_STOP:
 *             if self.stop is None:             # <<<<<<<<<<<<<<
 *                 # No stop key, seek to last entry
 *                 with nogil:
 */
      goto __pyx_L8;
    }

    /* "plyvel/_plyvel.pyx":927
 *             else:
 *                 # Seek to stop key
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.Seek(self.stop_slice)
 * 
 */
    /*else*/ {
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          _save = NULL;
          Py_UNBLOCK_THREADS
          __Pyx_FastGIL_Remember();
          #endif
          /*try:*/ {

            /* "plyvel/_plyvel.pyx":928
 *                 # Seek to stop key
 *                 with nogil:
 *                     self._iter.Seek(self.stop_slice)             # <<<<<<<<<<<<<<
 * 
 *                 if self._iter.Valid():
 */
            __pyx_v_self->__pyx_base._iter->Seek(__pyx_v_self->stop_slice);
          }

          /* "plyvel/_plyvel.pyx":927
 *             else:
 *                 # Seek to stop key
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     self._iter.Seek(self.stop_slice)
 * 
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              __Pyx_FastGIL_Forget();
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L14;
            }
            __pyx_L14:;
          }
      }

      /* "plyvel/_plyvel.pyx":930
 *                     self._iter.Seek(self.stop_slice)
 * 
 *                 if self._iter.Valid():             # <<<<<<<<<<<<<<
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:
 */
      __pyx_t_1 = (__pyx_v_self->__pyx_base._iter->Valid() != 0);
      if (__pyx_t_1) {

        /* "plyvel/_plyvel.pyx":932
 *                 if self._iter.Valid():
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:             # <<<<<<<<<<<<<<
 *                         with nogil:
 *                             self._iter.Prev()
 */
        __pyx_t_1 = (!(__pyx_v_self->include_stop != 0));
        if (__pyx_t_1) {

          /* "plyvel/_plyvel.pyx":933
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:
 *                         with nogil:             # <<<<<<<<<<<<<<
 *                             self._iter.Prev()
 *                 else:
 */
          {
              #ifdef WITH_THREAD
              PyThreadState *_save;
              _save = NULL;
              Py_UNBLOCK_THREADS
              __Pyx_FastGIL_Remember();
              #endif
              /*try:*/ {

                /* "plyvel/_plyvel.pyx":934
 *                     if not self.include_stop:
 *                         with nogil:
 *                             self._iter.Prev()             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Stop key did not exist; position at the last
 */
                __pyx_v_self->__pyx_base._iter->Prev();
              }

              /* "plyvel/_plyvel.pyx":933
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:
 *                         with nogil:             # <<<<<<<<<<<<<<
 *                             self._iter.Prev()
 *                 else:
 */
              /*finally:*/ {
                /*normal exit:*/{
                  #ifdef WITH_THREAD
                  __Pyx_FastGIL_Forget();
                  Py_BLOCK_THREADS
                  #endif
                  goto __pyx_L19;
                }
                __pyx_L19:;
              }
          }

          /* "plyvel/_plyvel.pyx":932
 *                 if self._iter.Valid():
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:             # <<<<<<<<<<<<<<
 *                         with nogil:
 *                             self._iter.Prev()
 */
        }

        /* "plyvel/_plyvel.pyx":930
 *                     self._iter.Seek(self.stop_slice)
 * 
 *                 if self._iter.Valid():             # <<<<<<<<<<<<<<
 *                     # Move one step back if stop is exclusive.
 *                     if not self.include_stop:
 */
        goto __pyx_L15;
      }

      /* "plyvel/_plyvel.pyx":938
 *                     # Stop key did not exist; position at the last
 *                     # database entry instead.
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.SeekToLast()
 * 
 */
      /*else*/ {
        {
            #ifdef WITH_THREAD
            PyThreadState *_save;
            _save = NULL;
            Py_UNBLOCK_THREADS
            __Pyx_FastGIL_Remember();
            #endif
            /*try:*/ {

              /* "plyvel/_plyvel.pyx":939
 *                     # database entry instead.
 *                     with nogil:
 *                         self._iter.SeekToLast()             # <<<<<<<<<<<<<<
 * 
 *                 # Make sure the iterator is not past the stop key
 */
              __pyx_v_self->__pyx_base._iter->SeekToLast();
            }

            /* "plyvel/_plyvel.pyx":938
 *                     # Stop key did not exist; position at the last
 *                     # database entry instead.
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.SeekToLast()
 * 
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                __Pyx_FastGIL_Forget();
                Py_BLOCK_THREADS
                #endif
                goto __pyx_L22;
              }
              __pyx_L22:;
            }
        }
      }
      __pyx_L15:;

      /* "plyvel/_plyvel.pyx":942
 * 
 *                 # Make sure the iterator is not past the stop key
 *                 if self._iter.Valid() and self.comparator.Compare(self._iter.key(), self.stop_slice) > 0:             # <<<<<<<<<<<<<<
 *                     with nogil:
 *                         self._iter.Prev()
 */
      __pyx_t_4 = (__pyx_v_self->__pyx_base._iter->Valid() != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_1 = __pyx_t_4;
        goto __pyx_L24_bool_binop_done;
      }
      __pyx_t_4 = (__pyx_v_self->comparator->Compare(__pyx_v_self->__pyx_base._iter->key(), __pyx_v_self->stop_slice) > 0);
      __pyx_t_1 = __pyx_t_4;
      __pyx_L24_bool_binop_done:;
      if (__pyx_t_1) {

        /* "plyvel/_plyvel.pyx":943
 *                 # Make sure the iterator is not past the stop key
 *                 if self._iter.Valid() and self.comparator.Compare(self._iter.key(), self.stop_slice) > 0:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.Prev()
 * 
 */
        {
            #ifdef WITH_THREAD
            PyThreadState *_save;
            _save = NULL;
            Py_UNBLOCK_THREADS
            __Pyx_FastGIL_Remember();
            #endif
            /*try:*/ {

              /* "plyvel/_plyvel.pyx":944
 *                 if self._iter.Valid() and self.comparator.Compare(self._iter.key(), self.stop_slice) > 0:
 *                     with nogil:
 *                         self._iter.Prev()             # <<<<<<<<<<<<<<
 * 
 *             if not self._iter.Valid():
 */
              __pyx_v_self->__pyx_base._iter->Prev();
            }

            /* "plyvel/_plyvel.pyx":943
 *                 # Make sure the iterator is not past the stop key
 *                 if self._iter.Valid() and self.comparator.Compare(self._iter.key(), self.stop_slice) > 0:
 *                     with nogil:             # <<<<<<<<<<<<<<
 *                         self._iter.Prev()
 * 
 */
            /*finally:*/ {
              /*normal exit:*/{
                #ifdef WITH_THREAD
                __Pyx_FastGIL_Forget();
                Py_BLOCK_THREADS
                #endif
                goto __pyx_L28;
              }
              __pyx_L28:;
            }
        }

        /* "plyvel/_plyvel.pyx":942
 * 
 *                 # Make sure the iterator is not past the stop key
 *                 if self._iter.Valid() and self.comparator.Compare(self._iter.key(), self.stop_slice) > 0:             # <<<<<<<<<<<<<<
 *                     with nogil:
 *                         self._iter.Prev()
 */
      }
    }
    __pyx_L8:;

    /* "plyvel/_plyvel.pyx":946
 *                         self._iter.Prev()
 * 
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # No entries left
 *                 raise StopIteration
 */
    __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":948
 *             if not self._iter.Valid():
 *                 # No entries left
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *             # After all the stepping back, we might even have ended up
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 948, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":946
 *                         self._iter.Prev()
 * 
 *             if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *                 # No entries left
 *                 raise StopIteration
 */
    }

    /* "plyvel/_plyvel.pyx":953
 *             # *before* the start key. In this case the iterator does not
 *             # yield any items.
 *             if self.start is not None and self.comparator.Compare(self.start_slice, self._iter.key()) >= 0:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 * 
 */
    __pyx_t_4 = (__pyx_v_self->start != ((PyObject*)Py_None));
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L31_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->comparator->Compare(__pyx_v_self->start_slice, __pyx_v_self->__pyx_base._iter->key()) >= 0);
    __pyx_t_1 = __pyx_t_4;
    __pyx_L31_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "plyvel/_plyvel.pyx":954
 *             # yield any items.
 *             if self.start is not None and self.comparator.Compare(self.start_slice, self._iter.key()) >= 0:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *             raise_for_status(self._iter.status())
 */
      __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
      __PYX_ERR(0, 954, __pyx_L1_error)

      /* "plyvel/_plyvel.pyx":953
 *             # *before* the start key. In this case the iterator does not
 *             # yield any items.
 *             if self.start is not None and self.comparator.Compare(self.start_slice, self._iter.key()) >= 0:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 * 
 */
    }

    /* "plyvel/_plyvel.pyx":956
 *                 raise StopIteration
 * 
 *             raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *         # Unlike .real_next(), first obtain the value, then move the
 */
    __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 956, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":920
 *         elif self.state == BEFORE_START:
 *             raise StopIteration
 *         elif self.state == AFTER_STOP:             # <<<<<<<<<<<<<<
 *             if self.stop is None:
 *                 # No stop key, seek to last entry
 */
    break;
    default: break;
  }

  /* "plyvel/_plyvel.pyx":962
 *         # repeatedly calling it.prev() and next(it) will work as
 *         # designed.
 *         out = self.current()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._iter.Prev()
 */
  __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_8Iterator_current(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_out = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":963
 *         # designed.
 *         out = self.current()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Prev()
 *         if not self._iter.Valid():
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":964
 *         out = self.current()
 *         with nogil:
 *             self._iter.Prev()             # <<<<<<<<<<<<<<
 *         if not self._iter.Valid():
 *             # Moved before the first key in the database
 */
        __pyx_v_self->__pyx_base._iter->Prev();
      }

      /* "plyvel/_plyvel.pyx":963
 *         # designed.
 *         out = self.current()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Prev()
 *         if not self._iter.Valid():
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L35;
        }
        __pyx_L35:;
      }
  }

  /* "plyvel/_plyvel.pyx":965
 *         with nogil:
 *             self._iter.Prev()
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             # Moved before the first key in the database
 *             self.state = BEFORE_START
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":967
 *         if not self._iter.Valid():
 *             # Moved before the first key in the database
 *             self.state = BEFORE_START             # <<<<<<<<<<<<<<
 *         else:
 *             if self.start is None:
 */
    __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_BEFORE_START;

    /* "plyvel/_plyvel.pyx":965
 *         with nogil:
 *             self._iter.Prev()
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             # Moved before the first key in the database
 *             self.state = BEFORE_START
 */
    goto __pyx_L36;
  }

  /* "plyvel/_plyvel.pyx":969
 *             self.state = BEFORE_START
 *         else:
 *             if self.start is None:             # <<<<<<<<<<<<<<
 *                 # Iterator is valid
 *                 self.state = IN_BETWEEN
 */
  /*else*/ {
    __pyx_t_1 = (__pyx_v_self->start == ((PyObject*)Py_None));
    if (__pyx_t_1) {

      /* "plyvel/_plyvel.pyx":971
 *             if self.start is None:
 *                 # Iterator is valid
 *                 self.state = IN_BETWEEN             # <<<<<<<<<<<<<<
 *             else:
 *                 # Check range boundaries
 */
      __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_IN_BETWEEN;

      /* "plyvel/_plyvel.pyx":969
 *             self.state = BEFORE_START
 *         else:
 *             if self.start is None:             # <<<<<<<<<<<<<<
 *                 # Iterator is valid
 *                 self.state = IN_BETWEEN
 */
      goto __pyx_L37;
    }

    /* "plyvel/_plyvel.pyx":974
 *             else:
 *                 # Check range boundaries
 *                 n = 0 if self.include_start else 1             # <<<<<<<<<<<<<<
 *                 if self.comparator.Compare(
 *                         self._iter.key(), self.start_slice) >= n:
 */
    /*else*/ {
      __pyx_t_1 = (__pyx_v_self->include_start != 0);
      if (__pyx_t_1) {
        __pyx_t_5 = 0;
      } else {
        __pyx_t_5 = 1;
      }
      __pyx_v_n = __pyx_t_5;

      /* "plyvel/_plyvel.pyx":976
 *                 n = 0 if self.include_start else 1
 *                 if self.comparator.Compare(
 *                         self._iter.key(), self.start_slice) >= n:             # <<<<<<<<<<<<<<
 *                     # Iterator is valid and within range boundaries
 *                     self.state = IN_BETWEEN
 */
      __pyx_t_1 = (__pyx_v_self->comparator->Compare(__pyx_v_self->__pyx_base._iter->key(), __pyx_v_self->start_slice) >= __pyx_v_n);

      /* "plyvel/_plyvel.pyx":975
 *                 # Check range boundaries
 *                 n = 0 if self.include_start else 1
 *                 if self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                         self._iter.key(), self.start_slice) >= n:
 *                     # Iterator is valid and within range boundaries
 */
      if (__pyx_t_1) {

        /* "plyvel/_plyvel.pyx":978
 *                         self._iter.key(), self.start_slice) >= n:
 *                     # Iterator is valid and within range boundaries
 *                     self.state = IN_BETWEEN             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Iterator is valid, but has moved before the
 */
        __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_IN_BETWEEN;

        /* "plyvel/_plyvel.pyx":975
 *                 # Check range boundaries
 *                 n = 0 if self.include_start else 1
 *                 if self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                         self._iter.key(), self.start_slice) >= n:
 *                     # Iterator is valid and within range boundaries
 */
        goto __pyx_L38;
      }

      /* "plyvel/_plyvel.pyx":982
 *                     # Iterator is valid, but has moved before the
 *                     # 'start' key
 *                     self.state = BEFORE_START             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
      /*else*/ {
        __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_BEFORE_START;
      }
      __pyx_L38:;
    }
    __pyx_L37:;
  }
  __pyx_L36:;

  /* "plyvel/_plyvel.pyx":984
 *                     self.state = BEFORE_START
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 984, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":985
 * 
 *         raise_for_status(self._iter.status())
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_start(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":903
 *         return self.current()
 * 
 *     cdef real_prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.real_prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":987
 *         return out
 * 
 *     def seek_to_start(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_9seek_to_start(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_8seek_to_start, "Iterator.seek_to_start(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_9seek_to_start = {"seek_to_start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_9seek_to_start, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_8seek_to_start};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_9seek_to_start(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_start (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_start", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_start", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_8seek_to_start(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_8seek_to_start(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_start", 1);

  /* "plyvel/_plyvel.pyx":988
 * 
 *     def seek_to_start(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":989
 *     def seek_to_start(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         self.state = BEFORE_START
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 989, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":988
 * 
 *     def seek_to_start(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":991
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         self.state = BEFORE_START             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_stop(self):
 */
  __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_BEFORE_START;

  /* "plyvel/_plyvel.pyx":987
 *         return out
 * 
 *     def seek_to_start(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.seek_to_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":993
 *         self.state = BEFORE_START
 * 
 *     def seek_to_stop(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_11seek_to_stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_10seek_to_stop, "Iterator.seek_to_stop(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_11seek_to_stop = {"seek_to_stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_11seek_to_stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_10seek_to_stop};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_11seek_to_stop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_stop (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_stop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_stop", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_10seek_to_stop(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_10seek_to_stop(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_stop", 1);

  /* "plyvel/_plyvel.pyx":994
 * 
 *     def seek_to_stop(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":995
 *     def seek_to_stop(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         self.state = AFTER_STOP
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 995, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":994
 * 
 *     def seek_to_stop(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":997
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         self.state = AFTER_STOP             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, bytes target not None):
 */
  __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_AFTER_STOP;

  /* "plyvel/_plyvel.pyx":993
 *         self.state = BEFORE_START
 * 
 *     def seek_to_stop(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.seek_to_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":999
 *         self.state = AFTER_STOP
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_13seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_12seek, "Iterator.seek(self, bytes target)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_13seek = {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_13seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_12seek};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_13seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_target = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 999, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek") < 0)) __PYX_ERR(0, 999, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_target = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 999, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), (&PyBytes_Type), 0, "target", 1))) __PYX_ERR(0, 999, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_12seek(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self), __pyx_v_target);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_12seek(struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, PyObject *__pyx_v_target) {
  leveldb::Slice __pyx_v_target_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  leveldb::Slice __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 0);
  __Pyx_INCREF(__pyx_v_target);

  /* "plyvel/_plyvel.pyx":1000
 * 
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1001
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if self.db_prefix is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1001, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1000
 * 
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1003
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if self.db_prefix is not None:             # <<<<<<<<<<<<<<
 *             target = self.db_prefix + target
 * 
 */
  __pyx_t_1 = (__pyx_v_self->db_prefix != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1004
 * 
 *         if self.db_prefix is not None:
 *             target = self.db_prefix + target             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice target_slice = Slice(target, len(target))
 */
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->db_prefix, __pyx_v_target); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_target, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "plyvel/_plyvel.pyx":1003
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if self.db_prefix is not None:             # <<<<<<<<<<<<<<
 *             target = self.db_prefix + target
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1006
 *             target = self.db_prefix + target
 * 
 *         cdef Slice target_slice = Slice(target, len(target))             # <<<<<<<<<<<<<<
 * 
 *         # Seek only within the start/stop boundaries
 */
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_target); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_target); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1006, __pyx_L1_error)
  __pyx_v_target_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

  /* "plyvel/_plyvel.pyx":1009
 * 
 *         # Seek only within the start/stop boundaries
 *         if self.start is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 */
  __pyx_t_5 = (__pyx_v_self->start != ((PyObject*)Py_None));
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L6_bool_binop_done;
  }

  /* "plyvel/_plyvel.pyx":1010
 *         # Seek only within the start/stop boundaries
 *         if self.start is not None and self.comparator.Compare(
 *                 target_slice, self.start_slice) < 0:             # <<<<<<<<<<<<<<
 *             target_slice = self.start_slice
 *         if self.stop is not None and self.comparator.Compare(
 */
  __pyx_t_5 = (__pyx_v_self->comparator->Compare(__pyx_v_target_slice, __pyx_v_self->start_slice) < 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L6_bool_binop_done:;

  /* "plyvel/_plyvel.pyx":1009
 * 
 *         # Seek only within the start/stop boundaries
 *         if self.start is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 */
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1011
 *         if self.start is not None and self.comparator.Compare(
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice             # <<<<<<<<<<<<<<
 *         if self.stop is not None and self.comparator.Compare(
 *                 target_slice, self.stop_slice) > 0:
 */
    __pyx_t_6 = __pyx_v_self->start_slice;
    __pyx_v_target_slice = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "plyvel/_plyvel.pyx":1009
 * 
 *         # Seek only within the start/stop boundaries
 *         if self.start is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 */
  }

  /* "plyvel/_plyvel.pyx":1012
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 *         if self.stop is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.stop_slice) > 0:
 *             target_slice = self.stop_slice
 */
  __pyx_t_5 = (__pyx_v_self->stop != ((PyObject*)Py_None));
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L9_bool_binop_done;
  }

  /* "plyvel/_plyvel.pyx":1013
 *             target_slice = self.start_slice
 *         if self.stop is not None and self.comparator.Compare(
 *                 target_slice, self.stop_slice) > 0:             # <<<<<<<<<<<<<<
 *             target_slice = self.stop_slice
 * 
 */
  __pyx_t_5 = (__pyx_v_self->comparator->Compare(__pyx_v_target_slice, __pyx_v_self->stop_slice) > 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L9_bool_binop_done:;

  /* "plyvel/_plyvel.pyx":1012
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 *         if self.stop is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.stop_slice) > 0:
 *             target_slice = self.stop_slice
 */
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1014
 *         if self.stop is not None and self.comparator.Compare(
 *                 target_slice, self.stop_slice) > 0:
 *             target_slice = self.stop_slice             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_6 = __pyx_v_self->stop_slice;
    __pyx_v_target_slice = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "plyvel/_plyvel.pyx":1012
 *                 target_slice, self.start_slice) < 0:
 *             target_slice = self.start_slice
 *         if self.stop is not None and self.comparator.Compare(             # <<<<<<<<<<<<<<
 *                 target_slice, self.stop_slice) > 0:
 *             target_slice = self.stop_slice
 */
  }

  /* "plyvel/_plyvel.pyx":1016
 *             target_slice = self.stop_slice
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Seek(target_slice)
 *         if not self._iter.Valid():
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1017
 * 
 *         with nogil:
 *             self._iter.Seek(target_slice)             # <<<<<<<<<<<<<<
 *         if not self._iter.Valid():
 *             # Moved past the end (or empty database)
 */
        __pyx_v_self->__pyx_base._iter->Seek(__pyx_v_target_slice);
      }

      /* "plyvel/_plyvel.pyx":1016
 *             target_slice = self.stop_slice
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Seek(target_slice)
 *         if not self._iter.Valid():
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
  }

  /* "plyvel/_plyvel.pyx":1018
 *         with nogil:
 *             self._iter.Seek(target_slice)
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             # Moved past the end (or empty database)
 *             self.state = AFTER_STOP
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1020
 *         if not self._iter.Valid():
 *             # Moved past the end (or empty database)
 *             self.state = AFTER_STOP             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_AFTER_STOP;

    /* "plyvel/_plyvel.pyx":1021
 *             # Moved past the end (or empty database)
 *             self.state = AFTER_STOP
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.state = IN_BETWEEN_ALREADY_POSITIONED
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":1018
 *         with nogil:
 *             self._iter.Seek(target_slice)
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             # Moved past the end (or empty database)
 *             self.state = AFTER_STOP
 */
  }

  /* "plyvel/_plyvel.pyx":1023
 *             return
 * 
 *         self.state = IN_BETWEEN_ALREADY_POSITIONED             # <<<<<<<<<<<<<<
 *         raise_for_status(self._iter.status())
 * 
 */
  __pyx_v_self->state = __pyx_e_6plyvel_7_plyvel_IN_BETWEEN_ALREADY_POSITIONED;

  /* "plyvel/_plyvel.pyx":1024
 * 
 *         self.state = IN_BETWEEN_ALREADY_POSITIONED
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1024, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":999
 *         self.state = AFTER_STOP
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_14__reduce_cython__, "Iterator.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_14__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_14__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_self_comparator_self, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Iterator_16__setstate_cython__, "Iterator.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Iterator_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_16__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Iterator_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Iterator_16__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Iterator_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Iterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_self_comparator_self, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.Iterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1029
 * @cython.final
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_1valid(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_valid, "RawIterator.valid(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_1valid = {"valid", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_1valid, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_valid};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_1valid(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("valid (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("valid", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "valid", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_valid(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_valid(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("valid", 1);

  /* "plyvel/_plyvel.pyx":1030
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1031
 *     def valid(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         return self._iter.Valid()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1031, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1030
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1033
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         return self._iter.Valid()             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_first(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base._iter->Valid()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1029
 * @cython.final
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1035
 *         return self._iter.Valid()
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_3seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_2seek_to_first, "RawIterator.seek_to_first(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_3seek_to_first = {"seek_to_first", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_3seek_to_first, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_2seek_to_first};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_3seek_to_first(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_first (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_first", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_first", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_2seek_to_first(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_2seek_to_first(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_first", 1);

  /* "plyvel/_plyvel.pyx":1036
 * 
 *     def seek_to_first(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1037
 *     def seek_to_first(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1037, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1037, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1036
 * 
 *     def seek_to_first(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1039
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.SeekToFirst()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1040
 * 
 *         with nogil:
 *             self._iter.SeekToFirst()             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
        __pyx_v_self->__pyx_base._iter->SeekToFirst();
      }

      /* "plyvel/_plyvel.pyx":1039
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.SeekToFirst()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":1042
 *             self._iter.SeekToFirst()
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     def seek_to_last(self):
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1042, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1035
 *         return self._iter.Valid()
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.seek_to_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1044
 *         raise_for_status(self._iter.status())
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_5seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_4seek_to_last, "RawIterator.seek_to_last(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_5seek_to_last = {"seek_to_last", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_5seek_to_last, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_4seek_to_last};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_5seek_to_last(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek_to_last (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("seek_to_last", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "seek_to_last", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_4seek_to_last(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_4seek_to_last(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek_to_last", 1);

  /* "plyvel/_plyvel.pyx":1045
 * 
 *     def seek_to_last(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1046
 *     def seek_to_last(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1046, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1045
 * 
 *     def seek_to_last(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1048
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.SeekToLast()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1049
 * 
 *         with nogil:
 *             self._iter.SeekToLast()             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
        __pyx_v_self->__pyx_base._iter->SeekToLast();
      }

      /* "plyvel/_plyvel.pyx":1048
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.SeekToLast()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":1051
 *             self._iter.SeekToLast()
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     def seek(self, bytes target not None):
 */
  __pyx_t_3 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1051, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1044
 *         raise_for_status(self._iter.status())
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.seek_to_last", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1053
 *         raise_for_status(self._iter.status())
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_7seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_6seek, "RawIterator.seek(self, bytes target)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_7seek = {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_7seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_6seek};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_7seek(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_target = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seek (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "seek") < 0)) __PYX_ERR(0, 1053, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_target = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seek", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1053, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), (&PyBytes_Type), 0, "target", 1))) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_6seek(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self), __pyx_v_target);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_6seek(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, PyObject *__pyx_v_target) {
  leveldb::Slice __pyx_v_target_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  const char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seek", 1);

  /* "plyvel/_plyvel.pyx":1054
 * 
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1055
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice target_slice = Slice(target, len(target))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1055, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1054
 * 
 *     def seek(self, bytes target not None):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1057
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         cdef Slice target_slice = Slice(target, len(target))             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._iter.Seek(target_slice)
 */
  __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_target); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 1057, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBytes_GET_SIZE(__pyx_v_target); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1057, __pyx_L1_error)
  __pyx_v_target_slice = leveldb::Slice(__pyx_t_3, __pyx_t_4);

  /* "plyvel/_plyvel.pyx":1058
 * 
 *         cdef Slice target_slice = Slice(target, len(target))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Seek(target_slice)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1059
 *         cdef Slice target_slice = Slice(target, len(target))
 *         with nogil:
 *             self._iter.Seek(target_slice)             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
        __pyx_v_self->__pyx_base._iter->Seek(__pyx_v_target_slice);
      }

      /* "plyvel/_plyvel.pyx":1058
 * 
 *         cdef Slice target_slice = Slice(target, len(target))
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Seek(target_slice)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":1061
 *             self._iter.Seek(target_slice)
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     def next(self):
 */
  __pyx_t_5 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1061, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1053
 *         raise_for_status(self._iter.status())
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.seek", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1063
 *         raise_for_status(self._iter.status())
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_9next(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_8next, "RawIterator.next(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_9next = {"next", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_9next, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_8next};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_9next(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("next", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "next", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_8next(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_8next(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 1);

  /* "plyvel/_plyvel.pyx":1064
 * 
 *     def next(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1065
 *     def next(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if not self._iter.Valid():
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1065, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1064
 * 
 *     def next(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1067
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1068
 * 
 *         if not self._iter.Valid():
 *             raise IteratorInvalidError()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IteratorInvalidError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1068, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1067
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1070
 *             raise IteratorInvalidError()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Next()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1071
 * 
 *         with nogil:
 *             self._iter.Next()             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
        __pyx_v_self->__pyx_base._iter->Next();
      }

      /* "plyvel/_plyvel.pyx":1070
 *             raise IteratorInvalidError()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Next()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "plyvel/_plyvel.pyx":1073
 *             self._iter.Next()
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     def prev(self):
 */
  __pyx_t_5 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1073, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1063
 *         raise_for_status(self._iter.status())
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1075
 *         raise_for_status(self._iter.status())
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_11prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_10prev, "RawIterator.prev(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_11prev = {"prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_11prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_10prev};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_11prev(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prev (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("prev", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "prev", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_10prev(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_10prev(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prev", 1);

  /* "plyvel/_plyvel.pyx":1076
 * 
 *     def prev(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1077
 *     def prev(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if not self._iter.Valid():
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1077, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1076
 * 
 *     def prev(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1079
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1080
 * 
 *         if not self._iter.Valid():
 *             raise IteratorInvalidError()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IteratorInvalidError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1080, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1079
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1082
 *             raise IteratorInvalidError()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Prev()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1083
 * 
 *         with nogil:
 *             self._iter.Prev()             # <<<<<<<<<<<<<<
 * 
 *         raise_for_status(self._iter.status())
 */
        __pyx_v_self->__pyx_base._iter->Prev();
      }

      /* "plyvel/_plyvel.pyx":1082
 *             raise IteratorInvalidError()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._iter.Prev()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "plyvel/_plyvel.pyx":1085
 *             self._iter.Prev()
 * 
 *         raise_for_status(self._iter.status())             # <<<<<<<<<<<<<<
 * 
 *     cpdef key(self):
 */
  __pyx_t_5 = __pyx_f_6plyvel_7_plyvel_raise_for_status(__pyx_v_self->__pyx_base._iter->status()); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1085, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1075
 *         raise_for_status(self._iter.status())
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1087
 *         raise_for_status(self._iter.status())
 * 
 *     cpdef key(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_13key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_key(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  leveldb::Slice __pyx_v_key_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("key", 1);

  /* "plyvel/_plyvel.pyx":1088
 * 
 *     cpdef key(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1089
 *     cpdef key(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if not self._iter.Valid():
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1089, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1088
 * 
 *     cpdef key(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1091
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1092
 * 
 *         if not self._iter.Valid():
 *             raise IteratorInvalidError()             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice key_slice
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IteratorInvalidError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1092, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1091
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1095
 * 
 *         cdef Slice key_slice
 *         key_slice = self._iter.key()             # <<<<<<<<<<<<<<
 *         return key_slice.data()[:key_slice.size()]
 * 
 */
  __pyx_v_key_slice = __pyx_v_self->__pyx_base._iter->key();

  /* "plyvel/_plyvel.pyx":1096
 *         cdef Slice key_slice
 *         key_slice = self._iter.key()
 *         return key_slice.data()[:key_slice.size()]             # <<<<<<<<<<<<<<
 * 
 *     cpdef value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_key_slice.data() + 0, __pyx_v_key_slice.size() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1087
 *         raise_for_status(self._iter.status())
 * 
 *     cpdef key(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_13key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_12key, "RawIterator.key(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_13key = {"key", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_13key, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_12key};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_13key(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("key (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("key", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "key", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_12key(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_12key(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("key", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_11RawIterator_key(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1098
 *         return key_slice.data()[:key_slice.size()]
 * 
 *     cpdef value(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_15value(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_11RawIterator_value(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  leveldb::Slice __pyx_v_value_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value", 1);

  /* "plyvel/_plyvel.pyx":1099
 * 
 *     cpdef value(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base._iter == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1100
 *     cpdef value(self):
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         if not self._iter.Valid():
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1100, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1099
 * 
 *     cpdef value(self):
 *         if self._iter is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or iterator is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1102
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->__pyx_base._iter->Valid() != 0));
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1103
 * 
 *         if not self._iter.Valid():
 *             raise IteratorInvalidError()             # <<<<<<<<<<<<<<
 * 
 *         cdef Slice value_slice
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_IteratorInvalidError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1103, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1102
 *             raise RuntimeError("Database or iterator is closed")
 * 
 *         if not self._iter.Valid():             # <<<<<<<<<<<<<<
 *             raise IteratorInvalidError()
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1106
 * 
 *         cdef Slice value_slice
 *         value_slice = self._iter.value()             # <<<<<<<<<<<<<<
 *         return value_slice.data()[:value_slice.size()]
 * 
 */
  __pyx_v_value_slice = __pyx_v_self->__pyx_base._iter->value();

  /* "plyvel/_plyvel.pyx":1107
 *         cdef Slice value_slice
 *         value_slice = self._iter.value()
 *         return value_slice.data()[:value_slice.size()]             # <<<<<<<<<<<<<<
 * 
 *     def item(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_value_slice.data() + 0, __pyx_v_value_slice.size() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1098
 *         return key_slice.data()[:key_slice.size()]
 * 
 *     cpdef value(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_15value(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_14value, "RawIterator.value(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_15value = {"value", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_15value, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_14value};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_15value(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("value (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("value", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "value", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_14value(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_14value(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_11RawIterator_value(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1109
 *         return value_slice.data()[:value_slice.size()]
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         return self.key(), self.value()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_17item(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_16item, "RawIterator.item(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_17item = {"item", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_17item, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_16item};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_17item(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("item (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("item", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "item", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_16item(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_16item(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("item", 1);

  /* "plyvel/_plyvel.pyx":1110
 * 
 *     def item(self):
 *         return self.key(), self.value()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_11RawIterator_key(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_6plyvel_7_plyvel_11RawIterator_value(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1109
 *         return value_slice.data()[:value_slice.size()]
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         return self.key(), self.value()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__, "RawIterator.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__, "RawIterator.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_RawIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__iter_cannot_be_converted_t, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.RawIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1123
 *     cdef bytes prefix
 * 
 *     def __init__(self, *, DB db not None, bytes prefix=None):             # <<<<<<<<<<<<<<
 *         if db._db is NULL:
 *             raise RuntimeError("Cannot operate on closed LevelDB database")
 */

/* Python wrapper */
static int __pyx_pw_6plyvel_7_plyvel_8Snapshot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6plyvel_7_plyvel_8Snapshot_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db = 0;
  PyObject *__pyx_v_prefix = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_db,&__pyx_n_s_prefix,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject*)Py_None));
    if (likely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_db)) != 0)) {
        (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
        kw_args--;
      }
      else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L3_error)
      else {
        __Pyx_RaiseKeywordRequired("__init__", __pyx_n_s_db); __PYX_ERR(0, 1123, __pyx_L3_error)
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "__init__") < 0)) __PYX_ERR(0, 1123, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("__init__", __pyx_n_s_db); __PYX_ERR(0, 1123, __pyx_L3_error)
    }
    __pyx_v_db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)values[0]);
    __pyx_v_prefix = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 1123, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_db), __pyx_ptype_6plyvel_7_plyvel_DB, 0, "db", 0))) __PYX_ERR(0, 1123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyBytes_Type), 1, "prefix", 1))) __PYX_ERR(0, 1123, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot___init__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v_db, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6plyvel_7_plyvel_8Snapshot___init__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, struct __pyx_obj_6plyvel_7_plyvel_DB *__pyx_v_db, PyObject *__pyx_v_prefix) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "plyvel/_plyvel.pyx":1124
 * 
 *     def __init__(self, *, DB db not None, bytes prefix=None):
 *         if db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Cannot operate on closed LevelDB database")
 * 
 */
  __pyx_t_1 = (__pyx_v_db->_db == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1125
 *     def __init__(self, *, DB db not None, bytes prefix=None):
 *         if db._db is NULL:
 *             raise RuntimeError("Cannot operate on closed LevelDB database")             # <<<<<<<<<<<<<<
 * 
 *         self.db = db
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1125, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1124
 * 
 *     def __init__(self, *, DB db not None, bytes prefix=None):
 *         if db._db is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Cannot operate on closed LevelDB database")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1127
 *             raise RuntimeError("Cannot operate on closed LevelDB database")
 * 
 *         self.db = db             # <<<<<<<<<<<<<<
 *         self.prefix = prefix
 *         with nogil:
 */
  __Pyx_INCREF((PyObject *)__pyx_v_db);
  __Pyx_GIVEREF((PyObject *)__pyx_v_db);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->db);
  __Pyx_DECREF((PyObject *)__pyx_v_self->db);
  __pyx_v_self->db = __pyx_v_db;

  /* "plyvel/_plyvel.pyx":1128
 * 
 *         self.db = db
 *         self.prefix = prefix             # <<<<<<<<<<<<<<
 *         with nogil:
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()
 */
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  __Pyx_GOTREF(__pyx_v_self->prefix);
  __Pyx_DECREF(__pyx_v_self->prefix);
  __pyx_v_self->prefix = __pyx_v_prefix;

  /* "plyvel/_plyvel.pyx":1129
 *         self.db = db
 *         self.prefix = prefix
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1130
 *         self.prefix = prefix
 *         with nogil:
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
        __pyx_v_self->_snapshot = ((leveldb::Snapshot *)__pyx_v_db->_db->GetSnapshot());
      }

      /* "plyvel/_plyvel.pyx":1129
 *         self.db = db
 *         self.prefix = prefix
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "plyvel/_plyvel.pyx":1123
 *     cdef bytes prefix
 * 
 *     def __init__(self, *, DB db not None, bytes prefix=None):             # <<<<<<<<<<<<<<
 *         if db._db is NULL:
 *             raise RuntimeError("Cannot operate on closed LevelDB database")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1132
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static void __pyx_pw_6plyvel_7_plyvel_8Snapshot_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6plyvel_7_plyvel_8Snapshot_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6plyvel_7_plyvel_8Snapshot_2__dealloc__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6plyvel_7_plyvel_8Snapshot_2__dealloc__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "plyvel/_plyvel.pyx":1133
 * 
 *     def __dealloc__(self):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     cpdef close(self):
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_8Snapshot_close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":1132
 *             self._snapshot = <leveldb.Snapshot*>db._db.GetSnapshot()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("plyvel._plyvel.Snapshot.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "plyvel/_plyvel.pyx":1135
 *         self.close()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             return  # nothing to do
 */

static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_5close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6plyvel_7_plyvel_8Snapshot_close(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("close", 1);

  /* "plyvel/_plyvel.pyx":1136
 * 
 *     cpdef close(self):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             return  # nothing to do
 * 
 */
  __pyx_t_2 = (__pyx_v_self->db->_db == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_snapshot == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1137
 *     cpdef close(self):
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             return  # nothing to do             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "plyvel/_plyvel.pyx":1136
 * 
 *     cpdef close(self):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             return  # nothing to do
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1139
 *             return  # nothing to do
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.db._db.ReleaseSnapshot(self._snapshot)
 *             self._snapshot = NULL
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "plyvel/_plyvel.pyx":1140
 * 
 *         with nogil:
 *             self.db._db.ReleaseSnapshot(self._snapshot)             # <<<<<<<<<<<<<<
 *             self._snapshot = NULL
 * 
 */
        __pyx_v_self->db->_db->ReleaseSnapshot(__pyx_v_self->_snapshot);

        /* "plyvel/_plyvel.pyx":1141
 *         with nogil:
 *             self.db._db.ReleaseSnapshot(self._snapshot)
 *             self._snapshot = NULL             # <<<<<<<<<<<<<<
 * 
 *     def release(self):
 */
        __pyx_v_self->_snapshot = NULL;
      }

      /* "plyvel/_plyvel.pyx":1139
 *             return  # nothing to do
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             self.db._db.ReleaseSnapshot(self._snapshot)
 *             self._snapshot = NULL
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
  }

  /* "plyvel/_plyvel.pyx":1135
 *         self.close()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             return  # nothing to do
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_5close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_4close, "Snapshot.close(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_5close = {"close", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_5close, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_4close};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_5close(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("close", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "close", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_4close(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_4close(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_8Snapshot_close(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1143
 *             self._snapshot = NULL
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_7release(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_6release, "Snapshot.release(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_7release = {"release", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_7release, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_6release};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_7release(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("release", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "release", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_6release(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_6release(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("release", 1);

  /* "plyvel/_plyvel.pyx":1144
 * 
 *     def release(self):
 *         self.close()             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_8Snapshot_close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":1143
 *             self._snapshot = NULL
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.release", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1146
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_9__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_8__enter__, "Snapshot.__enter__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_9__enter__ = {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_9__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_8__enter__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_9__enter__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__enter__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__enter__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_8__enter__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_8__enter__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 1);

  /* "plyvel/_plyvel.pyx":1147
 * 
 *     def __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1146
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1149
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_11__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_10__exit__, "Snapshot.__exit__(self, exc_type, exc_val, exc_tb)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_11__exit__ = {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_11__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_10__exit__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_11__exit__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_val)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 1149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exc_tb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 1149, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__exit__") < 0)) __PYX_ERR(0, 1149, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1149, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_10__exit__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_10__exit__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 1);

  /* "plyvel/_plyvel.pyx":1150
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()             # <<<<<<<<<<<<<<
 *         return False  # propagate exceptions
 * 
 */
  __pyx_t_1 = __pyx_f_6plyvel_7_plyvel_8Snapshot_close(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "plyvel/_plyvel.pyx":1151
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.close()
 *         return False  # propagate exceptions             # <<<<<<<<<<<<<<
 * 
 *     def get(self, bytes key not None, default=None, *,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1149
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_13get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_12get, "Snapshot.get(self, bytes key, default=None, *, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_13get = {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_13get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_12get};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_13get(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_default,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":1154
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[3] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_default);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get") < 0)) __PYX_ERR(0, 1153, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_default = values[1];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[2]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1153, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyBytes_Type), 0, "key", 1))) __PYX_ERR(0, 1153, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_12get(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v_key, __pyx_v_default, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_12get(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  leveldb::ReadOptions __pyx_v_read_options;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  leveldb::Snapshot *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "plyvel/_plyvel.pyx":1155
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  __pyx_t_2 = (__pyx_v_self->db->_db == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_snapshot == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1156
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef ReadOptions read_options
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1156, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1155
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1159
 * 
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums             # <<<<<<<<<<<<<<
 *         read_options.fill_cache = fill_cache
 *         read_options.snapshot = self._snapshot
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_verify_checksums)); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1159, __pyx_L1_error)
  __pyx_v_read_options.verify_checksums = __pyx_t_4;

  /* "plyvel/_plyvel.pyx":1160
 *         cdef ReadOptions read_options
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache             # <<<<<<<<<<<<<<
 *         read_options.snapshot = self._snapshot
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_fill_cache)); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1160, __pyx_L1_error)
  __pyx_v_read_options.fill_cache = __pyx_t_4;

  /* "plyvel/_plyvel.pyx":1161
 *         read_options.verify_checksums = verify_checksums
 *         read_options.fill_cache = fill_cache
 *         read_options.snapshot = self._snapshot             # <<<<<<<<<<<<<<
 * 
 *         if self.prefix is not None:
 */
  __pyx_t_5 = __pyx_v_self->_snapshot;
  __pyx_v_read_options.snapshot = __pyx_t_5;

  /* "plyvel/_plyvel.pyx":1163
 *         read_options.snapshot = self._snapshot
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  __pyx_t_1 = (__pyx_v_self->prefix != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "plyvel/_plyvel.pyx":1164
 * 
 *         if self.prefix is not None:
 *             key = self.prefix + key             # <<<<<<<<<<<<<<
 * 
 *         return db_get(self.db, key, default, read_options)
 */
    __pyx_t_3 = PyNumber_Add(__pyx_v_self->prefix, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "plyvel/_plyvel.pyx":1163
 *         read_options.snapshot = self._snapshot
 * 
 *         if self.prefix is not None:             # <<<<<<<<<<<<<<
 *             key = self.prefix + key
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1166
 *             key = self.prefix + key
 * 
 *         return db_get(self.db, key, default, read_options)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_v_self->db);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = __pyx_f_6plyvel_7_plyvel_db_get(((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_t_3), __pyx_v_key, __pyx_v_default, __pyx_v_read_options); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1168
 *         return db_get(self.db, key, default, read_options)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self.iterator()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_15__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_15__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_14__iter__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_14__iter__(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "plyvel/_plyvel.pyx":1169
 * 
 *     def __iter__(self):
 *         return self.iterator()             # <<<<<<<<<<<<<<
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1168
 *         return db_get(self.db, key, default, read_options)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self.iterator()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_17iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_16iterator, "Snapshot.iterator(self, *, reverse=False, start=None, stop=None, include_start=True, include_stop=False, prefix=None, include_key=True, include_value=True, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_17iterator = {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_17iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_16iterator};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_17iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_reverse = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_include_start = 0;
  PyObject *__pyx_v_include_stop = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_include_key = 0;
  PyObject *__pyx_v_include_value = 0;
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iterator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reverse,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_include_start,&__pyx_n_s_include_stop,&__pyx_n_s_prefix,&__pyx_n_s_include_key,&__pyx_n_s_include_value,&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":1172
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "plyvel/_plyvel.pyx":1173
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));

    /* "plyvel/_plyvel.pyx":1174
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
    values[8] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));
    values[9] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 10)) {
        Py_ssize_t index;
        for (index = 0; index < 10 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "iterator") < 0)) __PYX_ERR(0, 1171, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_reverse = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
    __pyx_v_include_start = values[3];
    __pyx_v_include_stop = values[4];
    __pyx_v_prefix = values[5];
    __pyx_v_include_key = values[6];
    __pyx_v_include_value = values[7];
    __pyx_v_verify_checksums = ((PyBoolObject *)values[8]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[9]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iterator", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 1171, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 1174, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 1174, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_16iterator(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v_reverse, __pyx_v_start, __pyx_v_stop, __pyx_v_include_start, __pyx_v_include_stop, __pyx_v_prefix, __pyx_v_include_key, __pyx_v_include_value, __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_16iterator(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyObject *__pyx_v_reverse, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_include_start, PyObject *__pyx_v_include_stop, PyObject *__pyx_v_prefix, PyObject *__pyx_v_include_key, PyObject *__pyx_v_include_value, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iterator", 1);

  /* "plyvel/_plyvel.pyx":1175
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  __pyx_t_2 = (__pyx_v_self->db->_db == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_snapshot == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1176
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")             # <<<<<<<<<<<<<<
 * 
 *         return Iterator(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1176, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1175
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1178
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             db=self.db, db_prefix=self.prefix, reverse=reverse, start=start,
 *             stop=stop, include_start=include_start, include_stop=include_stop,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "plyvel/_plyvel.pyx":1179
 * 
 *         return Iterator(
 *             db=self.db, db_prefix=self.prefix, reverse=reverse, start=start,             # <<<<<<<<<<<<<<
 *             stop=stop, include_start=include_start, include_stop=include_stop,
 *             prefix=prefix, include_key=include_key,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_db, ((PyObject *)__pyx_v_self->db)) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_db_prefix, __pyx_v_self->prefix) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_reverse, __pyx_v_reverse) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_start, __pyx_v_start) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1180
 *         return Iterator(
 *             db=self.db, db_prefix=self.prefix, reverse=reverse, start=start,
 *             stop=stop, include_start=include_start, include_stop=include_stop,             # <<<<<<<<<<<<<<
 *             prefix=prefix, include_key=include_key,
 *             include_value=include_value, verify_checksums=verify_checksums,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_stop, __pyx_v_stop) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_include_start, __pyx_v_include_start) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_include_stop, __pyx_v_include_stop) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1181
 *             db=self.db, db_prefix=self.prefix, reverse=reverse, start=start,
 *             stop=stop, include_start=include_start, include_stop=include_stop,
 *             prefix=prefix, include_key=include_key,             # <<<<<<<<<<<<<<
 *             include_value=include_value, verify_checksums=verify_checksums,
 *             fill_cache=fill_cache, snapshot=self)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_prefix, __pyx_v_prefix) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_include_key, __pyx_v_include_key) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1182
 *             stop=stop, include_start=include_start, include_stop=include_stop,
 *             prefix=prefix, include_key=include_key,
 *             include_value=include_value, verify_checksums=verify_checksums,             # <<<<<<<<<<<<<<
 *             fill_cache=fill_cache, snapshot=self)
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_include_value, __pyx_v_include_value) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_verify_checksums, ((PyObject *)__pyx_v_verify_checksums)) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1183
 *             prefix=prefix, include_key=include_key,
 *             include_value=include_value, verify_checksums=verify_checksums,
 *             fill_cache=fill_cache, snapshot=self)             # <<<<<<<<<<<<<<
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fill_cache, ((PyObject *)__pyx_v_fill_cache)) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_snapshot, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 1179, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1178
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 *         return Iterator(             # <<<<<<<<<<<<<<
 *             db=self.db, db_prefix=self.prefix, reverse=reverse, start=start,
 *             stop=stop, include_start=include_start, include_stop=include_stop,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_19raw_iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_18raw_iterator, "Snapshot.raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_19raw_iterator = {"raw_iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_19raw_iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_18raw_iterator};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_19raw_iterator(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyBoolObject *__pyx_v_verify_checksums = 0;
  PyBoolObject *__pyx_v_fill_cache = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("raw_iterator (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verify_checksums,&__pyx_n_s_fill_cache,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_False));

    /* "plyvel/_plyvel.pyx":1186
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,
 *                      bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL((PyObject *)((PyBoolObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 0; index < 2 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1185, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "raw_iterator") < 0)) __PYX_ERR(0, 1185, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_verify_checksums = ((PyBoolObject *)values[0]);
    __pyx_v_fill_cache = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("raw_iterator", 1, 0, 0, __pyx_nargs); __PYX_ERR(0, 1185, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.raw_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_verify_checksums), __pyx_ptype_7cpython_4bool_bool, 1, "verify_checksums", 0))) __PYX_ERR(0, 1185, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fill_cache), __pyx_ptype_7cpython_4bool_bool, 1, "fill_cache", 0))) __PYX_ERR(0, 1186, __pyx_L1_error)
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_18raw_iterator(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v_verify_checksums, __pyx_v_fill_cache);

  /* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_18raw_iterator(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, PyBoolObject *__pyx_v_verify_checksums, PyBoolObject *__pyx_v_fill_cache) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("raw_iterator", 1);

  /* "plyvel/_plyvel.pyx":1187
 *     def raw_iterator(self, *, bool verify_checksums=False,
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  __pyx_t_2 = (__pyx_v_self->db->_db == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_snapshot == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "plyvel/_plyvel.pyx":1188
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")             # <<<<<<<<<<<<<<
 * 
 *         return RawIterator(
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1188, __pyx_L1_error)

    /* "plyvel/_plyvel.pyx":1187
 *     def raw_iterator(self, *, bool verify_checksums=False,
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 */
  }

  /* "plyvel/_plyvel.pyx":1190
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 *         return RawIterator(             # <<<<<<<<<<<<<<
 *             db=self.db,
 *             verify_checksums=verify_checksums,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "plyvel/_plyvel.pyx":1191
 * 
 *         return RawIterator(
 *             db=self.db,             # <<<<<<<<<<<<<<
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_db, ((PyObject *)__pyx_v_self->db)) < 0) __PYX_ERR(0, 1191, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1192
 *         return RawIterator(
 *             db=self.db,
 *             verify_checksums=verify_checksums,             # <<<<<<<<<<<<<<
 *             fill_cache=fill_cache,
 *             snapshot=self)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_verify_checksums, ((PyObject *)__pyx_v_verify_checksums)) < 0) __PYX_ERR(0, 1191, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1193
 *             db=self.db,
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,             # <<<<<<<<<<<<<<
 *             snapshot=self)
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fill_cache, ((PyObject *)__pyx_v_fill_cache)) < 0) __PYX_ERR(0, 1191, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1194
 *             verify_checksums=verify_checksums,
 *             fill_cache=fill_cache,
 *             snapshot=self)             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_snapshot, ((PyObject *)__pyx_v_self)) < 0) __PYX_ERR(0, 1191, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1190
 *             raise RuntimeError("Database or snapshot is closed")
 * 
 *         return RawIterator(             # <<<<<<<<<<<<<<
 *             db=self.db,
 *             verify_checksums=verify_checksums,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.raw_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__, "Snapshot.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__snapshot_cannot_be_convert, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__, "Snapshot.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__};
static PyObject *__pyx_pw_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__(((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6plyvel_7_plyvel_Snapshot *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__snapshot_cannot_be_convert, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("plyvel._plyvel.Snapshot.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PrefixedDB(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6plyvel_7_plyvel_5__pyx_unpickle_PrefixedDB(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6plyvel_7_plyvel_4__pyx_unpickle_PrefixedDB, "__pyx_unpickle_PrefixedDB(__pyx_type, long __pyx_checksum, __pyx_state)");
static PyMethodDef __pyx_mdef_6plyvel_7_plyvel_5__pyx_unpickle_PrefixedDB = {"__pyx_unpickle_PrefixedDB", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_5__pyx_unpickle_PrefixedDB, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_4__pyx_unpickle_PrefixedDB};
static PyObject *__pyx_pw_6plyvel_7_plyvel_5__pyx_unpickle_PrefixedDB(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PrefixedDB (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PrefixedDB", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PrefixedDB", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_PrefixedDB") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PrefixedDB", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("plyvel._plyvel.__pyx_unpickle_PrefixedDB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6plyvel_7_plyvel_4__pyx_unpickle_PrefixedDB(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6plyvel_7_plyvel_4__pyx_unpickle_PrefixedDB(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PrefixedDB", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__15, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_f_6plyvel_7_plyvel___pyx_unpickle_PrefixedDB__set_state(((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 *     __pyx_result = PrefixedDB.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PrefixedDB(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("plyvel._plyvel.__pyx_unpickle_PrefixedDB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6plyvel_7_plyvel___pyx_unpickle_PrefixedDB__set_state(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PrefixedDB__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6plyvel_7_plyvel_DB))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->db);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->db);
  __pyx_v___pyx_result->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->prefix);
  __Pyx_DECREF(__pyx_v___pyx_result->prefix);
  __pyx_v___pyx_result->prefix = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 2);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PrefixedDB__set_state(<PrefixedDB> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PrefixedDB__set_state(PrefixedDB __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.db = __pyx_state[0]; __pyx_result.prefix = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("plyvel._plyvel.__pyx_unpickle_PrefixedDB__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6plyvel_7_plyvel_DB __pyx_vtable_6plyvel_7_plyvel_DB;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_DB(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)o);
  p->__pyx_vtab = __pyx_vtabptr_6plyvel_7_plyvel_DB;
  new((void*)&(p->options)) leveldb::Options();
  p->name = Py_None; Py_INCREF(Py_None);
  p->lock = Py_None; Py_INCREF(Py_None);
  p->iterators = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_DB(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_DB *p = (struct __pyx_obj_6plyvel_7_plyvel_DB *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6plyvel_7_plyvel_2DB_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->options);
  Py_CLEAR(p->name);
  Py_CLEAR(p->lock);
  Py_CLEAR(p->iterators);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6plyvel_7_plyvel_DB(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel_DB *p = (struct __pyx_obj_6plyvel_7_plyvel_DB *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  if (p->lock) {
    e = (*v)(p->lock, a); if (e) return e;
  }
  if (p->iterators) {
    e = (*v)(p->iterators, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel_DB(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel_DB *p = (struct __pyx_obj_6plyvel_7_plyvel_DB *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->lock);
  p->lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->iterators);
  p->iterators = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6plyvel_7_plyvel_2DB_closed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6plyvel_7_plyvel_2DB_6closed_1__get__(o);
}

static PyObject *__pyx_getprop_6plyvel_7_plyvel_2DB_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6plyvel_7_plyvel_2DB_4name_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_2DB_7__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6plyvel_7_plyvel_2DB_7__repr__(self);
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_DB[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_2DB_7__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_9get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_8get},
  {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_11put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_10put},
  {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_13delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_12delete},
  {"write_batch", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_15write_batch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_14write_batch},
  {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_19iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_18iterator},
  {"raw_iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_21raw_iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_20raw_iterator},
  {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_23snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_22snapshot},
  {"get_property", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_25get_property, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_24get_property},
  {"compact_range", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_27compact_range, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_26compact_range},
  {"approximate_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_29approximate_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_28approximate_size},
  {"approximate_sizes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_31approximate_sizes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_30approximate_sizes},
  {"prefixed_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_33prefixed_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_32prefixed_db},
  {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_35__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_34__enter__},
  {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_37__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_36__exit__},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_39__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_38__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_2DB_41__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_2DB_40__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6plyvel_7_plyvel_DB[] = {
  {(char *)"closed", __pyx_getprop_6plyvel_7_plyvel_2DB_closed, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_6plyvel_7_plyvel_2DB_name, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_DB_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_DB},
  {Py_tp_repr, (void *)__pyx_pw_6plyvel_7_plyvel_2DB_7__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("DB(name, bool create_if_missing=False, *, bool error_if_exists=False, paranoid_checks=None, write_buffer_size=None, max_open_files=None, lru_cache_size=None, block_size=None, block_restart_interval=None, max_file_size=None, compression=u'snappy', int bloom_filter_bits=0, comparator=None, bytes comparator_name=None)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_DB},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_DB},
  {Py_tp_iter, (void *)__pyx_pw_6plyvel_7_plyvel_2DB_17__iter__},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_DB},
  {Py_tp_getset, (void *)__pyx_getsets_6plyvel_7_plyvel_DB},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_2DB_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_DB},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_DB_spec = {
  "plyvel._plyvel.DB",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_DB),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_DB_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_DB = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""DB", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_DB), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_DB, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_2DB_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("DB(name, bool create_if_missing=False, *, bool error_if_exists=False, paranoid_checks=None, write_buffer_size=None, max_open_files=None, lru_cache_size=None, block_size=None, block_restart_interval=None, max_file_size=None, compression=u'snappy', int bloom_filter_bits=0, comparator=None, bytes comparator_name=None)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_DB, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_DB, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6plyvel_7_plyvel_2DB_17__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_DB, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6plyvel_7_plyvel_DB, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_2DB_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_DB, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_PrefixedDB(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)o);
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  p->prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_PrefixedDB(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *p = (struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6plyvel_7_plyvel_PrefixedDB) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->db);
  Py_CLEAR(p->prefix);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6plyvel_7_plyvel_PrefixedDB(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *p = (struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel_PrefixedDB(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *p = (struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6plyvel_7_plyvel_10PrefixedDB_db(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_2db_1__get__(o);
}

static PyObject *__pyx_getprop_6plyvel_7_plyvel_10PrefixedDB_prefix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_6prefix_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__(self);
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_PrefixedDB[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_5get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_4get},
  {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_7put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_6put},
  {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_9delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_8delete},
  {"write_batch", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_11write_batch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_10write_batch},
  {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_15iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_14iterator},
  {"snapshot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_17snapshot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_16snapshot},
  {"prefixed_db", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_18prefixed_db},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10PrefixedDB_22__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6plyvel_7_plyvel_PrefixedDB[] = {
  {(char *)"db", __pyx_getprop_6plyvel_7_plyvel_10PrefixedDB_db, 0, (char *)0, 0},
  {(char *)"prefix", __pyx_getprop_6plyvel_7_plyvel_10PrefixedDB_prefix, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_PrefixedDB_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_PrefixedDB},
  {Py_tp_repr, (void *)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("PrefixedDB(DB db, *, bytes prefix)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_PrefixedDB},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_PrefixedDB},
  {Py_tp_iter, (void *)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_13__iter__},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_PrefixedDB},
  {Py_tp_getset, (void *)__pyx_getsets_6plyvel_7_plyvel_PrefixedDB},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_10PrefixedDB_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_PrefixedDB},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_PrefixedDB_spec = {
  "plyvel._plyvel.PrefixedDB",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_PrefixedDB_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_PrefixedDB = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""PrefixedDB", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_PrefixedDB), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_PrefixedDB, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("PrefixedDB(DB db, *, bytes prefix)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_PrefixedDB, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_PrefixedDB, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_13__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_PrefixedDB, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6plyvel_7_plyvel_PrefixedDB, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_10PrefixedDB_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_PrefixedDB, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_WriteBatch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)o);
  new((void*)&(p->write_options)) leveldb::WriteOptions();
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  p->prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_WriteBatch(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *p = (struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6plyvel_7_plyvel_10WriteBatch_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->write_options);
  Py_CLEAR(p->db);
  Py_CLEAR(p->prefix);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6plyvel_7_plyvel_WriteBatch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *p = (struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel_WriteBatch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *p = (struct __pyx_obj_6plyvel_7_plyvel_WriteBatch *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_WriteBatch[] = {
  {"put", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_5put, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_4put},
  {"delete", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_7delete, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_6delete},
  {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_9clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_8clear},
  {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_11write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_10write},
  {"approximate_size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_13approximate_size, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_12approximate_size},
  {"append", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_15append, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_14append},
  {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_17__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_16__enter__},
  {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_19__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_18__exit__},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_10WriteBatch_22__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_WriteBatch_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_WriteBatch},
  {Py_tp_doc, (void *)PyDoc_STR("WriteBatch(DB db, bytes prefix, bool transaction, sync)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_WriteBatch},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_WriteBatch},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_WriteBatch},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_10WriteBatch_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_WriteBatch},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_WriteBatch_spec = {
  "plyvel._plyvel.WriteBatch",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_WriteBatch_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_WriteBatch = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""WriteBatch", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_WriteBatch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_WriteBatch, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("WriteBatch(DB db, bytes prefix, bool transaction, sync)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_WriteBatch, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_WriteBatch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_WriteBatch, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_10WriteBatch_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_WriteBatch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator __pyx_vtable_6plyvel_7_plyvel_BaseIterator;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_BaseIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)o);
  p->__pyx_vtab = __pyx_vtabptr_6plyvel_7_plyvel_BaseIterator;
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *p = (struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6plyvel_7_plyvel_12BaseIterator_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *p = (struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel_BaseIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *p = (struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_BaseIterator[] = {
  {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_7__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_6__enter__},
  {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_9__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_8__exit__},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_12BaseIterator_12__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_BaseIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_doc, (void *)PyDoc_STR("BaseIterator(DB db, bool verify_checksums, bool fill_cache, Snapshot snapshot)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_12BaseIterator_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_BaseIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_BaseIterator_spec = {
  "plyvel._plyvel.BaseIterator",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_BaseIterator_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_BaseIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""BaseIterator", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("BaseIterator(DB db, bool verify_checksums, bool fill_cache, Snapshot snapshot)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_BaseIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_12BaseIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_BaseIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6plyvel_7_plyvel_Iterator __pyx_vtable_6plyvel_7_plyvel_Iterator;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_Iterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_Iterator *p;
  PyObject *o = __pyx_tp_new_6plyvel_7_plyvel_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6plyvel_7_plyvel_Iterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator*)__pyx_vtabptr_6plyvel_7_plyvel_Iterator;
  new((void*)&(p->start_slice)) leveldb::Slice();
  new((void*)&(p->stop_slice)) leveldb::Slice();
  p->start = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->stop = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->db_prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_Iterator(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_Iterator *p = (struct __pyx_obj_6plyvel_7_plyvel_Iterator *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->start_slice);
  __Pyx_call_destructor(p->stop_slice);
  Py_CLEAR(p->start);
  Py_CLEAR(p->stop);
  Py_CLEAR(p->db_prefix);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_Iterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__, METH_NOARGS|METH_COEXIST, __pyx_doc_6plyvel_7_plyvel_8Iterator_4__next__},
  {"prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_7prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_6prev},
  {"seek_to_start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_9seek_to_start, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_8seek_to_start},
  {"seek_to_stop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_11seek_to_stop, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_10seek_to_stop},
  {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_13seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_12seek},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Iterator_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Iterator_16__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_Iterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_Iterator},
  {Py_tp_doc, (void *)PyDoc_STR("Iterator(DB db, bytes db_prefix, bool reverse, bytes start, bytes stop, bool include_start, bool include_stop, bytes prefix, bool include_key, bool include_value, bool verify_checksums, bool fill_cache, Snapshot snapshot)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_iter, (void *)__pyx_pw_6plyvel_7_plyvel_8Iterator_3__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_Iterator},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_8Iterator_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_Iterator},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_Iterator_spec = {
  "plyvel._plyvel.Iterator",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_Iterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_Iterator_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_Iterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""Iterator", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_Iterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_Iterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("Iterator(DB db, bytes db_prefix, bool reverse, bytes start, bytes stop, bool include_start, bool include_stop, bytes prefix, bool include_key, bool include_value, bool verify_checksums, bool fill_cache, Snapshot snapshot)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6plyvel_7_plyvel_8Iterator_3__iter__, /*tp_iter*/
  __pyx_pw_6plyvel_7_plyvel_8Iterator_5__next__, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_Iterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_8Iterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_Iterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6plyvel_7_plyvel_RawIterator __pyx_vtable_6plyvel_7_plyvel_RawIterator;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_RawIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_RawIterator *p;
  PyObject *o = __pyx_tp_new_6plyvel_7_plyvel_BaseIterator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6plyvel_7_plyvel_RawIterator *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6plyvel_7_plyvel_BaseIterator*)__pyx_vtabptr_6plyvel_7_plyvel_RawIterator;
  return o;
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_RawIterator[] = {
  {"valid", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_1valid, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_valid},
  {"seek_to_first", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_3seek_to_first, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_2seek_to_first},
  {"seek_to_last", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_5seek_to_last, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_4seek_to_last},
  {"seek", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_7seek, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_6seek},
  {"next", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_9next, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_8next},
  {"prev", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_11prev, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_10prev},
  {"item", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_17item, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_16item},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_11RawIterator_20__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_RawIterator_slots[] = {
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_BaseIterator},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_RawIterator},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_RawIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_RawIterator_spec = {
  "plyvel._plyvel.RawIterator",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_RawIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_RawIterator_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_RawIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""RawIterator", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_RawIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_BaseIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_BaseIterator, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_BaseIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_RawIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_6plyvel_7_plyvel_12BaseIterator_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_RawIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6plyvel_7_plyvel_Snapshot __pyx_vtable_6plyvel_7_plyvel_Snapshot;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel_Snapshot(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)o);
  p->__pyx_vtab = __pyx_vtabptr_6plyvel_7_plyvel_Snapshot;
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  p->prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel_Snapshot(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *p = (struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6plyvel_7_plyvel_8Snapshot_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->db);
  Py_CLEAR(p->prefix);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6plyvel_7_plyvel_Snapshot(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *p = (struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)o;
  if (p->db) {
    e = (*v)(((PyObject *)p->db), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel_Snapshot(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel_Snapshot *p = (struct __pyx_obj_6plyvel_7_plyvel_Snapshot *)o;
  tmp = ((PyObject*)p->db);
  p->db = ((struct __pyx_obj_6plyvel_7_plyvel_DB *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6plyvel_7_plyvel_Snapshot[] = {
  {"release", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_7release, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_6release},
  {"__enter__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_9__enter__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_8__enter__},
  {"__exit__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_11__exit__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_10__exit__},
  {"get", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_13get, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_12get},
  {"iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_17iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_16iterator},
  {"raw_iterator", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_19raw_iterator, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_18raw_iterator},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6plyvel_7_plyvel_8Snapshot_22__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel_Snapshot_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel_Snapshot},
  {Py_tp_doc, (void *)PyDoc_STR("Snapshot(DB db, *, bytes prefix=None)")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel_Snapshot},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel_Snapshot},
  {Py_tp_iter, (void *)__pyx_pw_6plyvel_7_plyvel_8Snapshot_15__iter__},
  {Py_tp_methods, (void *)__pyx_methods_6plyvel_7_plyvel_Snapshot},
  {Py_tp_init, (void *)__pyx_pw_6plyvel_7_plyvel_8Snapshot_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel_Snapshot},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel_Snapshot_spec = {
  "plyvel._plyvel.Snapshot",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_Snapshot),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6plyvel_7_plyvel_Snapshot_slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel_Snapshot = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""Snapshot", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel_Snapshot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel_Snapshot, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("Snapshot(DB db, *, bytes prefix=None)"), /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel_Snapshot, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel_Snapshot, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6plyvel_7_plyvel_8Snapshot_15__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6plyvel_7_plyvel_Snapshot, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6plyvel_7_plyvel_8Snapshot_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel_Snapshot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *__pyx_freelist_6plyvel_7_plyvel___pyx_scope_struct____init__[8];
static int __pyx_freecount_6plyvel_7_plyvel___pyx_scope_struct____init__ = 0;

static PyObject *__pyx_tp_new_6plyvel_7_plyvel___pyx_scope_struct____init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_6plyvel_7_plyvel___pyx_scope_struct____init__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__)))) {
    o = (PyObject*)__pyx_freelist_6plyvel_7_plyvel___pyx_scope_struct____init__[--__pyx_freecount_6plyvel_7_plyvel___pyx_scope_struct____init__];
    memset(o, 0, sizeof(struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6plyvel_7_plyvel___pyx_scope_struct____init__(PyObject *o) {
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *p = (struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6plyvel_7_plyvel___pyx_scope_struct____init__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_iterator_id);
  Py_CLEAR(p->__pyx_v_ref_dict);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_6plyvel_7_plyvel___pyx_scope_struct____init__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__)))) {
    __pyx_freelist_6plyvel_7_plyvel___pyx_scope_struct____init__[__pyx_freecount_6plyvel_7_plyvel___pyx_scope_struct____init__++] = ((struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6plyvel_7_plyvel___pyx_scope_struct____init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *p = (struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)o;
  if (p->__pyx_v_iterator_id) {
    e = (*v)(p->__pyx_v_iterator_id, a); if (e) return e;
  }
  if (p->__pyx_v_ref_dict) {
    e = (*v)(p->__pyx_v_ref_dict, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6plyvel_7_plyvel___pyx_scope_struct____init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *p = (struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_iterator_id);
  p->__pyx_v_iterator_id = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ref_dict);
  p->__pyx_v_ref_dict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6plyvel_7_plyvel___pyx_scope_struct____init__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6plyvel_7_plyvel___pyx_scope_struct____init__},
  {Py_tp_clear, (void *)__pyx_tp_clear_6plyvel_7_plyvel___pyx_scope_struct____init__},
  {Py_tp_new, (void *)__pyx_tp_new_6plyvel_7_plyvel___pyx_scope_struct____init__},
  {0, 0},
};
static PyType_Spec __pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init___spec = {
  "plyvel._plyvel.__pyx_scope_struct____init__",
  sizeof(struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init___slots,
};
#else

static PyTypeObject __pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "plyvel._plyvel.""__pyx_scope_struct____init__", /*tp_name*/
  sizeof(struct __pyx_obj_6plyvel_7_plyvel___pyx_scope_struct____init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6plyvel_7_plyvel___pyx_scope_struct____init__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6plyvel_7_plyvel___pyx_scope_struct____init__, /*tp_traverse*/
  __pyx_tp_clear_6plyvel_7_plyvel___pyx_scope_struct____init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6plyvel_7_plyvel___pyx_scope_struct____init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator, __pyx_k_BaseIterator, sizeof(__pyx_k_BaseIterator), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___enter, __pyx_k_BaseIterator___enter, sizeof(__pyx_k_BaseIterator___enter), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___exit, __pyx_k_BaseIterator___exit, sizeof(__pyx_k_BaseIterator___exit), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___reduce_cython, __pyx_k_BaseIterator___reduce_cython, sizeof(__pyx_k_BaseIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator___setstate_cython, __pyx_k_BaseIterator___setstate_cython, sizeof(__pyx_k_BaseIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_BaseIterator_close, __pyx_k_BaseIterator_close, sizeof(__pyx_k_BaseIterator_close), 0, 0, 1, 1},
    {&__pyx_kp_u_Cannot_convert_unicode_name_to_a, __pyx_k_Cannot_convert_unicode_name_to_a, sizeof(__pyx_k_Cannot_convert_unicode_name_to_a), 0, 1, 0, 0},
    {&__pyx_kp_u_Cannot_operate_on_closed_LevelDB, __pyx_k_Cannot_operate_on_closed_LevelDB, sizeof(__pyx_k_Cannot_operate_on_closed_LevelDB), 0, 1, 0, 0},
    {&__pyx_n_s_CorruptionError, __pyx_k_CorruptionError, sizeof(__pyx_k_CorruptionError), 0, 0, 1, 1},
    {&__pyx_n_s_DB, __pyx_k_DB, sizeof(__pyx_k_DB), 0, 0, 1, 1},
    {&__pyx_n_s_DB___enter, __pyx_k_DB___enter, sizeof(__pyx_k_DB___enter), 0, 0, 1, 1},
    {&__pyx_n_s_DB___exit, __pyx_k_DB___exit, sizeof(__pyx_k_DB___exit), 0, 0, 1, 1},
    {&__pyx_n_s_DB___reduce_cython, __pyx_k_DB___reduce_cython, sizeof(__pyx_k_DB___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DB___setstate_cython, __pyx_k_DB___setstate_cython, sizeof(__pyx_k_DB___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_DB_approximate_size, __pyx_k_DB_approximate_size, sizeof(__pyx_k_DB_approximate_size), 0, 0, 1, 1},
    {&__pyx_n_s_DB_approximate_sizes, __pyx_k_DB_approximate_sizes, sizeof(__pyx_k_DB_approximate_sizes), 0, 0, 1, 1},
    {&__pyx_n_s_DB_close, __pyx_k_DB_close, sizeof(__pyx_k_DB_close), 0, 0, 1, 1},
    {&__pyx_n_s_DB_compact_range, __pyx_k_DB_compact_range, sizeof(__pyx_k_DB_compact_range), 0, 0, 1, 1},
    {&__pyx_n_s_DB_delete, __pyx_k_DB_delete, sizeof(__pyx_k_DB_delete), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get, __pyx_k_DB_get, sizeof(__pyx_k_DB_get), 0, 0, 1, 1},
    {&__pyx_n_s_DB_get_property, __pyx_k_DB_get_property, sizeof(__pyx_k_DB_get_property), 0, 0, 1, 1},
    {&__pyx_n_s_DB_iterator, __pyx_k_DB_iterator, sizeof(__pyx_k_DB_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_DB_prefixed_db, __pyx_k_DB_prefixed_db, sizeof(__pyx_k_DB_prefixed_db), 0, 0, 1, 1},
    {&__pyx_n_s_DB_put, __pyx_k_DB_put, sizeof(__pyx_k_DB_put), 0, 0, 1, 1},
    {&__pyx_n_s_DB_raw_iterator, __pyx_k_DB_raw_iterator, sizeof(__pyx_k_DB_raw_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_DB_snapshot, __pyx_k_DB_snapshot, sizeof(__pyx_k_DB_snapshot), 0, 0, 1, 1},
    {&__pyx_n_s_DB_write_batch, __pyx_k_DB_write_batch, sizeof(__pyx_k_DB_write_batch), 0, 0, 1, 1},
    {&__pyx_kp_u_Database_is_closed, __pyx_k_Database_is_closed, sizeof(__pyx_k_Database_is_closed), 0, 1, 0, 0},
    {&__pyx_kp_u_Database_or_iterator_is_closed, __pyx_k_Database_or_iterator_is_closed, sizeof(__pyx_k_Database_or_iterator_is_closed), 0, 1, 0, 0},
    {&__pyx_kp_u_Database_or_snapshot_is_closed, __pyx_k_Database_or_snapshot_is_closed, sizeof(__pyx_k_Database_or_snapshot_is_closed), 0, 1, 0, 0},
    {&__pyx_n_s_Error, __pyx_k_Error, sizeof(__pyx_k_Error), 0, 0, 1, 1},
    {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_Iterator, __pyx_k_Iterator, sizeof(__pyx_k_Iterator), 0, 0, 1, 1},
    {&__pyx_n_s_IteratorInvalidError, __pyx_k_IteratorInvalidError, sizeof(__pyx_k_IteratorInvalidError), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator___reduce_cython, __pyx_k_Iterator___reduce_cython, sizeof(__pyx_k_Iterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator___setstate_cython, __pyx_k_Iterator___setstate_cython, sizeof(__pyx_k_Iterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator_prev, __pyx_k_Iterator_prev, sizeof(__pyx_k_Iterator_prev), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator_seek, __pyx_k_Iterator_seek, sizeof(__pyx_k_Iterator_seek), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator_seek_to_start, __pyx_k_Iterator_seek_to_start, sizeof(__pyx_k_Iterator_seek_to_start), 0, 0, 1, 1},
    {&__pyx_n_s_Iterator_seek_to_stop, __pyx_k_Iterator_seek_to_stop, sizeof(__pyx_k_Iterator_seek_to_stop), 0, 0, 1, 1},
    {&__pyx_n_s_Lock, __pyx_k_Lock, sizeof(__pyx_k_Lock), 0, 0, 1, 1},
    {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB, __pyx_k_PrefixedDB, sizeof(__pyx_k_PrefixedDB), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB___reduce_cython, __pyx_k_PrefixedDB___reduce_cython, sizeof(__pyx_k_PrefixedDB___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB___setstate_cython, __pyx_k_PrefixedDB___setstate_cython, sizeof(__pyx_k_PrefixedDB___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_delete, __pyx_k_PrefixedDB_delete, sizeof(__pyx_k_PrefixedDB_delete), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_get, __pyx_k_PrefixedDB_get, sizeof(__pyx_k_PrefixedDB_get), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_iterator, __pyx_k_PrefixedDB_iterator, sizeof(__pyx_k_PrefixedDB_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_prefixed_db, __pyx_k_PrefixedDB_prefixed_db, sizeof(__pyx_k_PrefixedDB_prefixed_db), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_put, __pyx_k_PrefixedDB_put, sizeof(__pyx_k_PrefixedDB_put), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_snapshot, __pyx_k_PrefixedDB_snapshot, sizeof(__pyx_k_PrefixedDB_snapshot), 0, 0, 1, 1},
    {&__pyx_n_s_PrefixedDB_write_batch, __pyx_k_PrefixedDB_write_batch, sizeof(__pyx_k_PrefixedDB_write_batch), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator, __pyx_k_RawIterator, sizeof(__pyx_k_RawIterator), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator___reduce_cython, __pyx_k_RawIterator___reduce_cython, sizeof(__pyx_k_RawIterator___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator___setstate_cython, __pyx_k_RawIterator___setstate_cython, sizeof(__pyx_k_RawIterator___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_item, __pyx_k_RawIterator_item, sizeof(__pyx_k_RawIterator_item), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_key, __pyx_k_RawIterator_key, sizeof(__pyx_k_RawIterator_key), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_next, __pyx_k_RawIterator_next, sizeof(__pyx_k_RawIterator_next), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_prev, __pyx_k_RawIterator_prev, sizeof(__pyx_k_RawIterator_prev), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_seek, __pyx_k_RawIterator_seek, sizeof(__pyx_k_RawIterator_seek), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_seek_to_first, __pyx_k_RawIterator_seek_to_first, sizeof(__pyx_k_RawIterator_seek_to_first), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_seek_to_last, __pyx_k_RawIterator_seek_to_last, sizeof(__pyx_k_RawIterator_seek_to_last), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_valid, __pyx_k_RawIterator_valid, sizeof(__pyx_k_RawIterator_valid), 0, 0, 1, 1},
    {&__pyx_n_s_RawIterator_value, __pyx_k_RawIterator_value, sizeof(__pyx_k_RawIterator_value), 0, 0, 1, 1},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot, __pyx_k_Snapshot, sizeof(__pyx_k_Snapshot), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___enter, __pyx_k_Snapshot___enter, sizeof(__pyx_k_Snapshot___enter), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___exit, __pyx_k_Snapshot___exit, sizeof(__pyx_k_Snapshot___exit), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___reduce_cython, __pyx_k_Snapshot___reduce_cython, sizeof(__pyx_k_Snapshot___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot___setstate_cython, __pyx_k_Snapshot___setstate_cython, sizeof(__pyx_k_Snapshot___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot_close, __pyx_k_Snapshot_close, sizeof(__pyx_k_Snapshot_close), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot_get, __pyx_k_Snapshot_get, sizeof(__pyx_k_Snapshot_get), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot_iterator, __pyx_k_Snapshot_iterator, sizeof(__pyx_k_Snapshot_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot_raw_iterator, __pyx_k_Snapshot_raw_iterator, sizeof(__pyx_k_Snapshot_raw_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_Snapshot_release, __pyx_k_Snapshot_release, sizeof(__pyx_k_Snapshot_release), 0, 0, 1, 1},
    {&__pyx_kp_u_Start_and_stop_of_range_must_be, __pyx_k_Start_and_stop_of_range_must_be, sizeof(__pyx_k_Start_and_stop_of_range_must_be), 0, 1, 0, 0},
    {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
    {&__pyx_n_s_UnicodeEncodeError, __pyx_k_UnicodeEncodeError, sizeof(__pyx_k_UnicodeEncodeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch, __pyx_k_WriteBatch, sizeof(__pyx_k_WriteBatch), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___enter, __pyx_k_WriteBatch___enter, sizeof(__pyx_k_WriteBatch___enter), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___exit, __pyx_k_WriteBatch___exit, sizeof(__pyx_k_WriteBatch___exit), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___reduce_cython, __pyx_k_WriteBatch___reduce_cython, sizeof(__pyx_k_WriteBatch___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch___setstate_cython, __pyx_k_WriteBatch___setstate_cython, sizeof(__pyx_k_WriteBatch___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_append, __pyx_k_WriteBatch_append, sizeof(__pyx_k_WriteBatch_append), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_approximate_size, __pyx_k_WriteBatch_approximate_size, sizeof(__pyx_k_WriteBatch_approximate_size), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_clear, __pyx_k_WriteBatch_clear, sizeof(__pyx_k_WriteBatch_clear), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_delete, __pyx_k_WriteBatch_delete, sizeof(__pyx_k_WriteBatch_delete), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_put, __pyx_k_WriteBatch_put, sizeof(__pyx_k_WriteBatch_put), 0, 0, 1, 1},
    {&__pyx_n_s_WriteBatch_write, __pyx_k_WriteBatch_write, sizeof(__pyx_k_WriteBatch_write), 0, 0, 1, 1},
    {&__pyx_n_s__115, __pyx_k__115, sizeof(__pyx_k__115), 0, 0, 1, 1},
    {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
    {&__pyx_n_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 1},
    {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_n_s_approximate_size, __pyx_k_approximate_size, sizeof(__pyx_k_approximate_size), 0, 0, 1, 1},
    {&__pyx_n_s_approximate_sizes, __pyx_k_approximate_sizes, sizeof(__pyx_k_approximate_sizes), 0, 0, 1, 1},
    {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_kp_u_at_0x, __pyx_k_at_0x, sizeof(__pyx_k_at_0x), 0, 1, 0, 0},
    {&__pyx_n_s_block_restart_interval, __pyx_k_block_restart_interval, sizeof(__pyx_k_block_restart_interval), 0, 0, 1, 1},
    {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
    {&__pyx_n_s_bloom_filter_bits, __pyx_k_bloom_filter_bits, sizeof(__pyx_k_bloom_filter_bits), 0, 0, 1, 1},
    {&__pyx_n_s_c_ranges, __pyx_k_c_ranges, sizeof(__pyx_k_c_ranges), 0, 0, 1, 1},
    {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 1, 1},
    {&__pyx_kp_u_closed_2, __pyx_k_closed_2, sizeof(__pyx_k_closed_2), 0, 1, 0, 0},
    {&__pyx_n_s_compact_range, __pyx_k_compact_range, sizeof(__pyx_k_compact_range), 0, 0, 1, 1},
    {&__pyx_n_s_comparator, __pyx_k_comparator, sizeof(__pyx_k_comparator), 0, 0, 1, 1},
    {&__pyx_kp_u_comparator_and_comparator_name, __pyx_k_comparator_and_comparator_name, sizeof(__pyx_k_comparator_and_comparator_name), 0, 1, 0, 0},
    {&__pyx_n_s_comparator_name, __pyx_k_comparator_name, sizeof(__pyx_k_comparator_name), 0, 0, 1, 1},
    {&__pyx_n_s_compression, __pyx_k_compression, sizeof(__pyx_k_compression), 0, 0, 1, 1},
    {&__pyx_kp_u_compression_must_be_None_or_a_s, __pyx_k_compression_must_be_None_or_a_s, sizeof(__pyx_k_compression_must_be_None_or_a_s), 0, 1, 0, 0},
    {&__pyx_kp_u_compression_must_be_None_or_sna, __pyx_k_compression_must_be_None_or_sna, sizeof(__pyx_k_compression_must_be_None_or_sna), 0, 1, 0, 0},
    {&__pyx_n_s_create_if_missing, __pyx_k_create_if_missing, sizeof(__pyx_k_create_if_missing), 0, 0, 1, 1},
    {&__pyx_kp_u_custom_comparator_object_must_be, __pyx_k_custom_comparator_object_must_be, sizeof(__pyx_k_custom_comparator_object_must_be), 0, 1, 0, 0},
    {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
    {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
    {&__pyx_n_s_db_prefix, __pyx_k_db_prefix, sizeof(__pyx_k_db_prefix), 0, 0, 1, 1},
    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
    {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
    {&__pyx_n_s_destroy_db, __pyx_k_destroy_db, sizeof(__pyx_k_destroy_db), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_error_if_exists, __pyx_k_error_if_exists, sizeof(__pyx_k_error_if_exists), 0, 0, 1, 1},
    {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
    {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
    {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_fill_cache, __pyx_k_fill_cache, sizeof(__pyx_k_fill_cache), 0, 0, 1, 1},
    {&__pyx_n_s_fsname, __pyx_k_fsname, sizeof(__pyx_k_fsname), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_get_property, __pyx_k_get_property, sizeof(__pyx_k_get_property), 0, 0, 1, 1},
    {&__pyx_n_s_getfilesystemencoding, __pyx_k_getfilesystemencoding, sizeof(__pyx_k_getfilesystemencoding), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_include_key, __pyx_k_include_key, sizeof(__pyx_k_include_key), 0, 0, 1, 1},
    {&__pyx_n_s_include_start, __pyx_k_include_start, sizeof(__pyx_k_include_start), 0, 0, 1, 1},
    {&__pyx_n_s_include_stop, __pyx_k_include_stop, sizeof(__pyx_k_include_stop), 0, 0, 1, 1},
    {&__pyx_n_s_include_value, __pyx_k_include_value, sizeof(__pyx_k_include_value), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init___locals_lambda, __pyx_k_init___locals_lambda, sizeof(__pyx_k_init___locals_lambda), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
    {&__pyx_n_s_iterator, __pyx_k_iterator, sizeof(__pyx_k_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_key_slice, __pyx_k_key_slice, sizeof(__pyx_k_key_slice), 0, 0, 1, 1},
    {&__pyx_n_s_leveldb_version, __pyx_k_leveldb_version, sizeof(__pyx_k_leveldb_version), 0, 0, 1, 1},
    {&__pyx_n_s_lru_cache_size, __pyx_k_lru_cache_size, sizeof(__pyx_k_lru_cache_size), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_max_file_size, __pyx_k_max_file_size, sizeof(__pyx_k_max_file_size), 0, 0, 1, 1},
    {&__pyx_n_s_max_open_files, __pyx_k_max_open_files, sizeof(__pyx_k_max_open_files), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_n_ranges, __pyx_k_n_ranges, sizeof(__pyx_k_n_ranges), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_kp_u_name_arg_must_be_a_byte_string, __pyx_k_name_arg_must_be_a_byte_string, sizeof(__pyx_k_name_arg_must_be_a_byte_string), 0, 1, 0, 0},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
    {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
    {&__pyx_n_s_paranoid_checks, __pyx_k_paranoid_checks, sizeof(__pyx_k_paranoid_checks), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_kp_u_plyvel_DB_with_name, __pyx_k_plyvel_DB_with_name, sizeof(__pyx_k_plyvel_DB_with_name), 0, 1, 0, 0},
    {&__pyx_kp_u_plyvel_PrefixedDB_with_prefix, __pyx_k_plyvel_PrefixedDB_with_prefix, sizeof(__pyx_k_plyvel_PrefixedDB_with_prefix), 0, 1, 0, 0},
    {&__pyx_n_s_plyvel__plyvel, __pyx_k_plyvel__plyvel, sizeof(__pyx_k_plyvel__plyvel), 0, 0, 1, 1},
    {&__pyx_kp_s_plyvel__plyvel_pyx, __pyx_k_plyvel__plyvel_pyx, sizeof(__pyx_k_plyvel__plyvel_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
    {&__pyx_n_s_popitem, __pyx_k_popitem, sizeof(__pyx_k_popitem), 0, 0, 1, 1},
    {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
    {&__pyx_kp_u_prefix_cannot_be_used_together, __pyx_k_prefix_cannot_be_used_together, sizeof(__pyx_k_prefix_cannot_be_used_together), 0, 1, 0, 0},
    {&__pyx_n_s_prefixed_db, __pyx_k_prefixed_db, sizeof(__pyx_k_prefixed_db), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_prev, __pyx_k_prev, sizeof(__pyx_k_prev), 0, 0, 1, 1},
    {&__pyx_n_s_put, __pyx_k_put, sizeof(__pyx_k_put), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_PrefixedDB, __pyx_k_pyx_unpickle_PrefixedDB, sizeof(__pyx_k_pyx_unpickle_PrefixedDB), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_ranges, __pyx_k_ranges, sizeof(__pyx_k_ranges), 0, 0, 1, 1},
    {&__pyx_n_s_raw_iterator, __pyx_k_raw_iterator, sizeof(__pyx_k_raw_iterator), 0, 0, 1, 1},
    {&__pyx_n_s_read_options, __pyx_k_read_options, sizeof(__pyx_k_read_options), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
    {&__pyx_n_s_release, __pyx_k_release, sizeof(__pyx_k_release), 0, 0, 1, 1},
    {&__pyx_n_s_repair_db, __pyx_k_repair_db, sizeof(__pyx_k_repair_db), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
    {&__pyx_n_s_seek, __pyx_k_seek, sizeof(__pyx_k_seek), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_first, __pyx_k_seek_to_first, sizeof(__pyx_k_seek_to_first), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_last, __pyx_k_seek_to_last, sizeof(__pyx_k_seek_to_last), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_start, __pyx_k_seek_to_start, sizeof(__pyx_k_seek_to_start), 0, 0, 1, 1},
    {&__pyx_n_s_seek_to_stop, __pyx_k_seek_to_stop, sizeof(__pyx_k_seek_to_stop), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__db_self_options_cannot_be, __pyx_k_self__db_self_options_cannot_be, sizeof(__pyx_k_self__db_self_options_cannot_be), 0, 0, 1, 0},
    {&__pyx_kp_s_self__iter_cannot_be_converted_t, __pyx_k_self__iter_cannot_be_converted_t, sizeof(__pyx_k_self__iter_cannot_be_converted_t), 0, 0, 1, 0},
    {&__pyx_kp_s_self__iter_self_comparator_self, __pyx_k_self__iter_self_comparator_self, sizeof(__pyx_k_self__iter_self_comparator_self), 0, 0, 1, 0},
    {&__pyx_kp_s_self__snapshot_cannot_be_convert, __pyx_k_self__snapshot_cannot_be_convert, sizeof(__pyx_k_self__snapshot_cannot_be_convert), 0, 0, 1, 0},
    {&__pyx_kp_s_self__write_batch_self_write_opt, __pyx_k_self__write_batch_self_write_opt, sizeof(__pyx_k_self__write_batch_self_write_opt), 0, 0, 1, 0},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_sizes, __pyx_k_sizes, sizeof(__pyx_k_sizes), 0, 0, 1, 1},
    {&__pyx_n_s_sl, __pyx_k_sl, sizeof(__pyx_k_sl), 0, 0, 1, 1},
    {&__pyx_n_u_snappy, __pyx_k_snappy, sizeof(__pyx_k_snappy), 0, 1, 0, 1},
    {&__pyx_n_s_snapshot, __pyx_k_snapshot, sizeof(__pyx_k_snapshot), 0, 0, 1, 1},
    {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_start_slice, __pyx_k_start_slice, sizeof(__pyx_k_start_slice), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_n_s_stop_slice, __pyx_k_stop_slice, sizeof(__pyx_k_stop_slice), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_sync, __pyx_k_sync, sizeof(__pyx_k_sync), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
    {&__pyx_n_s_target_slice, __pyx_k_target_slice, sizeof(__pyx_k_target_slice), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
    {&__pyx_n_s_transaction, __pyx_k_transaction, sizeof(__pyx_k_transaction), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_valid, __pyx_k_valid, sizeof(__pyx_k_valid), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_value_buffer, __pyx_k_value_buffer, sizeof(__pyx_k_value_buffer), 0, 0, 1, 1},
    {&__pyx_n_s_verify_checksums, __pyx_k_verify_checksums, sizeof(__pyx_k_verify_checksums), 0, 0, 1, 1},
    {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
    {&__pyx_n_s_weakref_ref, __pyx_k_weakref_ref, sizeof(__pyx_k_weakref_ref), 0, 0, 1, 1},
    {&__pyx_n_s_wr, __pyx_k_wr, sizeof(__pyx_k_wr), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_write_batch, __pyx_k_write_batch, sizeof(__pyx_k_write_batch), 0, 0, 1, 1},
    {&__pyx_n_s_write_buffer_size, __pyx_k_write_buffer_size, sizeof(__pyx_k_write_buffer_size), 0, 0, 1, 1},
    {&__pyx_n_s_write_options, __pyx_k_write_options, sizeof(__pyx_k_write_options), 0, 0, 1, 1},
    {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 121, __pyx_L1_error)
  __pyx_builtin_UnicodeEncodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeEncodeError); if (!__pyx_builtin_UnicodeEncodeError) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 304, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 432, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 432, __pyx_L1_error)
  #endif
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 741, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 866, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 910, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "plyvel/_plyvel.pyx":121
 * 
 *     if not isinstance(name, unicode):
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             "'name' arg must be a byte string or a unicode string")
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_name_arg_must_be_a_byte_string); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "plyvel/_plyvel.pyx":194
 *             compression = compression.decode('UTF-8')
 *         if not isinstance(compression, unicode):
 *             raise TypeError("'compression' must be None or a string")             # <<<<<<<<<<<<<<
 *         if compression == u'snappy':
 *             options.compression = leveldb.kSnappyCompression
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_compression_must_be_None_or_a_s); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "plyvel/_plyvel.pyx":198
 *             options.compression = leveldb.kSnappyCompression
 *         else:
 *             raise ValueError("'compression' must be None or 'snappy'")             # <<<<<<<<<<<<<<
 * 
 *     if bloom_filter_bits > 0:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_compression_must_be_None_or_sna); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "plyvel/_plyvel.pyx":205
 * 
 *     if (comparator is None) != (comparator_name is None):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "'comparator' and 'comparator_name' must be specified together")
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_comparator_and_comparator_name); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "plyvel/_plyvel.pyx":210
 *     if comparator is not None:
 *         if not callable(comparator):
 *             raise TypeError("custom comparator object must be callable")             # <<<<<<<<<<<<<<
 * 
 *         options.comparator = NewPlyvelCallbackComparator(
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_custom_comparator_object_must_be); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "plyvel/_plyvel.pyx":263
 *         cdef BaseIterator iterator
 *         if self.iterators is not None:
 *             with self.lock:             # <<<<<<<<<<<<<<
 *                 while self.iterators:
 *                     iterator = self.iterators.popitem()[1]()
 */
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "plyvel/_plyvel.pyx":304
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef ReadOptions read_options
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Database_is_closed); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "plyvel/_plyvel.pyx":435
 *                 start, stop = ranges[i]
 *                 if not isinstance(start, bytes) or not isinstance(stop, bytes):
 *                     raise TypeError(             # <<<<<<<<<<<<<<
 *                         "Start and stop of range must be byte strings")
 *                 c_ranges[i] = Range(
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Start_and_stop_of_range_must_be); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "plyvel/_plyvel.pyx":683
 *                  Snapshot snapshot):
 *         if db._db is NULL:
 *             raise RuntimeError("Database or iterator is closed")             # <<<<<<<<<<<<<<
 * 
 *         self.db = db
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Database_or_iterator_is_closed); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "plyvel/_plyvel.pyx":779
 *         if prefix is not None:
 *             if start is not None or stop is not None:
 *                 raise TypeError(             # <<<<<<<<<<<<<<
 *                     "'prefix' cannot be used together with 'start' or 'stop'")
 *             # Use prefix to construct start and stop keys, and ignore
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_prefix_cannot_be_used_together); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "plyvel/_plyvel.pyx":1125
 *     def __init__(self, *, DB db not None, bytes prefix=None):
 *         if db._db is NULL:
 *             raise RuntimeError("Cannot operate on closed LevelDB database")             # <<<<<<<<<<<<<<
 * 
 *         self.db = db
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Cannot_operate_on_closed_LevelDB); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "plyvel/_plyvel.pyx":1156
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")             # <<<<<<<<<<<<<<
 * 
 *         cdef ReadOptions read_options
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Database_or_snapshot_is_closed); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0xe9c0b3a, 0x8ba9a5d, 0x11ea7f1) = (db, prefix))" % __pyx_checksum
 */
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_int_245107514, __pyx_int_146446941, __pyx_int_18786289); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "plyvel/_plyvel.pyx":257
 *         self.iterators = dict()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # If the constructor raised an exception (and hence never
 *         # completed), self.iterators can be None. In that case no
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_close, 257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 257, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */
  __pyx_tuple__20 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_default, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache, __pyx_n_s_read_options); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 2, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_get, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_tuple__22 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "plyvel/_plyvel.pyx":312
 *         return db_get(self, key, default, read_options)
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__23 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_sync, __pyx_n_s_write_options, __pyx_n_s_key_slice, __pyx_n_s_value_buffer, __pyx_n_s_st); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(3, 0, 1, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_put, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 312, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":333
 *         raise_for_status(st)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__25 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_sync, __pyx_n_s_st, __pyx_n_s_write_options, __pyx_n_s_key_slice); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_delete, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 333, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":346
 *         raise_for_status(st)
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__27 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_transaction, __pyx_n_s_sync); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_write_batch, 346, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 346, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_tuple__29 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_reverse, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_include_start, __pyx_n_s_include_stop, __pyx_n_s_prefix, __pyx_n_s_include_key, __pyx_n_s_include_value, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_iterator, 358, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":378
 *         )
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return RawIterator(
 *             self,  # db
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_raw_iterator, 378, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 378, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":386
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self)
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_snapshot, 386, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 386, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":389
 *         return Snapshot(db=self)
 * 
 *     def get_property(self, bytes name not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_sl, __pyx_n_s_value, __pyx_n_s_result); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_get_property, 389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 389, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":402
 *         return value if result else None
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_start_slice, __pyx_n_s_stop_slice); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_compact_range, 402, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 402, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":418
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_start, __pyx_n_s_stop); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_approximate_size, 418, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 418, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":424
 *         return self.approximate_sizes((start, stop))[0]
 * 
 *     def approximate_sizes(self, *ranges):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__40 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_ranges, __pyx_n_s_n_ranges, __pyx_n_s_c_ranges, __pyx_n_s_sizes, __pyx_n_s_i, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_i); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_approximate_sizes, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":449
 *             free(sizes)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_prefix); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_prefixed_db, 449, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 449, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":452
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_enter, 452, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 452, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":455
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_exc_type, __pyx_n_s_exc_val, __pyx_n_s_exc_tb); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_exit, 455, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 455, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */
  __pyx_tuple__50 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_default, __pyx_n_s_verify_checksums, __pyx_n_s_fill_cache); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(3, 0, 2, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_get, 473, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 473, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_sync); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(3, 0, 1, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_put, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":485
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_sync); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 1, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_delete, 485, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 485, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":488
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_write_batch, 488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_iterator, 494, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":514
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 */
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_snapshot, 514, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 514, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":517
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self.db, prefix=self.prefix + prefix)
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_prefixed_db, 517, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 517, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */
  __pyx_tuple__63 = PyTuple_Pack(17, __pyx_n_s_name, __pyx_n_s_paranoid_checks, __pyx_n_s_write_buffer_size, __pyx_n_s_max_open_files, __pyx_n_s_lru_cache_size, __pyx_n_s_block_size, __pyx_n_s_block_restart_interval, __pyx_n_s_max_file_size, __pyx_n_s_compression, __pyx_n_s_bloom_filter_bits, __pyx_n_s_comparator, __pyx_n_s_comparator_name, __pyx_n_s_options, __pyx_n_s_st, __pyx_n_s_fsname, __pyx_n_s_create_if_missing, __pyx_n_s_error_if_exists); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(1, 0, 11, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_repair_db, 521, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":543
 * 
 * 
 * def destroy_db(name):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */
  __pyx_tuple__65 = PyTuple_Pack(4, __pyx_n_s_name, __pyx_n_s_options, __pyx_n_s_st, __pyx_n_s_fsname); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_destroy_db, 543, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 543, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":580
 *         del self._write_batch
 * 
 *     def put(self, bytes key not None, value not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_value, __pyx_n_s_key_slice, __pyx_n_s_value_buffer); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_put, 580, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 580, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":598
 *             PyBuffer_Release(&value_buffer)
 * 
 *     def delete(self, bytes key not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__69 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_key_slice); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_delete, 598, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 598, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":609
 *             self._write_batch.Delete(key_slice)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_clear, 609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 609, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":616
 *             self._write_batch.Clear()
 * 
 *     def write(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_st); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_write, 616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 616, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":625
 *         raise_for_status(st)
 * 
 *     def approximate_size(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_approximate_size, 625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 625, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":631
 *         return self._write_batch.ApproximateSize()
 * 
 *     def append(self, WriteBatch source not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_source); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_append, 631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 631, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":637
 *         self._write_batch.Append(source._write_batch[0])
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_enter, 637, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 637, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":643
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_exit, 643, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 643, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":703
 *             lambda wr: ref_dict.pop(iterator_id))
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._iter is not NULL:
 *             del self._iter
 */
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_close, 703, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 703, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":711
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_enter, 711, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 711, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":714
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_exit, 714, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 714, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":851
 *             return self.real_prev()
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self.direction == FORWARD:
 *             return self.real_prev()
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_prev, 851, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 851, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":987
 *         return out
 * 
 *     def seek_to_start(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek_to_start, 987, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 987, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":993
 *         self.state = BEFORE_START
 * 
 *     def seek_to_stop(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek_to_stop, 993, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 993, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":999
 *         self.state = AFTER_STOP
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_tuple__89 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_target, __pyx_n_s_target_slice); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek, 999, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 999, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1029
 * @cython.final
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_valid, 1029, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1029, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1035
 *         return self._iter.Valid()
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek_to_first, 1035, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 1035, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1044
 *         raise_for_status(self._iter.status())
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek_to_last, 1044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1044, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1053
 *         raise_for_status(self._iter.status())
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_seek, 1053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 1053, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1063
 *         raise_for_status(self._iter.status())
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_next, 1063, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1063, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1075
 *         raise_for_status(self._iter.status())
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_prev, 1075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 1075, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1087
 *         raise_for_status(self._iter.status())
 * 
 *     cpdef key(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_key, 1087, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1087, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1098
 *         return key_slice.data()[:key_slice.size()]
 * 
 *     cpdef value(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_value, 1098, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 1098, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1109
 *         return value_slice.data()[:value_slice.size()]
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         return self.key(), self.value()
 * 
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_item, 1109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1109, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1135
 *         self.close()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             return  # nothing to do
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_close, 1135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 1135, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1143
 *             self._snapshot = NULL
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_release, 1143, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 1143, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1146
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_enter, 1146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1146, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1149
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_exit, 1149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 1149, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(3, 0, 2, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_get, 1153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 1153, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_iterator, 1171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_plyvel__plyvel_pyx, __pyx_n_s_raw_iterator, 1185, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 1185, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_PrefixedDB(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__113 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PrefixedDB, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_pop.method_name = &__pyx_n_s_pop;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_18786289 = PyInt_FromLong(18786289L); if (unlikely(!__pyx_int_18786289)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_146446941 = PyInt_FromLong(146446941L); if (unlikely(!__pyx_int_146446941)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_245107514 = PyInt_FromLong(245107514L); if (unlikely(!__pyx_int_245107514)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6plyvel_7_plyvel_DB = &__pyx_vtable_6plyvel_7_plyvel_DB;
  __pyx_vtable_6plyvel_7_plyvel_DB.close = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_DB *, int __pyx_skip_dispatch))__pyx_f_6plyvel_7_plyvel_2DB_close;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel_DB = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_DB_spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_DB)) __PYX_ERR(0, 221, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_DB_spec, __pyx_ptype_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_DB = &__pyx_type_6plyvel_7_plyvel_DB;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_DB->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_DB->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_DB->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_DB->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_vtabptr_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DB, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_DB) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel_PrefixedDB = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_PrefixedDB_spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_PrefixedDB)) __PYX_ERR(0, 459, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_PrefixedDB_spec, __pyx_ptype_6plyvel_7_plyvel_PrefixedDB) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_PrefixedDB = &__pyx_type_6plyvel_7_plyvel_PrefixedDB;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_PrefixedDB->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_PrefixedDB->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_PrefixedDB->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_PrefixedDB->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PrefixedDB, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_PrefixedDB) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_PrefixedDB) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel_WriteBatch = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_WriteBatch_spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_WriteBatch)) __PYX_ERR(0, 559, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_WriteBatch_spec, __pyx_ptype_6plyvel_7_plyvel_WriteBatch) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_WriteBatch = &__pyx_type_6plyvel_7_plyvel_WriteBatch;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_WriteBatch) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_WriteBatch->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_WriteBatch->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_WriteBatch->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_WriteBatch->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_WriteBatch, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_WriteBatch) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_WriteBatch) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6plyvel_7_plyvel_BaseIterator = &__pyx_vtable_6plyvel_7_plyvel_BaseIterator;
  __pyx_vtable_6plyvel_7_plyvel_BaseIterator.close = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator *, int __pyx_skip_dispatch))__pyx_f_6plyvel_7_plyvel_12BaseIterator_close;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel_BaseIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_BaseIterator_spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_BaseIterator)) __PYX_ERR(0, 672, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_BaseIterator_spec, __pyx_ptype_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_BaseIterator = &__pyx_type_6plyvel_7_plyvel_BaseIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6plyvel_7_plyvel_BaseIterator, __pyx_vtabptr_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseIterator, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  if (__pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_weaklistoffset == 0) __pyx_ptype_6plyvel_7_plyvel_BaseIterator->tp_weaklistoffset = offsetof(struct __pyx_obj_6plyvel_7_plyvel_BaseIterator, __weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_BaseIterator) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6plyvel_7_plyvel_Iterator = &__pyx_vtable_6plyvel_7_plyvel_Iterator;
  __pyx_vtable_6plyvel_7_plyvel_Iterator.__pyx_base = *__pyx_vtabptr_6plyvel_7_plyvel_BaseIterator;
  __pyx_vtable_6plyvel_7_plyvel_Iterator.current = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *))__pyx_f_6plyvel_7_plyvel_8Iterator_current;
  __pyx_vtable_6plyvel_7_plyvel_Iterator.real_next = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *))__pyx_f_6plyvel_7_plyvel_8Iterator_real_next;
  __pyx_vtable_6plyvel_7_plyvel_Iterator.real_prev = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_Iterator *))__pyx_f_6plyvel_7_plyvel_8Iterator_real_prev;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_6plyvel_7_plyvel_BaseIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6plyvel_7_plyvel_Iterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_Iterator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_Iterator)) __PYX_ERR(0, 721, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_Iterator_spec, __pyx_ptype_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_Iterator = &__pyx_type_6plyvel_7_plyvel_Iterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_6plyvel_7_plyvel_Iterator->tp_base = __pyx_ptype_6plyvel_7_plyvel_BaseIterator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_Iterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_Iterator->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_Iterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_Iterator->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator, "__next__"); if (unlikely(!wrapper)) __PYX_ERR(0, 721, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6plyvel_7_plyvel_8Iterator_4__next__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6plyvel_7_plyvel_8Iterator_4__next__.doc = __pyx_doc_6plyvel_7_plyvel_8Iterator_4__next__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6plyvel_7_plyvel_8Iterator_4__next__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6plyvel_7_plyvel_Iterator, __pyx_vtabptr_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Iterator, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  if (__pyx_ptype_6plyvel_7_plyvel_Iterator->tp_weaklistoffset == 0) __pyx_ptype_6plyvel_7_plyvel_Iterator->tp_weaklistoffset = offsetof(struct __pyx_obj_6plyvel_7_plyvel_Iterator, __pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_Iterator) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6plyvel_7_plyvel_RawIterator = &__pyx_vtable_6plyvel_7_plyvel_RawIterator;
  __pyx_vtable_6plyvel_7_plyvel_RawIterator.__pyx_base = *__pyx_vtabptr_6plyvel_7_plyvel_BaseIterator;
  __pyx_vtable_6plyvel_7_plyvel_RawIterator.key = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch))__pyx_f_6plyvel_7_plyvel_11RawIterator_key;
  __pyx_vtable_6plyvel_7_plyvel_RawIterator.value = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_RawIterator *, int __pyx_skip_dispatch))__pyx_f_6plyvel_7_plyvel_11RawIterator_value;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_6plyvel_7_plyvel_BaseIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6plyvel_7_plyvel_RawIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_RawIterator_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_RawIterator)) __PYX_ERR(0, 1028, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_RawIterator_spec, __pyx_ptype_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_RawIterator = &__pyx_type_6plyvel_7_plyvel_RawIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_base = __pyx_ptype_6plyvel_7_plyvel_BaseIterator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_vtabptr_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RawIterator, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  if (__pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_weaklistoffset == 0) __pyx_ptype_6plyvel_7_plyvel_RawIterator->tp_weaklistoffset = offsetof(struct __pyx_obj_6plyvel_7_plyvel_RawIterator, __pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_RawIterator) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  #endif
  __pyx_vtabptr_6plyvel_7_plyvel_Snapshot = &__pyx_vtable_6plyvel_7_plyvel_Snapshot;
  __pyx_vtable_6plyvel_7_plyvel_Snapshot.close = (PyObject *(*)(struct __pyx_obj_6plyvel_7_plyvel_Snapshot *, int __pyx_skip_dispatch))__pyx_f_6plyvel_7_plyvel_8Snapshot_close;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel_Snapshot = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel_Snapshot_spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel_Snapshot)) __PYX_ERR(0, 1118, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel_Snapshot_spec, __pyx_ptype_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel_Snapshot = &__pyx_type_6plyvel_7_plyvel_Snapshot;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel_Snapshot->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel_Snapshot->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel_Snapshot->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel_Snapshot->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_vtabptr_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Snapshot, (PyObject *) __pyx_ptype_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6plyvel_7_plyvel_Snapshot) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init___spec, NULL); if (unlikely(!__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__)) __PYX_ERR(0, 680, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init___spec, __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  #else
  __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__ = &__pyx_type_6plyvel_7_plyvel___pyx_scope_struct____init__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__->tp_dictoffset && __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6plyvel_7_plyvel___pyx_scope_struct____init__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(4, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(5, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__plyvel(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__plyvel},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "_plyvel",
      __pyx_k_Plyvel_a_Python_LevelDB_interfa, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_plyvel(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_plyvel(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__plyvel(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__plyvel(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__plyvel(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_plyvel' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_plyvel", __pyx_methods, __pyx_k_Plyvel_a_Python_LevelDB_interfa, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "_plyvel" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__plyvel(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_plyvel___plyvel) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "plyvel._plyvel")) {
      if (unlikely((PyDict_SetItemString(modules, "plyvel._plyvel", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "plyvel/_plyvel.pyx":19
 * """
 * 
 * import sys             # <<<<<<<<<<<<<<
 * import threading
 * from weakref import ref as weakref_ref
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":20
 * 
 * import sys
 * import threading             # <<<<<<<<<<<<<<
 * from weakref import ref as weakref_ref
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_threading, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_threading, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":21
 * import sys
 * import threading
 * from weakref import ref as weakref_ref             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ref);
  __Pyx_GIVEREF(__pyx_n_s_ref);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ref)) __PYX_ERR(0, 21, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_weakref, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref_ref, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "plyvel/_plyvel.pyx":59
 * 
 * 
 * __leveldb_version__ = '%d.%d' % (leveldb.kMajorVersion,             # <<<<<<<<<<<<<<
 *                                  leveldb.kMinorVersion)
 * 
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __pyx_t_2 = __Pyx_PyUnicode_From_int(leveldb::kMajorVersion, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__16);
  __pyx_t_4 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__16);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__16);

  /* "plyvel/_plyvel.pyx":60
 * 
 * __leveldb_version__ = '%d.%d' % (leveldb.kMajorVersion,
 *                                  leveldb.kMinorVersion)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyUnicode_From_int(leveldb::kMinorVersion, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":59
 * 
 * 
 * __leveldb_version__ = '%d.%d' % (leveldb.kMajorVersion,             # <<<<<<<<<<<<<<
 *                                  leveldb.kMinorVersion)
 * 
 */
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_leveldb_version, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "plyvel/_plyvel.pyx":67
 * #
 * 
 * class Error(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  __Pyx_GIVEREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])))) __PYX_ERR(0, 67, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PEP560_update_bases(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare(__pyx_t_6, __pyx_t_3, __pyx_n_s_Error, __pyx_n_s_Error, (PyObject *) NULL, __pyx_n_s_plyvel__plyvel, (PyObject *) NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_3 != __pyx_t_2) {
    if (unlikely((PyDict_SetItemString(__pyx_t_7, "__orig_bases__", __pyx_t_2) < 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Py3ClassCreate(__pyx_t_6, __pyx_n_s_Error, __pyx_t_3, __pyx_t_7, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Error, __pyx_t_2) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "plyvel/_plyvel.pyx":71
 * 
 * 
 * class IOError(Error, IOError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_IOError); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PEP560_update_bases(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_6, __pyx_n_s_IOError, __pyx_n_s_IOError, (PyObject *) NULL, __pyx_n_s_plyvel__plyvel, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_6 != __pyx_t_7) {
    if (unlikely((PyDict_SetItemString(__pyx_t_2, "__orig_bases__", __pyx_t_7) < 0))) __PYX_ERR(0, 71, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_IOError, __pyx_t_6, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IOError, __pyx_t_7) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "plyvel/_plyvel.pyx":75
 * 
 * 
 * class CorruptionError(Error):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PEP560_update_bases(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_6, __pyx_n_s_CorruptionError, __pyx_n_s_CorruptionError, (PyObject *) NULL, __pyx_n_s_plyvel__plyvel, (PyObject *) NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_6 != __pyx_t_3) {
    if (unlikely((PyDict_SetItemString(__pyx_t_7, "__orig_bases__", __pyx_t_3) < 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_CorruptionError, __pyx_t_6, __pyx_t_7, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CorruptionError, __pyx_t_3) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "plyvel/_plyvel.pyx":79
 * 
 * 
 * class IteratorInvalidError(Error):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PEP560_update_bases(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_IteratorInvalidError, __pyx_n_s_IteratorInvalidError, (PyObject *) NULL, __pyx_n_s_plyvel__plyvel, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__pyx_t_6 != __pyx_t_2) {
    if (unlikely((PyDict_SetItemString(__pyx_t_3, "__orig_bases__", __pyx_t_2) < 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_IteratorInvalidError, __pyx_t_6, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IteratorInvalidError, __pyx_t_2) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "plyvel/_plyvel.pyx":257
 *         self.iterators = dict()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         # If the constructor raised an exception (and hence never
 *         # completed), self.iterators can be None. In that case no
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_3close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_close, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_close, __pyx_t_6) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "plyvel/_plyvel.pyx":302
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":301
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self._db is NULL:
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_9get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_tuple__22);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_get, __pyx_t_7) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":312
 *         return db_get(self, key, default, read_options)
 * 
 *     def put(self, bytes key not None, value not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_11put, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_put, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_put, __pyx_t_6) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":333
 *         raise_for_status(st)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_13delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_delete, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_delete, __pyx_t_7) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":346
 *         raise_for_status(st)
 * 
 *     def write_batch(self, *, bool transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_transaction, Py_False) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_15write_batch, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_write_batch, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_write_batch, __pyx_t_6) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_reverse, Py_False) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_start, Py_None) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_stop, Py_None) < 0) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":359
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_start, Py_True) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_stop, Py_False) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_prefix, Py_None) < 0) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":360
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_key, Py_True) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_value, Py_True) < 0) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":361
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return Iterator(
 *             self,  # db
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 358, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":358
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_19iterator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_iterator, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_iterator, __pyx_t_7) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":378
 *         )
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return RawIterator(
 *             self,  # db
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_21raw_iterator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_raw_iterator, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_raw_iterator, __pyx_t_6) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":386
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self)
 * 
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_23snapshot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_snapshot, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_snapshot, __pyx_t_6) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":389
 *         return Snapshot(db=self)
 * 
 *     def get_property(self, bytes name not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_25get_property, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_get_property, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_get_property, __pyx_t_6) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":402
 *         return value if result else None
 * 
 *     def compact_range(self, *, bytes start=None, bytes stop=None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_start, Py_None) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_stop, Py_None) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_27compact_range, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_compact_range, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_compact_range, __pyx_t_7) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":418
 *             self._db.CompactRange(&start_slice, &stop_slice)
 * 
 *     def approximate_size(self, bytes start not None, bytes stop not None):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_29approximate_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_approximate_size, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_approximate_size, __pyx_t_7) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":424
 *         return self.approximate_sizes((start, stop))[0]
 * 
 *     def approximate_sizes(self, *ranges):             # <<<<<<<<<<<<<<
 *         if self._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_31approximate_sizes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_approximate_sizes, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_approximate_sizes, __pyx_t_7) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":449
 *             free(sizes)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_33prefixed_db, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB_prefixed_db, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_prefixed_db, __pyx_t_7) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":452
 *         return PrefixedDB(db=self, prefix=prefix)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_35__enter__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___enter, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_enter, __pyx_t_7) < 0) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "plyvel/_plyvel.pyx":455
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_37__exit__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___exit, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_DB, __pyx_n_s_exit, __pyx_t_7) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_DB);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_39__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._db,self.options cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_2DB_41__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DB___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "plyvel/_plyvel.pyx":474
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return self.db.get(
 *             self.prefix + key,
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 473, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":473
 *         )
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         return self.db.get(
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_5get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_get, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__22);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_get, __pyx_t_6) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "plyvel/_plyvel.pyx":482
 * 
 *     def put(self, bytes key not None, value not None, *,
 *             bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":481
 *             fill_cache=fill_cache)
 * 
 *     def put(self, bytes key not None, value not None, *,             # <<<<<<<<<<<<<<
 *             bool sync=False):
 *         return self.db.put(self.prefix + key, value, sync=sync)
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_7put, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_put, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_put, __pyx_t_7) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":485
 *         return self.db.put(self.prefix + key, value, sync=sync)
 * 
 *     def delete(self, bytes key not None, *, bool sync=False):             # <<<<<<<<<<<<<<
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 485, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_9delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_delete, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_delete, __pyx_t_6) < 0) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":488
 *         return self.db.delete(self.prefix + key, sync=sync)
 * 
 *     def write_batch(self, *, transaction=False, bool sync=False):             # <<<<<<<<<<<<<<
 *         return WriteBatch(self.db, self.prefix, transaction, sync)
 * 
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_transaction, Py_False) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_sync, Py_False) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_11write_batch, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_write_batch, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_write_batch, __pyx_t_7) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_reverse, Py_False) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_start, Py_None) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_stop, Py_None) < 0) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":495
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_include_start, Py_True) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_include_stop, Py_False) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_prefix, Py_None) < 0) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":496
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         return Iterator(
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_include_key, Py_True) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_include_value, Py_True) < 0) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":497
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         return Iterator(
 *             self.db,
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":494
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_15iterator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_iterator, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_iterator, __pyx_t_6) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":514
 *         )
 * 
 *     def snapshot(self):             # <<<<<<<<<<<<<<
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_17snapshot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_snapshot, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_snapshot, __pyx_t_6) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":517
 *         return Snapshot(db=self.db, prefix=self.prefix)
 * 
 *     def prefixed_db(self, bytes prefix not None):             # <<<<<<<<<<<<<<
 *         return PrefixedDB(db=self.db, prefix=self.prefix + prefix)
 * 
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_19prefixed_db, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB_prefixed_db, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_prefixed_db, __pyx_t_6) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PrefixedDB, (type(self), 0xe9c0b3a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PrefixedDB__set_state(self, __pyx_state)
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10PrefixedDB_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PrefixedDB___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_PrefixedDB, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_PrefixedDB);

  /* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_paranoid_checks, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_write_buffer_size, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":522
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,
 *               max_open_files=None, lru_cache_size=None, block_size=None,             # <<<<<<<<<<<<<<
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_open_files, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_lru_cache_size, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_block_size, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":523
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,             # <<<<<<<<<<<<<<
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 *               bytes comparator_name=None):
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_block_restart_interval, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_file_size, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_compression, ((PyObject*)__pyx_n_u_snappy)) < 0) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":524
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,             # <<<<<<<<<<<<<<
 *               bytes comparator_name=None):
 *     cdef Options options = Options()
 */
  __pyx_t_7 = __Pyx_PyInt_From_int(((int)0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_bloom_filter_bits, __pyx_t_7) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_comparator, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":525
 *               block_restart_interval=None, max_file_size=None,
 *               compression='snappy', int bloom_filter_bits=0, comparator=None,
 *               bytes comparator_name=None):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_comparator_name, Py_None) < 0) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":521
 * 
 * 
 * def repair_db(name, *, paranoid_checks=None, write_buffer_size=None,             # <<<<<<<<<<<<<<
 *               max_open_files=None, lru_cache_size=None, block_size=None,
 *               block_restart_interval=None, max_file_size=None,
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_1repair_db, 0, __pyx_n_s_repair_db, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_repair_db, __pyx_t_7) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":543
 * 
 * 
 * def destroy_db(name):             # <<<<<<<<<<<<<<
 *     cdef Options options = Options()
 *     cdef Status st
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_3destroy_db, 0, __pyx_n_s_destroy_db, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroy_db, __pyx_t_7) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":580
 *         del self._write_batch
 * 
 *     def put(self, bytes key not None, value not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_5put, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_put, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_put, __pyx_t_7) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":598
 *             PyBuffer_Release(&value_buffer)
 * 
 *     def delete(self, bytes key not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_7delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_delete, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_delete, __pyx_t_7) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":609
 *             self._write_batch.Delete(key_slice)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_9clear, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_clear, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_clear, __pyx_t_7) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":616
 *             self._write_batch.Clear()
 * 
 *     def write(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_11write, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_write, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_write, __pyx_t_7) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":625
 *         raise_for_status(st)
 * 
 *     def approximate_size(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_13approximate_size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_approximate_size, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_approximate_size, __pyx_t_7) < 0) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":631
 *         return self._write_batch.ApproximateSize()
 * 
 *     def append(self, WriteBatch source not None):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_15append, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch_append, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_append, __pyx_t_7) < 0) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":637
 *         self._write_batch.Append(source._write_batch[0])
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_17__enter__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___enter, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_enter, __pyx_t_7) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "plyvel/_plyvel.pyx":643
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL:
 *             raise RuntimeError("Database is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_19__exit__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___exit, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_WriteBatch, __pyx_n_s_exit, __pyx_t_7) < 0) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_WriteBatch);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._write_batch,self.write_options cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_10WriteBatch_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WriteBatch___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":703
 *             lambda wr: ref_dict.pop(iterator_id))
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self._iter is not NULL:
 *             del self._iter
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_3close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator_close, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_BaseIterator, __pyx_n_s_close, __pyx_t_7) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_BaseIterator);

  /* "plyvel/_plyvel.pyx":711
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_7__enter__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___enter, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_BaseIterator, __pyx_n_s_enter, __pyx_t_7) < 0) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_BaseIterator);

  /* "plyvel/_plyvel.pyx":714
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_9__exit__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___exit, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_BaseIterator, __pyx_n_s_exit, __pyx_t_7) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_BaseIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_12BaseIterator_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseIterator___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":851
 *             return self.real_prev()
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self.direction == FORWARD:
 *             return self.real_prev()
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_7prev, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator_prev, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator, __pyx_n_s_prev, __pyx_t_7) < 0) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Iterator);

  /* "plyvel/_plyvel.pyx":987
 *         return out
 * 
 *     def seek_to_start(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_9seek_to_start, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator_seek_to_start, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator, __pyx_n_s_seek_to_start, __pyx_t_7) < 0) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Iterator);

  /* "plyvel/_plyvel.pyx":993
 *         self.state = BEFORE_START
 * 
 *     def seek_to_stop(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_11seek_to_stop, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator_seek_to_stop, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator, __pyx_n_s_seek_to_stop, __pyx_t_7) < 0) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Iterator);

  /* "plyvel/_plyvel.pyx":999
 *         self.state = AFTER_STOP
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_13seek, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator_seek, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Iterator, __pyx_n_s_seek, __pyx_t_7) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Iterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter,self.comparator,self.start_slice,self.stop_slice cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Iterator_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Iterator___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":1029
 * @cython.final
 * cdef class RawIterator(BaseIterator):
 *     def valid(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_1valid, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_valid, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_valid, __pyx_t_7) < 0) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1035
 *         return self._iter.Valid()
 * 
 *     def seek_to_first(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_3seek_to_first, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_seek_to_first, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_seek_to_first, __pyx_t_7) < 0) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1044
 *         raise_for_status(self._iter.status())
 * 
 *     def seek_to_last(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_5seek_to_last, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_seek_to_last, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_seek_to_last, __pyx_t_7) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1053
 *         raise_for_status(self._iter.status())
 * 
 *     def seek(self, bytes target not None):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_7seek, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_seek, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_seek, __pyx_t_7) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1063
 *         raise_for_status(self._iter.status())
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_9next, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_next, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_next, __pyx_t_7) < 0) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1075
 *         raise_for_status(self._iter.status())
 * 
 *     def prev(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_11prev, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_prev, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_prev, __pyx_t_7) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1087
 *         raise_for_status(self._iter.status())
 * 
 *     cpdef key(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_13key, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_key, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_key, __pyx_t_7) < 0) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1098
 *         return key_slice.data()[:key_slice.size()]
 * 
 *     cpdef value(self):             # <<<<<<<<<<<<<<
 *         if self._iter is NULL:
 *             raise RuntimeError("Database or iterator is closed")
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_15value, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_value, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_value, __pyx_t_7) < 0) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "plyvel/_plyvel.pyx":1109
 *         return value_slice.data()[:value_slice.size()]
 * 
 *     def item(self):             # <<<<<<<<<<<<<<
 *         return self.key(), self.value()
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_17item, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator_item, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_RawIterator, __pyx_n_s_item, __pyx_t_7) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_RawIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_7) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._iter cannot be converted to a Python object for pickling"
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_11RawIterator_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawIterator___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_7) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "plyvel/_plyvel.pyx":1135
 *         self.close()
 * 
 *     cpdef close(self):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             return  # nothing to do
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_5close, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot_close, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_close, __pyx_t_7) < 0) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1143
 *             self._snapshot = NULL
 * 
 *     def release(self):             # <<<<<<<<<<<<<<
 *         self.close()
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_7release, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot_release, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_release, __pyx_t_7) < 0) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1146
 *         self.close()
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_9__enter__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___enter, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_enter, __pyx_t_7) < 0) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1149
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.close()
 *         return False  # propagate exceptions
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_11__exit__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___exit, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_exit, __pyx_t_7) < 0) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "plyvel/_plyvel.pyx":1154
 * 
 *     def get(self, bytes key not None, default=None, *,
 *             bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1153
 *         return False  # propagate exceptions
 * 
 *     def get(self, bytes key not None, default=None, *,             # <<<<<<<<<<<<<<
 *             bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_13get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot_get, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_tuple__22);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_get, __pyx_t_6) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_reverse, Py_False) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_start, Py_None) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_stop, Py_None) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1172
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,             # <<<<<<<<<<<<<<
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_start, Py_True) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_stop, Py_False) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_prefix, Py_None) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1173
 *     def iterator(self, *, reverse=False, start=None, stop=None,
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,             # <<<<<<<<<<<<<<
 *                  bool verify_checksums=False, bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_key, Py_True) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_include_value, Py_True) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1174
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 *                  bool verify_checksums=False, bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1171
 *         return self.iterator()
 * 
 *     def iterator(self, *, reverse=False, start=None, stop=None,             # <<<<<<<<<<<<<<
 *                  include_start=True, include_stop=False, prefix=None,
 *                  include_key=True, include_value=True,
 */
  __pyx_t_7 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_17iterator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot_iterator, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_7, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_iterator, __pyx_t_7) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_verify_checksums, Py_False) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1186
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,
 *                      bool fill_cache=True):             # <<<<<<<<<<<<<<
 *         if self.db._db is NULL or self._snapshot is NULL:
 *             raise RuntimeError("Database or snapshot is closed")
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_fill_cache, Py_True) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)

  /* "plyvel/_plyvel.pyx":1185
 *             fill_cache=fill_cache, snapshot=self)
 * 
 *     def raw_iterator(self, *, bool verify_checksums=False,             # <<<<<<<<<<<<<<
 *                      bool fill_cache=True):
 *         if self.db._db is NULL or self._snapshot is NULL:
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_19raw_iterator, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot_raw_iterator, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_6, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6plyvel_7_plyvel_Snapshot, __pyx_n_s_raw_iterator, __pyx_t_6) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_6plyvel_7_plyvel_Snapshot);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___reduce_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._snapshot cannot be converted to a Python object for pickling"
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_8Snapshot_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Snapshot___setstate_cython, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_6) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PrefixedDB(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_6plyvel_7_plyvel_5__pyx_unpickle_PrefixedDB, 0, __pyx_n_s_pyx_unpickle_PrefixedDB, NULL, __pyx_n_s_plyvel__plyvel, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PrefixedDB, __pyx_t_6) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "plyvel/_plyvel.pyx":1
 * # cython: embedsignature=True, language_level=3             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init plyvel._plyvel", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init plyvel._plyvel");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetItemIntByteArray */
static CYTHON_INLINE int __Pyx_GetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i,
                                                         int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (wraparound | boundscheck) {
        length = PyByteArray_GET_SIZE(string);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            return (unsigned char) (PyByteArray_AS_STRING(string)[i]);
        } else {
            PyErr_SetString(PyExc_IndexError, "bytearray index out of range");
            return -1;
        }
    } else {
        return (unsigned char) (PyByteArray_AS_STRING(string)[i]);
    }
}

/* SetItemIntByteArray */
static CYTHON_INLINE int __Pyx_SetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i, unsigned char v,
                                                         int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (wraparound | boundscheck) {
        length = PyByteArray_GET_SIZE(string);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            PyByteArray_AS_STRING(string)[i] = (char) v;
            return 0;
        } else {
            PyErr_SetString(PyExc_IndexError, "bytearray index out of range");
            return -1;
        }
    } else {
        PyByteArray_AS_STRING(string)[i] = (char) v;
        return 0;
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseKeywordRequired */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name) {
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() needs keyword-only argument %U", func_name, kw_name);
        #else
        "%s() needs keyword-only argument %s", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B3 & PY_VERSION_HEX < 0x030d0000
    if ((1)) {
        return _PyDict_Pop(d, key, default_value);
    } else
#endif
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_pop, d, key);
    }
}

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__16);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__17;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* Py3UpdateBases */
static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(uint64_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__115);
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
