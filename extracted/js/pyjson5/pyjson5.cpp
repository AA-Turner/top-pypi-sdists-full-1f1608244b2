/* Generated by Cython 3.0.11 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #elif defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyjson5
#define __PYX_HAVE_API__pyjson5
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include "pythread.h"
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <utility>
#include "src/native.hpp"
#include "src/_unicode_cat_of.hpp"
#include "src/_stack_heap_string.hpp"
#include "src/_decoder_recursive_select.hpp"
#include "third-party/fast_double_parser/include/fast_double_parser.h"
#include "src/dragonbox.cc"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "src/_exceptions.pyx",
  "src/_raise_encoder.pyx",
  "src/_reader_ucs.pyx",
  "src/_encoder_options.pyx",
  "env/lib/python3.13/site-packages/Cython/Includes/cpython/contextvars.pxd",
  "src/_exceptions_decoder.pyx",
  "src/_exceptions_encoder.pyx",
  "src/_raise_decoder.pyx",
  "src/_unicode.pyx",
  "src/_reader_callback.pyx",
  "src/_readers.pyx",
  "src/_decoder.pyx",
  "src/_writer_reallocatable.pyx",
  "src/_writer_callback.pyx",
  "src/_encoder.pyx",
  "src/_exports.pyx",
  "src/_legacy.pyx",
  "pyjson5.pyx",
  "env/lib/python3.13/site-packages/Cython/Includes/cpython/type.pxd",
  "env/lib/python3.13/site-packages/Cython/Includes/cpython/bool.pxd",
  "env/lib/python3.13/site-packages/Cython/Includes/cpython/complex.pxd",
  "src/_imports.pyx",
  "src/_constants.pyx",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7pyjson5_Json5Exception;
struct __pyx_obj_7pyjson5_Json5DecoderException;
struct __pyx_obj_7pyjson5_Json5NestingTooDeep;
struct __pyx_obj_7pyjson5_Json5EOF;
struct __pyx_obj_7pyjson5_Json5IllegalCharacter;
struct __pyx_obj_7pyjson5_Json5ExtraData;
struct __pyx_obj_7pyjson5_Json5IllegalType;
struct __pyx_obj_7pyjson5__DecoderException;
struct __pyx_obj_7pyjson5_Json5EncoderException;
struct __pyx_obj_7pyjson5_Json5UnstringifiableType;
struct __pyx_obj_7pyjson5_Options;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};
struct __pyx_t_7pyjson5_AsciiObject;
typedef struct __pyx_t_7pyjson5_AsciiObject __pyx_t_7pyjson5_AsciiObject;
struct __pyx_opt_args_7pyjson5__raise_decoder;
struct __pyx_opt_args_7pyjson5__raise_nesting;
struct __pyx_t_7pyjson5_ReaderUCS;
struct __pyx_t_7pyjson5_ReaderUCS1;
struct __pyx_t_7pyjson5_ReaderUCS2;
struct __pyx_t_7pyjson5_ReaderUCS4;
struct __pyx_t_7pyjson5_ReaderUTF8;
struct __pyx_t_7pyjson5_ReaderCallbackBase;
struct __pyx_t_7pyjson5_ReaderCallback;
struct __pyx_t_7pyjson5_Writer;
struct __pyx_t_7pyjson5_WriterReallocatable;
struct __pyx_t_7pyjson5_WriterCallback;
struct __pyx_t_7pyjson5_WriterNoop;
struct __pyx_opt_args_7pyjson5__options_ascii;

/* "src/_decoder.pyx":1
 * cdef enum:             # <<<<<<<<<<<<<<
 *     NO_EXTRA_DATA = 0x0011_0000
 * 
 */
enum  {
  __pyx_e_7pyjson5_NO_EXTRA_DATA = 0x00110000
};

/* "src/_imports.pyx":207
 * 
 * 
 * ctypedef struct AsciiObject:             # <<<<<<<<<<<<<<
 *     PyASCIIObject base
 *     char data[1]
 */
struct __pyx_t_7pyjson5_AsciiObject {
  PyASCIIObject base;
  char data[1];
};

/* "src/_raise_decoder.pyx":1
 * cdef AlwaysTrue _raise_decoder(cls, msg, extra=None, result=None) except True:             # <<<<<<<<<<<<<<
 *     raise _DecoderException(cls, msg, extra, result)
 * 
 */
struct __pyx_opt_args_7pyjson5__raise_decoder {
  int __pyx_n;
  PyObject *extra;
  PyObject *result;
};

/* "src/_raise_decoder.pyx":67
 * 
 * 
 * cdef AlwaysTrue _raise_nesting(Py_ssize_t where, object result=None) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5NestingTooDeep,
 */
struct __pyx_opt_args_7pyjson5__raise_nesting {
  int __pyx_n;
  PyObject *result;
};

/* "src/_reader_ucs.pyx":1
 * cdef struct ReaderUCS:             # <<<<<<<<<<<<<<
 *     Py_ssize_t remaining
 *     Py_ssize_t position
 */
struct __pyx_t_7pyjson5_ReaderUCS {
  Py_ssize_t remaining;
  Py_ssize_t position;
  Py_ssize_t maxdepth;
};

/* "src/_reader_ucs.pyx":7
 * 
 * 
 * cdef struct ReaderUCS1:             # <<<<<<<<<<<<<<
 *     ReaderUCS base
 *     const Py_UCS1 *string
 */
struct __pyx_t_7pyjson5_ReaderUCS1 {
  struct __pyx_t_7pyjson5_ReaderUCS base;
  Py_UCS1 const *string;
};

/* "src/_reader_ucs.pyx":12
 * 
 * 
 * cdef struct ReaderUCS2:             # <<<<<<<<<<<<<<
 *     ReaderUCS base
 *     const Py_UCS2 *string
 */
struct __pyx_t_7pyjson5_ReaderUCS2 {
  struct __pyx_t_7pyjson5_ReaderUCS base;
  Py_UCS2 const *string;
};

/* "src/_reader_ucs.pyx":17
 * 
 * 
 * cdef struct ReaderUCS4:             # <<<<<<<<<<<<<<
 *     ReaderUCS base
 *     const Py_UCS4 *string
 */
struct __pyx_t_7pyjson5_ReaderUCS4 {
  struct __pyx_t_7pyjson5_ReaderUCS base;
  Py_UCS4 const *string;
};

/* "src/_reader_ucs.pyx":22
 * 
 * 
 * cdef struct ReaderUTF8:             # <<<<<<<<<<<<<<
 *     ReaderUCS base
 *     const Py_UCS1 *string
 */
struct __pyx_t_7pyjson5_ReaderUTF8 {
  struct __pyx_t_7pyjson5_ReaderUCS base;
  Py_UCS1 const *string;
};

/* "src/_reader_ucs.pyx":27
 * 
 * 
 * ctypedef ReaderUCS1 &ReaderUCS1Ref             # <<<<<<<<<<<<<<
 * ctypedef ReaderUCS2 &ReaderUCS2Ref
 * ctypedef ReaderUCS4 &ReaderUCS4Ref
 */
typedef struct __pyx_t_7pyjson5_ReaderUCS1 &__pyx_t_7pyjson5_ReaderUCS1Ref;

/* "src/_reader_ucs.pyx":28
 * 
 * ctypedef ReaderUCS1 &ReaderUCS1Ref
 * ctypedef ReaderUCS2 &ReaderUCS2Ref             # <<<<<<<<<<<<<<
 * ctypedef ReaderUCS4 &ReaderUCS4Ref
 * ctypedef ReaderUTF8 &ReaderUTF8Ref
 */
typedef struct __pyx_t_7pyjson5_ReaderUCS2 &__pyx_t_7pyjson5_ReaderUCS2Ref;

/* "src/_reader_ucs.pyx":29
 * ctypedef ReaderUCS1 &ReaderUCS1Ref
 * ctypedef ReaderUCS2 &ReaderUCS2Ref
 * ctypedef ReaderUCS4 &ReaderUCS4Ref             # <<<<<<<<<<<<<<
 * ctypedef ReaderUTF8 &ReaderUTF8Ref
 * 
 */
typedef struct __pyx_t_7pyjson5_ReaderUCS4 &__pyx_t_7pyjson5_ReaderUCS4Ref;

/* "src/_reader_ucs.pyx":30
 * ctypedef ReaderUCS2 &ReaderUCS2Ref
 * ctypedef ReaderUCS4 &ReaderUCS4Ref
 * ctypedef ReaderUTF8 &ReaderUTF8Ref             # <<<<<<<<<<<<<<
 * 
 * ctypedef Py_UCS1 *UCS1String
 */
typedef struct __pyx_t_7pyjson5_ReaderUTF8 &__pyx_t_7pyjson5_ReaderUTF8Ref;

/* "src/_reader_ucs.pyx":32
 * ctypedef ReaderUTF8 &ReaderUTF8Ref
 * 
 * ctypedef Py_UCS1 *UCS1String             # <<<<<<<<<<<<<<
 * ctypedef Py_UCS2 *UCS2String
 * ctypedef Py_UCS4 *UCS4String
 */
typedef Py_UCS1 *__pyx_t_7pyjson5_UCS1String;

/* "src/_reader_ucs.pyx":33
 * 
 * ctypedef Py_UCS1 *UCS1String
 * ctypedef Py_UCS2 *UCS2String             # <<<<<<<<<<<<<<
 * ctypedef Py_UCS4 *UCS4String
 * 
 */
typedef Py_UCS2 *__pyx_t_7pyjson5_UCS2String;

/* "src/_reader_ucs.pyx":34
 * ctypedef Py_UCS1 *UCS1String
 * ctypedef Py_UCS2 *UCS2String
 * ctypedef Py_UCS4 *UCS4String             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused ReaderUCSRef:
 */
typedef Py_UCS4 *__pyx_t_7pyjson5_UCS4String;

/* "src/_reader_callback.pyx":1
 * cdef struct ReaderCallbackBase:             # <<<<<<<<<<<<<<
 *     Py_ssize_t position
 *     Py_ssize_t maxdepth
 */
struct __pyx_t_7pyjson5_ReaderCallbackBase {
  Py_ssize_t position;
  Py_ssize_t maxdepth;
};

/* "src/_reader_callback.pyx":6
 * 
 * 
 * cdef struct ReaderCallback:             # <<<<<<<<<<<<<<
 *     ReaderCallbackBase base
 *     PyObject *callback
 */
struct __pyx_t_7pyjson5_ReaderCallback {
  struct __pyx_t_7pyjson5_ReaderCallbackBase base;
  PyObject *callback;
  PyObject *args;
  std::int32_t lookahead;
};

/* "src/_reader_callback.pyx":12
 *     int32_t lookahead
 * 
 * ctypedef ReaderCallback &ReaderCallbackRef             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct __pyx_t_7pyjson5_ReaderCallback &__pyx_t_7pyjson5_ReaderCallbackRef;

/* "src/_writers.pyx":1
 * cdef struct Writer:             # <<<<<<<<<<<<<<
 *     boolean (*reserve)(Writer &writer, size_t amount) except False
 *     boolean (*append_c)(Writer &writer, char datum) except False
 */
struct __pyx_t_7pyjson5_Writer {
  bool (*reserve)(struct __pyx_t_7pyjson5_Writer &, size_t);
  bool (*append_c)(struct __pyx_t_7pyjson5_Writer &, char);
  bool (*append_s)(struct __pyx_t_7pyjson5_Writer &, char const *, Py_ssize_t);
  PyObject *options;
};

/* "src/_writers.pyx":8
 * 
 * 
 * ctypedef Writer &WriterRef             # <<<<<<<<<<<<<<
 */
typedef struct __pyx_t_7pyjson5_Writer &__pyx_t_7pyjson5_WriterRef;

/* "src/_writer_reallocatable.pyx":1
 * cdef struct WriterReallocatable:             # <<<<<<<<<<<<<<
 *     Writer base
 *     size_t position
 */
struct __pyx_t_7pyjson5_WriterReallocatable {
  struct __pyx_t_7pyjson5_Writer base;
  size_t position;
  size_t length;
  void *obj;
};

/* "src/_writer_callback.pyx":1
 * cdef struct WriterCallback:             # <<<<<<<<<<<<<<
 *     Writer base
 *     PyObject *callback
 */
struct __pyx_t_7pyjson5_WriterCallback {
  struct __pyx_t_7pyjson5_Writer base;
  PyObject *callback;
};

/* "src/_writer_noop.pyx":1
 * cdef struct WriterNoop:             # <<<<<<<<<<<<<<
 *     Writer base
 * 
 */
struct __pyx_t_7pyjson5_WriterNoop {
  struct __pyx_t_7pyjson5_Writer base;
};

/* "src/_encoder_options.pyx":8
 * 
 * 
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):             # <<<<<<<<<<<<<<
 *     if datum is False:
 *         return None
 */
struct __pyx_opt_args_7pyjson5__options_ascii {
  int __pyx_n;
  bool expect_ascii;
};

/* "src/_exceptions.pyx":2
 * @auto_pickle(False)
 * cdef class Json5Exception(Exception):             # <<<<<<<<<<<<<<
 *     '''
 *     Base class of any exception thrown by PyJSON5.
 */
struct __pyx_obj_7pyjson5_Json5Exception {
  PyBaseExceptionObject __pyx_base;
};


/* "src/_exceptions_decoder.pyx":2
 * @auto_pickle(False)
 * cdef class Json5DecoderException(Json5Exception):             # <<<<<<<<<<<<<<
 *     '''
 *     Base class of any exception thrown by the parser.
 */
struct __pyx_obj_7pyjson5_Json5DecoderException {
  struct __pyx_obj_7pyjson5_Json5Exception __pyx_base;
};


/* "src/_exceptions_decoder.pyx":17
 * @final
 * @auto_pickle(False)
 * cdef class Json5NestingTooDeep(Json5DecoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     The maximum nesting level on the input data was exceeded.
 */
struct __pyx_obj_7pyjson5_Json5NestingTooDeep {
  struct __pyx_obj_7pyjson5_Json5DecoderException __pyx_base;
};


/* "src/_exceptions_decoder.pyx":25
 * @final
 * @auto_pickle(False)
 * cdef class Json5EOF(Json5DecoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     The input ended prematurely.
 */
struct __pyx_obj_7pyjson5_Json5EOF {
  struct __pyx_obj_7pyjson5_Json5DecoderException __pyx_base;
};


/* "src/_exceptions_decoder.pyx":33
 * @final
 * @auto_pickle(False)
 * cdef class Json5IllegalCharacter(Json5DecoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     An unexpected character was encountered.
 */
struct __pyx_obj_7pyjson5_Json5IllegalCharacter {
  struct __pyx_obj_7pyjson5_Json5DecoderException __pyx_base;
};


/* "src/_exceptions_decoder.pyx":50
 * @final
 * @auto_pickle(False)
 * cdef class Json5ExtraData(Json5DecoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     The input contained extranous data.
 */
struct __pyx_obj_7pyjson5_Json5ExtraData {
  struct __pyx_obj_7pyjson5_Json5DecoderException __pyx_base;
};


/* "src/_exceptions_decoder.pyx":67
 * @final
 * @auto_pickle(False)
 * cdef class Json5IllegalType(Json5DecoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     The user supplied callback function returned illegal data.
 */
struct __pyx_obj_7pyjson5_Json5IllegalType {
  struct __pyx_obj_7pyjson5_Json5DecoderException __pyx_base;
};


/* "src/_exceptions_decoder.pyx":84
 * @final
 * @auto_pickle(False)
 * cdef class _DecoderException(Exception):             # <<<<<<<<<<<<<<
 *     cdef object cls
 *     cdef object msg
 */
struct __pyx_obj_7pyjson5__DecoderException {
  PyBaseExceptionObject __pyx_base;
  PyObject *cls;
  PyObject *msg;
  PyObject *extra;
  PyObject *result;
};


/* "src/_exceptions_encoder.pyx":2
 * @auto_pickle(False)
 * cdef class Json5EncoderException(Json5Exception):             # <<<<<<<<<<<<<<
 *     '''
 *     Base class of any exception thrown by the serializer.
 */
struct __pyx_obj_7pyjson5_Json5EncoderException {
  struct __pyx_obj_7pyjson5_Json5Exception __pyx_base;
};


/* "src/_exceptions_encoder.pyx":9
 * 
 * @auto_pickle(False)
 * cdef class Json5UnstringifiableType(Json5EncoderException):             # <<<<<<<<<<<<<<
 *     '''
 *     The encoder was not able to stringify the input, or it was told not to by the supplied ``Options``.
 */
struct __pyx_obj_7pyjson5_Json5UnstringifiableType {
  struct __pyx_obj_7pyjson5_Json5EncoderException __pyx_base;
};


/* "src/_encoder_options.pyx":51
 * @freelist(8)
 * @auto_pickle(False)
 * cdef class Options:             # <<<<<<<<<<<<<<
 *     '''
 *     Customizations for the :func:`encoder_*(...) <pyjson5.encoder>` function family.
 */
struct __pyx_obj_7pyjson5_Options {
  PyObject_HEAD
  PyObject *quotationmark;
  PyObject *tojson;
  PyObject *mappingtypes;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* ValidateExternBase.proto */
static int __Pyx_validate_extern_base(PyTypeObject *base);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_std_3a__3a_uint32_t(std::uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_std_3a__3a_int32_t(std::int32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* BytesContains.proto */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character);

/* CIntFromPy.proto */
static CYTHON_INLINE std::uint32_t __Pyx_PyInt_As_std_3a__3a_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE std::int32_t __Pyx_PyInt_As_std_3a__3a_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "libcpp" */

/* Module declarations from "pyjson5" */
static PyTypeObject *__pyx_v_7pyjson5_datetime = 0;
static PyTypeObject *__pyx_v_7pyjson5_date = 0;
static PyTypeObject *__pyx_v_7pyjson5_time = 0;
static PyTypeObject *__pyx_v_7pyjson5_Decimal = 0;
static PyTypeObject *__pyx_v_7pyjson5_Mapping = 0;
static PyTypeObject *__pyx_v_7pyjson5_IOBase = 0;
static PyObject *__pyx_v_7pyjson5_saferepr = 0;
static PyObject *__pyx_v_7pyjson5_CONST_POS_NAN = 0;
static PyObject *__pyx_v_7pyjson5_CONST_POS_INF = 0;
static PyObject *__pyx_v_7pyjson5_CONST_NEG_NAN = 0;
static PyObject *__pyx_v_7pyjson5_CONST_NEG_INF = 0;
static PyObject *__pyx_v_7pyjson5_DATETIME_CLASSES = 0;
static PyObject *__pyx_v_7pyjson5_ORD_CLASSES = 0;
static PyObject *__pyx_v_7pyjson5_UCS1_COMPATIBLE_CODECS = 0;
static PyObject *__pyx_v_7pyjson5_TEST_DECIMAL = 0;
static PyObject *__pyx_v_7pyjson5_TEST_FLOAT = 0;
static PyObject *__pyx_v_7pyjson5_TEST_INT = 0;
static PyObject *__pyx_v_7pyjson5_DEFAULT_TOJSON = 0;
static PyObject *__pyx_v_7pyjson5_DEFAULT_INTFORMAT = 0;
static PyObject *__pyx_v_7pyjson5_DEFAULT_DECIMALFORMAT = 0;
static PyObject *__pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES = 0;
static PyObject *__pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK = 0;
static struct __pyx_obj_7pyjson5_Options *__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT = 0;
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_decoder(PyObject *, PyObject *, struct __pyx_opt_args_7pyjson5__raise_decoder *__pyx_optional_args); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unclosed(char const *, Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_no_data(Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_stray_character(char const *, Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_sc(char const *, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_s(char const *, Py_ssize_t, std::uint32_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_c(std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_extra_data(std::uint32_t, Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unframed_data(std::uint32_t, Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_nesting(Py_ssize_t, struct __pyx_opt_args_7pyjson5__raise_nesting *__pyx_optional_args); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_not_ord(PyObject *, Py_ssize_t); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unstringifiable(PyObject *); /*proto*/
static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_illegal_wordlength(std::int32_t); /*proto*/
static bool __pyx_f_7pyjson5__is_line_terminator(std::uint32_t); /*proto*/
static bool __pyx_f_7pyjson5__is_ws_zs(std::uint32_t); /*proto*/
static bool __pyx_f_7pyjson5__is_identifier_start(std::uint32_t); /*proto*/
static bool __pyx_f_7pyjson5__is_identifier_part(std::uint32_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_7pyjson5__is_x(std::uint32_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_7pyjson5__is_e(std::uint32_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_7pyjson5__is_decimal(std::uint32_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_7pyjson5__is_hex(std::uint32_t); /*proto*/
static CYTHON_INLINE bool __pyx_f_7pyjson5__is_hexadecimal(std::uint32_t); /*proto*/
static bool __pyx_f_7pyjson5__is_in_float_representation(std::uint32_t); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_f_7pyjson5__reader_Callback_get(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static std::int32_t __pyx_f_7pyjson5__reader_Callback_good(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_double(JSON5EncoderCpp::StackHeapString<char>  &, Py_ssize_t); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_ucs1(void const *, Py_ssize_t, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_ucs2(void const *, Py_ssize_t, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_ucs4(void const *, Py_ssize_t, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_utf8(void const *, Py_ssize_t, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_unicode(PyObject *, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_buffer(Py_buffer &, std::int32_t, Py_ssize_t, bool); /*proto*/
static PyObject *__pyx_f_7pyjson5__decode_callback(PyObject *, PyObject *, Py_ssize_t, bool); /*proto*/
static bool __pyx_f_7pyjson5__WriterReallocatable_reserve(__pyx_t_7pyjson5_WriterRef, size_t); /*proto*/
static bool __pyx_f_7pyjson5__WriterReallocatable_append_c(struct __pyx_t_7pyjson5_Writer &, char); /*proto*/
static bool __pyx_f_7pyjson5__WriterReallocatable_append_s(struct __pyx_t_7pyjson5_Writer &, char const *, Py_ssize_t); /*proto*/
static bool __pyx_f_7pyjson5__WriterCbBytes_append_c(struct __pyx_t_7pyjson5_Writer &, char); /*proto*/
static bool __pyx_f_7pyjson5__WriterCbBytes_append_s(struct __pyx_t_7pyjson5_Writer &, char const *, Py_ssize_t); /*proto*/
static bool __pyx_f_7pyjson5__WriterCbStr_append_c(struct __pyx_t_7pyjson5_Writer &, char); /*proto*/
static bool __pyx_f_7pyjson5__WriterCbStr_append_s(struct __pyx_t_7pyjson5_Writer &, char const *, Py_ssize_t); /*proto*/
static bool __pyx_f_7pyjson5__WriterNoop_reserve(__pyx_t_7pyjson5_WriterRef, size_t); /*proto*/
static bool __pyx_f_7pyjson5__WriterNoop_append_c(struct __pyx_t_7pyjson5_Writer &, char); /*proto*/
static bool __pyx_f_7pyjson5__WriterNoop_append_s(struct __pyx_t_7pyjson5_Writer &, char const *, Py_ssize_t); /*proto*/
static PyObject *__pyx_f_7pyjson5__options_ascii(PyObject *, struct __pyx_opt_args_7pyjson5__options_ascii *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_7pyjson5__options_reduce_arg(PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_7pyjson5__option_from_ascii(PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_7pyjson5__options_from_ascii(struct __pyx_obj_7pyjson5_Options *); /*proto*/
static PyObject *__pyx_f_7pyjson5__to_options(struct __pyx_obj_7pyjson5_Options *, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_unicode(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_nested_key(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__append_ascii(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_tojson(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_sequence(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_mapping(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_none(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_bytes(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_datetime(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_format_string(__pyx_t_7pyjson5_WriterRef, PyObject *, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_float(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_long(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_decimal(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_unstringifiable(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_other(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode(__pyx_t_7pyjson5_WriterRef, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_callback_bytes(PyObject *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_7pyjson5__encode_callback_str(PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static CYTHON_INLINE std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static CYTHON_INLINE std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static CYTHON_INLINE std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_utf8_get(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static void __pyx_fuse_0__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static void __pyx_fuse_1__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static void __pyx_fuse_2__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static void __pyx_fuse_3__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static void __pyx_fuse_4__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static CYTHON_INLINE std::uint32_t __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS1Ref, std::uint32_t); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS2Ref, std::uint32_t); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS4Ref, std::uint32_t); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUTF8Ref, std::uint32_t); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderCallbackRef, std::uint32_t); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS1Ref); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS2Ref); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS4Ref); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUTF8Ref); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderCallbackRef); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS1Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS2Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS4Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUTF8Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderCallbackRef, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS1Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS2Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS4Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUTF8Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderCallbackRef, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS1Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS2Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS4Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUTF8Ref, Py_ssize_t); /*proto*/
static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderCallbackRef, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS1Ref, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS2Ref, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS4Ref, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUTF8Ref, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderCallbackRef, std::uint32_t, Py_ssize_t, std::uint32_t); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS1Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS2Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS4Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUTF8Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderCallbackRef, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS1Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS2Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS4Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUTF8Ref, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderCallbackRef, JSON5EncoderCpp::StackHeapString<char>  &, std::int32_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS1Ref, Py_ssize_t, std::uint32_t, char const *, std::int32_t *); /*proto*/
static std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS2Ref, Py_ssize_t, std::uint32_t, char const *, std::int32_t *); /*proto*/
static std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS4Ref, Py_ssize_t, std::uint32_t, char const *, std::int32_t *); /*proto*/
static std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUTF8Ref, Py_ssize_t, std::uint32_t, char const *, std::int32_t *); /*proto*/
static std::uint32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderCallbackRef, Py_ssize_t, std::uint32_t, char const *, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS1Ref, PyObject *); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS2Ref, PyObject *); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS4Ref, PyObject *); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUTF8Ref, PyObject *); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderCallbackRef, PyObject *); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS1Ref, PyObject *); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS2Ref, PyObject *); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS4Ref, PyObject *); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUTF8Ref, PyObject *); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderCallbackRef, PyObject *); /*proto*/
static bool __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS1Ref, char const *); /*proto*/
static bool __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS2Ref, char const *); /*proto*/
static bool __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS4Ref, char const *); /*proto*/
static bool __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUTF8Ref, char const *); /*proto*/
static bool __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderCallbackRef, char const *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS1Ref, bool); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS2Ref, bool); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS4Ref, bool); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUTF8Ref, bool); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderCallbackRef, bool); /*proto*/
static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS1Ref, bool); /*proto*/
static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS2Ref, bool); /*proto*/
static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS4Ref, bool); /*proto*/
static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUTF8Ref, bool); /*proto*/
static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderCallbackRef, bool); /*proto*/
static int __pyx_fuse_0__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef, __pyx_t_7pyjson5_UCS1String, Py_ssize_t); /*proto*/
static int __pyx_fuse_1__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef, __pyx_t_7pyjson5_UCS2String, Py_ssize_t); /*proto*/
static int __pyx_fuse_2__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef, __pyx_t_7pyjson5_UCS4String, Py_ssize_t); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pyjson5"
extern int __pyx_module_is_main_pyjson5;
int __pyx_module_is_main_pyjson5 = 0;

/* Implementation of "pyjson5" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_filter;
/* #### Code section: string_decls ### */
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "%d";
static const char __pyx_k_s[] = "s";
static const char __pyx_k__3[] = "=";
static const char __pyx_k__4[] = ", ";
static const char __pyx_k__5[] = "";
static const char __pyx_k__6[] = ")";
static const char __pyx_k_cb[] = "cb";
static const char __pyx_k_fp[] = "fp";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_io[] = "io";
static const char __pyx_k_kw[] = "kw";
static const char __pyx_k_l1[] = "l1";
static const char __pyx_k_04X[] = "04X";
static const char __pyx_k_04x[] = "04x";
static const char __pyx_k_646[] = "646";
static const char __pyx_k_NaN[] = "+NaN";
static const char __pyx_k__13[] = "?";
static const char __pyx_k__14[] = ".";
static const char __pyx_k__17[] = "\"";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_s_2[] = "%s";
static const char __pyx_k_8859[] = "8859";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_date[] = "date";
static const char __pyx_k_dump[] = "dump";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_load[] = "load";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_near[] = " near ";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_or_U[] = " or U+";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_some[] = "some";
static const char __pyx_k_temp[] = "temp";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_47_11[] = "47.11";
static const char __pyx_k_False[] = "=False";
static const char __pyx_k_NaN_2[] = "-NaN";
static const char __pyx_k_Stray[] = "Stray ";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_cp819[] = "cp819";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_extra[] = "extra";
static const char __pyx_k_latin[] = "latin";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_IOBase[] = "IOBase";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_closed[] = "closed";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_latin1[] = "latin1";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_pprint[] = "pprint";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_strict[] = "strict";
static const char __pyx_k_string[] = "string";
static const char __pyx_k_tojson[] = "tojson";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_writer[] = "writer";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_Mapping[] = "Mapping";
static const char __pyx_k_Options[] = "Options(";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_encoder[] = "encoder";
static const char __pyx_k_found_U[] = ", found U+";
static const char __pyx_k_latin_1[] = "latin_1";
static const char __pyx_k_license[] = "__license__";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_pyjson5[] = "pyjson5";
static const char __pyx_k_reserve[] = "reserve";
static const char __pyx_k_type_cb[] = "type(cb)==";
static const char __pyx_k_type_fp[] = "type(fp)==";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_Expected[] = "Expected ";
static const char __pyx_k_Infinity[] = "+Infinity";
static const char __pyx_k_Json5EOF[] = "Json5EOF";
static const char __pyx_k_Unclosed[] = "Unclosed ";
static const char __pyx_k_append_c[] = "append_c";
static const char __pyx_k_append_s[] = "append_s";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_datetime[] = "datetime";
static const char __pyx_k_encoding[] = "encoding";
static const char __pyx_k_maxdepth[] = "maxdepth";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_readable[] = "readable";
static const char __pyx_k_saferepr[] = "saferepr";
static const char __pyx_k_us_ascii[] = "us-ascii";
static const char __pyx_k_writable[] = "writable";
static const char __pyx_k_Options_2[] = "Options";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_character[] = "character";
static const char __pyx_k_decode_io[] = "decode_io";
static const char __pyx_k_encode_io[] = "encode_io";
static const char __pyx_k_intformat[] = "intformat";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_iso8859_1[] = "iso8859-1";
static const char __pyx_k_isoformat[] = "isoformat";
static const char __pyx_k_latin_1_2[] = "latin-1";
static const char __pyx_k_lookahead[] = "lookahead";
static const char __pyx_k_remaining[] = "remaining";
static const char __pyx_k_type_data[] = "type(data) == ";
static const char __pyx_k_Expected_U[] = "Expected U+";
static const char __pyx_k_Infinity_2[] = "-Infinity";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_iso_8859_1[] = "iso-8859-1";
static const char __pyx_k_options_kw[] = "options_kw";
static const char __pyx_k_type_value[] = "type(value)==";
static const char __pyx_k_wordlength[] = "wordlength";
static const char __pyx_k_decode_utf8[] = "decode_utf8";
static const char __pyx_k_encode_noop[] = "encode_noop";
static const char __pyx_k_neginfinity[] = "neginfinity";
static const char __pyx_k_posinfinity[] = "posinfinity";
static const char __pyx_k_Extra_data_U[] = "Extra data U+";
static const char __pyx_k_encode_bytes[] = "encode_bytes";
static const char __pyx_k_fp_is_closed[] = "fp is closed";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_mappingtypes[] = "mappingtypes";
static const char __pyx_k_supply_bytes[] = "supply_bytes";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_decimalformat[] = "decimalformat";
static const char __pyx_k_decode_buffer[] = "decode_buffer";
static const char __pyx_k_decode_latin1[] = "decode_latin1";
static const char __pyx_k_not_supported[] = " not supported";
static const char __pyx_k_quotationmark[] = "quotationmark";
static const char __pyx_k_starting_near[] = " starting near ";
static const char __pyx_k_Json5Exception[] = "Json5Exception";
static const char __pyx_k_Json5ExtraData[] = "Json5ExtraData";
static const char __pyx_k_Options_update[] = "Options.update";
static const char __pyx_k_RecursionError[] = "RecursionError";
static const char __pyx_k_UnpickleOptions[] = "_UnpickleOptions";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_decode_callback[] = "decode_callback";
static const char __pyx_k_encode_callback[] = "encode_callback";
static const char __pyx_k_is_not_callable[] = " is not callable";
static const char __pyx_k_src__legacy_pyx[] = "src/_legacy.pyx";
static const char __pyx_k_unstringifiable[] = "unstringifiable";
static const char __pyx_k_DecoderException[] = "_DecoderException";
static const char __pyx_k_Json5IllegalType[] = "Json5IllegalType";
static const char __pyx_k_Options___reduce[] = "Options.__reduce__";
static const char __pyx_k_src__exports_pyx[] = "src/_exports.pyx";
static const char __pyx_k_MIT_OR_Apache_2_0[] = "MIT OR Apache-2.0";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_fp_is_not_readable[] = "fp is not readable";
static const char __pyx_k_fp_is_not_writable[] = "fp is not writable";
static const char __pyx_k_Expected_ASCII_data[] = "Expected ASCII data";
static const char __pyx_k_Json5NestingTooDeep[] = "Json5NestingTooDeep";
static const char __pyx_k_Json5DecoderException[] = "Json5DecoderException";
static const char __pyx_k_Json5EncoderException[] = "Json5EncoderException";
static const char __pyx_k_Json5IllegalCharacter[] = "Json5IllegalCharacter";
static const char __pyx_k_Lost_unframed_data_near[] = "Lost unframed data near ";
static const char __pyx_k_No_JSON_data_found_near[] = "No JSON data found near ";
static const char __pyx_k_Json5UnstringifiableType[] = "Json5UnstringifiableType";
static const char __pyx_k_is_not_IOBase_compatible[] = " is not IOBase compatible";
static const char __pyx_k_src__encoder_options_pyx[] = "src/_encoder_options.pyx";
static const char __pyx_k_DEFAULT_MAX_NESTING_LEVEL[] = "DEFAULT_MAX_NESTING_LEVEL";
static const char __pyx_k_Unstringifiable_type_data[] = "Unstringifiable type(data)=";
static const char __pyx_k_not_in_int_str_bytes_near[] = " not in (int, str, bytes) near ";
static const char __pyx_k_or_the_value_is_not_valid[] = " or the value is not valid.";
static const char __pyx_k_Expected_str_instance_or_False[] = "Expected str instance or False";
static const char __pyx_k_2018_2025_Ren_Kijewski_pypi_org[] = "2018-2025 Ren\303\251 Kijewski <pypi.org@k6i.de>";
static const char __pyx_k_mappingtypes_must_be_a_sequence[] = "mappingtypes must be a sequence of types or False";
static const char __pyx_k_quotationmark_must_be_one_ASCII[] = "quotationmark must be one ASCII character.";
static const char __pyx_k_wordlength_must_be_1_2_or_4_not[] = "wordlength must be 1, 2 or 4, not ";
static const char __pyx_k_Maximum_nesting_level_exceeded_n[] = "Maximum nesting level exceeded near ";
/* #### Code section: decls ### */
static int __pyx_pf_7pyjson5_14Json5Exception___init__(struct __pyx_obj_7pyjson5_Json5Exception *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_14Json5Exception_7message___get__(struct __pyx_obj_7pyjson5_Json5Exception *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_21Json5DecoderException___init__(struct __pyx_obj_7pyjson5_Json5DecoderException *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_21Json5DecoderException_6result___get__(struct __pyx_obj_7pyjson5_Json5DecoderException *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_21Json5IllegalCharacter___init__(struct __pyx_obj_7pyjson5_Json5IllegalCharacter *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_character, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_21Json5IllegalCharacter_9character___get__(struct __pyx_obj_7pyjson5_Json5IllegalCharacter *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_14Json5ExtraData___init__(struct __pyx_obj_7pyjson5_Json5ExtraData *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_character, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_14Json5ExtraData_9character___get__(struct __pyx_obj_7pyjson5_Json5ExtraData *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_16Json5IllegalType___init__(struct __pyx_obj_7pyjson5_Json5IllegalType *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_value, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_16Json5IllegalType_5value___get__(struct __pyx_obj_7pyjson5_Json5IllegalType *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_17_DecoderException___cinit__(struct __pyx_obj_7pyjson5__DecoderException *__pyx_v_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_msg, PyObject *__pyx_v_extra, PyObject *__pyx_v_result); /* proto */
static int __pyx_pf_7pyjson5_24Json5UnstringifiableType___init__(struct __pyx_obj_7pyjson5_Json5UnstringifiableType *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_unstringifiable); /* proto */
static PyObject *__pyx_pf_7pyjson5_24Json5UnstringifiableType_15unstringifiable___get__(struct __pyx_obj_7pyjson5_Json5UnstringifiableType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options___reduce__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_2__repr__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_4__str__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static int __pyx_pf_7pyjson5_7Options_6__cinit__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self, PyObject *__pyx_v_quotationmark, PyObject *__pyx_v_tojson, CYTHON_UNUSED PyObject *__pyx_v_posinfinity, CYTHON_UNUSED PyObject *__pyx_v_neginfinity, CYTHON_UNUSED PyObject *__pyx_v_nan, CYTHON_UNUSED PyObject *__pyx_v_decimalformat, CYTHON_UNUSED PyObject *__pyx_v_intformat, PyObject *__pyx_v_mappingtypes); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_8update(struct __pyx_obj_7pyjson5_Options *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_13quotationmark___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_6tojson___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5_7Options_12mappingtypes___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyjson5__UnpickleOptions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_2decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some); /* proto */
static PyObject *__pyx_pf_7pyjson5_4decode_latin1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some); /* proto */
static PyObject *__pyx_pf_7pyjson5_6decode_utf8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some); /* proto */
static PyObject *__pyx_pf_7pyjson5_8decode_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some, PyObject *__pyx_v_wordlength); /* proto */
static PyObject *__pyx_pf_7pyjson5_10decode_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cb, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7pyjson5_12decode_io(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some); /* proto */
static PyObject *__pyx_pf_7pyjson5_14encode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_16encode_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_18encode_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_cb, PyObject *__pyx_v_supply_bytes, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_20encode_io(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_fp, PyObject *__pyx_v_supply_bytes, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_22encode_noop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_24loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_encoding, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_26load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_28dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_pf_7pyjson5_30dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_fp, CYTHON_UNUSED PyObject *__pyx_v_kw); /* proto */
static PyObject *__pyx_tp_new_7pyjson5__DecoderException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pyjson5_Options(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_7pyjson5_Json5Exception;
  PyObject *__pyx_type_7pyjson5_Json5DecoderException;
  PyObject *__pyx_type_7pyjson5_Json5NestingTooDeep;
  PyObject *__pyx_type_7pyjson5_Json5EOF;
  PyObject *__pyx_type_7pyjson5_Json5IllegalCharacter;
  PyObject *__pyx_type_7pyjson5_Json5ExtraData;
  PyObject *__pyx_type_7pyjson5_Json5IllegalType;
  PyObject *__pyx_type_7pyjson5__DecoderException;
  PyObject *__pyx_type_7pyjson5_Json5EncoderException;
  PyObject *__pyx_type_7pyjson5_Json5UnstringifiableType;
  PyObject *__pyx_type_7pyjson5_Options;
  #endif
  PyTypeObject *__pyx_ptype_7pyjson5_Json5Exception;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5DecoderException;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5NestingTooDeep;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5EOF;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5IllegalCharacter;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5ExtraData;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5IllegalType;
  PyTypeObject *__pyx_ptype_7pyjson5__DecoderException;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5EncoderException;
  PyTypeObject *__pyx_ptype_7pyjson5_Json5UnstringifiableType;
  PyTypeObject *__pyx_ptype_7pyjson5_Options;
  PyObject *__pyx_kp_u_04X;
  PyObject *__pyx_kp_u_04x;
  PyObject *__pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org;
  PyObject *__pyx_kp_u_47_11;
  PyObject *__pyx_kp_u_646;
  PyObject *__pyx_kp_u_8859;
  PyObject *__pyx_n_s_DEFAULT_MAX_NESTING_LEVEL;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_n_s_DecoderException;
  PyObject *__pyx_kp_u_Expected;
  PyObject *__pyx_kp_u_Expected_ASCII_data;
  PyObject *__pyx_kp_u_Expected_U;
  PyObject *__pyx_kp_u_Expected_str_instance_or_False;
  PyObject *__pyx_kp_u_Extra_data_U;
  PyObject *__pyx_kp_u_False;
  PyObject *__pyx_n_s_IOBase;
  PyObject *__pyx_kp_u_Infinity;
  PyObject *__pyx_kp_u_Infinity_2;
  PyObject *__pyx_n_s_Json5DecoderException;
  PyObject *__pyx_n_u_Json5DecoderException;
  PyObject *__pyx_n_s_Json5EOF;
  PyObject *__pyx_n_u_Json5EOF;
  PyObject *__pyx_n_s_Json5EncoderException;
  PyObject *__pyx_n_u_Json5EncoderException;
  PyObject *__pyx_n_s_Json5Exception;
  PyObject *__pyx_n_u_Json5Exception;
  PyObject *__pyx_n_s_Json5ExtraData;
  PyObject *__pyx_n_u_Json5ExtraData;
  PyObject *__pyx_n_s_Json5IllegalCharacter;
  PyObject *__pyx_n_u_Json5IllegalCharacter;
  PyObject *__pyx_n_s_Json5IllegalType;
  PyObject *__pyx_n_u_Json5IllegalType;
  PyObject *__pyx_n_s_Json5NestingTooDeep;
  PyObject *__pyx_n_u_Json5NestingTooDeep;
  PyObject *__pyx_n_s_Json5UnstringifiableType;
  PyObject *__pyx_n_u_Json5UnstringifiableType;
  PyObject *__pyx_kp_u_Lost_unframed_data_near;
  PyObject *__pyx_kp_u_MIT_OR_Apache_2_0;
  PyObject *__pyx_n_s_Mapping;
  PyObject *__pyx_kp_u_Maximum_nesting_level_exceeded_n;
  PyObject *__pyx_kp_u_NaN;
  PyObject *__pyx_kp_u_NaN_2;
  PyObject *__pyx_kp_u_No_JSON_data_found_near;
  PyObject *__pyx_kp_u_Options;
  PyObject *__pyx_n_s_Options_2;
  PyObject *__pyx_n_u_Options_2;
  PyObject *__pyx_n_s_Options___reduce;
  PyObject *__pyx_n_s_Options_update;
  PyObject *__pyx_n_s_RecursionError;
  PyObject *__pyx_kp_u_Stray;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_UTF_8;
  PyObject *__pyx_kp_u_Unclosed;
  PyObject *__pyx_n_s_UnpickleOptions;
  PyObject *__pyx_kp_u_Unstringifiable_type_data;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__13;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_kp_u__17;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_b__5;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_append_c;
  PyObject *__pyx_n_s_append_s;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_u_ascii;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_author;
  PyObject *__pyx_n_s_base;
  PyObject *__pyx_n_u_c;
  PyObject *__pyx_n_s_callback;
  PyObject *__pyx_n_s_cb;
  PyObject *__pyx_n_s_character;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_closed;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_collections_abc;
  PyObject *__pyx_n_u_cp819;
  PyObject *__pyx_kp_u_d;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_date;
  PyObject *__pyx_n_s_datetime;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_decimalformat;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_u_decode;
  PyObject *__pyx_n_s_decode_buffer;
  PyObject *__pyx_n_u_decode_buffer;
  PyObject *__pyx_n_s_decode_callback;
  PyObject *__pyx_n_u_decode_callback;
  PyObject *__pyx_n_s_decode_io;
  PyObject *__pyx_n_u_decode_io;
  PyObject *__pyx_n_s_decode_latin1;
  PyObject *__pyx_n_u_decode_latin1;
  PyObject *__pyx_n_s_decode_utf8;
  PyObject *__pyx_n_u_decode_utf8;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_dump;
  PyObject *__pyx_n_u_dump;
  PyObject *__pyx_n_s_dumps;
  PyObject *__pyx_n_u_dumps;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_u_encode;
  PyObject *__pyx_n_s_encode_bytes;
  PyObject *__pyx_n_u_encode_bytes;
  PyObject *__pyx_n_s_encode_callback;
  PyObject *__pyx_n_u_encode_callback;
  PyObject *__pyx_n_s_encode_io;
  PyObject *__pyx_n_u_encode_io;
  PyObject *__pyx_n_s_encode_noop;
  PyObject *__pyx_n_u_encode_noop;
  PyObject *__pyx_n_s_encoder;
  PyObject *__pyx_n_s_encoding;
  PyObject *__pyx_n_s_extra;
  PyObject *__pyx_n_s_filter;
  PyObject *__pyx_kp_u_found_U;
  PyObject *__pyx_n_s_fp;
  PyObject *__pyx_kp_u_fp_is_closed;
  PyObject *__pyx_kp_u_fp_is_not_readable;
  PyObject *__pyx_kp_u_fp_is_not_writable;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_intformat;
  PyObject *__pyx_n_s_io;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_is_not_IOBase_compatible;
  PyObject *__pyx_kp_u_is_not_callable;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_kp_u_iso8859_1;
  PyObject *__pyx_kp_u_iso_8859_1;
  PyObject *__pyx_n_s_isoformat;
  PyObject *__pyx_n_s_kw;
  PyObject *__pyx_n_u_l1;
  PyObject *__pyx_n_u_latin;
  PyObject *__pyx_n_u_latin1;
  PyObject *__pyx_n_u_latin_1;
  PyObject *__pyx_kp_u_latin_1_2;
  PyObject *__pyx_n_s_length;
  PyObject *__pyx_n_s_license;
  PyObject *__pyx_n_s_load;
  PyObject *__pyx_n_u_load;
  PyObject *__pyx_n_s_loads;
  PyObject *__pyx_n_u_loads;
  PyObject *__pyx_n_s_lookahead;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_mappingtypes;
  PyObject *__pyx_n_u_mappingtypes;
  PyObject *__pyx_kp_u_mappingtypes_must_be_a_sequence;
  PyObject *__pyx_n_s_maxdepth;
  PyObject *__pyx_n_s_message;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nan;
  PyObject *__pyx_kp_u_near;
  PyObject *__pyx_n_s_neginfinity;
  PyObject *__pyx_kp_u_not_in_int_str_bytes_near;
  PyObject *__pyx_kp_u_not_supported;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_options;
  PyObject *__pyx_n_s_options_kw;
  PyObject *__pyx_n_s_opts;
  PyObject *__pyx_kp_u_or_U;
  PyObject *__pyx_kp_u_or_the_value_is_not_valid;
  PyObject *__pyx_n_s_posinfinity;
  PyObject *__pyx_n_s_position;
  PyObject *__pyx_n_s_pprint;
  PyObject *__pyx_n_s_pyjson5;
  PyObject *__pyx_n_s_quotationmark;
  PyObject *__pyx_n_u_quotationmark;
  PyObject *__pyx_kp_u_quotationmark_must_be_one_ASCII;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_readable;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_remaining;
  PyObject *__pyx_n_s_repr;
  PyObject *__pyx_n_s_reserve;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_kp_u_s_2;
  PyObject *__pyx_n_s_saferepr;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_some;
  PyObject *__pyx_kp_s_src__encoder_options_pyx;
  PyObject *__pyx_kp_s_src__exports_pyx;
  PyObject *__pyx_kp_s_src__legacy_pyx;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_kp_u_starting_near;
  PyObject *__pyx_n_u_strict;
  PyObject *__pyx_n_s_string;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_supply_bytes;
  PyObject *__pyx_n_s_temp;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_s_tojson;
  PyObject *__pyx_n_u_tojson;
  PyObject *__pyx_kp_u_type_cb;
  PyObject *__pyx_kp_u_type_data;
  PyObject *__pyx_kp_u_type_fp;
  PyObject *__pyx_kp_u_type_value;
  PyObject *__pyx_n_s_unstringifiable;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_kp_u_us_ascii;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_version;
  PyObject *__pyx_n_s_view;
  PyObject *__pyx_n_s_wordlength;
  PyObject *__pyx_kp_u_wordlength_must_be_1_2_or_4_not;
  PyObject *__pyx_n_s_writable;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_writer;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_47_11;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_32;
  PyObject *__pyx_int_646;
  PyObject *__pyx_int_4711;
  PyObject *__pyx_int_8859;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5Exception);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5Exception);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5DecoderException);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5DecoderException);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5NestingTooDeep);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5NestingTooDeep);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5EOF);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5EOF);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5IllegalCharacter);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5IllegalCharacter);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5ExtraData);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5ExtraData);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5IllegalType);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5IllegalType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5__DecoderException);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5__DecoderException);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5EncoderException);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5EncoderException);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Json5UnstringifiableType);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Json5UnstringifiableType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyjson5_Options);
  Py_CLEAR(clear_module_state->__pyx_type_7pyjson5_Options);
  Py_CLEAR(clear_module_state->__pyx_kp_u_04X);
  Py_CLEAR(clear_module_state->__pyx_kp_u_04x);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org);
  Py_CLEAR(clear_module_state->__pyx_kp_u_47_11);
  Py_CLEAR(clear_module_state->__pyx_kp_u_646);
  Py_CLEAR(clear_module_state->__pyx_kp_u_8859);
  Py_CLEAR(clear_module_state->__pyx_n_s_DEFAULT_MAX_NESTING_LEVEL);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_DecoderException);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_ASCII_data);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_U);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_str_instance_or_False);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Extra_data_U);
  Py_CLEAR(clear_module_state->__pyx_kp_u_False);
  Py_CLEAR(clear_module_state->__pyx_n_s_IOBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Infinity);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Infinity_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5DecoderException);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5DecoderException);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5EOF);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5EOF);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5EncoderException);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5EncoderException);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5Exception);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5Exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5ExtraData);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5ExtraData);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5IllegalCharacter);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5IllegalCharacter);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5IllegalType);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5IllegalType);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5NestingTooDeep);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5NestingTooDeep);
  Py_CLEAR(clear_module_state->__pyx_n_s_Json5UnstringifiableType);
  Py_CLEAR(clear_module_state->__pyx_n_u_Json5UnstringifiableType);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Lost_unframed_data_near);
  Py_CLEAR(clear_module_state->__pyx_kp_u_MIT_OR_Apache_2_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Mapping);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maximum_nesting_level_exceeded_n);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NaN);
  Py_CLEAR(clear_module_state->__pyx_kp_u_NaN_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_JSON_data_found_near);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Options);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_Options_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_Options_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_RecursionError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Stray);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_UTF_8);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unclosed);
  Py_CLEAR(clear_module_state->__pyx_n_s_UnpickleOptions);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unstringifiable_type_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__13);
  Py_CLEAR(clear_module_state->__pyx_kp_u__14);
  Py_CLEAR(clear_module_state->__pyx_kp_u__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_kp_b__5);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_append_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_append_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_u_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_author);
  Py_CLEAR(clear_module_state->__pyx_n_s_base);
  Py_CLEAR(clear_module_state->__pyx_n_u_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cb);
  Py_CLEAR(clear_module_state->__pyx_n_s_character);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_n_u_cp819);
  Py_CLEAR(clear_module_state->__pyx_kp_u_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_date);
  Py_CLEAR(clear_module_state->__pyx_n_s_datetime);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimalformat);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode_buffer);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode_buffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode_callback);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode_io);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode_io);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode_latin1);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode_latin1);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode_utf8);
  Py_CLEAR(clear_module_state->__pyx_n_u_decode_utf8);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dump);
  Py_CLEAR(clear_module_state->__pyx_n_u_dump);
  Py_CLEAR(clear_module_state->__pyx_n_s_dumps);
  Py_CLEAR(clear_module_state->__pyx_n_u_dumps);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_u_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_u_encode_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode_callback);
  Py_CLEAR(clear_module_state->__pyx_n_u_encode_callback);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode_io);
  Py_CLEAR(clear_module_state->__pyx_n_u_encode_io);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode_noop);
  Py_CLEAR(clear_module_state->__pyx_n_u_encode_noop);
  Py_CLEAR(clear_module_state->__pyx_n_s_encoder);
  Py_CLEAR(clear_module_state->__pyx_n_s_encoding);
  Py_CLEAR(clear_module_state->__pyx_n_s_extra);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter);
  Py_CLEAR(clear_module_state->__pyx_kp_u_found_U);
  Py_CLEAR(clear_module_state->__pyx_n_s_fp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_fp_is_closed);
  Py_CLEAR(clear_module_state->__pyx_kp_u_fp_is_not_readable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_fp_is_not_writable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_intformat);
  Py_CLEAR(clear_module_state->__pyx_n_s_io);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_IOBase_compatible);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_callable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_kp_u_iso8859_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_iso_8859_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_isoformat);
  Py_CLEAR(clear_module_state->__pyx_n_s_kw);
  Py_CLEAR(clear_module_state->__pyx_n_u_l1);
  Py_CLEAR(clear_module_state->__pyx_n_u_latin);
  Py_CLEAR(clear_module_state->__pyx_n_u_latin1);
  Py_CLEAR(clear_module_state->__pyx_n_u_latin_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_latin_1_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_license);
  Py_CLEAR(clear_module_state->__pyx_n_s_load);
  Py_CLEAR(clear_module_state->__pyx_n_u_load);
  Py_CLEAR(clear_module_state->__pyx_n_s_loads);
  Py_CLEAR(clear_module_state->__pyx_n_u_loads);
  Py_CLEAR(clear_module_state->__pyx_n_s_lookahead);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_mappingtypes);
  Py_CLEAR(clear_module_state->__pyx_n_u_mappingtypes);
  Py_CLEAR(clear_module_state->__pyx_kp_u_mappingtypes_must_be_a_sequence);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxdepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_message);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nan);
  Py_CLEAR(clear_module_state->__pyx_kp_u_near);
  Py_CLEAR(clear_module_state->__pyx_n_s_neginfinity);
  Py_CLEAR(clear_module_state->__pyx_kp_u_not_in_int_str_bytes_near);
  Py_CLEAR(clear_module_state->__pyx_kp_u_not_supported);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_options_kw);
  Py_CLEAR(clear_module_state->__pyx_n_s_opts);
  Py_CLEAR(clear_module_state->__pyx_kp_u_or_U);
  Py_CLEAR(clear_module_state->__pyx_kp_u_or_the_value_is_not_valid);
  Py_CLEAR(clear_module_state->__pyx_n_s_posinfinity);
  Py_CLEAR(clear_module_state->__pyx_n_s_position);
  Py_CLEAR(clear_module_state->__pyx_n_s_pprint);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyjson5);
  Py_CLEAR(clear_module_state->__pyx_n_s_quotationmark);
  Py_CLEAR(clear_module_state->__pyx_n_u_quotationmark);
  Py_CLEAR(clear_module_state->__pyx_kp_u_quotationmark_must_be_one_ASCII);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_readable);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_remaining);
  Py_CLEAR(clear_module_state->__pyx_n_s_repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_reserve);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_s_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_saferepr);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_some);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src__encoder_options_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src__exports_pyx);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src__legacy_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_kp_u_starting_near);
  Py_CLEAR(clear_module_state->__pyx_n_u_strict);
  Py_CLEAR(clear_module_state->__pyx_n_s_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_supply_bytes);
  Py_CLEAR(clear_module_state->__pyx_n_s_temp);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_tojson);
  Py_CLEAR(clear_module_state->__pyx_n_u_tojson);
  Py_CLEAR(clear_module_state->__pyx_kp_u_type_cb);
  Py_CLEAR(clear_module_state->__pyx_kp_u_type_data);
  Py_CLEAR(clear_module_state->__pyx_kp_u_type_fp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_type_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_unstringifiable);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_kp_u_us_ascii);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_view);
  Py_CLEAR(clear_module_state->__pyx_n_s_wordlength);
  Py_CLEAR(clear_module_state->__pyx_kp_u_wordlength_must_be_1_2_or_4_not);
  Py_CLEAR(clear_module_state->__pyx_n_s_writable);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_writer);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_47_11);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_32);
  Py_CLEAR(clear_module_state->__pyx_int_646);
  Py_CLEAR(clear_module_state->__pyx_int_4711);
  Py_CLEAR(clear_module_state->__pyx_int_8859);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5Exception);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5Exception);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5DecoderException);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5DecoderException);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5NestingTooDeep);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5NestingTooDeep);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5EOF);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5EOF);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5IllegalCharacter);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5IllegalCharacter);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5ExtraData);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5ExtraData);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5IllegalType);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5IllegalType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5__DecoderException);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5__DecoderException);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5EncoderException);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5EncoderException);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Json5UnstringifiableType);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Json5UnstringifiableType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyjson5_Options);
  Py_VISIT(traverse_module_state->__pyx_type_7pyjson5_Options);
  Py_VISIT(traverse_module_state->__pyx_kp_u_04X);
  Py_VISIT(traverse_module_state->__pyx_kp_u_04x);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org);
  Py_VISIT(traverse_module_state->__pyx_kp_u_47_11);
  Py_VISIT(traverse_module_state->__pyx_kp_u_646);
  Py_VISIT(traverse_module_state->__pyx_kp_u_8859);
  Py_VISIT(traverse_module_state->__pyx_n_s_DEFAULT_MAX_NESTING_LEVEL);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_DecoderException);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_ASCII_data);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_U);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_str_instance_or_False);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Extra_data_U);
  Py_VISIT(traverse_module_state->__pyx_kp_u_False);
  Py_VISIT(traverse_module_state->__pyx_n_s_IOBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Infinity);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Infinity_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5DecoderException);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5DecoderException);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5EOF);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5EOF);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5EncoderException);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5EncoderException);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5Exception);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5Exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5ExtraData);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5ExtraData);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5IllegalCharacter);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5IllegalCharacter);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5IllegalType);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5IllegalType);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5NestingTooDeep);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5NestingTooDeep);
  Py_VISIT(traverse_module_state->__pyx_n_s_Json5UnstringifiableType);
  Py_VISIT(traverse_module_state->__pyx_n_u_Json5UnstringifiableType);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Lost_unframed_data_near);
  Py_VISIT(traverse_module_state->__pyx_kp_u_MIT_OR_Apache_2_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Mapping);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maximum_nesting_level_exceeded_n);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NaN);
  Py_VISIT(traverse_module_state->__pyx_kp_u_NaN_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_JSON_data_found_near);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Options);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_Options_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_Options_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_RecursionError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Stray);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_UTF_8);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unclosed);
  Py_VISIT(traverse_module_state->__pyx_n_s_UnpickleOptions);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unstringifiable_type_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__13);
  Py_VISIT(traverse_module_state->__pyx_kp_u__14);
  Py_VISIT(traverse_module_state->__pyx_kp_u__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_kp_b__5);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_append_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_append_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_u_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_author);
  Py_VISIT(traverse_module_state->__pyx_n_s_base);
  Py_VISIT(traverse_module_state->__pyx_n_u_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cb);
  Py_VISIT(traverse_module_state->__pyx_n_s_character);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_n_u_cp819);
  Py_VISIT(traverse_module_state->__pyx_kp_u_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_date);
  Py_VISIT(traverse_module_state->__pyx_n_s_datetime);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimalformat);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode_buffer);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode_buffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode_callback);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode_io);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode_io);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode_latin1);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode_latin1);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode_utf8);
  Py_VISIT(traverse_module_state->__pyx_n_u_decode_utf8);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dump);
  Py_VISIT(traverse_module_state->__pyx_n_u_dump);
  Py_VISIT(traverse_module_state->__pyx_n_s_dumps);
  Py_VISIT(traverse_module_state->__pyx_n_u_dumps);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_u_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_u_encode_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode_callback);
  Py_VISIT(traverse_module_state->__pyx_n_u_encode_callback);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode_io);
  Py_VISIT(traverse_module_state->__pyx_n_u_encode_io);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode_noop);
  Py_VISIT(traverse_module_state->__pyx_n_u_encode_noop);
  Py_VISIT(traverse_module_state->__pyx_n_s_encoder);
  Py_VISIT(traverse_module_state->__pyx_n_s_encoding);
  Py_VISIT(traverse_module_state->__pyx_n_s_extra);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter);
  Py_VISIT(traverse_module_state->__pyx_kp_u_found_U);
  Py_VISIT(traverse_module_state->__pyx_n_s_fp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_fp_is_closed);
  Py_VISIT(traverse_module_state->__pyx_kp_u_fp_is_not_readable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_fp_is_not_writable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_intformat);
  Py_VISIT(traverse_module_state->__pyx_n_s_io);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_IOBase_compatible);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_callable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_kp_u_iso8859_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_iso_8859_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_isoformat);
  Py_VISIT(traverse_module_state->__pyx_n_s_kw);
  Py_VISIT(traverse_module_state->__pyx_n_u_l1);
  Py_VISIT(traverse_module_state->__pyx_n_u_latin);
  Py_VISIT(traverse_module_state->__pyx_n_u_latin1);
  Py_VISIT(traverse_module_state->__pyx_n_u_latin_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_latin_1_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_license);
  Py_VISIT(traverse_module_state->__pyx_n_s_load);
  Py_VISIT(traverse_module_state->__pyx_n_u_load);
  Py_VISIT(traverse_module_state->__pyx_n_s_loads);
  Py_VISIT(traverse_module_state->__pyx_n_u_loads);
  Py_VISIT(traverse_module_state->__pyx_n_s_lookahead);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_mappingtypes);
  Py_VISIT(traverse_module_state->__pyx_n_u_mappingtypes);
  Py_VISIT(traverse_module_state->__pyx_kp_u_mappingtypes_must_be_a_sequence);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxdepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_message);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nan);
  Py_VISIT(traverse_module_state->__pyx_kp_u_near);
  Py_VISIT(traverse_module_state->__pyx_n_s_neginfinity);
  Py_VISIT(traverse_module_state->__pyx_kp_u_not_in_int_str_bytes_near);
  Py_VISIT(traverse_module_state->__pyx_kp_u_not_supported);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_options_kw);
  Py_VISIT(traverse_module_state->__pyx_n_s_opts);
  Py_VISIT(traverse_module_state->__pyx_kp_u_or_U);
  Py_VISIT(traverse_module_state->__pyx_kp_u_or_the_value_is_not_valid);
  Py_VISIT(traverse_module_state->__pyx_n_s_posinfinity);
  Py_VISIT(traverse_module_state->__pyx_n_s_position);
  Py_VISIT(traverse_module_state->__pyx_n_s_pprint);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyjson5);
  Py_VISIT(traverse_module_state->__pyx_n_s_quotationmark);
  Py_VISIT(traverse_module_state->__pyx_n_u_quotationmark);
  Py_VISIT(traverse_module_state->__pyx_kp_u_quotationmark_must_be_one_ASCII);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_readable);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_remaining);
  Py_VISIT(traverse_module_state->__pyx_n_s_repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_reserve);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_s_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_saferepr);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_some);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src__encoder_options_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src__exports_pyx);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src__legacy_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_kp_u_starting_near);
  Py_VISIT(traverse_module_state->__pyx_n_u_strict);
  Py_VISIT(traverse_module_state->__pyx_n_s_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_supply_bytes);
  Py_VISIT(traverse_module_state->__pyx_n_s_temp);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_tojson);
  Py_VISIT(traverse_module_state->__pyx_n_u_tojson);
  Py_VISIT(traverse_module_state->__pyx_kp_u_type_cb);
  Py_VISIT(traverse_module_state->__pyx_kp_u_type_data);
  Py_VISIT(traverse_module_state->__pyx_kp_u_type_fp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_type_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_unstringifiable);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_kp_u_us_ascii);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_view);
  Py_VISIT(traverse_module_state->__pyx_n_s_wordlength);
  Py_VISIT(traverse_module_state->__pyx_kp_u_wordlength_must_be_1_2_or_4_not);
  Py_VISIT(traverse_module_state->__pyx_n_s_writable);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_writer);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_47_11);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_32);
  Py_VISIT(traverse_module_state->__pyx_int_646);
  Py_VISIT(traverse_module_state->__pyx_int_4711);
  Py_VISIT(traverse_module_state->__pyx_int_8859);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_7pyjson5_Json5Exception __pyx_mstate_global->__pyx_type_7pyjson5_Json5Exception
#define __pyx_type_7pyjson5_Json5DecoderException __pyx_mstate_global->__pyx_type_7pyjson5_Json5DecoderException
#define __pyx_type_7pyjson5_Json5NestingTooDeep __pyx_mstate_global->__pyx_type_7pyjson5_Json5NestingTooDeep
#define __pyx_type_7pyjson5_Json5EOF __pyx_mstate_global->__pyx_type_7pyjson5_Json5EOF
#define __pyx_type_7pyjson5_Json5IllegalCharacter __pyx_mstate_global->__pyx_type_7pyjson5_Json5IllegalCharacter
#define __pyx_type_7pyjson5_Json5ExtraData __pyx_mstate_global->__pyx_type_7pyjson5_Json5ExtraData
#define __pyx_type_7pyjson5_Json5IllegalType __pyx_mstate_global->__pyx_type_7pyjson5_Json5IllegalType
#define __pyx_type_7pyjson5__DecoderException __pyx_mstate_global->__pyx_type_7pyjson5__DecoderException
#define __pyx_type_7pyjson5_Json5EncoderException __pyx_mstate_global->__pyx_type_7pyjson5_Json5EncoderException
#define __pyx_type_7pyjson5_Json5UnstringifiableType __pyx_mstate_global->__pyx_type_7pyjson5_Json5UnstringifiableType
#define __pyx_type_7pyjson5_Options __pyx_mstate_global->__pyx_type_7pyjson5_Options
#endif
#define __pyx_ptype_7pyjson5_Json5Exception __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5Exception
#define __pyx_ptype_7pyjson5_Json5DecoderException __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5DecoderException
#define __pyx_ptype_7pyjson5_Json5NestingTooDeep __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5NestingTooDeep
#define __pyx_ptype_7pyjson5_Json5EOF __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5EOF
#define __pyx_ptype_7pyjson5_Json5IllegalCharacter __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5IllegalCharacter
#define __pyx_ptype_7pyjson5_Json5ExtraData __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5ExtraData
#define __pyx_ptype_7pyjson5_Json5IllegalType __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5IllegalType
#define __pyx_ptype_7pyjson5__DecoderException __pyx_mstate_global->__pyx_ptype_7pyjson5__DecoderException
#define __pyx_ptype_7pyjson5_Json5EncoderException __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5EncoderException
#define __pyx_ptype_7pyjson5_Json5UnstringifiableType __pyx_mstate_global->__pyx_ptype_7pyjson5_Json5UnstringifiableType
#define __pyx_ptype_7pyjson5_Options __pyx_mstate_global->__pyx_ptype_7pyjson5_Options
#define __pyx_kp_u_04X __pyx_mstate_global->__pyx_kp_u_04X
#define __pyx_kp_u_04x __pyx_mstate_global->__pyx_kp_u_04x
#define __pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org __pyx_mstate_global->__pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org
#define __pyx_kp_u_47_11 __pyx_mstate_global->__pyx_kp_u_47_11
#define __pyx_kp_u_646 __pyx_mstate_global->__pyx_kp_u_646
#define __pyx_kp_u_8859 __pyx_mstate_global->__pyx_kp_u_8859
#define __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL __pyx_mstate_global->__pyx_n_s_DEFAULT_MAX_NESTING_LEVEL
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_n_s_DecoderException __pyx_mstate_global->__pyx_n_s_DecoderException
#define __pyx_kp_u_Expected __pyx_mstate_global->__pyx_kp_u_Expected
#define __pyx_kp_u_Expected_ASCII_data __pyx_mstate_global->__pyx_kp_u_Expected_ASCII_data
#define __pyx_kp_u_Expected_U __pyx_mstate_global->__pyx_kp_u_Expected_U
#define __pyx_kp_u_Expected_str_instance_or_False __pyx_mstate_global->__pyx_kp_u_Expected_str_instance_or_False
#define __pyx_kp_u_Extra_data_U __pyx_mstate_global->__pyx_kp_u_Extra_data_U
#define __pyx_kp_u_False __pyx_mstate_global->__pyx_kp_u_False
#define __pyx_n_s_IOBase __pyx_mstate_global->__pyx_n_s_IOBase
#define __pyx_kp_u_Infinity __pyx_mstate_global->__pyx_kp_u_Infinity
#define __pyx_kp_u_Infinity_2 __pyx_mstate_global->__pyx_kp_u_Infinity_2
#define __pyx_n_s_Json5DecoderException __pyx_mstate_global->__pyx_n_s_Json5DecoderException
#define __pyx_n_u_Json5DecoderException __pyx_mstate_global->__pyx_n_u_Json5DecoderException
#define __pyx_n_s_Json5EOF __pyx_mstate_global->__pyx_n_s_Json5EOF
#define __pyx_n_u_Json5EOF __pyx_mstate_global->__pyx_n_u_Json5EOF
#define __pyx_n_s_Json5EncoderException __pyx_mstate_global->__pyx_n_s_Json5EncoderException
#define __pyx_n_u_Json5EncoderException __pyx_mstate_global->__pyx_n_u_Json5EncoderException
#define __pyx_n_s_Json5Exception __pyx_mstate_global->__pyx_n_s_Json5Exception
#define __pyx_n_u_Json5Exception __pyx_mstate_global->__pyx_n_u_Json5Exception
#define __pyx_n_s_Json5ExtraData __pyx_mstate_global->__pyx_n_s_Json5ExtraData
#define __pyx_n_u_Json5ExtraData __pyx_mstate_global->__pyx_n_u_Json5ExtraData
#define __pyx_n_s_Json5IllegalCharacter __pyx_mstate_global->__pyx_n_s_Json5IllegalCharacter
#define __pyx_n_u_Json5IllegalCharacter __pyx_mstate_global->__pyx_n_u_Json5IllegalCharacter
#define __pyx_n_s_Json5IllegalType __pyx_mstate_global->__pyx_n_s_Json5IllegalType
#define __pyx_n_u_Json5IllegalType __pyx_mstate_global->__pyx_n_u_Json5IllegalType
#define __pyx_n_s_Json5NestingTooDeep __pyx_mstate_global->__pyx_n_s_Json5NestingTooDeep
#define __pyx_n_u_Json5NestingTooDeep __pyx_mstate_global->__pyx_n_u_Json5NestingTooDeep
#define __pyx_n_s_Json5UnstringifiableType __pyx_mstate_global->__pyx_n_s_Json5UnstringifiableType
#define __pyx_n_u_Json5UnstringifiableType __pyx_mstate_global->__pyx_n_u_Json5UnstringifiableType
#define __pyx_kp_u_Lost_unframed_data_near __pyx_mstate_global->__pyx_kp_u_Lost_unframed_data_near
#define __pyx_kp_u_MIT_OR_Apache_2_0 __pyx_mstate_global->__pyx_kp_u_MIT_OR_Apache_2_0
#define __pyx_n_s_Mapping __pyx_mstate_global->__pyx_n_s_Mapping
#define __pyx_kp_u_Maximum_nesting_level_exceeded_n __pyx_mstate_global->__pyx_kp_u_Maximum_nesting_level_exceeded_n
#define __pyx_kp_u_NaN __pyx_mstate_global->__pyx_kp_u_NaN
#define __pyx_kp_u_NaN_2 __pyx_mstate_global->__pyx_kp_u_NaN_2
#define __pyx_kp_u_No_JSON_data_found_near __pyx_mstate_global->__pyx_kp_u_No_JSON_data_found_near
#define __pyx_kp_u_Options __pyx_mstate_global->__pyx_kp_u_Options
#define __pyx_n_s_Options_2 __pyx_mstate_global->__pyx_n_s_Options_2
#define __pyx_n_u_Options_2 __pyx_mstate_global->__pyx_n_u_Options_2
#define __pyx_n_s_Options___reduce __pyx_mstate_global->__pyx_n_s_Options___reduce
#define __pyx_n_s_Options_update __pyx_mstate_global->__pyx_n_s_Options_update
#define __pyx_n_s_RecursionError __pyx_mstate_global->__pyx_n_s_RecursionError
#define __pyx_kp_u_Stray __pyx_mstate_global->__pyx_kp_u_Stray
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_UTF_8 __pyx_mstate_global->__pyx_kp_u_UTF_8
#define __pyx_kp_u_Unclosed __pyx_mstate_global->__pyx_kp_u_Unclosed
#define __pyx_n_s_UnpickleOptions __pyx_mstate_global->__pyx_n_s_UnpickleOptions
#define __pyx_kp_u_Unstringifiable_type_data __pyx_mstate_global->__pyx_kp_u_Unstringifiable_type_data
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__13 __pyx_mstate_global->__pyx_n_s__13
#define __pyx_kp_u__14 __pyx_mstate_global->__pyx_kp_u__14
#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_kp_b__5 __pyx_mstate_global->__pyx_kp_b__5
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_append_c __pyx_mstate_global->__pyx_n_s_append_c
#define __pyx_n_s_append_s __pyx_mstate_global->__pyx_n_s_append_s
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_u_ascii __pyx_mstate_global->__pyx_n_u_ascii
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_author __pyx_mstate_global->__pyx_n_s_author
#define __pyx_n_s_base __pyx_mstate_global->__pyx_n_s_base
#define __pyx_n_u_c __pyx_mstate_global->__pyx_n_u_c
#define __pyx_n_s_callback __pyx_mstate_global->__pyx_n_s_callback
#define __pyx_n_s_cb __pyx_mstate_global->__pyx_n_s_cb
#define __pyx_n_s_character __pyx_mstate_global->__pyx_n_s_character
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_closed __pyx_mstate_global->__pyx_n_s_closed
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_collections_abc __pyx_mstate_global->__pyx_n_s_collections_abc
#define __pyx_n_u_cp819 __pyx_mstate_global->__pyx_n_u_cp819
#define __pyx_kp_u_d __pyx_mstate_global->__pyx_kp_u_d
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_date __pyx_mstate_global->__pyx_n_s_date
#define __pyx_n_s_datetime __pyx_mstate_global->__pyx_n_s_datetime
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_decimalformat __pyx_mstate_global->__pyx_n_s_decimalformat
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_u_decode __pyx_mstate_global->__pyx_n_u_decode
#define __pyx_n_s_decode_buffer __pyx_mstate_global->__pyx_n_s_decode_buffer
#define __pyx_n_u_decode_buffer __pyx_mstate_global->__pyx_n_u_decode_buffer
#define __pyx_n_s_decode_callback __pyx_mstate_global->__pyx_n_s_decode_callback
#define __pyx_n_u_decode_callback __pyx_mstate_global->__pyx_n_u_decode_callback
#define __pyx_n_s_decode_io __pyx_mstate_global->__pyx_n_s_decode_io
#define __pyx_n_u_decode_io __pyx_mstate_global->__pyx_n_u_decode_io
#define __pyx_n_s_decode_latin1 __pyx_mstate_global->__pyx_n_s_decode_latin1
#define __pyx_n_u_decode_latin1 __pyx_mstate_global->__pyx_n_u_decode_latin1
#define __pyx_n_s_decode_utf8 __pyx_mstate_global->__pyx_n_s_decode_utf8
#define __pyx_n_u_decode_utf8 __pyx_mstate_global->__pyx_n_u_decode_utf8
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_dump __pyx_mstate_global->__pyx_n_s_dump
#define __pyx_n_u_dump __pyx_mstate_global->__pyx_n_u_dump
#define __pyx_n_s_dumps __pyx_mstate_global->__pyx_n_s_dumps
#define __pyx_n_u_dumps __pyx_mstate_global->__pyx_n_u_dumps
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_u_encode __pyx_mstate_global->__pyx_n_u_encode
#define __pyx_n_s_encode_bytes __pyx_mstate_global->__pyx_n_s_encode_bytes
#define __pyx_n_u_encode_bytes __pyx_mstate_global->__pyx_n_u_encode_bytes
#define __pyx_n_s_encode_callback __pyx_mstate_global->__pyx_n_s_encode_callback
#define __pyx_n_u_encode_callback __pyx_mstate_global->__pyx_n_u_encode_callback
#define __pyx_n_s_encode_io __pyx_mstate_global->__pyx_n_s_encode_io
#define __pyx_n_u_encode_io __pyx_mstate_global->__pyx_n_u_encode_io
#define __pyx_n_s_encode_noop __pyx_mstate_global->__pyx_n_s_encode_noop
#define __pyx_n_u_encode_noop __pyx_mstate_global->__pyx_n_u_encode_noop
#define __pyx_n_s_encoder __pyx_mstate_global->__pyx_n_s_encoder
#define __pyx_n_s_encoding __pyx_mstate_global->__pyx_n_s_encoding
#define __pyx_n_s_extra __pyx_mstate_global->__pyx_n_s_extra
#define __pyx_n_s_filter __pyx_mstate_global->__pyx_n_s_filter
#define __pyx_kp_u_found_U __pyx_mstate_global->__pyx_kp_u_found_U
#define __pyx_n_s_fp __pyx_mstate_global->__pyx_n_s_fp
#define __pyx_kp_u_fp_is_closed __pyx_mstate_global->__pyx_kp_u_fp_is_closed
#define __pyx_kp_u_fp_is_not_readable __pyx_mstate_global->__pyx_kp_u_fp_is_not_readable
#define __pyx_kp_u_fp_is_not_writable __pyx_mstate_global->__pyx_kp_u_fp_is_not_writable
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_intformat __pyx_mstate_global->__pyx_n_s_intformat
#define __pyx_n_s_io __pyx_mstate_global->__pyx_n_s_io
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_is_not_IOBase_compatible __pyx_mstate_global->__pyx_kp_u_is_not_IOBase_compatible
#define __pyx_kp_u_is_not_callable __pyx_mstate_global->__pyx_kp_u_is_not_callable
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_kp_u_iso8859_1 __pyx_mstate_global->__pyx_kp_u_iso8859_1
#define __pyx_kp_u_iso_8859_1 __pyx_mstate_global->__pyx_kp_u_iso_8859_1
#define __pyx_n_s_isoformat __pyx_mstate_global->__pyx_n_s_isoformat
#define __pyx_n_s_kw __pyx_mstate_global->__pyx_n_s_kw
#define __pyx_n_u_l1 __pyx_mstate_global->__pyx_n_u_l1
#define __pyx_n_u_latin __pyx_mstate_global->__pyx_n_u_latin
#define __pyx_n_u_latin1 __pyx_mstate_global->__pyx_n_u_latin1
#define __pyx_n_u_latin_1 __pyx_mstate_global->__pyx_n_u_latin_1
#define __pyx_kp_u_latin_1_2 __pyx_mstate_global->__pyx_kp_u_latin_1_2
#define __pyx_n_s_length __pyx_mstate_global->__pyx_n_s_length
#define __pyx_n_s_license __pyx_mstate_global->__pyx_n_s_license
#define __pyx_n_s_load __pyx_mstate_global->__pyx_n_s_load
#define __pyx_n_u_load __pyx_mstate_global->__pyx_n_u_load
#define __pyx_n_s_loads __pyx_mstate_global->__pyx_n_s_loads
#define __pyx_n_u_loads __pyx_mstate_global->__pyx_n_u_loads
#define __pyx_n_s_lookahead __pyx_mstate_global->__pyx_n_s_lookahead
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_mappingtypes __pyx_mstate_global->__pyx_n_s_mappingtypes
#define __pyx_n_u_mappingtypes __pyx_mstate_global->__pyx_n_u_mappingtypes
#define __pyx_kp_u_mappingtypes_must_be_a_sequence __pyx_mstate_global->__pyx_kp_u_mappingtypes_must_be_a_sequence
#define __pyx_n_s_maxdepth __pyx_mstate_global->__pyx_n_s_maxdepth
#define __pyx_n_s_message __pyx_mstate_global->__pyx_n_s_message
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nan __pyx_mstate_global->__pyx_n_s_nan
#define __pyx_kp_u_near __pyx_mstate_global->__pyx_kp_u_near
#define __pyx_n_s_neginfinity __pyx_mstate_global->__pyx_n_s_neginfinity
#define __pyx_kp_u_not_in_int_str_bytes_near __pyx_mstate_global->__pyx_kp_u_not_in_int_str_bytes_near
#define __pyx_kp_u_not_supported __pyx_mstate_global->__pyx_kp_u_not_supported
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_options __pyx_mstate_global->__pyx_n_s_options
#define __pyx_n_s_options_kw __pyx_mstate_global->__pyx_n_s_options_kw
#define __pyx_n_s_opts __pyx_mstate_global->__pyx_n_s_opts
#define __pyx_kp_u_or_U __pyx_mstate_global->__pyx_kp_u_or_U
#define __pyx_kp_u_or_the_value_is_not_valid __pyx_mstate_global->__pyx_kp_u_or_the_value_is_not_valid
#define __pyx_n_s_posinfinity __pyx_mstate_global->__pyx_n_s_posinfinity
#define __pyx_n_s_position __pyx_mstate_global->__pyx_n_s_position
#define __pyx_n_s_pprint __pyx_mstate_global->__pyx_n_s_pprint
#define __pyx_n_s_pyjson5 __pyx_mstate_global->__pyx_n_s_pyjson5
#define __pyx_n_s_quotationmark __pyx_mstate_global->__pyx_n_s_quotationmark
#define __pyx_n_u_quotationmark __pyx_mstate_global->__pyx_n_u_quotationmark
#define __pyx_kp_u_quotationmark_must_be_one_ASCII __pyx_mstate_global->__pyx_kp_u_quotationmark_must_be_one_ASCII
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_readable __pyx_mstate_global->__pyx_n_s_readable
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_remaining __pyx_mstate_global->__pyx_n_s_remaining
#define __pyx_n_s_repr __pyx_mstate_global->__pyx_n_s_repr
#define __pyx_n_s_reserve __pyx_mstate_global->__pyx_n_s_reserve
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_kp_u_s_2 __pyx_mstate_global->__pyx_kp_u_s_2
#define __pyx_n_s_saferepr __pyx_mstate_global->__pyx_n_s_saferepr
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_some __pyx_mstate_global->__pyx_n_s_some
#define __pyx_kp_s_src__encoder_options_pyx __pyx_mstate_global->__pyx_kp_s_src__encoder_options_pyx
#define __pyx_kp_s_src__exports_pyx __pyx_mstate_global->__pyx_kp_s_src__exports_pyx
#define __pyx_kp_s_src__legacy_pyx __pyx_mstate_global->__pyx_kp_s_src__legacy_pyx
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_kp_u_starting_near __pyx_mstate_global->__pyx_kp_u_starting_near
#define __pyx_n_u_strict __pyx_mstate_global->__pyx_n_u_strict
#define __pyx_n_s_string __pyx_mstate_global->__pyx_n_s_string
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_supply_bytes __pyx_mstate_global->__pyx_n_s_supply_bytes
#define __pyx_n_s_temp __pyx_mstate_global->__pyx_n_s_temp
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_n_s_tojson __pyx_mstate_global->__pyx_n_s_tojson
#define __pyx_n_u_tojson __pyx_mstate_global->__pyx_n_u_tojson
#define __pyx_kp_u_type_cb __pyx_mstate_global->__pyx_kp_u_type_cb
#define __pyx_kp_u_type_data __pyx_mstate_global->__pyx_kp_u_type_data
#define __pyx_kp_u_type_fp __pyx_mstate_global->__pyx_kp_u_type_fp
#define __pyx_kp_u_type_value __pyx_mstate_global->__pyx_kp_u_type_value
#define __pyx_n_s_unstringifiable __pyx_mstate_global->__pyx_n_s_unstringifiable
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_kp_u_us_ascii __pyx_mstate_global->__pyx_kp_u_us_ascii
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_version __pyx_mstate_global->__pyx_n_s_version
#define __pyx_n_s_view __pyx_mstate_global->__pyx_n_s_view
#define __pyx_n_s_wordlength __pyx_mstate_global->__pyx_n_s_wordlength
#define __pyx_kp_u_wordlength_must_be_1_2_or_4_not __pyx_mstate_global->__pyx_kp_u_wordlength_must_be_1_2_or_4_not
#define __pyx_n_s_writable __pyx_mstate_global->__pyx_n_s_writable
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_writer __pyx_mstate_global->__pyx_n_s_writer
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_47_11 __pyx_mstate_global->__pyx_float_47_11
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_32 __pyx_mstate_global->__pyx_int_32
#define __pyx_int_646 __pyx_mstate_global->__pyx_int_646
#define __pyx_int_4711 __pyx_mstate_global->__pyx_int_4711
#define __pyx_int_8859 __pyx_mstate_global->__pyx_int_8859
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
/* #### Code section: module_code ### */

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self) noexcept:
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self) noexcept:
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions.pyx":6
 *     Base class of any exception thrown by PyJSON5.
 *     '''
 *     def __init__(self, message=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, *args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_14Json5Exception_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_14Json5Exception_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 1, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 6, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 1) ? kwd_pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 6, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_message = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("pyjson5.Json5Exception.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_14Json5Exception___init__(((struct __pyx_obj_7pyjson5_Json5Exception *)__pyx_v_self), __pyx_v_message, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_14Json5Exception___init__(struct __pyx_obj_7pyjson5_Json5Exception *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions.pyx":7
 *     '''
 *     def __init__(self, message=None, *args):
 *         super().__init__(message, *args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5Exception);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5Exception);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5Exception))) __PYX_ERR(0, 7, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 7, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message)) __PYX_ERR(0, 7, __pyx_L1_error);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exceptions.pyx":6
 *     Base class of any exception thrown by PyJSON5.
 *     '''
 *     def __init__(self, message=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, *args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5Exception.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions.pyx":9
 *         super().__init__(message, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def message(self):
 *         '''Human readable error description'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_14Json5Exception_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_14Json5Exception_7message_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_14Json5Exception_7message___get__(((struct __pyx_obj_7pyjson5_Json5Exception *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_14Json5Exception_7message___get__(struct __pyx_obj_7pyjson5_Json5Exception *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions.pyx":12
 *     def message(self):
 *         '''Human readable error description'''
 *         return self.args[0]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions.pyx":9
 *         super().__init__(message, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def message(self):
 *         '''Human readable error description'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5Exception.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":6
 *     Base class of any exception thrown by the parser.
 *     '''
 *     def __init__(self, message=None, result=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, *args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_21Json5DecoderException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_21Json5DecoderException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 2, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_result,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 6, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 6, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 2) ? kwd_pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(5, 6, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_result = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("pyjson5.Json5DecoderException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_21Json5DecoderException___init__(((struct __pyx_obj_7pyjson5_Json5DecoderException *)__pyx_v_self), __pyx_v_message, __pyx_v_result, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_21Json5DecoderException___init__(struct __pyx_obj_7pyjson5_Json5DecoderException *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions_decoder.pyx":7
 *     '''
 *     def __init__(self, message=None, result=None, *args):
 *         super().__init__(message, result, *args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException))) __PYX_ERR(5, 7, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(5, 7, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message)) __PYX_ERR(5, 7, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_result)) __PYX_ERR(5, 7, __pyx_L1_error);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exceptions_decoder.pyx":6
 *     Base class of any exception thrown by the parser.
 *     '''
 *     def __init__(self, message=None, result=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, *args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5DecoderException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":9
 *         super().__init__(message, result, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def result(self):
 *         '''Deserialized data up until now.'''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_21Json5DecoderException_6result_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_21Json5DecoderException_6result_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_21Json5DecoderException_6result___get__(((struct __pyx_obj_7pyjson5_Json5DecoderException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_21Json5DecoderException_6result___get__(struct __pyx_obj_7pyjson5_Json5DecoderException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions_decoder.pyx":12
 *     def result(self):
 *         '''Deserialized data up until now.'''
 *         return self.args[1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions_decoder.pyx":9
 *         super().__init__(message, result, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def result(self):
 *         '''Deserialized data up until now.'''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5DecoderException.result.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":37
 *     An unexpected character was encountered.
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, character, *args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_21Json5IllegalCharacter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_21Json5IllegalCharacter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_character = 0;
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 3, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_result,&__pyx_n_s_character,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_character);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 3) ? kwd_pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(5, 37, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_result = values[1];
    __pyx_v_character = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("pyjson5.Json5IllegalCharacter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_21Json5IllegalCharacter___init__(((struct __pyx_obj_7pyjson5_Json5IllegalCharacter *)__pyx_v_self), __pyx_v_message, __pyx_v_result, __pyx_v_character, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_21Json5IllegalCharacter___init__(struct __pyx_obj_7pyjson5_Json5IllegalCharacter *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_character, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions_decoder.pyx":38
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):
 *         super().__init__(message, result, character, *args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter))) __PYX_ERR(5, 38, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(5, 38, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message)) __PYX_ERR(5, 38, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_result)) __PYX_ERR(5, 38, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_character);
  __Pyx_GIVEREF(__pyx_v_character);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_character)) __PYX_ERR(5, 38, __pyx_L1_error);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exceptions_decoder.pyx":37
 *     An unexpected character was encountered.
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, character, *args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5IllegalCharacter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":40
 *         super().__init__(message, result, character, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def character(self):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_21Json5IllegalCharacter_9character_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_21Json5IllegalCharacter_9character_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_21Json5IllegalCharacter_9character___get__(((struct __pyx_obj_7pyjson5_Json5IllegalCharacter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_21Json5IllegalCharacter_9character___get__(struct __pyx_obj_7pyjson5_Json5IllegalCharacter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions_decoder.pyx":45
 *         Illegal character.
 *         '''
 *         return self.args[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions_decoder.pyx":40
 *         super().__init__(message, result, character, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def character(self):
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5IllegalCharacter.character.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":54
 *     The input contained extranous data.
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, character, *args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_14Json5ExtraData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_14Json5ExtraData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_character = 0;
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 3, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_result,&__pyx_n_s_character,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 54, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 54, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_character);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 54, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 3) ? kwd_pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(5, 54, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_result = values[1];
    __pyx_v_character = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("pyjson5.Json5ExtraData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_14Json5ExtraData___init__(((struct __pyx_obj_7pyjson5_Json5ExtraData *)__pyx_v_self), __pyx_v_message, __pyx_v_result, __pyx_v_character, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_14Json5ExtraData___init__(struct __pyx_obj_7pyjson5_Json5ExtraData *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_character, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions_decoder.pyx":55
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):
 *         super().__init__(message, result, character, *args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5ExtraData);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5ExtraData);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5ExtraData))) __PYX_ERR(5, 55, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(5, 55, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message)) __PYX_ERR(5, 55, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_result)) __PYX_ERR(5, 55, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_character);
  __Pyx_GIVEREF(__pyx_v_character);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_character)) __PYX_ERR(5, 55, __pyx_L1_error);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exceptions_decoder.pyx":54
 *     The input contained extranous data.
 *     '''
 *     def __init__(self, message=None, result=None, character=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, character, *args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5ExtraData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":57
 *         super().__init__(message, result, character, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def character(self):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_14Json5ExtraData_9character_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_14Json5ExtraData_9character_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_14Json5ExtraData_9character___get__(((struct __pyx_obj_7pyjson5_Json5ExtraData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_14Json5ExtraData_9character___get__(struct __pyx_obj_7pyjson5_Json5ExtraData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions_decoder.pyx":62
 *         Extranous character.
 *         '''
 *         return self.args[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions_decoder.pyx":57
 *         super().__init__(message, result, character, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def character(self):
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5ExtraData.character.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":71
 *     The user supplied callback function returned illegal data.
 *     '''
 *     def __init__(self, message=None, result=None, value=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, value, *args)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_16Json5IllegalType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_16Json5IllegalType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 3, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_result,&__pyx_n_s_value,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 71, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 3) ? kwd_pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(5, 71, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_result = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("pyjson5.Json5IllegalType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_16Json5IllegalType___init__(((struct __pyx_obj_7pyjson5_Json5IllegalType *)__pyx_v_self), __pyx_v_message, __pyx_v_result, __pyx_v_value, __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_16Json5IllegalType___init__(struct __pyx_obj_7pyjson5_Json5IllegalType *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_result, PyObject *__pyx_v_value, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions_decoder.pyx":72
 *     '''
 *     def __init__(self, message=None, result=None, value=None, *args):
 *         super().__init__(message, result, value, *args)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalType);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalType);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalType))) __PYX_ERR(5, 72, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(5, 72, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_message)) __PYX_ERR(5, 72, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_result)) __PYX_ERR(5, 72, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_value)) __PYX_ERR(5, 72, __pyx_L1_error);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exceptions_decoder.pyx":71
 *     The user supplied callback function returned illegal data.
 *     '''
 *     def __init__(self, message=None, result=None, value=None, *args):             # <<<<<<<<<<<<<<
 *         super().__init__(message, result, value, *args)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5IllegalType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":74
 *         super().__init__(message, result, value, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def value(self):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_16Json5IllegalType_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_16Json5IllegalType_5value_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_16Json5IllegalType_5value___get__(((struct __pyx_obj_7pyjson5_Json5IllegalType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_16Json5IllegalType_5value___get__(struct __pyx_obj_7pyjson5_Json5IllegalType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions_decoder.pyx":79
 *         Value that caused the problem.
 *         '''
 *         return self.args[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions_decoder.pyx":74
 *         super().__init__(message, result, value, *args)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def value(self):
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5IllegalType.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_decoder.pyx":90
 *     cdef object result
 * 
 *     def __cinit__(self, cls, msg, extra, result):             # <<<<<<<<<<<<<<
 *         self.cls = cls
 *         self.msg = msg
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_17_DecoderException_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_17_DecoderException_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_extra = 0;
  PyObject *__pyx_v_result = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_msg,&__pyx_n_s_extra,&__pyx_n_s_result,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cls)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 90, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 90, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(5, 90, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_extra)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 90, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(5, 90, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_result)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 90, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(5, 90, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(5, 90, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
      values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
      values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
    }
    __pyx_v_cls = values[0];
    __pyx_v_msg = values[1];
    __pyx_v_extra = values[2];
    __pyx_v_result = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, __pyx_nargs); __PYX_ERR(5, 90, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyjson5._DecoderException.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_17_DecoderException___cinit__(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_self), __pyx_v_cls, __pyx_v_msg, __pyx_v_extra, __pyx_v_result);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_17_DecoderException___cinit__(struct __pyx_obj_7pyjson5__DecoderException *__pyx_v_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_msg, PyObject *__pyx_v_extra, PyObject *__pyx_v_result) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "src/_exceptions_decoder.pyx":91
 * 
 *     def __cinit__(self, cls, msg, extra, result):
 *         self.cls = cls             # <<<<<<<<<<<<<<
 *         self.msg = msg
 *         self.extra = extra
 */
  __Pyx_INCREF(__pyx_v_cls);
  __Pyx_GIVEREF(__pyx_v_cls);
  __Pyx_GOTREF(__pyx_v_self->cls);
  __Pyx_DECREF(__pyx_v_self->cls);
  __pyx_v_self->cls = __pyx_v_cls;

  /* "src/_exceptions_decoder.pyx":92
 *     def __cinit__(self, cls, msg, extra, result):
 *         self.cls = cls
 *         self.msg = msg             # <<<<<<<<<<<<<<
 *         self.extra = extra
 *         self.result = result
 */
  __Pyx_INCREF(__pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  __Pyx_GOTREF(__pyx_v_self->msg);
  __Pyx_DECREF(__pyx_v_self->msg);
  __pyx_v_self->msg = __pyx_v_msg;

  /* "src/_exceptions_decoder.pyx":93
 *         self.cls = cls
 *         self.msg = msg
 *         self.extra = extra             # <<<<<<<<<<<<<<
 *         self.result = result
 */
  __Pyx_INCREF(__pyx_v_extra);
  __Pyx_GIVEREF(__pyx_v_extra);
  __Pyx_GOTREF(__pyx_v_self->extra);
  __Pyx_DECREF(__pyx_v_self->extra);
  __pyx_v_self->extra = __pyx_v_extra;

  /* "src/_exceptions_decoder.pyx":94
 *         self.msg = msg
 *         self.extra = extra
 *         self.result = result             # <<<<<<<<<<<<<<
 */
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  __Pyx_GOTREF(__pyx_v_self->result);
  __Pyx_DECREF(__pyx_v_self->result);
  __pyx_v_self->result = __pyx_v_result;

  /* "src/_exceptions_decoder.pyx":90
 *     cdef object result
 * 
 *     def __cinit__(self, cls, msg, extra, result):             # <<<<<<<<<<<<<<
 *         self.cls = cls
 *         self.msg = msg
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_encoder.pyx":13
 *     The encoder was not able to stringify the input, or it was told not to by the supplied ``Options``.
 *     '''
 *     def __init__(self, message=None, unstringifiable=None):             # <<<<<<<<<<<<<<
 *         super().__init__(message, unstringifiable)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_24Json5UnstringifiableType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_24Json5UnstringifiableType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_unstringifiable = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_unstringifiable,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_message);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 13, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_unstringifiable);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 13, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(6, 13, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_unstringifiable = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, __pyx_nargs); __PYX_ERR(6, 13, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyjson5.Json5UnstringifiableType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyjson5_24Json5UnstringifiableType___init__(((struct __pyx_obj_7pyjson5_Json5UnstringifiableType *)__pyx_v_self), __pyx_v_message, __pyx_v_unstringifiable);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyjson5_24Json5UnstringifiableType___init__(struct __pyx_obj_7pyjson5_Json5UnstringifiableType *__pyx_v_self, PyObject *__pyx_v_message, PyObject *__pyx_v_unstringifiable) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "src/_exceptions_encoder.pyx":14
 *     '''
 *     def __init__(self, message=None, unstringifiable=None):
 *         super().__init__(message, unstringifiable)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Json5UnstringifiableType);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7pyjson5_Json5UnstringifiableType);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7pyjson5_Json5UnstringifiableType))) __PYX_ERR(6, 14, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self))) __PYX_ERR(6, 14, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_message, __pyx_v_unstringifiable};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_exceptions_encoder.pyx":13
 *     The encoder was not able to stringify the input, or it was told not to by the supplied ``Options``.
 *     '''
 *     def __init__(self, message=None, unstringifiable=None):             # <<<<<<<<<<<<<<
 *         super().__init__(message, unstringifiable)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5.Json5UnstringifiableType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_exceptions_encoder.pyx":16
 *         super().__init__(message, unstringifiable)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def unstringifiable(self):
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_24Json5UnstringifiableType_15unstringifiable_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_24Json5UnstringifiableType_15unstringifiable_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7pyjson5_24Json5UnstringifiableType_15unstringifiable___get__(((struct __pyx_obj_7pyjson5_Json5UnstringifiableType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_24Json5UnstringifiableType_15unstringifiable___get__(struct __pyx_obj_7pyjson5_Json5UnstringifiableType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "src/_exceptions_encoder.pyx":21
 *         The value that caused the problem.
 *         '''
 *         return self.args[1]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/_exceptions_encoder.pyx":16
 *         super().__init__(message, unstringifiable)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def unstringifiable(self):
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5.Json5UnstringifiableType.unstringifiable.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":1
 * cdef AlwaysTrue _raise_decoder(cls, msg, extra=None, result=None) except True:             # <<<<<<<<<<<<<<
 *     raise _DecoderException(cls, msg, extra, result)
 * 
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_decoder(PyObject *__pyx_v_cls, PyObject *__pyx_v_msg, struct __pyx_opt_args_7pyjson5__raise_decoder *__pyx_optional_args) {
  PyObject *__pyx_v_extra = ((PyObject *)Py_None);
  PyObject *__pyx_v_result = ((PyObject *)Py_None);
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_decoder", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_extra = __pyx_optional_args->extra;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_result = __pyx_optional_args->result;
      }
    }
  }

  /* "src/_raise_decoder.pyx":2
 * cdef AlwaysTrue _raise_decoder(cls, msg, extra=None, result=None) except True:
 *     raise _DecoderException(cls, msg, extra, result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_cls);
  __Pyx_GIVEREF(__pyx_v_cls);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_cls)) __PYX_ERR(7, 2, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_msg);
  __Pyx_GIVEREF(__pyx_v_msg);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_msg)) __PYX_ERR(7, 2, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_extra);
  __Pyx_GIVEREF(__pyx_v_extra);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_extra)) __PYX_ERR(7, 2, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_result)) __PYX_ERR(7, 2, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pyjson5__DecoderException), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "src/_raise_decoder.pyx":1
 * cdef AlwaysTrue _raise_decoder(cls, msg, extra=None, result=None) except True:             # <<<<<<<<<<<<<<
 *     raise _DecoderException(cls, msg, extra, result)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._raise_decoder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":5
 * 
 * 
 * cdef AlwaysTrue _raise_unclosed(const char *what, Py_ssize_t start) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5EOF,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unclosed(char const *__pyx_v_what, Py_ssize_t __pyx_v_start) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_unclosed", 1);

  /* "src/_raise_decoder.pyx":8
 *     return _raise_decoder(
 *         Json5EOF,
 *         f'Unclosed {what} starting near {start}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Unclosed);
  __pyx_t_2 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_Unclosed);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unclosed);
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_what); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_starting_near);
  __pyx_t_2 += 15;
  __Pyx_GIVEREF(__pyx_kp_u_starting_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_starting_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_start, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":6
 * 
 * cdef AlwaysTrue _raise_unclosed(const char *what, Py_ssize_t start) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5EOF,
 *         f'Unclosed {what} starting near {start}',
 */
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5EOF), __pyx_t_5, NULL); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":5
 * 
 * 
 * cdef AlwaysTrue _raise_unclosed(const char *what, Py_ssize_t start) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5EOF,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_unclosed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":12
 * 
 * 
 * cdef AlwaysTrue _raise_no_data(Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5EOF,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_no_data(Py_ssize_t __pyx_v_where) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_no_data", 1);

  /* "src/_raise_decoder.pyx":15
 *     return _raise_decoder(
 *         Json5EOF,
 *         f'No JSON data found near {where}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_No_JSON_data_found_near, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":13
 * 
 * cdef AlwaysTrue _raise_no_data(Py_ssize_t where) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5EOF,
 *         f'No JSON data found near {where}',
 */
  __pyx_t_3 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5EOF), __pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":12
 * 
 * 
 * cdef AlwaysTrue _raise_no_data(Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5EOF,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._raise_no_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":19
 * 
 * 
 * cdef AlwaysTrue _raise_stray_character(const char *what, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_stray_character(char const *__pyx_v_what, Py_ssize_t __pyx_v_where) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_stray_character", 1);

  /* "src/_raise_decoder.pyx":22
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 *         f'Stray {what} near {where}',             # <<<<<<<<<<<<<<
 *         what,
 *     )
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Stray);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Stray);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Stray);
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_what); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_near);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":23
 *         Json5IllegalCharacter,
 *         f'Stray {what} near {where}',
 *         what,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_what); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/_raise_decoder.pyx":20
 * 
 * cdef AlwaysTrue _raise_stray_character(const char *what, Py_ssize_t where) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5IllegalCharacter,
 *         f'Stray {what} near {where}',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_t_1;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter), __pyx_t_5, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":19
 * 
 * 
 * cdef AlwaysTrue _raise_stray_character(const char *what, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_stray_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":27
 * 
 * 
 * cdef AlwaysTrue _raise_expected_sc(const char *char_a, uint32_t char_b, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_sc(char const *__pyx_v_char_a, std::uint32_t __pyx_v_char_b, Py_ssize_t __pyx_v_near, std::uint32_t __pyx_v_found) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_expected_sc", 1);

  /* "src/_raise_decoder.pyx":30
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} or U+{char_b:04x} near {near}, found U+{found:04x}',             # <<<<<<<<<<<<<<
 *         f'{found:c}',
 *     )
 */
  __pyx_t_1 = PyTuple_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Expected);
  __pyx_t_2 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_Expected);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_char_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_or_U);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_or_U);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_or_U);
  __pyx_t_5 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_char_b); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_04x); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_near);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_near);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_near);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_near, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_found_U);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_found_U);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_found_U);
  __pyx_t_4 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_04x); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 8, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":31
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} or U+{char_b:04x} near {near}, found U+{found:04x}',
 *         f'{found:c}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_n_u_c); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":28
 * 
 * cdef AlwaysTrue _raise_expected_sc(const char *char_a, uint32_t char_b, Py_ssize_t near, uint32_t found) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} or U+{char_b:04x} near {near}, found U+{found:04x}',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_t_4;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter), __pyx_t_5, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":27
 * 
 * 
 * cdef AlwaysTrue _raise_expected_sc(const char *char_a, uint32_t char_b, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_expected_sc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":35
 * 
 * 
 * cdef AlwaysTrue _raise_expected_s(const char *char_a, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_s(char const *__pyx_v_char_a, Py_ssize_t __pyx_v_near, std::uint32_t __pyx_v_found) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_expected_s", 1);

  /* "src/_raise_decoder.pyx":38
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} near {near}, found U+{found:04x}',             # <<<<<<<<<<<<<<
 *         f'{found:c}',
 *     )
 */
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Expected);
  __pyx_t_2 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_Expected);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_char_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_near);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_near, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_found_U);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_found_U);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_found_U);
  __pyx_t_5 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_04x); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":39
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} near {near}, found U+{found:04x}',
 *         f'{found:c}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_n_u_c); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":36
 * 
 * cdef AlwaysTrue _raise_expected_s(const char *char_a, Py_ssize_t near, uint32_t found) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5IllegalCharacter,
 *         f'Expected {char_a} near {near}, found U+{found:04x}',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_t_5;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter), __pyx_t_4, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":35
 * 
 * 
 * cdef AlwaysTrue _raise_expected_s(const char *char_a, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_expected_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":43
 * 
 * 
 * cdef AlwaysTrue _raise_expected_c(uint32_t char_a, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_expected_c(std::uint32_t __pyx_v_char_a, Py_ssize_t __pyx_v_near, std::uint32_t __pyx_v_found) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_expected_c", 1);

  /* "src/_raise_decoder.pyx":46
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 *         f'Expected U+{char_a:04x} near {near}, found U+{found:04x}',             # <<<<<<<<<<<<<<
 *         f'{found:c}',
 *     )
 */
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Expected_U);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_Expected_U);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected_U);
  __pyx_t_4 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_char_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_04x); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_near);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_near, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_found_U);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_found_U);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_found_U);
  __pyx_t_5 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_5, __pyx_kp_u_04x); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 6, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":47
 *         Json5IllegalCharacter,
 *         f'Expected U+{char_a:04x} near {near}, found U+{found:04x}',
 *         f'{found:c}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_n_u_c); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":44
 * 
 * cdef AlwaysTrue _raise_expected_c(uint32_t char_a, Py_ssize_t near, uint32_t found) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5IllegalCharacter,
 *         f'Expected U+{char_a:04x} near {near}, found U+{found:04x}',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_t_5;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalCharacter), __pyx_t_4, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":43
 * 
 * 
 * cdef AlwaysTrue _raise_expected_c(uint32_t char_a, Py_ssize_t near, uint32_t found) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalCharacter,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_expected_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":51
 * 
 * 
 * cdef AlwaysTrue _raise_extra_data(uint32_t found, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5ExtraData,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_extra_data(std::uint32_t __pyx_v_found, Py_ssize_t __pyx_v_where) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_extra_data", 1);

  /* "src/_raise_decoder.pyx":54
 *     return _raise_decoder(
 *         Json5ExtraData,
 *         f'Extra data U+{found:04X} near {where}',             # <<<<<<<<<<<<<<
 *         f'{found:c}',
 *     )
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Extra_data_U);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_Extra_data_U);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Extra_data_U);
  __pyx_t_4 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_kp_u_04X); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_near);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":55
 *         Json5ExtraData,
 *         f'Extra data U+{found:04X} near {where}',
 *         f'{found:c}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_n_u_c); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":52
 * 
 * cdef AlwaysTrue _raise_extra_data(uint32_t found, Py_ssize_t where) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5ExtraData,
 *         f'Extra data U+{found:04X} near {where}',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_t_4;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5ExtraData), __pyx_t_5, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":51
 * 
 * 
 * cdef AlwaysTrue _raise_extra_data(uint32_t found, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5ExtraData,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_extra_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":59
 * 
 * 
 * cdef AlwaysTrue _raise_unframed_data(uint32_t found, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5ExtraData,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unframed_data(std::uint32_t __pyx_v_found, Py_ssize_t __pyx_v_where) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_unframed_data", 1);

  /* "src/_raise_decoder.pyx":62
 *     return _raise_decoder(
 *         Json5ExtraData,
 *         f'Lost unframed data near {where}',             # <<<<<<<<<<<<<<
 *         f'{found:c}',
 *     )
 */
  __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Lost_unframed_data_near, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":63
 *         Json5ExtraData,
 *         f'Lost unframed data near {where}',
 *         f'{found:c}',             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_uint32_t(__pyx_v_found); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_n_u_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":60
 * 
 * cdef AlwaysTrue _raise_unframed_data(uint32_t found, Py_ssize_t where) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5ExtraData,
 *         f'Lost unframed data near {where}',
 */
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.extra = __pyx_t_3;
  __pyx_t_4 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5ExtraData), __pyx_t_2, &__pyx_t_5); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":59
 * 
 * 
 * cdef AlwaysTrue _raise_unframed_data(uint32_t found, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5ExtraData,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5._raise_unframed_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":67
 * 
 * 
 * cdef AlwaysTrue _raise_nesting(Py_ssize_t where, object result=None) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5NestingTooDeep,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_nesting(Py_ssize_t __pyx_v_where, struct __pyx_opt_args_7pyjson5__raise_nesting *__pyx_optional_args) {
  PyObject *__pyx_v_result = ((PyObject *)Py_None);
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_nesting", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_result = __pyx_optional_args->result;
    }
  }

  /* "src/_raise_decoder.pyx":70
 *     return _raise_decoder(
 *         Json5NestingTooDeep,
 *         f'Maximum nesting level exceeded near {where}',             # <<<<<<<<<<<<<<
 *         None,
 *         result,
 */
  __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Maximum_nesting_level_exceeded_n, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":68
 * 
 * cdef AlwaysTrue _raise_nesting(Py_ssize_t where, object result=None) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5NestingTooDeep,
 *         f'Maximum nesting level exceeded near {where}',
 */
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.extra = Py_None;
  __pyx_t_4.result = __pyx_v_result;
  __pyx_t_3 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5NestingTooDeep), __pyx_t_2, &__pyx_t_4); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":67
 * 
 * 
 * cdef AlwaysTrue _raise_nesting(Py_ssize_t where, object result=None) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5NestingTooDeep,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._raise_nesting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_decoder.pyx":76
 * 
 * 
 * cdef AlwaysTrue _raise_not_ord(object value, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalType,
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_not_ord(PyObject *__pyx_v_value, Py_ssize_t __pyx_v_where) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  struct __pyx_opt_args_7pyjson5__raise_decoder __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_not_ord", 1);

  /* "src/_raise_decoder.pyx":79
 *     return _raise_decoder(
 *         Json5IllegalType,
 *         f'type(value)=={type(value)!r} not in (int, str, bytes) near {where} or the value is not valid.',             # <<<<<<<<<<<<<<
 *         value,
 *     )
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_type_value);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_type_value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_type_value);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_4), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_not_in_int_str_bytes_near);
  __pyx_t_2 += 31;
  __Pyx_GIVEREF(__pyx_kp_u_not_in_int_str_bytes_near);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_not_in_int_str_bytes_near);
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_where, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_or_the_value_is_not_valid);
  __pyx_t_2 += 27;
  __Pyx_GIVEREF(__pyx_kp_u_or_the_value_is_not_valid);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_or_the_value_is_not_valid);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/_raise_decoder.pyx":77
 * 
 * cdef AlwaysTrue _raise_not_ord(object value, Py_ssize_t where) except True:
 *     return _raise_decoder(             # <<<<<<<<<<<<<<
 *         Json5IllegalType,
 *         f'type(value)=={type(value)!r} not in (int, str, bytes) near {where} or the value is not valid.',
 */
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.extra = __pyx_v_value;
  __pyx_t_6 = __pyx_f_7pyjson5__raise_decoder(((PyObject *)__pyx_ptype_7pyjson5_Json5IllegalType), __pyx_t_5, &__pyx_t_7); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(7, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "src/_raise_decoder.pyx":76
 * 
 * 
 * cdef AlwaysTrue _raise_not_ord(object value, Py_ssize_t where) except True:             # <<<<<<<<<<<<<<
 *     return _raise_decoder(
 *         Json5IllegalType,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyjson5._raise_not_ord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_encoder.pyx":1
 * cdef AlwaysTrue _raise_unstringifiable(object data) except True:             # <<<<<<<<<<<<<<
 *     raise Json5UnstringifiableType(f'Unstringifiable type(data)={type(data)!r}', data)
 * 
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_unstringifiable(PyObject *__pyx_v_data) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_unstringifiable", 1);

  /* "src/_raise_encoder.pyx":2
 * cdef AlwaysTrue _raise_unstringifiable(object data) except True:
 *     raise Json5UnstringifiableType(f'Unstringifiable type(data)={type(data)!r}', data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_1), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unstringifiable_type_data, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_data)) __PYX_ERR(1, 2, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pyjson5_Json5UnstringifiableType), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "src/_raise_encoder.pyx":1
 * cdef AlwaysTrue _raise_unstringifiable(object data) except True:             # <<<<<<<<<<<<<<
 *     raise Json5UnstringifiableType(f'Unstringifiable type(data)={type(data)!r}', data)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._raise_unstringifiable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_raise_encoder.pyx":5
 * 
 * 
 * cdef AlwaysTrue _raise_illegal_wordlength(int32_t wordlength) except True:             # <<<<<<<<<<<<<<
 *     raise ValueError(f'wordlength must be 1, 2 or 4, not {wordlength!r}')
 */

static JSON5EncoderCpp::AlwaysTrue __pyx_f_7pyjson5__raise_illegal_wordlength(std::int32_t __pyx_v_wordlength) {
  JSON5EncoderCpp::AlwaysTrue __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_raise_illegal_wordlength", 1);

  /* "src/_raise_encoder.pyx":6
 * 
 * cdef AlwaysTrue _raise_illegal_wordlength(int32_t wordlength) except True:
 *     raise ValueError(f'wordlength must be 1, 2 or 4, not {wordlength!r}')             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyInt_From_std_3a__3a_int32_t(__pyx_v_wordlength); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_1), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_wordlength_must_be_1_2_or_4_not, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 6, __pyx_L1_error)

  /* "src/_raise_encoder.pyx":5
 * 
 * 
 * cdef AlwaysTrue _raise_illegal_wordlength(int32_t wordlength) except True:             # <<<<<<<<<<<<<<
 *     raise ValueError(f'wordlength must be 1, 2 or 4, not {wordlength!r}')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._raise_illegal_wordlength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_unicode.pyx":1
 * cdef boolean _is_line_terminator(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.3
 *     return c in (
 */

static bool __pyx_f_7pyjson5__is_line_terminator(std::uint32_t __pyx_v_c) {
  bool __pyx_r;
  int __pyx_t_1;

  /* "src/_unicode.pyx":3
 * cdef boolean _is_line_terminator(uint32_t c) nogil:
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.3
 *     return c in (             # <<<<<<<<<<<<<<
 *         0x000A,  # Line Feed <LF>
 *         0x000D,  # Carriage Return <CR>
 */
  switch (__pyx_v_c) {
    case 0x000A:

    /* "src/_unicode.pyx":4
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.3
 *     return c in (
 *         0x000A,  # Line Feed <LF>             # <<<<<<<<<<<<<<
 *         0x000D,  # Carriage Return <CR>
 *         0x2028,  # Line separator <LS>
 */
    case 0x000D:

    /* "src/_unicode.pyx":5
 *     return c in (
 *         0x000A,  # Line Feed <LF>
 *         0x000D,  # Carriage Return <CR>             # <<<<<<<<<<<<<<
 *         0x2028,  # Line separator <LS>
 *         0x2029,  # Paragraph separator <PS>
 */
    case 0x2028:

    /* "src/_unicode.pyx":6
 *         0x000A,  # Line Feed <LF>
 *         0x000D,  # Carriage Return <CR>
 *         0x2028,  # Line separator <LS>             # <<<<<<<<<<<<<<
 *         0x2029,  # Paragraph separator <PS>
 *     )
 */
    case 0x2029:

    /* "src/_unicode.pyx":3
 * cdef boolean _is_line_terminator(uint32_t c) nogil:
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.3
 *     return c in (             # <<<<<<<<<<<<<<
 *         0x000A,  # Line Feed <LF>
 *         0x000D,  # Carriage Return <CR>
 */
    __pyx_t_1 = 1;
    break;
    default:
    __pyx_t_1 = 0;
    break;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_unicode.pyx":1
 * cdef boolean _is_line_terminator(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.3
 *     return c in (
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":10
 *     )
 * 
 * cdef boolean _is_ws_zs(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://spec.json5.org/#white-space
 *     return unicode_cat_of(c) == 1
 */

static bool __pyx_f_7pyjson5__is_ws_zs(std::uint32_t __pyx_v_c) {
  bool __pyx_r;

  /* "src/_unicode.pyx":12
 * cdef boolean _is_ws_zs(uint32_t c) nogil:
 *     # https://spec.json5.org/#white-space
 *     return unicode_cat_of(c) == 1             # <<<<<<<<<<<<<<
 * 
 * cdef boolean _is_identifier_start(uint32_t c) nogil:
 */
  __pyx_r = (JSON5EncoderCpp::unicode_cat_of(__pyx_v_c) == 1);
  goto __pyx_L0;

  /* "src/_unicode.pyx":10
 *     )
 * 
 * cdef boolean _is_ws_zs(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://spec.json5.org/#white-space
 *     return unicode_cat_of(c) == 1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":14
 *     return unicode_cat_of(c) == 1
 * 
 * cdef boolean _is_identifier_start(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) == 2
 */

static bool __pyx_f_7pyjson5__is_identifier_start(std::uint32_t __pyx_v_c) {
  bool __pyx_r;

  /* "src/_unicode.pyx":16
 * cdef boolean _is_identifier_start(uint32_t c) nogil:
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) == 2             # <<<<<<<<<<<<<<
 * 
 * cdef boolean _is_identifier_part(uint32_t c) nogil:
 */
  __pyx_r = (JSON5EncoderCpp::unicode_cat_of(__pyx_v_c) == 2);
  goto __pyx_L0;

  /* "src/_unicode.pyx":14
 *     return unicode_cat_of(c) == 1
 * 
 * cdef boolean _is_identifier_start(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) == 2
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":18
 *     return unicode_cat_of(c) == 2
 * 
 * cdef boolean _is_identifier_part(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) >= 2
 */

static bool __pyx_f_7pyjson5__is_identifier_part(std::uint32_t __pyx_v_c) {
  bool __pyx_r;

  /* "src/_unicode.pyx":20
 * cdef boolean _is_identifier_part(uint32_t c) nogil:
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) >= 2             # <<<<<<<<<<<<<<
 * 
 * cdef inline boolean _is_x(uint32_t c) nogil:
 */
  __pyx_r = (JSON5EncoderCpp::unicode_cat_of(__pyx_v_c) >= 2);
  goto __pyx_L0;

  /* "src/_unicode.pyx":18
 *     return unicode_cat_of(c) == 2
 * 
 * cdef boolean _is_identifier_part(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     # https://www.ecma-international.org/ecma-262/5.1/#sec-7.6
 *     return unicode_cat_of(c) >= 2
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":22
 *     return unicode_cat_of(c) >= 2
 * 
 * cdef inline boolean _is_x(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return (c | 0x20) == b'x'
 * 
 */

static CYTHON_INLINE bool __pyx_f_7pyjson5__is_x(std::uint32_t __pyx_v_c) {
  bool __pyx_r;

  /* "src/_unicode.pyx":23
 * 
 * cdef inline boolean _is_x(uint32_t c) nogil:
 *     return (c | 0x20) == b'x'             # <<<<<<<<<<<<<<
 * 
 * cdef inline boolean _is_e(uint32_t c) nogil:
 */
  __pyx_r = ((__pyx_v_c | 0x20) == 'x');
  goto __pyx_L0;

  /* "src/_unicode.pyx":22
 *     return unicode_cat_of(c) >= 2
 * 
 * cdef inline boolean _is_x(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return (c | 0x20) == b'x'
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":25
 *     return (c | 0x20) == b'x'
 * 
 * cdef inline boolean _is_e(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return (c | 0x20) == b'e'
 * 
 */

static CYTHON_INLINE bool __pyx_f_7pyjson5__is_e(std::uint32_t __pyx_v_c) {
  bool __pyx_r;

  /* "src/_unicode.pyx":26
 * 
 * cdef inline boolean _is_e(uint32_t c) nogil:
 *     return (c | 0x20) == b'e'             # <<<<<<<<<<<<<<
 * 
 * cdef inline boolean _is_decimal(uint32_t c) nogil:
 */
  __pyx_r = ((__pyx_v_c | 0x20) == 'e');
  goto __pyx_L0;

  /* "src/_unicode.pyx":25
 *     return (c | 0x20) == b'x'
 * 
 * cdef inline boolean _is_e(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return (c | 0x20) == b'e'
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":28
 *     return (c | 0x20) == b'e'
 * 
 * cdef inline boolean _is_decimal(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return b'0' <= c <= b'9'
 * 
 */

static CYTHON_INLINE bool __pyx_f_7pyjson5__is_decimal(std::uint32_t __pyx_v_c) {
  bool __pyx_r;
  int __pyx_t_1;

  /* "src/_unicode.pyx":29
 * 
 * cdef inline boolean _is_decimal(uint32_t c) nogil:
 *     return b'0' <= c <= b'9'             # <<<<<<<<<<<<<<
 * 
 * cdef inline boolean _is_hex(uint32_t c) nogil:
 */
  __pyx_t_1 = ('0' <= __pyx_v_c);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_c <= '9');
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_unicode.pyx":28
 *     return (c | 0x20) == b'e'
 * 
 * cdef inline boolean _is_decimal(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return b'0' <= c <= b'9'
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":31
 *     return b'0' <= c <= b'9'
 * 
 * cdef inline boolean _is_hex(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return b'a' <= (c | 0x20) <= b'f'
 * 
 */

static CYTHON_INLINE bool __pyx_f_7pyjson5__is_hex(std::uint32_t __pyx_v_c) {
  bool __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_t_2;

  /* "src/_unicode.pyx":32
 * 
 * cdef inline boolean _is_hex(uint32_t c) nogil:
 *     return b'a' <= (c | 0x20) <= b'f'             # <<<<<<<<<<<<<<
 * 
 * cdef inline boolean _is_hexadecimal(uint32_t c) nogil:
 */
  __pyx_t_1 = (__pyx_v_c | 0x20);
  __pyx_t_2 = ('a' <= __pyx_t_1);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_t_1 <= 'f');
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "src/_unicode.pyx":31
 *     return b'0' <= c <= b'9'
 * 
 * cdef inline boolean _is_hex(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return b'a' <= (c | 0x20) <= b'f'
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":34
 *     return b'a' <= (c | 0x20) <= b'f'
 * 
 * cdef inline boolean _is_hexadecimal(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return _is_decimal(c) or _is_hex(c)
 * 
 */

static CYTHON_INLINE bool __pyx_f_7pyjson5__is_hexadecimal(std::uint32_t __pyx_v_c) {
  bool __pyx_r;
  bool __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "src/_unicode.pyx":35
 * 
 * cdef inline boolean _is_hexadecimal(uint32_t c) nogil:
 *     return _is_decimal(c) or _is_hex(c)             # <<<<<<<<<<<<<<
 * 
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c); if (unlikely(__pyx_t_2 == ((bool)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(8, 35, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __pyx_f_7pyjson5__is_hex(__pyx_v_c); if (unlikely(__pyx_t_2 == ((bool)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(8, 35, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_unicode.pyx":34
 *     return b'a' <= (c | 0x20) <= b'f'
 * 
 * cdef inline boolean _is_hexadecimal(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     return _is_decimal(c) or _is_hex(c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("pyjson5._is_hexadecimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_unicode.pyx":37
 *     return _is_decimal(c) or _is_hex(c)
 * 
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     if _is_decimal(c):
 *         return True
 */

static bool __pyx_f_7pyjson5__is_in_float_representation(std::uint32_t __pyx_v_c) {
  bool __pyx_r;
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "src/_unicode.pyx":38
 * 
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:
 *     if _is_decimal(c):             # <<<<<<<<<<<<<<
 *         return True
 *     if _is_e(c):
 */
  __pyx_t_1 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c); if (unlikely(__pyx_t_1 == ((bool)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(8, 38, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_unicode.pyx":39
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:
 *     if _is_decimal(c):
 *         return True             # <<<<<<<<<<<<<<
 *     if _is_e(c):
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_unicode.pyx":38
 * 
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:
 *     if _is_decimal(c):             # <<<<<<<<<<<<<<
 *         return True
 *     if _is_e(c):
 */
  }

  /* "src/_unicode.pyx":40
 *     if _is_decimal(c):
 *         return True
 *     if _is_e(c):             # <<<<<<<<<<<<<<
 *         return True
 *     elif c in b'.+-':
 */
  __pyx_t_1 = __pyx_f_7pyjson5__is_e(__pyx_v_c); if (unlikely(__pyx_t_1 == ((bool)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(8, 40, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_unicode.pyx":41
 *         return True
 *     if _is_e(c):
 *         return True             # <<<<<<<<<<<<<<
 *     elif c in b'.+-':
 *         return True
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_unicode.pyx":40
 *     if _is_decimal(c):
 *         return True
 *     if _is_e(c):             # <<<<<<<<<<<<<<
 *         return True
 *     elif c in b'.+-':
 */
  }

  /* "src/_unicode.pyx":42
 *     if _is_e(c):
 *         return True
 *     elif c in b'.+-':             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  switch (__pyx_v_c) {
    case '+':
    case '-':
    case '.':
    __pyx_t_2 = 1;
    break;
    default:
    __pyx_t_2 = 0;
    break;
  }
  __pyx_t_3 = __pyx_t_2;
  if (__pyx_t_3) {

    /* "src/_unicode.pyx":43
 *         return True
 *     elif c in b'.+-':
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_unicode.pyx":42
 *     if _is_e(c):
 *         return True
 *     elif c in b'.+-':             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  }

  /* "src/_unicode.pyx":45
 *         return True
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "src/_unicode.pyx":37
 *     return _is_decimal(c) or _is_hex(c)
 * 
 * cdef boolean _is_in_float_representation(uint32_t c) nogil:             # <<<<<<<<<<<<<<
 *     if _is_decimal(c):
 *         return True
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("pyjson5._is_in_float_representation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_reader_ucs.pyx":48
 * 
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     return self.base.remaining > 0
 * 
 */

static CYTHON_INLINE std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  std::int32_t __pyx_r;

  /* "src/_reader_ucs.pyx":49
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):
 *     return self.base.remaining > 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self.base.remaining > 0);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":48
 * 
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     return self.base.remaining > 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  std::int32_t __pyx_r;

  /* "src/_reader_ucs.pyx":49
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):
 *     return self.base.remaining > 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self.base.remaining > 0);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":48
 * 
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     return self.base.remaining > 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  std::int32_t __pyx_r;

  /* "src/_reader_ucs.pyx":49
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):
 *     return self.base.remaining > 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self.base.remaining > 0);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":48
 * 
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     return self.base.remaining > 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_good(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  std::int32_t __pyx_r;

  /* "src/_reader_ucs.pyx":49
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):
 *     return self.base.remaining > 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self.base.remaining > 0);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":48
 * 
 * 
 * cdef inline int32_t _reader_ucs_good(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     return self.base.remaining > 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_reader_ucs.pyx":52
 * 
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.string[0]
 * 
 */

static CYTHON_INLINE std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  std::int32_t __pyx_v_c;
  std::uint32_t __pyx_r;

  /* "src/_reader_ucs.pyx":53
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):
 *     cdef int32_t c = self.string[0]             # <<<<<<<<<<<<<<
 * 
 *     self.string += 1
 */
  __pyx_v_c = (__pyx_v_self.string[0]);

  /* "src/_reader_ucs.pyx":55
 *     cdef int32_t c = self.string[0]
 * 
 *     self.string += 1             # <<<<<<<<<<<<<<
 *     self.base.remaining -= 1
 *     self.base.position += 1
 */
  __pyx_v_self.string = (__pyx_v_self.string + 1);

  /* "src/_reader_ucs.pyx":56
 * 
 *     self.string += 1
 *     self.base.remaining -= 1             # <<<<<<<<<<<<<<
 *     self.base.position += 1
 * 
 */
  __pyx_v_self.base.remaining = (__pyx_v_self.base.remaining - 1);

  /* "src/_reader_ucs.pyx":57
 *     self.string += 1
 *     self.base.remaining -= 1
 *     self.base.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_uint32(c)
 */
  __pyx_v_self.base.position = (__pyx_v_self.base.position + 1);

  /* "src/_reader_ucs.pyx":59
 *     self.base.position += 1
 * 
 *     return cast_to_uint32(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":52
 * 
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.string[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  std::int32_t __pyx_v_c;
  std::uint32_t __pyx_r;

  /* "src/_reader_ucs.pyx":53
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):
 *     cdef int32_t c = self.string[0]             # <<<<<<<<<<<<<<
 * 
 *     self.string += 1
 */
  __pyx_v_c = (__pyx_v_self.string[0]);

  /* "src/_reader_ucs.pyx":55
 *     cdef int32_t c = self.string[0]
 * 
 *     self.string += 1             # <<<<<<<<<<<<<<
 *     self.base.remaining -= 1
 *     self.base.position += 1
 */
  __pyx_v_self.string = (__pyx_v_self.string + 1);

  /* "src/_reader_ucs.pyx":56
 * 
 *     self.string += 1
 *     self.base.remaining -= 1             # <<<<<<<<<<<<<<
 *     self.base.position += 1
 * 
 */
  __pyx_v_self.base.remaining = (__pyx_v_self.base.remaining - 1);

  /* "src/_reader_ucs.pyx":57
 *     self.string += 1
 *     self.base.remaining -= 1
 *     self.base.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_uint32(c)
 */
  __pyx_v_self.base.position = (__pyx_v_self.base.position + 1);

  /* "src/_reader_ucs.pyx":59
 *     self.base.position += 1
 * 
 *     return cast_to_uint32(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":52
 * 
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.string[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  std::int32_t __pyx_v_c;
  std::uint32_t __pyx_r;

  /* "src/_reader_ucs.pyx":53
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):
 *     cdef int32_t c = self.string[0]             # <<<<<<<<<<<<<<
 * 
 *     self.string += 1
 */
  __pyx_v_c = (__pyx_v_self.string[0]);

  /* "src/_reader_ucs.pyx":55
 *     cdef int32_t c = self.string[0]
 * 
 *     self.string += 1             # <<<<<<<<<<<<<<
 *     self.base.remaining -= 1
 *     self.base.position += 1
 */
  __pyx_v_self.string = (__pyx_v_self.string + 1);

  /* "src/_reader_ucs.pyx":56
 * 
 *     self.string += 1
 *     self.base.remaining -= 1             # <<<<<<<<<<<<<<
 *     self.base.position += 1
 * 
 */
  __pyx_v_self.base.remaining = (__pyx_v_self.base.remaining - 1);

  /* "src/_reader_ucs.pyx":57
 *     self.string += 1
 *     self.base.remaining -= 1
 *     self.base.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_uint32(c)
 */
  __pyx_v_self.base.position = (__pyx_v_self.base.position + 1);

  /* "src/_reader_ucs.pyx":59
 *     self.base.position += 1
 * 
 *     return cast_to_uint32(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":52
 * 
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.string[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_get(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  std::int32_t __pyx_v_c;
  std::uint32_t __pyx_r;

  /* "src/_reader_ucs.pyx":53
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):
 *     cdef int32_t c = self.string[0]             # <<<<<<<<<<<<<<
 * 
 *     self.string += 1
 */
  __pyx_v_c = (__pyx_v_self.string[0]);

  /* "src/_reader_ucs.pyx":55
 *     cdef int32_t c = self.string[0]
 * 
 *     self.string += 1             # <<<<<<<<<<<<<<
 *     self.base.remaining -= 1
 *     self.base.position += 1
 */
  __pyx_v_self.string = (__pyx_v_self.string + 1);

  /* "src/_reader_ucs.pyx":56
 * 
 *     self.string += 1
 *     self.base.remaining -= 1             # <<<<<<<<<<<<<<
 *     self.base.position += 1
 * 
 */
  __pyx_v_self.base.remaining = (__pyx_v_self.base.remaining - 1);

  /* "src/_reader_ucs.pyx":57
 *     self.string += 1
 *     self.base.remaining -= 1
 *     self.base.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_uint32(c)
 */
  __pyx_v_self.base.position = (__pyx_v_self.base.position + 1);

  /* "src/_reader_ucs.pyx":59
 *     self.base.position += 1
 * 
 *     return cast_to_uint32(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c);
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":52
 * 
 * 
 * cdef inline uint32_t _reader_ucs_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.string[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_reader_ucs.pyx":62
 * 
 * 
 * cdef inline uint32_t _reader_utf8_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0 = _reader_ucs_get(self)
 *     cdef unsigned int n
 */

static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_utf8_get(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  unsigned int __pyx_v_n;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_reader_ucs.pyx":63
 * 
 * cdef inline uint32_t _reader_utf8_get(ReaderUCSRef self):
 *     cdef uint32_t c0 = _reader_ucs_get(self)             # <<<<<<<<<<<<<<
 *     cdef unsigned int n
 * 
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 63, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_reader_ucs.pyx":66
 *     cdef unsigned int n
 * 
 *     if (c0 & 0b1_0000000) == 0b0_0000000:    # ASCII             # <<<<<<<<<<<<<<
 *         return c0
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 */
  __pyx_t_2 = ((__pyx_v_c0 & 128) == 0);
  if (__pyx_t_2) {

    /* "src/_reader_ucs.pyx":67
 * 
 *     if (c0 & 0b1_0000000) == 0b0_0000000:    # ASCII
 *         return c0             # <<<<<<<<<<<<<<
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 *         return c0
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_reader_ucs.pyx":66
 *     cdef unsigned int n
 * 
 *     if (c0 & 0b1_0000000) == 0b0_0000000:    # ASCII             # <<<<<<<<<<<<<<
 *         return c0
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 */
  }

  /* "src/_reader_ucs.pyx":68
 *     if (c0 & 0b1_0000000) == 0b0_0000000:    # ASCII
 *         return c0
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation             # <<<<<<<<<<<<<<
 *         return c0
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes
 */
  __pyx_t_2 = ((__pyx_v_c0 & 192) == 128);
  if (__pyx_t_2) {

    /* "src/_reader_ucs.pyx":69
 *         return c0
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 *         return c0             # <<<<<<<<<<<<<<
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes
 *         c0 = (c0 & 0b000_11111)
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_reader_ucs.pyx":68
 *     if (c0 & 0b1_0000000) == 0b0_0000000:    # ASCII
 *         return c0
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation             # <<<<<<<<<<<<<<
 *         return c0
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes
 */
  }

  /* "src/_reader_ucs.pyx":70
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 *         return c0
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b000_11111)
 *         n = 1
 */
  __pyx_t_2 = ((__pyx_v_c0 & 224) == 192);
  if (__pyx_t_2) {

    /* "src/_reader_ucs.pyx":71
 *         return c0
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes
 *         c0 = (c0 & 0b000_11111)             # <<<<<<<<<<<<<<
 *         n = 1
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes
 */
    __pyx_v_c0 = (__pyx_v_c0 & 31);

    /* "src/_reader_ucs.pyx":72
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes
 *         c0 = (c0 & 0b000_11111)
 *         n = 1             # <<<<<<<<<<<<<<
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes
 *         c0 = (c0 & 0b0000_1111)
 */
    __pyx_v_n = 1;

    /* "src/_reader_ucs.pyx":70
 *     elif (c0 & 0b11_000000) == 0b10_000000:  # broken continuation
 *         return c0
 *     elif (c0 & 0b111_00000) == 0b110_00000:  # 2 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b000_11111)
 *         n = 1
 */
    goto __pyx_L3;
  }

  /* "src/_reader_ucs.pyx":73
 *         c0 = (c0 & 0b000_11111)
 *         n = 1
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b0000_1111)
 *         n = 2
 */
  __pyx_t_2 = ((__pyx_v_c0 & 240) == 224);
  if (__pyx_t_2) {

    /* "src/_reader_ucs.pyx":74
 *         n = 1
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes
 *         c0 = (c0 & 0b0000_1111)             # <<<<<<<<<<<<<<
 *         n = 2
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes
 */
    __pyx_v_c0 = (__pyx_v_c0 & 15);

    /* "src/_reader_ucs.pyx":75
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes
 *         c0 = (c0 & 0b0000_1111)
 *         n = 2             # <<<<<<<<<<<<<<
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes
 *         c0 = (c0 & 0b00000_111)
 */
    __pyx_v_n = 2;

    /* "src/_reader_ucs.pyx":73
 *         c0 = (c0 & 0b000_11111)
 *         n = 1
 *     elif (c0 & 0b1111_0000) == 0b1110_0000:  # 3 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b0000_1111)
 *         n = 2
 */
    goto __pyx_L3;
  }

  /* "src/_reader_ucs.pyx":76
 *         c0 = (c0 & 0b0000_1111)
 *         n = 2
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b00000_111)
 *         n = 3
 */
  __pyx_t_2 = ((__pyx_v_c0 & 248) == 240);
  if (__pyx_t_2) {

    /* "src/_reader_ucs.pyx":77
 *         n = 2
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes
 *         c0 = (c0 & 0b00000_111)             # <<<<<<<<<<<<<<
 *         n = 3
 *     else:  # 5+ bytes, invalid
 */
    __pyx_v_c0 = (__pyx_v_c0 & 7);

    /* "src/_reader_ucs.pyx":78
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes
 *         c0 = (c0 & 0b00000_111)
 *         n = 3             # <<<<<<<<<<<<<<
 *     else:  # 5+ bytes, invalid
 *         return c0
 */
    __pyx_v_n = 3;

    /* "src/_reader_ucs.pyx":76
 *         c0 = (c0 & 0b0000_1111)
 *         n = 2
 *     elif (c0 & 0b11111_000) == 0b11110_000:  # 4 bytes             # <<<<<<<<<<<<<<
 *         c0 = (c0 & 0b00000_111)
 *         n = 3
 */
    goto __pyx_L3;
  }

  /* "src/_reader_ucs.pyx":80
 *         n = 3
 *     else:  # 5+ bytes, invalid
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     for n in range(n, 0, -1):
 */
  /*else*/ {
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "src/_reader_ucs.pyx":82
 *         return c0
 * 
 *     for n in range(n, 0, -1):             # <<<<<<<<<<<<<<
 *         if not _reader_ucs_good(self):
 *             return c0
 */
  for (__pyx_t_3 = __pyx_v_n + 1; __pyx_t_3 > 0 + 1; ) { __pyx_t_3-=1;
    __pyx_v_n = __pyx_t_3;

    /* "src/_reader_ucs.pyx":83
 * 
 *     for n in range(n, 0, -1):
 *         if not _reader_ucs_good(self):             # <<<<<<<<<<<<<<
 *             return c0
 * 
 */
    __pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_good(__pyx_v_self); if (unlikely(__pyx_t_4 == ((std::int32_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 83, __pyx_L1_error)
    __pyx_t_2 = (!(__pyx_t_4 != 0));
    if (__pyx_t_2) {

      /* "src/_reader_ucs.pyx":84
 *     for n in range(n, 0, -1):
 *         if not _reader_ucs_good(self):
 *             return c0             # <<<<<<<<<<<<<<
 * 
 *         c0 = (c0 << 6) | (_reader_ucs_get(self) & 0b00_111111)
 */
      __pyx_r = __pyx_v_c0;
      goto __pyx_L0;

      /* "src/_reader_ucs.pyx":83
 * 
 *     for n in range(n, 0, -1):
 *         if not _reader_ucs_good(self):             # <<<<<<<<<<<<<<
 *             return c0
 * 
 */
    }

    /* "src/_reader_ucs.pyx":86
 *             return c0
 * 
 *         c0 = (c0 << 6) | (_reader_ucs_get(self) & 0b00_111111)             # <<<<<<<<<<<<<<
 * 
 *     return c0
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 86, __pyx_L1_error)
    __pyx_v_c0 = ((__pyx_v_c0 << 6) | (__pyx_t_1 & 63));
  }

  /* "src/_reader_ucs.pyx":88
 *         c0 = (c0 << 6) | (_reader_ucs_get(self) & 0b00_111111)
 * 
 *     return c0             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_reader_ucs.pyx":62
 * 
 * 
 * cdef inline uint32_t _reader_utf8_get(ReaderUCSRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0 = _reader_ucs_get(self)
 *     cdef unsigned int n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_utf8_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_reader_callback.pyx":15
 * 
 * 
 * cdef inline uint32_t _reader_Callback_get(ReaderCallbackRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.lookahead
 * 
 */

static CYTHON_INLINE std::uint32_t __pyx_f_7pyjson5__reader_Callback_get(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  std::int32_t __pyx_v_c;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;

  /* "src/_reader_callback.pyx":16
 * 
 * cdef inline uint32_t _reader_Callback_get(ReaderCallbackRef self):
 *     cdef int32_t c = self.lookahead             # <<<<<<<<<<<<<<
 * 
 *     self.lookahead = -1
 */
  __pyx_t_1 = __pyx_v_self.lookahead;
  __pyx_v_c = __pyx_t_1;

  /* "src/_reader_callback.pyx":18
 *     cdef int32_t c = self.lookahead
 * 
 *     self.lookahead = -1             # <<<<<<<<<<<<<<
 *     self.base.position += 1
 * 
 */
  __pyx_v_self.lookahead = -1L;

  /* "src/_reader_callback.pyx":19
 * 
 *     self.lookahead = -1
 *     self.base.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_uint32(c)
 */
  __pyx_v_self.base.position = (__pyx_v_self.base.position + 1);

  /* "src/_reader_callback.pyx":21
 *     self.base.position += 1
 * 
 *     return cast_to_uint32(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c);
  goto __pyx_L0;

  /* "src/_reader_callback.pyx":15
 * 
 * 
 * cdef inline uint32_t _reader_Callback_get(ReaderCallbackRef self):             # <<<<<<<<<<<<<<
 *     cdef int32_t c = self.lookahead
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_reader_callback.pyx":24
 * 
 * 
 * cdef int32_t _reader_Callback_good(ReaderCallbackRef self) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t c = -1
 * 
 */

static std::int32_t __pyx_f_7pyjson5__reader_Callback_good(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  Py_ssize_t __pyx_v_c;
  PyObject *__pyx_v_value = 0;
  std::int32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  long __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_reader_Callback_good", 1);

  /* "src/_reader_callback.pyx":25
 * 
 * cdef int32_t _reader_Callback_good(ReaderCallbackRef self) except -1:
 *     cdef Py_ssize_t c = -1             # <<<<<<<<<<<<<<
 * 
 *     if self.lookahead >= 0:
 */
  __pyx_v_c = -1L;

  /* "src/_reader_callback.pyx":27
 *     cdef Py_ssize_t c = -1
 * 
 *     if self.lookahead >= 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __pyx_t_1 = (__pyx_v_self.lookahead >= 0);
  if (__pyx_t_1) {

    /* "src/_reader_callback.pyx":28
 * 
 *     if self.lookahead >= 0:
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef object value = CallObject(self.callback, self.args)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_reader_callback.pyx":27
 *     cdef Py_ssize_t c = -1
 * 
 *     if self.lookahead >= 0:             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  }

  /* "src/_reader_callback.pyx":30
 *         return True
 * 
 *     cdef object value = CallObject(self.callback, self.args)             # <<<<<<<<<<<<<<
 *     if (value is None) or (value is False):
 *         return False
 */
  __pyx_t_2 = PyObject_CallObject(__pyx_v_self.callback, __pyx_v_self.args); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_value = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/_reader_callback.pyx":31
 * 
 *     cdef object value = CallObject(self.callback, self.args)
 *     if (value is None) or (value is False):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  __pyx_t_3 = (__pyx_v_value == Py_None);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_value == Py_False);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_reader_callback.pyx":32
 *     cdef object value = CallObject(self.callback, self.args)
 *     if (value is None) or (value is False):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(value, int):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "src/_reader_callback.pyx":31
 * 
 *     cdef object value = CallObject(self.callback, self.args)
 *     if (value is None) or (value is False):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
  }

  /* "src/_reader_callback.pyx":34
 *         return False
 * 
 *     if isinstance(value, int):             # <<<<<<<<<<<<<<
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_value); 
  if (__pyx_t_1) {

    /* "src/_reader_callback.pyx":35
 * 
 *     if isinstance(value, int):
 *         c = value             # <<<<<<<<<<<<<<
 *     elif isinstance(value, ORD_CLASSES):
 *         if not value:
 */
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 35, __pyx_L1_error)
    __pyx_v_c = __pyx_t_4;

    /* "src/_reader_callback.pyx":34
 *         return False
 * 
 *     if isinstance(value, int):             # <<<<<<<<<<<<<<
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):
 */
    goto __pyx_L7;
  }

  /* "src/_reader_callback.pyx":36
 *     if isinstance(value, int):
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):             # <<<<<<<<<<<<<<
 *         if not value:
 *             return False
 */
  __pyx_t_2 = __pyx_v_7pyjson5_ORD_CLASSES;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(9, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "src/_reader_callback.pyx":37
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):
 *         if not value:             # <<<<<<<<<<<<<<
 *             return False
 *         c = ord(value)
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(9, 37, __pyx_L1_error)
    __pyx_t_3 = (!__pyx_t_1);
    if (__pyx_t_3) {

      /* "src/_reader_callback.pyx":38
 *     elif isinstance(value, ORD_CLASSES):
 *         if not value:
 *             return False             # <<<<<<<<<<<<<<
 *         c = ord(value)
 *     else:
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_reader_callback.pyx":37
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):
 *         if not value:             # <<<<<<<<<<<<<<
 *             return False
 *         c = ord(value)
 */
    }

    /* "src/_reader_callback.pyx":39
 *         if not value:
 *             return False
 *         c = ord(value)             # <<<<<<<<<<<<<<
 *     else:
 *         _raise_not_ord(value, self.base.position)
 */
    __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_v_value); if (unlikely(__pyx_t_5 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(9, 39, __pyx_L1_error)
    __pyx_v_c = __pyx_t_5;

    /* "src/_reader_callback.pyx":36
 *     if isinstance(value, int):
 *         c = value
 *     elif isinstance(value, ORD_CLASSES):             # <<<<<<<<<<<<<<
 *         if not value:
 *             return False
 */
    goto __pyx_L7;
  }

  /* "src/_reader_callback.pyx":41
 *         c = ord(value)
 *     else:
 *         _raise_not_ord(value, self.base.position)             # <<<<<<<<<<<<<<
 * 
 *     if c < 0:
 */
  /*else*/ {
    __pyx_t_6 = __pyx_f_7pyjson5__raise_not_ord(__pyx_v_value, __pyx_v_self.base.position); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(9, 41, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "src/_reader_callback.pyx":43
 *         _raise_not_ord(value, self.base.position)
 * 
 *     if c < 0:             # <<<<<<<<<<<<<<
 *         return False
 *     elif c > 0x10ffff:
 */
  __pyx_t_3 = (__pyx_v_c < 0);
  if (__pyx_t_3) {

    /* "src/_reader_callback.pyx":44
 * 
 *     if c < 0:
 *         return False             # <<<<<<<<<<<<<<
 *     elif c > 0x10ffff:
 *         _raise_not_ord(value, self.base.position)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "src/_reader_callback.pyx":43
 *         _raise_not_ord(value, self.base.position)
 * 
 *     if c < 0:             # <<<<<<<<<<<<<<
 *         return False
 *     elif c > 0x10ffff:
 */
  }

  /* "src/_reader_callback.pyx":45
 *     if c < 0:
 *         return False
 *     elif c > 0x10ffff:             # <<<<<<<<<<<<<<
 *         _raise_not_ord(value, self.base.position)
 * 
 */
  __pyx_t_3 = (__pyx_v_c > 0x10ffff);
  if (__pyx_t_3) {

    /* "src/_reader_callback.pyx":46
 *         return False
 *     elif c > 0x10ffff:
 *         _raise_not_ord(value, self.base.position)             # <<<<<<<<<<<<<<
 * 
 *     self.lookahead = c
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_not_ord(__pyx_v_value, __pyx_v_self.base.position); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(9, 46, __pyx_L1_error)

    /* "src/_reader_callback.pyx":45
 *     if c < 0:
 *         return False
 *     elif c > 0x10ffff:             # <<<<<<<<<<<<<<
 *         _raise_not_ord(value, self.base.position)
 * 
 */
  }

  /* "src/_reader_callback.pyx":48
 *         _raise_not_ord(value, self.base.position)
 * 
 *     self.lookahead = c             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.lookahead = __pyx_v_c;

  /* "src/_reader_callback.pyx":50
 *     self.lookahead = c
 * 
 *     return True             # <<<<<<<<<<<<<<
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_reader_callback.pyx":24
 * 
 * 
 * cdef int32_t _reader_Callback_good(ReaderCallbackRef self) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t c = -1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyjson5._reader_Callback_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  bool __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  __pyx_t_1 = (__pyx_v_self.base.maxdepth == 0);
  if (__pyx_t_1) {

    /* "src/_readers.pyx":8
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_self); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 8, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(10, 8, __pyx_L1_error)

    /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  }

  /* "src/_readers.pyx":10
 *         _raise_nesting(_reader_tell(self))
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')             # <<<<<<<<<<<<<<
 * 
 *     self.base.maxdepth -= 1
 */
  __pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while decoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(10, 10, __pyx_L1_error)

  /* "src/_readers.pyx":12
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 * 
 *     self.base.maxdepth -= 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth - 1);

  /* "src/_readers.pyx":14
 *     self.base.maxdepth -= 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  bool __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  __pyx_t_1 = (__pyx_v_self.base.maxdepth == 0);
  if (__pyx_t_1) {

    /* "src/_readers.pyx":8
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_self); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 8, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(10, 8, __pyx_L1_error)

    /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  }

  /* "src/_readers.pyx":10
 *         _raise_nesting(_reader_tell(self))
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')             # <<<<<<<<<<<<<<
 * 
 *     self.base.maxdepth -= 1
 */
  __pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while decoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(10, 10, __pyx_L1_error)

  /* "src/_readers.pyx":12
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 * 
 *     self.base.maxdepth -= 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth - 1);

  /* "src/_readers.pyx":14
 *     self.base.maxdepth -= 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  bool __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  __pyx_t_1 = (__pyx_v_self.base.maxdepth == 0);
  if (__pyx_t_1) {

    /* "src/_readers.pyx":8
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_self); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 8, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(10, 8, __pyx_L1_error)

    /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  }

  /* "src/_readers.pyx":10
 *         _raise_nesting(_reader_tell(self))
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')             # <<<<<<<<<<<<<<
 * 
 *     self.base.maxdepth -= 1
 */
  __pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while decoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(10, 10, __pyx_L1_error)

  /* "src/_readers.pyx":12
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 * 
 *     self.base.maxdepth -= 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth - 1);

  /* "src/_readers.pyx":14
 *     self.base.maxdepth -= 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  bool __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  __pyx_t_1 = (__pyx_v_self.base.maxdepth == 0);
  if (__pyx_t_1) {

    /* "src/_readers.pyx":8
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_self); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 8, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(10, 8, __pyx_L1_error)

    /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  }

  /* "src/_readers.pyx":10
 *         _raise_nesting(_reader_tell(self))
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')             # <<<<<<<<<<<<<<
 * 
 *     self.base.maxdepth -= 1
 */
  __pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while decoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(10, 10, __pyx_L1_error)

  /* "src/_readers.pyx":12
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 * 
 *     self.base.maxdepth -= 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth - 1);

  /* "src/_readers.pyx":14
 *     self.base.maxdepth -= 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__reader_enter(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  bool __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  __pyx_t_1 = (__pyx_v_self.base.maxdepth == 0);
  if (__pyx_t_1) {

    /* "src/_readers.pyx":8
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_self); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 8, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_2, NULL); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(10, 8, __pyx_L1_error)

    /* "src/_readers.pyx":7
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:
 *     if self.base.maxdepth == 0:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(self))
 * 
 */
  }

  /* "src/_readers.pyx":10
 *         _raise_nesting(_reader_tell(self))
 * 
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')             # <<<<<<<<<<<<<<
 * 
 *     self.base.maxdepth -= 1
 */
  __pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while decoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(10, 10, __pyx_L1_error)

  /* "src/_readers.pyx":12
 *     Py_EnterRecursiveCall(' while decoding nested JSON5 object')
 * 
 *     self.base.maxdepth -= 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth - 1);

  /* "src/_readers.pyx":14
 *     self.base.maxdepth -= 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_readers.pyx":6
 * 
 * 
 * cdef boolean _reader_enter(ReaderRef self) except False:             # <<<<<<<<<<<<<<
 *     if self.base.maxdepth == 0:
 *         _raise_nesting(_reader_tell(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

static void __pyx_fuse_0__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {

  /* "src/_readers.pyx":18
 * 
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 *     self.base.maxdepth += 1
 * 
 */
  Py_LeaveRecursiveCall();

  /* "src/_readers.pyx":19
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth + 1);

  /* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

  /* function exit code */
}

static void __pyx_fuse_1__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {

  /* "src/_readers.pyx":18
 * 
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 *     self.base.maxdepth += 1
 * 
 */
  Py_LeaveRecursiveCall();

  /* "src/_readers.pyx":19
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth + 1);

  /* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

  /* function exit code */
}

static void __pyx_fuse_2__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {

  /* "src/_readers.pyx":18
 * 
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 *     self.base.maxdepth += 1
 * 
 */
  Py_LeaveRecursiveCall();

  /* "src/_readers.pyx":19
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth + 1);

  /* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

  /* function exit code */
}

static void __pyx_fuse_3__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {

  /* "src/_readers.pyx":18
 * 
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 *     self.base.maxdepth += 1
 * 
 */
  Py_LeaveRecursiveCall();

  /* "src/_readers.pyx":19
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth + 1);

  /* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

  /* function exit code */
}

static void __pyx_fuse_4__pyx_f_7pyjson5__reader_leave(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {

  /* "src/_readers.pyx":18
 * 
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 *     self.base.maxdepth += 1
 * 
 */
  Py_LeaveRecursiveCall();

  /* "src/_readers.pyx":19
 * cdef void _reader_leave(ReaderRef self):
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self.base.maxdepth = (__pyx_v_self.base.maxdepth + 1);

  /* "src/_readers.pyx":17
 * 
 * 
 * cdef void _reader_leave(ReaderRef self):             # <<<<<<<<<<<<<<
 *     Py_LeaveRecursiveCall()
 *     self.base.maxdepth += 1
 */

  /* function exit code */
}

/* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

static CYTHON_INLINE Py_ssize_t __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "src/_readers.pyx":23
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):
 *     return self.base.position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self.base.position;
  goto __pyx_L0;

  /* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE Py_ssize_t __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "src/_readers.pyx":23
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):
 *     return self.base.position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self.base.position;
  goto __pyx_L0;

  /* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE Py_ssize_t __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "src/_readers.pyx":23
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):
 *     return self.base.position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self.base.position;
  goto __pyx_L0;

  /* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE Py_ssize_t __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "src/_readers.pyx":23
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):
 *     return self.base.position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self.base.position;
  goto __pyx_L0;

  /* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE Py_ssize_t __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "src/_readers.pyx":23
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):
 *     return self.base.position             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self.base.position;
  goto __pyx_L0;

  /* "src/_readers.pyx":22
 * 
 * 
 * cdef inline Py_ssize_t _reader_tell(ReaderRef self):             # <<<<<<<<<<<<<<
 *     return self.base.position
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

static CYTHON_INLINE std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":31
 *         c0 = _reader_utf8_get(self)
 *     elif ReaderRef in ReaderUCSRef:
 *         c0 = _reader_ucs_get(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_readers.pyx":34
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 *     return c0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":31
 *         c0 = _reader_utf8_get(self)
 *     elif ReaderRef in ReaderUCSRef:
 *         c0 = _reader_ucs_get(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_readers.pyx":34
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 *     return c0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":31
 *         c0 = _reader_utf8_get(self)
 *     elif ReaderRef in ReaderUCSRef:
 *         c0 = _reader_ucs_get(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_readers.pyx":34
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 *     return c0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":29
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 *         c0 = _reader_utf8_get(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef in ReaderUCSRef:
 *         c0 = _reader_ucs_get(self)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_utf8_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 29, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_readers.pyx":34
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 *     return c0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE std::uint32_t __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":33
 *         c0 = _reader_ucs_get(self)
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)             # <<<<<<<<<<<<<<
 *     return c0
 * 
 */
  __pyx_t_1 = __pyx_f_7pyjson5__reader_Callback_get(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_readers.pyx":34
 *     elif ReaderRef is ReaderCallbackRef:
 *         c0 = _reader_Callback_get(self)
 *     return c0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c0;
  goto __pyx_L0;

  /* "src/_readers.pyx":26
 * 
 * 
 * cdef inline uint32_t _reader_get(ReaderRef self):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     if ReaderRef is ReaderUTF8Ref:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_self) {
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":39
 * cdef int32_t _reader_good(ReaderRef self) except -1:
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         return _reader_Callback_good(self)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_ucs_good(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::int32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_self) {
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":39
 * cdef int32_t _reader_good(ReaderRef self) except -1:
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         return _reader_Callback_good(self)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_ucs_good(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::int32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_self) {
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":39
 * cdef int32_t _reader_good(ReaderRef self) except -1:
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         return _reader_Callback_good(self)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_ucs_good(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::int32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_self) {
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":39
 * cdef int32_t _reader_good(ReaderRef self) except -1:
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)             # <<<<<<<<<<<<<<
 *     elif ReaderRef is ReaderCallbackRef:
 *         return _reader_Callback_good(self)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_ucs_good(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::int32_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 39, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_self) {
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_readers.pyx":41
 *         return _reader_ucs_good(self)
 *     elif ReaderRef is ReaderCallbackRef:
 *         return _reader_Callback_good(self)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_f_7pyjson5__reader_Callback_good(__pyx_v_self); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(10, 41, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/_readers.pyx":37
 * 
 * 
 * cdef int32_t _reader_good(ReaderRef self) except -1:             # <<<<<<<<<<<<<<
 *     if ReaderRef in ReaderUCSRef:
 *         return _reader_ucs_good(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._reader_good", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":7
 * cdef boolean _skip_single_line(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     while _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 */
  while (1) {
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 7, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) break;

    /* "src/_decoder.pyx":8
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if _is_line_terminator(c0):
 *             break
 */
    __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 8, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 9, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":10
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 *             break             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":12
 *             break
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_single_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":7
 * cdef boolean _skip_single_line(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     while _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 */
  while (1) {
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 7, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) break;

    /* "src/_decoder.pyx":8
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if _is_line_terminator(c0):
 *             break
 */
    __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 8, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 9, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":10
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 *             break             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":12
 *             break
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_single_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":7
 * cdef boolean _skip_single_line(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     while _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 */
  while (1) {
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 7, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) break;

    /* "src/_decoder.pyx":8
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if _is_line_terminator(c0):
 *             break
 */
    __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 8, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 9, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":10
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 *             break             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":12
 *             break
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_single_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":7
 * cdef boolean _skip_single_line(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     while _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 */
  while (1) {
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 7, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) break;

    /* "src/_decoder.pyx":8
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if _is_line_terminator(c0):
 *             break
 */
    __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 8, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 9, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":10
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 *             break             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":12
 *             break
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_single_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__skip_single_line(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":7
 * cdef boolean _skip_single_line(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     while _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 */
  while (1) {
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 7, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (!__pyx_t_2) break;

    /* "src/_decoder.pyx":8
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if _is_line_terminator(c0):
 *             break
 */
    __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 8, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_4 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 9, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":10
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):
 *             break             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":9
 *     while _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         if _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":12
 *             break
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":5
 * 
 * 
 * cdef boolean _skip_single_line(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     while _reader_good(reader):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_single_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_v_seen_asterisk;
  Py_ssize_t __pyx_v_comment_start;
  bool __pyx_r;
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  std::uint32_t __pyx_t_4;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":17
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 */
  __pyx_v_seen_asterisk = 0;

  /* "src/_decoder.pyx":18
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 18, __pyx_L1_error)
  __pyx_v_comment_start = __pyx_t_1;

  /* "src/_decoder.pyx":20
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 21, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":22
 *     while True:
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":24
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'*':
 *             seen_asterisk = True
 */
    __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 24, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_4;

    /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
    __pyx_t_3 = (__pyx_v_c0 == '*');
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":26
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':
 *             seen_asterisk = True             # <<<<<<<<<<<<<<
 *         elif seen_asterisk:
 *             if c0 == b'/':
 */
      __pyx_v_seen_asterisk = 1;

      /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    __pyx_t_3 = (__pyx_v_seen_asterisk != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      __pyx_t_3 = (__pyx_v_c0 == '/');
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":29
 *         elif seen_asterisk:
 *             if c0 == b'/':
 *                 return True             # <<<<<<<<<<<<<<
 *             seen_asterisk = False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      }

      /* "src/_decoder.pyx":30
 *             if c0 == b'/':
 *                 return True
 *             seen_asterisk = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'comment', comment_start)
 */
      __pyx_v_seen_asterisk = 0;

      /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":32
 *             seen_asterisk = False
 * 
 *     _raise_unclosed(b'comment', comment_start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"comment"), __pyx_v_comment_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 32, __pyx_L1_error)

  /* "src/_decoder.pyx":33
 * 
 *     _raise_unclosed(b'comment', comment_start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_multiline_comment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_v_seen_asterisk;
  Py_ssize_t __pyx_v_comment_start;
  bool __pyx_r;
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  std::uint32_t __pyx_t_4;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":17
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 */
  __pyx_v_seen_asterisk = 0;

  /* "src/_decoder.pyx":18
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 18, __pyx_L1_error)
  __pyx_v_comment_start = __pyx_t_1;

  /* "src/_decoder.pyx":20
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 21, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":22
 *     while True:
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":24
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'*':
 *             seen_asterisk = True
 */
    __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 24, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_4;

    /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
    __pyx_t_3 = (__pyx_v_c0 == '*');
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":26
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':
 *             seen_asterisk = True             # <<<<<<<<<<<<<<
 *         elif seen_asterisk:
 *             if c0 == b'/':
 */
      __pyx_v_seen_asterisk = 1;

      /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    __pyx_t_3 = (__pyx_v_seen_asterisk != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      __pyx_t_3 = (__pyx_v_c0 == '/');
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":29
 *         elif seen_asterisk:
 *             if c0 == b'/':
 *                 return True             # <<<<<<<<<<<<<<
 *             seen_asterisk = False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      }

      /* "src/_decoder.pyx":30
 *             if c0 == b'/':
 *                 return True
 *             seen_asterisk = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'comment', comment_start)
 */
      __pyx_v_seen_asterisk = 0;

      /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":32
 *             seen_asterisk = False
 * 
 *     _raise_unclosed(b'comment', comment_start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"comment"), __pyx_v_comment_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 32, __pyx_L1_error)

  /* "src/_decoder.pyx":33
 * 
 *     _raise_unclosed(b'comment', comment_start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_multiline_comment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_v_seen_asterisk;
  Py_ssize_t __pyx_v_comment_start;
  bool __pyx_r;
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  std::uint32_t __pyx_t_4;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":17
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 */
  __pyx_v_seen_asterisk = 0;

  /* "src/_decoder.pyx":18
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 18, __pyx_L1_error)
  __pyx_v_comment_start = __pyx_t_1;

  /* "src/_decoder.pyx":20
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 21, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":22
 *     while True:
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":24
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'*':
 *             seen_asterisk = True
 */
    __pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 24, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_4;

    /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
    __pyx_t_3 = (__pyx_v_c0 == '*');
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":26
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':
 *             seen_asterisk = True             # <<<<<<<<<<<<<<
 *         elif seen_asterisk:
 *             if c0 == b'/':
 */
      __pyx_v_seen_asterisk = 1;

      /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    __pyx_t_3 = (__pyx_v_seen_asterisk != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      __pyx_t_3 = (__pyx_v_c0 == '/');
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":29
 *         elif seen_asterisk:
 *             if c0 == b'/':
 *                 return True             # <<<<<<<<<<<<<<
 *             seen_asterisk = False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      }

      /* "src/_decoder.pyx":30
 *             if c0 == b'/':
 *                 return True
 *             seen_asterisk = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'comment', comment_start)
 */
      __pyx_v_seen_asterisk = 0;

      /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":32
 *             seen_asterisk = False
 * 
 *     _raise_unclosed(b'comment', comment_start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"comment"), __pyx_v_comment_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 32, __pyx_L1_error)

  /* "src/_decoder.pyx":33
 * 
 *     _raise_unclosed(b'comment', comment_start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_multiline_comment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_v_seen_asterisk;
  Py_ssize_t __pyx_v_comment_start;
  bool __pyx_r;
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  std::uint32_t __pyx_t_4;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":17
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 */
  __pyx_v_seen_asterisk = 0;

  /* "src/_decoder.pyx":18
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 18, __pyx_L1_error)
  __pyx_v_comment_start = __pyx_t_1;

  /* "src/_decoder.pyx":20
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 21, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":22
 *     while True:
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":24
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'*':
 *             seen_asterisk = True
 */
    __pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 24, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_4;

    /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
    __pyx_t_3 = (__pyx_v_c0 == '*');
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":26
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':
 *             seen_asterisk = True             # <<<<<<<<<<<<<<
 *         elif seen_asterisk:
 *             if c0 == b'/':
 */
      __pyx_v_seen_asterisk = 1;

      /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    __pyx_t_3 = (__pyx_v_seen_asterisk != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      __pyx_t_3 = (__pyx_v_c0 == '/');
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":29
 *         elif seen_asterisk:
 *             if c0 == b'/':
 *                 return True             # <<<<<<<<<<<<<<
 *             seen_asterisk = False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      }

      /* "src/_decoder.pyx":30
 *             if c0 == b'/':
 *                 return True
 *             seen_asterisk = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'comment', comment_start)
 */
      __pyx_v_seen_asterisk = 0;

      /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":32
 *             seen_asterisk = False
 * 
 *     _raise_unclosed(b'comment', comment_start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"comment"), __pyx_v_comment_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 32, __pyx_L1_error)

  /* "src/_decoder.pyx":33
 * 
 *     _raise_unclosed(b'comment', comment_start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_multiline_comment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__skip_multiline_comment(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  bool __pyx_v_seen_asterisk;
  Py_ssize_t __pyx_v_comment_start;
  bool __pyx_r;
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  std::uint32_t __pyx_t_4;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":17
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 */
  __pyx_v_seen_asterisk = 0;

  /* "src/_decoder.pyx":18
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 18, __pyx_L1_error)
  __pyx_v_comment_start = __pyx_t_1;

  /* "src/_decoder.pyx":20
 *     cdef Py_ssize_t comment_start = _reader_tell(reader)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 21, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":22
 *     while True:
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":21
 * 
 *     while True:
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":24
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'*':
 *             seen_asterisk = True
 */
    __pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 24, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_4;

    /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
    __pyx_t_3 = (__pyx_v_c0 == '*');
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":26
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':
 *             seen_asterisk = True             # <<<<<<<<<<<<<<
 *         elif seen_asterisk:
 *             if c0 == b'/':
 */
      __pyx_v_seen_asterisk = 1;

      /* "src/_decoder.pyx":25
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'*':             # <<<<<<<<<<<<<<
 *             seen_asterisk = True
 *         elif seen_asterisk:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    __pyx_t_3 = (__pyx_v_seen_asterisk != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      __pyx_t_3 = (__pyx_v_c0 == '/');
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":29
 *         elif seen_asterisk:
 *             if c0 == b'/':
 *                 return True             # <<<<<<<<<<<<<<
 *             seen_asterisk = False
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "src/_decoder.pyx":28
 *             seen_asterisk = True
 *         elif seen_asterisk:
 *             if c0 == b'/':             # <<<<<<<<<<<<<<
 *                 return True
 *             seen_asterisk = False
 */
      }

      /* "src/_decoder.pyx":30
 *             if c0 == b'/':
 *                 return True
 *             seen_asterisk = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'comment', comment_start)
 */
      __pyx_v_seen_asterisk = 0;

      /* "src/_decoder.pyx":27
 *         if c0 == b'*':
 *             seen_asterisk = True
 *         elif seen_asterisk:             # <<<<<<<<<<<<<<
 *             if c0 == b'/':
 *                 return True
 */
    }
    __pyx_L6:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":32
 *             seen_asterisk = False
 * 
 *     _raise_unclosed(b'comment', comment_start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
  __pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"comment"), __pyx_v_comment_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 32, __pyx_L1_error)

  /* "src/_decoder.pyx":33
 * 
 *     _raise_unclosed(b'comment', comment_start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":15
 * 
 * 
 * cdef boolean _skip_multiline_comment(ReaderRef reader) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef boolean seen_asterisk = False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_multiline_comment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  bool __pyx_v_seen_slash;
  std::int32_t __pyx_r;
  int __pyx_t_1;
  bool __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":40
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 *     cdef boolean seen_slash
 * 
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":43
 *     cdef boolean seen_slash
 * 
 *     seen_slash = False             # <<<<<<<<<<<<<<
 *     while True:
 *         if c0 == b'/':
 */
  __pyx_v_seen_slash = 0;

  /* "src/_decoder.pyx":44
 * 
 *     seen_slash = False
 *     while True:             # <<<<<<<<<<<<<<
 *         if c0 == b'/':
 *             if seen_slash:
 */
  while (1) {

    /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
    __pyx_t_1 = (__pyx_v_c0 == '/');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
      __pyx_t_1 = (__pyx_v_seen_slash != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":47
 *         if c0 == b'/':
 *             if seen_slash:
 *                 _skip_single_line(reader)             # <<<<<<<<<<<<<<
 *                 seen_slash = False
 *             else:
 */
        __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_single_line(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 47, __pyx_L1_error)

        /* "src/_decoder.pyx":48
 *             if seen_slash:
 *                 _skip_single_line(reader)
 *                 seen_slash = False             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_slash = True
 */
        __pyx_v_seen_slash = 0;

        /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
        goto __pyx_L6;
      }

      /* "src/_decoder.pyx":50
 *                 seen_slash = False
 *             else:
 *                 seen_slash = True             # <<<<<<<<<<<<<<
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 */
      /*else*/ {
        __pyx_v_seen_slash = 1;
      }
      __pyx_L6:;

      /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
    __pyx_t_1 = (__pyx_v_c0 == '*');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_v_seen_slash != 0)), 0) != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":53
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *             _skip_multiline_comment(reader)
 */
        __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 53, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"asterisk"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 53, __pyx_L1_error)

        /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      }

      /* "src/_decoder.pyx":55
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 *             _skip_multiline_comment(reader)             # <<<<<<<<<<<<<<
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 */
      __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_multiline_comment(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 55, __pyx_L1_error)

      /* "src/_decoder.pyx":56
 * 
 *             _skip_multiline_comment(reader)
 *             seen_slash = False             # <<<<<<<<<<<<<<
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_seen_slash = 0;

      /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 57, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_2 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":58
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 *         elif expect(seen_slash, False):
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":59
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }

    /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":61
 *             break
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
      __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 61, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 61, __pyx_L1_error)

      /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    }
    __pyx_L5:;

    /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 63, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_5 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":64
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":65
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":67
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(seen_slash, False):
 */
    __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 67, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_6;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":70
 * 
 *     if expect(seen_slash, False):
 *         _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *     return c1
 */
    __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 70, __pyx_L1_error)

    /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  }

  /* "src/_decoder.pyx":72
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  bool __pyx_v_seen_slash;
  std::int32_t __pyx_r;
  int __pyx_t_1;
  bool __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":40
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 *     cdef boolean seen_slash
 * 
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":43
 *     cdef boolean seen_slash
 * 
 *     seen_slash = False             # <<<<<<<<<<<<<<
 *     while True:
 *         if c0 == b'/':
 */
  __pyx_v_seen_slash = 0;

  /* "src/_decoder.pyx":44
 * 
 *     seen_slash = False
 *     while True:             # <<<<<<<<<<<<<<
 *         if c0 == b'/':
 *             if seen_slash:
 */
  while (1) {

    /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
    __pyx_t_1 = (__pyx_v_c0 == '/');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
      __pyx_t_1 = (__pyx_v_seen_slash != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":47
 *         if c0 == b'/':
 *             if seen_slash:
 *                 _skip_single_line(reader)             # <<<<<<<<<<<<<<
 *                 seen_slash = False
 *             else:
 */
        __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_single_line(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 47, __pyx_L1_error)

        /* "src/_decoder.pyx":48
 *             if seen_slash:
 *                 _skip_single_line(reader)
 *                 seen_slash = False             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_slash = True
 */
        __pyx_v_seen_slash = 0;

        /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
        goto __pyx_L6;
      }

      /* "src/_decoder.pyx":50
 *                 seen_slash = False
 *             else:
 *                 seen_slash = True             # <<<<<<<<<<<<<<
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 */
      /*else*/ {
        __pyx_v_seen_slash = 1;
      }
      __pyx_L6:;

      /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
    __pyx_t_1 = (__pyx_v_c0 == '*');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_v_seen_slash != 0)), 0) != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":53
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *             _skip_multiline_comment(reader)
 */
        __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 53, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"asterisk"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 53, __pyx_L1_error)

        /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      }

      /* "src/_decoder.pyx":55
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 *             _skip_multiline_comment(reader)             # <<<<<<<<<<<<<<
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 */
      __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_multiline_comment(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 55, __pyx_L1_error)

      /* "src/_decoder.pyx":56
 * 
 *             _skip_multiline_comment(reader)
 *             seen_slash = False             # <<<<<<<<<<<<<<
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_seen_slash = 0;

      /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 57, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_2 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":58
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 *         elif expect(seen_slash, False):
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":59
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }

    /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":61
 *             break
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
      __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 61, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 61, __pyx_L1_error)

      /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    }
    __pyx_L5:;

    /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 63, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_5 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":64
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":65
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":67
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(seen_slash, False):
 */
    __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 67, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_6;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":70
 * 
 *     if expect(seen_slash, False):
 *         _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *     return c1
 */
    __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 70, __pyx_L1_error)

    /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  }

  /* "src/_decoder.pyx":72
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  bool __pyx_v_seen_slash;
  std::int32_t __pyx_r;
  int __pyx_t_1;
  bool __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":40
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 *     cdef boolean seen_slash
 * 
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":43
 *     cdef boolean seen_slash
 * 
 *     seen_slash = False             # <<<<<<<<<<<<<<
 *     while True:
 *         if c0 == b'/':
 */
  __pyx_v_seen_slash = 0;

  /* "src/_decoder.pyx":44
 * 
 *     seen_slash = False
 *     while True:             # <<<<<<<<<<<<<<
 *         if c0 == b'/':
 *             if seen_slash:
 */
  while (1) {

    /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
    __pyx_t_1 = (__pyx_v_c0 == '/');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
      __pyx_t_1 = (__pyx_v_seen_slash != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":47
 *         if c0 == b'/':
 *             if seen_slash:
 *                 _skip_single_line(reader)             # <<<<<<<<<<<<<<
 *                 seen_slash = False
 *             else:
 */
        __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_single_line(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 47, __pyx_L1_error)

        /* "src/_decoder.pyx":48
 *             if seen_slash:
 *                 _skip_single_line(reader)
 *                 seen_slash = False             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_slash = True
 */
        __pyx_v_seen_slash = 0;

        /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
        goto __pyx_L6;
      }

      /* "src/_decoder.pyx":50
 *                 seen_slash = False
 *             else:
 *                 seen_slash = True             # <<<<<<<<<<<<<<
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 */
      /*else*/ {
        __pyx_v_seen_slash = 1;
      }
      __pyx_L6:;

      /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
    __pyx_t_1 = (__pyx_v_c0 == '*');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_v_seen_slash != 0)), 0) != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":53
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *             _skip_multiline_comment(reader)
 */
        __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 53, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"asterisk"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 53, __pyx_L1_error)

        /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      }

      /* "src/_decoder.pyx":55
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 *             _skip_multiline_comment(reader)             # <<<<<<<<<<<<<<
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 */
      __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_multiline_comment(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 55, __pyx_L1_error)

      /* "src/_decoder.pyx":56
 * 
 *             _skip_multiline_comment(reader)
 *             seen_slash = False             # <<<<<<<<<<<<<<
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_seen_slash = 0;

      /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 57, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_2 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":58
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 *         elif expect(seen_slash, False):
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":59
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }

    /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":61
 *             break
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
      __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 61, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 61, __pyx_L1_error)

      /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    }
    __pyx_L5:;

    /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 63, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_5 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":64
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":65
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":67
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(seen_slash, False):
 */
    __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 67, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_6;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":70
 * 
 *     if expect(seen_slash, False):
 *         _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *     return c1
 */
    __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 70, __pyx_L1_error)

    /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  }

  /* "src/_decoder.pyx":72
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  bool __pyx_v_seen_slash;
  std::int32_t __pyx_r;
  int __pyx_t_1;
  bool __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":40
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 *     cdef boolean seen_slash
 * 
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":43
 *     cdef boolean seen_slash
 * 
 *     seen_slash = False             # <<<<<<<<<<<<<<
 *     while True:
 *         if c0 == b'/':
 */
  __pyx_v_seen_slash = 0;

  /* "src/_decoder.pyx":44
 * 
 *     seen_slash = False
 *     while True:             # <<<<<<<<<<<<<<
 *         if c0 == b'/':
 *             if seen_slash:
 */
  while (1) {

    /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
    __pyx_t_1 = (__pyx_v_c0 == '/');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
      __pyx_t_1 = (__pyx_v_seen_slash != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":47
 *         if c0 == b'/':
 *             if seen_slash:
 *                 _skip_single_line(reader)             # <<<<<<<<<<<<<<
 *                 seen_slash = False
 *             else:
 */
        __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_single_line(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 47, __pyx_L1_error)

        /* "src/_decoder.pyx":48
 *             if seen_slash:
 *                 _skip_single_line(reader)
 *                 seen_slash = False             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_slash = True
 */
        __pyx_v_seen_slash = 0;

        /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
        goto __pyx_L6;
      }

      /* "src/_decoder.pyx":50
 *                 seen_slash = False
 *             else:
 *                 seen_slash = True             # <<<<<<<<<<<<<<
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 */
      /*else*/ {
        __pyx_v_seen_slash = 1;
      }
      __pyx_L6:;

      /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
    __pyx_t_1 = (__pyx_v_c0 == '*');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_v_seen_slash != 0)), 0) != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":53
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *             _skip_multiline_comment(reader)
 */
        __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 53, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"asterisk"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 53, __pyx_L1_error)

        /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      }

      /* "src/_decoder.pyx":55
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 *             _skip_multiline_comment(reader)             # <<<<<<<<<<<<<<
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 */
      __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_multiline_comment(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 55, __pyx_L1_error)

      /* "src/_decoder.pyx":56
 * 
 *             _skip_multiline_comment(reader)
 *             seen_slash = False             # <<<<<<<<<<<<<<
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_seen_slash = 0;

      /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 57, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_2 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":58
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 *         elif expect(seen_slash, False):
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":59
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }

    /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":61
 *             break
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
      __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 61, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 61, __pyx_L1_error)

      /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    }
    __pyx_L5:;

    /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 63, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_5 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":64
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":65
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":67
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(seen_slash, False):
 */
    __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 67, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_6;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":70
 * 
 *     if expect(seen_slash, False):
 *         _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *     return c1
 */
    __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 70, __pyx_L1_error)

    /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  }

  /* "src/_decoder.pyx":72
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  bool __pyx_v_seen_slash;
  std::int32_t __pyx_r;
  int __pyx_t_1;
  bool __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":40
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 *     cdef boolean seen_slash
 * 
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":43
 *     cdef boolean seen_slash
 * 
 *     seen_slash = False             # <<<<<<<<<<<<<<
 *     while True:
 *         if c0 == b'/':
 */
  __pyx_v_seen_slash = 0;

  /* "src/_decoder.pyx":44
 * 
 *     seen_slash = False
 *     while True:             # <<<<<<<<<<<<<<
 *         if c0 == b'/':
 *             if seen_slash:
 */
  while (1) {

    /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
    __pyx_t_1 = (__pyx_v_c0 == '/');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
      __pyx_t_1 = (__pyx_v_seen_slash != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":47
 *         if c0 == b'/':
 *             if seen_slash:
 *                 _skip_single_line(reader)             # <<<<<<<<<<<<<<
 *                 seen_slash = False
 *             else:
 */
        __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_single_line(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 47, __pyx_L1_error)

        /* "src/_decoder.pyx":48
 *             if seen_slash:
 *                 _skip_single_line(reader)
 *                 seen_slash = False             # <<<<<<<<<<<<<<
 *             else:
 *                 seen_slash = True
 */
        __pyx_v_seen_slash = 0;

        /* "src/_decoder.pyx":46
 *     while True:
 *         if c0 == b'/':
 *             if seen_slash:             # <<<<<<<<<<<<<<
 *                 _skip_single_line(reader)
 *                 seen_slash = False
 */
        goto __pyx_L6;
      }

      /* "src/_decoder.pyx":50
 *                 seen_slash = False
 *             else:
 *                 seen_slash = True             # <<<<<<<<<<<<<<
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 */
      /*else*/ {
        __pyx_v_seen_slash = 1;
      }
      __pyx_L6:;

      /* "src/_decoder.pyx":45
 *     seen_slash = False
 *     while True:
 *         if c0 == b'/':             # <<<<<<<<<<<<<<
 *             if seen_slash:
 *                 _skip_single_line(reader)
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
    __pyx_t_1 = (__pyx_v_c0 == '*');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_v_seen_slash != 0)), 0) != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":53
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *             _skip_multiline_comment(reader)
 */
        __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 53, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"asterisk"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 53, __pyx_L1_error)

        /* "src/_decoder.pyx":52
 *                 seen_slash = True
 *         elif c0 == b'*':
 *             if expect(not seen_slash, False):             # <<<<<<<<<<<<<<
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 */
      }

      /* "src/_decoder.pyx":55
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 * 
 *             _skip_multiline_comment(reader)             # <<<<<<<<<<<<<<
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 */
      __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_multiline_comment(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 55, __pyx_L1_error)

      /* "src/_decoder.pyx":56
 * 
 *             _skip_multiline_comment(reader)
 *             seen_slash = False             # <<<<<<<<<<<<<<
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_seen_slash = 0;

      /* "src/_decoder.pyx":51
 *             else:
 *                 seen_slash = True
 *         elif c0 == b'*':             # <<<<<<<<<<<<<<
 *             if expect(not seen_slash, False):
 *                 _raise_stray_character('asterisk', _reader_tell(reader))
 */
      goto __pyx_L5;
    }

    /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 57, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_2 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":58
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 *         elif expect(seen_slash, False):
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":59
 *         elif not _is_ws_zs(c0):
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":57
 *             _skip_multiline_comment(reader)
 *             seen_slash = False
 *         elif not _is_ws_zs(c0):             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }

    /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":61
 *             break
 *         elif expect(seen_slash, False):
 *             _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
      __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 61, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 61, __pyx_L1_error)

      /* "src/_decoder.pyx":60
 *             c1 = cast_to_int32(c0)
 *             break
 *         elif expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
    }
    __pyx_L5:;

    /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 63, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_5 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":64
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":65
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":63
 *             _raise_stray_character('slash', _reader_tell(reader))
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":67
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(seen_slash, False):
 */
    __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 67, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_6;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  __pyx_t_1 = (JSON5EncoderCpp_expect(__pyx_v_seen_slash, 0) != 0);
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":70
 * 
 *     if expect(seen_slash, False):
 *         _raise_stray_character('slash', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *     return c1
 */
    __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"slash"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 70, __pyx_L1_error)

    /* "src/_decoder.pyx":69
 *         c0 = _reader_get(reader)
 * 
 *     if expect(seen_slash, False):             # <<<<<<<<<<<<<<
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 */
  }

  /* "src/_decoder.pyx":72
 *         _raise_stray_character('slash', _reader_tell(reader))
 * 
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":39
 * # -1: exhausted
 * # -2: exception
 * cdef int32_t _skip_to_data_sub(ReaderRef reader, uint32_t c0) except -2:             # <<<<<<<<<<<<<<
 *     cdef int32_t c1 = 0  # silence warning
 *     cdef boolean seen_slash
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 81, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":82
 *     cdef int32_t c1
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 */
    __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 82, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":83
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = -1
 */
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c0); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 83, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_1;

    /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":85
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 *         c1 = -1             # <<<<<<<<<<<<<<
 *     return c1
 * 
 */
  /*else*/ {
    __pyx_v_c1 = -1L;
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":86
 *     else:
 *         c1 = -1
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 81, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":82
 *     cdef int32_t c1
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 */
    __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 82, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":83
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = -1
 */
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c0); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 83, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_1;

    /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":85
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 *         c1 = -1             # <<<<<<<<<<<<<<
 *     return c1
 * 
 */
  /*else*/ {
    __pyx_v_c1 = -1L;
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":86
 *     else:
 *         c1 = -1
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 81, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":82
 *     cdef int32_t c1
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 */
    __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 82, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":83
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = -1
 */
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c0); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 83, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_1;

    /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":85
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 *         c1 = -1             # <<<<<<<<<<<<<<
 *     return c1
 * 
 */
  /*else*/ {
    __pyx_v_c1 = -1L;
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":86
 *     else:
 *         c1 = -1
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 81, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":82
 *     cdef int32_t c1
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 */
    __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 82, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":83
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = -1
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c0); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 83, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_1;

    /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":85
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 *         c1 = -1             # <<<<<<<<<<<<<<
 *     return c1
 * 
 */
  /*else*/ {
    __pyx_v_c1 = -1L;
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":86
 *     else:
 *         c1 = -1
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 81, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":82
 *     cdef int32_t c1
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 */
    __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 82, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_3;

    /* "src/_decoder.pyx":83
 *     if _reader_good(reader):
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = -1
 */
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c0); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 83, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_1;

    /* "src/_decoder.pyx":81
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     if _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c0 = _reader_get(reader)
 *         c1 = _skip_to_data_sub(reader, c0)
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":85
 *         c1 = _skip_to_data_sub(reader, c0)
 *     else:
 *         c1 = -1             # <<<<<<<<<<<<<<
 *     return c1
 * 
 */
  /*else*/ {
    __pyx_v_c1 = -1L;
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":86
 *     else:
 *         c1 = -1
 *     return c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c1;
  goto __pyx_L0;

  /* "src/_decoder.pyx":78
 * # -1 exhausted
 * # -2 exception
 * cdef int32_t _skip_to_data(ReaderRef reader) except -2:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_to_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -2L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_start;
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_result;
  CYTHON_UNUSED Py_ssize_t __pyx_v_index;
  std::int32_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  std::uint32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":95
 *     cdef Py_ssize_t index
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     result = 0
 *     for index in range(length):
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":96
 * 
 *     start = _reader_tell(reader)
 *     result = 0             # <<<<<<<<<<<<<<
 *     for index in range(length):
 *         result <<= 4
 */
  __pyx_v_result = 0;

  /* "src/_decoder.pyx":97
 *     start = _reader_tell(reader)
 *     result = 0
 *     for index in range(length):             # <<<<<<<<<<<<<<
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_index = __pyx_t_3;

    /* "src/_decoder.pyx":98
 *     result = 0
 *     for index in range(length):
 *         result <<= 4             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)
 */
    __pyx_v_result = (__pyx_v_result << 4);

    /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 99, __pyx_L1_error)
    __pyx_t_5 = (JSON5EncoderCpp_expect((!(__pyx_t_4 != 0)), 0) != 0);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":100
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_6 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"escape sequence"), __pyx_v_start); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 100, __pyx_L1_error)

      /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    }

    /* "src/_decoder.pyx":102
 *             _raise_unclosed(b'escape sequence', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 */
    __pyx_t_7 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_7 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_7;

    /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
    __pyx_t_5 = ('0' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= '9');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":104
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'             # <<<<<<<<<<<<<<
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 */
      __pyx_v_result = (__pyx_v_result | (__pyx_v_c0 - ((std::uint32_t)'0')));

      /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
    __pyx_t_5 = ('a' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'f');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":106
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10             # <<<<<<<<<<<<<<
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'a')) + 10));

      /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
    __pyx_t_5 = ('A' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'F');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":108
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'A')) + 10));

      /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":110
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)             # <<<<<<<<<<<<<<
 * 
 *     if expect(result > 0x10ffff, False):
 */
    /*else*/ {
      __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"hexadecimal character"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 110, __pyx_L1_error)
    }
    __pyx_L6:;
  }

  /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  __pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_v_result > 0x10ffff), 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":113
 * 
 *     if expect(result > 0x10ffff, False):
 *         _raise_expected_s('Unicode code point', start, result)             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_int32(result)
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"Unicode code point"), __pyx_v_start, __pyx_v_result); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 113, __pyx_L1_error)

    /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  }

  /* "src/_decoder.pyx":115
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 *     return cast_to_int32(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_result);
  goto __pyx_L0;

  /* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_hex_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_start;
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_result;
  CYTHON_UNUSED Py_ssize_t __pyx_v_index;
  std::int32_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  std::uint32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":95
 *     cdef Py_ssize_t index
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     result = 0
 *     for index in range(length):
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":96
 * 
 *     start = _reader_tell(reader)
 *     result = 0             # <<<<<<<<<<<<<<
 *     for index in range(length):
 *         result <<= 4
 */
  __pyx_v_result = 0;

  /* "src/_decoder.pyx":97
 *     start = _reader_tell(reader)
 *     result = 0
 *     for index in range(length):             # <<<<<<<<<<<<<<
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_index = __pyx_t_3;

    /* "src/_decoder.pyx":98
 *     result = 0
 *     for index in range(length):
 *         result <<= 4             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)
 */
    __pyx_v_result = (__pyx_v_result << 4);

    /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 99, __pyx_L1_error)
    __pyx_t_5 = (JSON5EncoderCpp_expect((!(__pyx_t_4 != 0)), 0) != 0);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":100
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_6 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"escape sequence"), __pyx_v_start); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 100, __pyx_L1_error)

      /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    }

    /* "src/_decoder.pyx":102
 *             _raise_unclosed(b'escape sequence', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 */
    __pyx_t_7 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_7 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_7;

    /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
    __pyx_t_5 = ('0' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= '9');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":104
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'             # <<<<<<<<<<<<<<
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 */
      __pyx_v_result = (__pyx_v_result | (__pyx_v_c0 - ((std::uint32_t)'0')));

      /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
    __pyx_t_5 = ('a' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'f');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":106
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10             # <<<<<<<<<<<<<<
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'a')) + 10));

      /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
    __pyx_t_5 = ('A' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'F');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":108
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'A')) + 10));

      /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":110
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)             # <<<<<<<<<<<<<<
 * 
 *     if expect(result > 0x10ffff, False):
 */
    /*else*/ {
      __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"hexadecimal character"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 110, __pyx_L1_error)
    }
    __pyx_L6:;
  }

  /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  __pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_v_result > 0x10ffff), 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":113
 * 
 *     if expect(result > 0x10ffff, False):
 *         _raise_expected_s('Unicode code point', start, result)             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_int32(result)
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"Unicode code point"), __pyx_v_start, __pyx_v_result); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 113, __pyx_L1_error)

    /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  }

  /* "src/_decoder.pyx":115
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 *     return cast_to_int32(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_result);
  goto __pyx_L0;

  /* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_hex_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_start;
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_result;
  CYTHON_UNUSED Py_ssize_t __pyx_v_index;
  std::int32_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  std::uint32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":95
 *     cdef Py_ssize_t index
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     result = 0
 *     for index in range(length):
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":96
 * 
 *     start = _reader_tell(reader)
 *     result = 0             # <<<<<<<<<<<<<<
 *     for index in range(length):
 *         result <<= 4
 */
  __pyx_v_result = 0;

  /* "src/_decoder.pyx":97
 *     start = _reader_tell(reader)
 *     result = 0
 *     for index in range(length):             # <<<<<<<<<<<<<<
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_index = __pyx_t_3;

    /* "src/_decoder.pyx":98
 *     result = 0
 *     for index in range(length):
 *         result <<= 4             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)
 */
    __pyx_v_result = (__pyx_v_result << 4);

    /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    __pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 99, __pyx_L1_error)
    __pyx_t_5 = (JSON5EncoderCpp_expect((!(__pyx_t_4 != 0)), 0) != 0);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":100
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_6 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"escape sequence"), __pyx_v_start); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 100, __pyx_L1_error)

      /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    }

    /* "src/_decoder.pyx":102
 *             _raise_unclosed(b'escape sequence', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 */
    __pyx_t_7 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_7 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_7;

    /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
    __pyx_t_5 = ('0' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= '9');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":104
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'             # <<<<<<<<<<<<<<
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 */
      __pyx_v_result = (__pyx_v_result | (__pyx_v_c0 - ((std::uint32_t)'0')));

      /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
    __pyx_t_5 = ('a' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'f');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":106
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10             # <<<<<<<<<<<<<<
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'a')) + 10));

      /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
    __pyx_t_5 = ('A' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'F');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":108
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'A')) + 10));

      /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":110
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)             # <<<<<<<<<<<<<<
 * 
 *     if expect(result > 0x10ffff, False):
 */
    /*else*/ {
      __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"hexadecimal character"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 110, __pyx_L1_error)
    }
    __pyx_L6:;
  }

  /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  __pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_v_result > 0x10ffff), 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":113
 * 
 *     if expect(result > 0x10ffff, False):
 *         _raise_expected_s('Unicode code point', start, result)             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_int32(result)
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"Unicode code point"), __pyx_v_start, __pyx_v_result); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 113, __pyx_L1_error)

    /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  }

  /* "src/_decoder.pyx":115
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 *     return cast_to_int32(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_result);
  goto __pyx_L0;

  /* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_hex_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_start;
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_result;
  CYTHON_UNUSED Py_ssize_t __pyx_v_index;
  std::int32_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  std::uint32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":95
 *     cdef Py_ssize_t index
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     result = 0
 *     for index in range(length):
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":96
 * 
 *     start = _reader_tell(reader)
 *     result = 0             # <<<<<<<<<<<<<<
 *     for index in range(length):
 *         result <<= 4
 */
  __pyx_v_result = 0;

  /* "src/_decoder.pyx":97
 *     start = _reader_tell(reader)
 *     result = 0
 *     for index in range(length):             # <<<<<<<<<<<<<<
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_index = __pyx_t_3;

    /* "src/_decoder.pyx":98
 *     result = 0
 *     for index in range(length):
 *         result <<= 4             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)
 */
    __pyx_v_result = (__pyx_v_result << 4);

    /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    __pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 99, __pyx_L1_error)
    __pyx_t_5 = (JSON5EncoderCpp_expect((!(__pyx_t_4 != 0)), 0) != 0);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":100
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_6 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"escape sequence"), __pyx_v_start); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 100, __pyx_L1_error)

      /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    }

    /* "src/_decoder.pyx":102
 *             _raise_unclosed(b'escape sequence', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 */
    __pyx_t_7 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_7 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_7;

    /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
    __pyx_t_5 = ('0' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= '9');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":104
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'             # <<<<<<<<<<<<<<
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 */
      __pyx_v_result = (__pyx_v_result | (__pyx_v_c0 - ((std::uint32_t)'0')));

      /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
    __pyx_t_5 = ('a' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'f');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":106
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10             # <<<<<<<<<<<<<<
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'a')) + 10));

      /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
    __pyx_t_5 = ('A' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'F');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":108
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'A')) + 10));

      /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":110
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)             # <<<<<<<<<<<<<<
 * 
 *     if expect(result > 0x10ffff, False):
 */
    /*else*/ {
      __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"hexadecimal character"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 110, __pyx_L1_error)
    }
    __pyx_L6:;
  }

  /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  __pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_v_result > 0x10ffff), 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":113
 * 
 *     if expect(result > 0x10ffff, False):
 *         _raise_expected_s('Unicode code point', start, result)             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_int32(result)
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"Unicode code point"), __pyx_v_start, __pyx_v_result); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 113, __pyx_L1_error)

    /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  }

  /* "src/_decoder.pyx":115
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 *     return cast_to_int32(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_result);
  goto __pyx_L0;

  /* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_hex_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_start;
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_result;
  CYTHON_UNUSED Py_ssize_t __pyx_v_index;
  std::int32_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  std::int32_t __pyx_t_4;
  int __pyx_t_5;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
  std::uint32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":95
 *     cdef Py_ssize_t index
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     result = 0
 *     for index in range(length):
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":96
 * 
 *     start = _reader_tell(reader)
 *     result = 0             # <<<<<<<<<<<<<<
 *     for index in range(length):
 *         result <<= 4
 */
  __pyx_v_result = 0;

  /* "src/_decoder.pyx":97
 *     start = _reader_tell(reader)
 *     result = 0
 *     for index in range(length):             # <<<<<<<<<<<<<<
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_v_length;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_index = __pyx_t_3;

    /* "src/_decoder.pyx":98
 *     result = 0
 *     for index in range(length):
 *         result <<= 4             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)
 */
    __pyx_v_result = (__pyx_v_result << 4);

    /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    __pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 99, __pyx_L1_error)
    __pyx_t_5 = (JSON5EncoderCpp_expect((!(__pyx_t_4 != 0)), 0) != 0);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":100
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'escape sequence', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_6 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"escape sequence"), __pyx_v_start); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 100, __pyx_L1_error)

      /* "src/_decoder.pyx":99
 *     for index in range(length):
 *         result <<= 4
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'escape sequence', start)
 * 
 */
    }

    /* "src/_decoder.pyx":102
 *             _raise_unclosed(b'escape sequence', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 */
    __pyx_t_7 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_7 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_7;

    /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
    __pyx_t_5 = ('0' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= '9');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":104
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'             # <<<<<<<<<<<<<<
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 */
      __pyx_v_result = (__pyx_v_result | (__pyx_v_c0 - ((std::uint32_t)'0')));

      /* "src/_decoder.pyx":103
 * 
 *         c0 = _reader_get(reader)
 *         if b'0' <= c0 <= b'9':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
    __pyx_t_5 = ('a' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'f');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":106
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10             # <<<<<<<<<<<<<<
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'a')) + 10));

      /* "src/_decoder.pyx":105
 *         if b'0' <= c0 <= b'9':
 *             result |= c0 - <uint32_t> b'0'
 *         elif b'a' <= c0 <= b'f':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
    __pyx_t_5 = ('A' <= __pyx_v_c0);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_c0 <= 'F');
    }
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":108
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':
 *             result |= c0 - <uint32_t> b'A' + 10             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)
 */
      __pyx_v_result = (__pyx_v_result | ((__pyx_v_c0 - ((std::uint32_t)'A')) + 10));

      /* "src/_decoder.pyx":107
 *         elif b'a' <= c0 <= b'f':
 *             result |= c0 - <uint32_t> b'a' + 10
 *         elif b'A' <= c0 <= b'F':             # <<<<<<<<<<<<<<
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":110
 *             result |= c0 - <uint32_t> b'A' + 10
 *         else:
 *             _raise_expected_s('hexadecimal character', start, c0)             # <<<<<<<<<<<<<<
 * 
 *     if expect(result > 0x10ffff, False):
 */
    /*else*/ {
      __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"hexadecimal character"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 110, __pyx_L1_error)
    }
    __pyx_L6:;
  }

  /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  __pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_v_result > 0x10ffff), 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":113
 * 
 *     if expect(result > 0x10ffff, False):
 *         _raise_expected_s('Unicode code point', start, result)             # <<<<<<<<<<<<<<
 * 
 *     return cast_to_int32(result)
 */
    __pyx_t_6 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"Unicode code point"), __pyx_v_start, __pyx_v_result); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 113, __pyx_L1_error)

    /* "src/_decoder.pyx":112
 *             _raise_expected_s('hexadecimal character', start, c0)
 * 
 *     if expect(result > 0x10ffff, False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 */
  }

  /* "src/_decoder.pyx":115
 *         _raise_expected_s('Unicode code point', start, result)
 * 
 *     return cast_to_int32(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_result);
  goto __pyx_L0;

  /* "src/_decoder.pyx":89
 * 
 * 
 * cdef int32_t _get_hex_character(ReaderRef reader, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_hex_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":123
 *     cdef uint32_t c1
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 123, __pyx_L1_error)
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c0), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":125
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)             # <<<<<<<<<<<<<<
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"high surrogate before low surrogate"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 125, __pyx_L1_error)

    /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  __pyx_t_2 = (!(JSON5EncoderCpp::unicode_is_hi_surrogate(__pyx_v_c0) != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":127
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     _accept_string(reader, b'\\u')
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":129
 *         return c0
 * 
 *     _accept_string(reader, b'\\u')             # <<<<<<<<<<<<<<
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 */
  __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"\\u")); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 129, __pyx_L1_error)

  /* "src/_decoder.pyx":131
 *     _accept_string(reader, b'\\u')
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect((!(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c1) != 0)), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":133
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return unicode_join_surrogates(c0, c1)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"low surrogate"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 133, __pyx_L1_error)

    /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  }

  /* "src/_decoder.pyx":135
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 *     return unicode_join_surrogates(c0, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::unicode_join_surrogates(__pyx_v_c0, __pyx_v_c1);
  goto __pyx_L0;

  /* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escaped_unicode_maybe_surrogate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":123
 *     cdef uint32_t c1
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 123, __pyx_L1_error)
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c0), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":125
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)             # <<<<<<<<<<<<<<
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"high surrogate before low surrogate"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 125, __pyx_L1_error)

    /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  __pyx_t_2 = (!(JSON5EncoderCpp::unicode_is_hi_surrogate(__pyx_v_c0) != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":127
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     _accept_string(reader, b'\\u')
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":129
 *         return c0
 * 
 *     _accept_string(reader, b'\\u')             # <<<<<<<<<<<<<<
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 */
  __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"\\u")); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 129, __pyx_L1_error)

  /* "src/_decoder.pyx":131
 *     _accept_string(reader, b'\\u')
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect((!(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c1) != 0)), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":133
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return unicode_join_surrogates(c0, c1)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"low surrogate"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 133, __pyx_L1_error)

    /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  }

  /* "src/_decoder.pyx":135
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 *     return unicode_join_surrogates(c0, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::unicode_join_surrogates(__pyx_v_c0, __pyx_v_c1);
  goto __pyx_L0;

  /* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escaped_unicode_maybe_surrogate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":123
 *     cdef uint32_t c1
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 123, __pyx_L1_error)
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c0), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":125
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)             # <<<<<<<<<<<<<<
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"high surrogate before low surrogate"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 125, __pyx_L1_error)

    /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  __pyx_t_2 = (!(JSON5EncoderCpp::unicode_is_hi_surrogate(__pyx_v_c0) != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":127
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     _accept_string(reader, b'\\u')
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":129
 *         return c0
 * 
 *     _accept_string(reader, b'\\u')             # <<<<<<<<<<<<<<
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 */
  __pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"\\u")); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 129, __pyx_L1_error)

  /* "src/_decoder.pyx":131
 *     _accept_string(reader, b'\\u')
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect((!(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c1) != 0)), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":133
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return unicode_join_surrogates(c0, c1)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"low surrogate"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 133, __pyx_L1_error)

    /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  }

  /* "src/_decoder.pyx":135
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 *     return unicode_join_surrogates(c0, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::unicode_join_surrogates(__pyx_v_c0, __pyx_v_c1);
  goto __pyx_L0;

  /* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escaped_unicode_maybe_surrogate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":123
 *     cdef uint32_t c1
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 123, __pyx_L1_error)
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c0), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":125
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)             # <<<<<<<<<<<<<<
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"high surrogate before low surrogate"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 125, __pyx_L1_error)

    /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  __pyx_t_2 = (!(JSON5EncoderCpp::unicode_is_hi_surrogate(__pyx_v_c0) != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":127
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     _accept_string(reader, b'\\u')
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":129
 *         return c0
 * 
 *     _accept_string(reader, b'\\u')             # <<<<<<<<<<<<<<
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 */
  __pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"\\u")); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 129, __pyx_L1_error)

  /* "src/_decoder.pyx":131
 *     _accept_string(reader, b'\\u')
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect((!(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c1) != 0)), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":133
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return unicode_join_surrogates(c0, c1)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"low surrogate"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 133, __pyx_L1_error)

    /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  }

  /* "src/_decoder.pyx":135
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 *     return unicode_join_surrogates(c0, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::unicode_join_surrogates(__pyx_v_c0, __pyx_v_c1);
  goto __pyx_L0;

  /* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escaped_unicode_maybe_surrogate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  std::int32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":123
 *     cdef uint32_t c1
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 123, __pyx_L1_error)
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c0), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":125
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)             # <<<<<<<<<<<<<<
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"high surrogate before low surrogate"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 125, __pyx_L1_error)

    /* "src/_decoder.pyx":124
 * 
 *     c0 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(unicode_is_lo_surrogate(c0), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 */
    goto __pyx_L3;
  }

  /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  __pyx_t_2 = (!(JSON5EncoderCpp::unicode_is_hi_surrogate(__pyx_v_c0) != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":127
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):
 *         return c0             # <<<<<<<<<<<<<<
 * 
 *     _accept_string(reader, b'\\u')
 */
    __pyx_r = __pyx_v_c0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":126
 *     if expect(unicode_is_lo_surrogate(c0), False):
 *         _raise_expected_s('high surrogate before low surrogate', start, c0)
 *     elif not unicode_is_hi_surrogate(c0):             # <<<<<<<<<<<<<<
 *         return c0
 * 
 */
  }
  __pyx_L3:;

  /* "src/_decoder.pyx":129
 *         return c0
 * 
 *     _accept_string(reader, b'\\u')             # <<<<<<<<<<<<<<
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 */
  __pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"\\u")); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 129, __pyx_L1_error)

  /* "src/_decoder.pyx":131
 *     _accept_string(reader, b'\\u')
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))             # <<<<<<<<<<<<<<
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 4); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_1);

  /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  __pyx_t_2 = (JSON5EncoderCpp_expect((!(JSON5EncoderCpp::unicode_is_lo_surrogate(__pyx_v_c1) != 0)), 0) != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":133
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):
 *         _raise_expected_s('low surrogate', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return unicode_join_surrogates(c0, c1)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"low surrogate"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 133, __pyx_L1_error)

    /* "src/_decoder.pyx":132
 * 
 *     c1 = cast_to_uint32(_get_hex_character(reader, 4))
 *     if expect(not unicode_is_lo_surrogate(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 */
  }

  /* "src/_decoder.pyx":135
 *         _raise_expected_s('low surrogate', start, c1)
 * 
 *     return unicode_join_surrogates(c0, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = JSON5EncoderCpp::unicode_join_surrogates(__pyx_v_c0, __pyx_v_c1);
  goto __pyx_L0;

  /* "src/_decoder.pyx":119
 * 
 * # >=  0: character to append
 * cdef int32_t _get_escaped_unicode_maybe_surrogate(ReaderRef reader, Py_ssize_t start) except -1:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escaped_unicode_maybe_surrogate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

static std::int32_t __pyx_fuse_0__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":145
 *     cdef uint32_t c0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":147
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'b':
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 147, __pyx_L1_error)

    /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'b');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":150
 * 
 *     if c0 == b'b':
 *         return 0x0008             # <<<<<<<<<<<<<<
 *     elif c0 == b'f':
 *         return 0x000c
 */
    __pyx_r = 0x0008;
    goto __pyx_L0;

    /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  }

  /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'f');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":152
 *         return 0x0008
 *     elif c0 == b'f':
 *         return 0x000c             # <<<<<<<<<<<<<<
 *     elif c0 == b'n':
 *         return 0x000a
 */
    __pyx_r = 0x000c;
    goto __pyx_L0;

    /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  }

  /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'n');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":154
 *         return 0x000c
 *     elif c0 == b'n':
 *         return 0x000a             # <<<<<<<<<<<<<<
 *     elif c0 == b'r':
 *         return 0x000d
 */
    __pyx_r = 0x000a;
    goto __pyx_L0;

    /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  }

  /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'r');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":156
 *         return 0x000a
 *     elif c0 == b'r':
 *         return 0x000d             # <<<<<<<<<<<<<<
 *     elif c0 == b't':
 *         return 0x0009
 */
    __pyx_r = 0x000d;
    goto __pyx_L0;

    /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  }

  /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  __pyx_t_3 = (__pyx_v_c0 == 't');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":158
 *         return 0x000d
 *     elif c0 == b't':
 *         return 0x0009             # <<<<<<<<<<<<<<
 *     elif c0 == b'v':
 *         return 0x000b
 */
    __pyx_r = 0x0009;
    goto __pyx_L0;

    /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  }

  /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'v');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":160
 *         return 0x0009
 *     elif c0 == b'v':
 *         return 0x000b             # <<<<<<<<<<<<<<
 *     elif c0 == b'0':
 *         return 0x0000
 */
    __pyx_r = 0x000b;
    goto __pyx_L0;

    /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  }

  /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":162
 *         return 0x000b
 *     elif c0 == b'0':
 *         return 0x0000             # <<<<<<<<<<<<<<
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 */
    __pyx_r = 0x0000;
    goto __pyx_L0;

    /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  }

  /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'x');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":164
 *         return 0x0000
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)             # <<<<<<<<<<<<<<
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 2); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  }

  /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'u');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":166
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  }

  /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  __pyx_t_3 = (__pyx_v_c0 == 'U');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":168
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)             # <<<<<<<<<<<<<<
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 168, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  }

  /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  __pyx_t_3 = ('1' <= __pyx_v_c0);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c0 <= '9');
  }
  __pyx_t_5 = (JSON5EncoderCpp_expect(__pyx_t_3, 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":170
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)             # <<<<<<<<<<<<<<
 *         return -2
 *     elif _is_line_terminator(c0):
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"escape sequence"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 170, __pyx_L1_error)

    /* "src/_decoder.pyx":171
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2             # <<<<<<<<<<<<<<
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 */
    __pyx_r = -2L;
    goto __pyx_L0;

    /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  }

  /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  __pyx_t_6 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_6 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 != 0x000D);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":174
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":176
 *             return -1
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == 0x000A:
 *             return -1
 */
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 176, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 == 0x000A);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":178
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         return -cast_to_int32(c0 + 1)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":180
 *             return -1
 * 
 *         return -cast_to_int32(c0 + 1)             # <<<<<<<<<<<<<<
 *     else:
 *         return cast_to_int32(c0)
 */
    __pyx_r = (-JSON5EncoderCpp::cast_to_int32((__pyx_v_c0 + 1)));
    goto __pyx_L0;

    /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  }

  /* "src/_decoder.pyx":182
 *         return -cast_to_int32(c0 + 1)
 *     else:
 *         return cast_to_int32(c0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escape_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0x7ffffff;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_1__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":145
 *     cdef uint32_t c0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":147
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'b':
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 147, __pyx_L1_error)

    /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'b');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":150
 * 
 *     if c0 == b'b':
 *         return 0x0008             # <<<<<<<<<<<<<<
 *     elif c0 == b'f':
 *         return 0x000c
 */
    __pyx_r = 0x0008;
    goto __pyx_L0;

    /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  }

  /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'f');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":152
 *         return 0x0008
 *     elif c0 == b'f':
 *         return 0x000c             # <<<<<<<<<<<<<<
 *     elif c0 == b'n':
 *         return 0x000a
 */
    __pyx_r = 0x000c;
    goto __pyx_L0;

    /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  }

  /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'n');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":154
 *         return 0x000c
 *     elif c0 == b'n':
 *         return 0x000a             # <<<<<<<<<<<<<<
 *     elif c0 == b'r':
 *         return 0x000d
 */
    __pyx_r = 0x000a;
    goto __pyx_L0;

    /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  }

  /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'r');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":156
 *         return 0x000a
 *     elif c0 == b'r':
 *         return 0x000d             # <<<<<<<<<<<<<<
 *     elif c0 == b't':
 *         return 0x0009
 */
    __pyx_r = 0x000d;
    goto __pyx_L0;

    /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  }

  /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  __pyx_t_3 = (__pyx_v_c0 == 't');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":158
 *         return 0x000d
 *     elif c0 == b't':
 *         return 0x0009             # <<<<<<<<<<<<<<
 *     elif c0 == b'v':
 *         return 0x000b
 */
    __pyx_r = 0x0009;
    goto __pyx_L0;

    /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  }

  /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'v');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":160
 *         return 0x0009
 *     elif c0 == b'v':
 *         return 0x000b             # <<<<<<<<<<<<<<
 *     elif c0 == b'0':
 *         return 0x0000
 */
    __pyx_r = 0x000b;
    goto __pyx_L0;

    /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  }

  /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":162
 *         return 0x000b
 *     elif c0 == b'0':
 *         return 0x0000             # <<<<<<<<<<<<<<
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 */
    __pyx_r = 0x0000;
    goto __pyx_L0;

    /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  }

  /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'x');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":164
 *         return 0x0000
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)             # <<<<<<<<<<<<<<
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 2); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  }

  /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'u');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":166
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  }

  /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  __pyx_t_3 = (__pyx_v_c0 == 'U');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":168
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)             # <<<<<<<<<<<<<<
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 168, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  }

  /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  __pyx_t_3 = ('1' <= __pyx_v_c0);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c0 <= '9');
  }
  __pyx_t_5 = (JSON5EncoderCpp_expect(__pyx_t_3, 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":170
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)             # <<<<<<<<<<<<<<
 *         return -2
 *     elif _is_line_terminator(c0):
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"escape sequence"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 170, __pyx_L1_error)

    /* "src/_decoder.pyx":171
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2             # <<<<<<<<<<<<<<
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 */
    __pyx_r = -2L;
    goto __pyx_L0;

    /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  }

  /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  __pyx_t_6 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_6 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 != 0x000D);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":174
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":176
 *             return -1
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == 0x000A:
 *             return -1
 */
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 176, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 == 0x000A);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":178
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         return -cast_to_int32(c0 + 1)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":180
 *             return -1
 * 
 *         return -cast_to_int32(c0 + 1)             # <<<<<<<<<<<<<<
 *     else:
 *         return cast_to_int32(c0)
 */
    __pyx_r = (-JSON5EncoderCpp::cast_to_int32((__pyx_v_c0 + 1)));
    goto __pyx_L0;

    /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  }

  /* "src/_decoder.pyx":182
 *         return -cast_to_int32(c0 + 1)
 *     else:
 *         return cast_to_int32(c0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escape_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0x7ffffff;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_2__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":145
 *     cdef uint32_t c0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":147
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'b':
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 147, __pyx_L1_error)

    /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'b');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":150
 * 
 *     if c0 == b'b':
 *         return 0x0008             # <<<<<<<<<<<<<<
 *     elif c0 == b'f':
 *         return 0x000c
 */
    __pyx_r = 0x0008;
    goto __pyx_L0;

    /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  }

  /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'f');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":152
 *         return 0x0008
 *     elif c0 == b'f':
 *         return 0x000c             # <<<<<<<<<<<<<<
 *     elif c0 == b'n':
 *         return 0x000a
 */
    __pyx_r = 0x000c;
    goto __pyx_L0;

    /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  }

  /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'n');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":154
 *         return 0x000c
 *     elif c0 == b'n':
 *         return 0x000a             # <<<<<<<<<<<<<<
 *     elif c0 == b'r':
 *         return 0x000d
 */
    __pyx_r = 0x000a;
    goto __pyx_L0;

    /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  }

  /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'r');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":156
 *         return 0x000a
 *     elif c0 == b'r':
 *         return 0x000d             # <<<<<<<<<<<<<<
 *     elif c0 == b't':
 *         return 0x0009
 */
    __pyx_r = 0x000d;
    goto __pyx_L0;

    /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  }

  /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  __pyx_t_3 = (__pyx_v_c0 == 't');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":158
 *         return 0x000d
 *     elif c0 == b't':
 *         return 0x0009             # <<<<<<<<<<<<<<
 *     elif c0 == b'v':
 *         return 0x000b
 */
    __pyx_r = 0x0009;
    goto __pyx_L0;

    /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  }

  /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'v');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":160
 *         return 0x0009
 *     elif c0 == b'v':
 *         return 0x000b             # <<<<<<<<<<<<<<
 *     elif c0 == b'0':
 *         return 0x0000
 */
    __pyx_r = 0x000b;
    goto __pyx_L0;

    /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  }

  /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":162
 *         return 0x000b
 *     elif c0 == b'0':
 *         return 0x0000             # <<<<<<<<<<<<<<
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 */
    __pyx_r = 0x0000;
    goto __pyx_L0;

    /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  }

  /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'x');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":164
 *         return 0x0000
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)             # <<<<<<<<<<<<<<
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 2); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  }

  /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'u');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":166
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  }

  /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  __pyx_t_3 = (__pyx_v_c0 == 'U');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":168
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)             # <<<<<<<<<<<<<<
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 168, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  }

  /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  __pyx_t_3 = ('1' <= __pyx_v_c0);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c0 <= '9');
  }
  __pyx_t_5 = (JSON5EncoderCpp_expect(__pyx_t_3, 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":170
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)             # <<<<<<<<<<<<<<
 *         return -2
 *     elif _is_line_terminator(c0):
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"escape sequence"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 170, __pyx_L1_error)

    /* "src/_decoder.pyx":171
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2             # <<<<<<<<<<<<<<
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 */
    __pyx_r = -2L;
    goto __pyx_L0;

    /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  }

  /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  __pyx_t_6 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_6 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 != 0x000D);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":174
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":176
 *             return -1
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == 0x000A:
 *             return -1
 */
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 176, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 == 0x000A);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":178
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         return -cast_to_int32(c0 + 1)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":180
 *             return -1
 * 
 *         return -cast_to_int32(c0 + 1)             # <<<<<<<<<<<<<<
 *     else:
 *         return cast_to_int32(c0)
 */
    __pyx_r = (-JSON5EncoderCpp::cast_to_int32((__pyx_v_c0 + 1)));
    goto __pyx_L0;

    /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  }

  /* "src/_decoder.pyx":182
 *         return -cast_to_int32(c0 + 1)
 *     else:
 *         return cast_to_int32(c0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escape_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0x7ffffff;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_3__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":145
 *     cdef uint32_t c0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":147
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'b':
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 147, __pyx_L1_error)

    /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'b');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":150
 * 
 *     if c0 == b'b':
 *         return 0x0008             # <<<<<<<<<<<<<<
 *     elif c0 == b'f':
 *         return 0x000c
 */
    __pyx_r = 0x0008;
    goto __pyx_L0;

    /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  }

  /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'f');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":152
 *         return 0x0008
 *     elif c0 == b'f':
 *         return 0x000c             # <<<<<<<<<<<<<<
 *     elif c0 == b'n':
 *         return 0x000a
 */
    __pyx_r = 0x000c;
    goto __pyx_L0;

    /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  }

  /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'n');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":154
 *         return 0x000c
 *     elif c0 == b'n':
 *         return 0x000a             # <<<<<<<<<<<<<<
 *     elif c0 == b'r':
 *         return 0x000d
 */
    __pyx_r = 0x000a;
    goto __pyx_L0;

    /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  }

  /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'r');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":156
 *         return 0x000a
 *     elif c0 == b'r':
 *         return 0x000d             # <<<<<<<<<<<<<<
 *     elif c0 == b't':
 *         return 0x0009
 */
    __pyx_r = 0x000d;
    goto __pyx_L0;

    /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  }

  /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  __pyx_t_3 = (__pyx_v_c0 == 't');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":158
 *         return 0x000d
 *     elif c0 == b't':
 *         return 0x0009             # <<<<<<<<<<<<<<
 *     elif c0 == b'v':
 *         return 0x000b
 */
    __pyx_r = 0x0009;
    goto __pyx_L0;

    /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  }

  /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'v');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":160
 *         return 0x0009
 *     elif c0 == b'v':
 *         return 0x000b             # <<<<<<<<<<<<<<
 *     elif c0 == b'0':
 *         return 0x0000
 */
    __pyx_r = 0x000b;
    goto __pyx_L0;

    /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  }

  /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":162
 *         return 0x000b
 *     elif c0 == b'0':
 *         return 0x0000             # <<<<<<<<<<<<<<
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 */
    __pyx_r = 0x0000;
    goto __pyx_L0;

    /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  }

  /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'x');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":164
 *         return 0x0000
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)             # <<<<<<<<<<<<<<
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 2); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  }

  /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'u');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":166
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  }

  /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  __pyx_t_3 = (__pyx_v_c0 == 'U');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":168
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)             # <<<<<<<<<<<<<<
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 168, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  }

  /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  __pyx_t_3 = ('1' <= __pyx_v_c0);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c0 <= '9');
  }
  __pyx_t_5 = (JSON5EncoderCpp_expect(__pyx_t_3, 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":170
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)             # <<<<<<<<<<<<<<
 *         return -2
 *     elif _is_line_terminator(c0):
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"escape sequence"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 170, __pyx_L1_error)

    /* "src/_decoder.pyx":171
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2             # <<<<<<<<<<<<<<
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 */
    __pyx_r = -2L;
    goto __pyx_L0;

    /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  }

  /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  __pyx_t_6 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_6 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 != 0x000D);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":174
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":176
 *             return -1
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == 0x000A:
 *             return -1
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 176, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 == 0x000A);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":178
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         return -cast_to_int32(c0 + 1)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":180
 *             return -1
 * 
 *         return -cast_to_int32(c0 + 1)             # <<<<<<<<<<<<<<
 *     else:
 *         return cast_to_int32(c0)
 */
    __pyx_r = (-JSON5EncoderCpp::cast_to_int32((__pyx_v_c0 + 1)));
    goto __pyx_L0;

    /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  }

  /* "src/_decoder.pyx":182
 *         return -cast_to_int32(c0 + 1)
 *     else:
 *         return cast_to_int32(c0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escape_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0x7ffffff;
  __pyx_L0:;
  return __pyx_r;
}

static std::int32_t __pyx_fuse_4__pyx_f_7pyjson5__get_escape_sequence(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_r;
  std::uint32_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":145
 *     cdef uint32_t c0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_1;

  /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":147
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'b':
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 147, __pyx_L1_error)

    /* "src/_decoder.pyx":146
 * 
 *     c0 = _reader_get(reader)
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'b');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":150
 * 
 *     if c0 == b'b':
 *         return 0x0008             # <<<<<<<<<<<<<<
 *     elif c0 == b'f':
 *         return 0x000c
 */
    __pyx_r = 0x0008;
    goto __pyx_L0;

    /* "src/_decoder.pyx":149
 *         _raise_unclosed(b'string', start)
 * 
 *     if c0 == b'b':             # <<<<<<<<<<<<<<
 *         return 0x0008
 *     elif c0 == b'f':
 */
  }

  /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'f');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":152
 *         return 0x0008
 *     elif c0 == b'f':
 *         return 0x000c             # <<<<<<<<<<<<<<
 *     elif c0 == b'n':
 *         return 0x000a
 */
    __pyx_r = 0x000c;
    goto __pyx_L0;

    /* "src/_decoder.pyx":151
 *     if c0 == b'b':
 *         return 0x0008
 *     elif c0 == b'f':             # <<<<<<<<<<<<<<
 *         return 0x000c
 *     elif c0 == b'n':
 */
  }

  /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'n');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":154
 *         return 0x000c
 *     elif c0 == b'n':
 *         return 0x000a             # <<<<<<<<<<<<<<
 *     elif c0 == b'r':
 *         return 0x000d
 */
    __pyx_r = 0x000a;
    goto __pyx_L0;

    /* "src/_decoder.pyx":153
 *     elif c0 == b'f':
 *         return 0x000c
 *     elif c0 == b'n':             # <<<<<<<<<<<<<<
 *         return 0x000a
 *     elif c0 == b'r':
 */
  }

  /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'r');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":156
 *         return 0x000a
 *     elif c0 == b'r':
 *         return 0x000d             # <<<<<<<<<<<<<<
 *     elif c0 == b't':
 *         return 0x0009
 */
    __pyx_r = 0x000d;
    goto __pyx_L0;

    /* "src/_decoder.pyx":155
 *     elif c0 == b'n':
 *         return 0x000a
 *     elif c0 == b'r':             # <<<<<<<<<<<<<<
 *         return 0x000d
 *     elif c0 == b't':
 */
  }

  /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  __pyx_t_3 = (__pyx_v_c0 == 't');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":158
 *         return 0x000d
 *     elif c0 == b't':
 *         return 0x0009             # <<<<<<<<<<<<<<
 *     elif c0 == b'v':
 *         return 0x000b
 */
    __pyx_r = 0x0009;
    goto __pyx_L0;

    /* "src/_decoder.pyx":157
 *     elif c0 == b'r':
 *         return 0x000d
 *     elif c0 == b't':             # <<<<<<<<<<<<<<
 *         return 0x0009
 *     elif c0 == b'v':
 */
  }

  /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'v');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":160
 *         return 0x0009
 *     elif c0 == b'v':
 *         return 0x000b             # <<<<<<<<<<<<<<
 *     elif c0 == b'0':
 *         return 0x0000
 */
    __pyx_r = 0x000b;
    goto __pyx_L0;

    /* "src/_decoder.pyx":159
 *     elif c0 == b't':
 *         return 0x0009
 *     elif c0 == b'v':             # <<<<<<<<<<<<<<
 *         return 0x000b
 *     elif c0 == b'0':
 */
  }

  /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":162
 *         return 0x000b
 *     elif c0 == b'0':
 *         return 0x0000             # <<<<<<<<<<<<<<
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 */
    __pyx_r = 0x0000;
    goto __pyx_L0;

    /* "src/_decoder.pyx":161
 *     elif c0 == b'v':
 *         return 0x000b
 *     elif c0 == b'0':             # <<<<<<<<<<<<<<
 *         return 0x0000
 *     elif c0 == b'x':
 */
  }

  /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'x');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":164
 *         return 0x0000
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)             # <<<<<<<<<<<<<<
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 2); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":163
 *     elif c0 == b'0':
 *         return 0x0000
 *     elif c0 == b'x':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 */
  }

  /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  __pyx_t_3 = (__pyx_v_c0 == 'u');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":166
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":165
 *     elif c0 == b'x':
 *         return _get_hex_character(reader, 2)
 *     elif c0 == b'u':             # <<<<<<<<<<<<<<
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 */
  }

  /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  __pyx_t_3 = (__pyx_v_c0 == 'U');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":168
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)             # <<<<<<<<<<<<<<
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 168, __pyx_L1_error)
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;

    /* "src/_decoder.pyx":167
 *     elif c0 == b'u':
 *         return _get_escaped_unicode_maybe_surrogate(reader, start)
 *     elif c0 == b'U':             # <<<<<<<<<<<<<<
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 */
  }

  /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  __pyx_t_3 = ('1' <= __pyx_v_c0);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_c0 <= '9');
  }
  __pyx_t_5 = (JSON5EncoderCpp_expect(__pyx_t_3, 0) != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":170
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)             # <<<<<<<<<<<<<<
 *         return -2
 *     elif _is_line_terminator(c0):
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"escape sequence"), __pyx_v_start, __pyx_v_c0); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 170, __pyx_L1_error)

    /* "src/_decoder.pyx":171
 *     elif expect(b'1' <= c0 <= b'9', False):
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2             # <<<<<<<<<<<<<<
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 */
    __pyx_r = -2L;
    goto __pyx_L0;

    /* "src/_decoder.pyx":169
 *     elif c0 == b'U':
 *         return _get_hex_character(reader, 8)
 *     elif expect(b'1' <= c0 <= b'9', False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 */
  }

  /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  __pyx_t_6 = __pyx_f_7pyjson5__is_line_terminator(__pyx_v_c0); if (unlikely(__pyx_t_6 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 172, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 != 0x000D);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":174
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":173
 *         return -2
 *     elif _is_line_terminator(c0):
 *         if c0 != 0x000D:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":176
 *             return -1
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == 0x000A:
 *             return -1
 */
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 176, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    __pyx_t_5 = (__pyx_v_c0 == 0x000A);
    if (__pyx_t_5) {

      /* "src/_decoder.pyx":178
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         return -cast_to_int32(c0 + 1)
 */
      __pyx_r = -1L;
      goto __pyx_L0;

      /* "src/_decoder.pyx":177
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == 0x000A:             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
    }

    /* "src/_decoder.pyx":180
 *             return -1
 * 
 *         return -cast_to_int32(c0 + 1)             # <<<<<<<<<<<<<<
 *     else:
 *         return cast_to_int32(c0)
 */
    __pyx_r = (-JSON5EncoderCpp::cast_to_int32((__pyx_v_c0 + 1)));
    goto __pyx_L0;

    /* "src/_decoder.pyx":172
 *         _raise_expected_s('escape sequence', start, c0)
 *         return -2
 *     elif _is_line_terminator(c0):             # <<<<<<<<<<<<<<
 *         if c0 != 0x000D:
 *             return -1
 */
  }

  /* "src/_decoder.pyx":182
 *         return -cast_to_int32(c0 + 1)
 *     else:
 *         return cast_to_int32(c0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":141
 * #    -1: skip
 * # <  -1: -(next character + 1)
 * cdef int32_t _get_escape_sequence(ReaderRef reader,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t start) except 0x7ffffff:
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._get_escape_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0x7ffffff;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::uint32_t __pyx_v_delim, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::int32_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_string_sub", 1);

  /* "src/_decoder.pyx":190
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c0 == delim, False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 == __pyx_v_delim), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":192
 *     while True:
 *         if expect(c0 == delim, False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 194, __pyx_L1_error)
    __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":195
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *         if expect(c0 != b'\\', True):
 */
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 195, __pyx_L1_error)

      /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    }

    /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 != '\\'), 1) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      switch (__pyx_v_c0) {
        case 0xA:
        case 0xD:
        __pyx_t_1 = 1;
        break;
        default:
        __pyx_t_1 = 0;
        break;
      }
      __pyx_t_4 = (JSON5EncoderCpp_expect(__pyx_t_1, 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":199
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             buf.push_back(c0)
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 199, __pyx_L1_error)

        /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":201
 *                 _raise_unclosed(b'string', start)
 * 
 *             buf.push_back(c0)             # <<<<<<<<<<<<<<
 *             c0 = _reader_get(reader)
 *             continue
 */
      __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 201, __pyx_L1_error)

      /* "src/_decoder.pyx":202
 * 
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 202, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":203
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         c1 = _get_escape_sequence(reader, start)
 */
      goto __pyx_L3_continue;

      /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    }

    /* "src/_decoder.pyx":205
 *             continue
 * 
 *         c1 = _get_escape_sequence(reader, start)             # <<<<<<<<<<<<<<
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__get_escape_sequence(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)0x7ffffff))) __PYX_ERR(11, 205, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_2;

    /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_4 = (__pyx_v_c1 >= -1L);
    if (__pyx_t_4) {

      /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 207, __pyx_L1_error)
      __pyx_t_4 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":208
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             if c1 >= 0:
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 208, __pyx_L1_error)

        /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      __pyx_t_4 = (__pyx_v_c1 >= 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":211
 * 
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *                 buf.push_back(c0)
 * 
 */
        __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

        /* "src/_decoder.pyx":212
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 212, __pyx_L1_error)

        /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      }

      /* "src/_decoder.pyx":214
 *                 buf.push_back(c0)
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 214, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
      goto __pyx_L9;
    }

    /* "src/_decoder.pyx":216
 *             c0 = _reader_get(reader)
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromKindAndData(
 */
    /*else*/ {
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32((-(__pyx_v_c1 + 1)));
    }
    __pyx_L9:;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":218
 *             c0 = cast_to_uint32(-(c1 + 1))
 * 
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":219
 * 
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_string_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::uint32_t __pyx_v_delim, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::int32_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_string_sub", 1);

  /* "src/_decoder.pyx":190
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c0 == delim, False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 == __pyx_v_delim), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":192
 *     while True:
 *         if expect(c0 == delim, False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 194, __pyx_L1_error)
    __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":195
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *         if expect(c0 != b'\\', True):
 */
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 195, __pyx_L1_error)

      /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    }

    /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 != '\\'), 1) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      switch (__pyx_v_c0) {
        case 0xA:
        case 0xD:
        __pyx_t_1 = 1;
        break;
        default:
        __pyx_t_1 = 0;
        break;
      }
      __pyx_t_4 = (JSON5EncoderCpp_expect(__pyx_t_1, 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":199
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             buf.push_back(c0)
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 199, __pyx_L1_error)

        /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":201
 *                 _raise_unclosed(b'string', start)
 * 
 *             buf.push_back(c0)             # <<<<<<<<<<<<<<
 *             c0 = _reader_get(reader)
 *             continue
 */
      __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 201, __pyx_L1_error)

      /* "src/_decoder.pyx":202
 * 
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 202, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":203
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         c1 = _get_escape_sequence(reader, start)
 */
      goto __pyx_L3_continue;

      /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    }

    /* "src/_decoder.pyx":205
 *             continue
 * 
 *         c1 = _get_escape_sequence(reader, start)             # <<<<<<<<<<<<<<
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__get_escape_sequence(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)0x7ffffff))) __PYX_ERR(11, 205, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_2;

    /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_4 = (__pyx_v_c1 >= -1L);
    if (__pyx_t_4) {

      /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 207, __pyx_L1_error)
      __pyx_t_4 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":208
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             if c1 >= 0:
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 208, __pyx_L1_error)

        /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      __pyx_t_4 = (__pyx_v_c1 >= 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":211
 * 
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *                 buf.push_back(c0)
 * 
 */
        __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

        /* "src/_decoder.pyx":212
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 212, __pyx_L1_error)

        /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      }

      /* "src/_decoder.pyx":214
 *                 buf.push_back(c0)
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 214, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
      goto __pyx_L9;
    }

    /* "src/_decoder.pyx":216
 *             c0 = _reader_get(reader)
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromKindAndData(
 */
    /*else*/ {
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32((-(__pyx_v_c1 + 1)));
    }
    __pyx_L9:;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":218
 *             c0 = cast_to_uint32(-(c1 + 1))
 * 
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":219
 * 
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_string_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::uint32_t __pyx_v_delim, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::int32_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_string_sub", 1);

  /* "src/_decoder.pyx":190
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c0 == delim, False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 == __pyx_v_delim), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":192
 *     while True:
 *         if expect(c0 == delim, False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 194, __pyx_L1_error)
    __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":195
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *         if expect(c0 != b'\\', True):
 */
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 195, __pyx_L1_error)

      /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    }

    /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 != '\\'), 1) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      switch (__pyx_v_c0) {
        case 0xA:
        case 0xD:
        __pyx_t_1 = 1;
        break;
        default:
        __pyx_t_1 = 0;
        break;
      }
      __pyx_t_4 = (JSON5EncoderCpp_expect(__pyx_t_1, 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":199
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             buf.push_back(c0)
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 199, __pyx_L1_error)

        /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":201
 *                 _raise_unclosed(b'string', start)
 * 
 *             buf.push_back(c0)             # <<<<<<<<<<<<<<
 *             c0 = _reader_get(reader)
 *             continue
 */
      __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 201, __pyx_L1_error)

      /* "src/_decoder.pyx":202
 * 
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 202, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":203
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         c1 = _get_escape_sequence(reader, start)
 */
      goto __pyx_L3_continue;

      /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    }

    /* "src/_decoder.pyx":205
 *             continue
 * 
 *         c1 = _get_escape_sequence(reader, start)             # <<<<<<<<<<<<<<
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__get_escape_sequence(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)0x7ffffff))) __PYX_ERR(11, 205, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_2;

    /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_4 = (__pyx_v_c1 >= -1L);
    if (__pyx_t_4) {

      /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 207, __pyx_L1_error)
      __pyx_t_4 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":208
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             if c1 >= 0:
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 208, __pyx_L1_error)

        /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      __pyx_t_4 = (__pyx_v_c1 >= 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":211
 * 
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *                 buf.push_back(c0)
 * 
 */
        __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

        /* "src/_decoder.pyx":212
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 212, __pyx_L1_error)

        /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      }

      /* "src/_decoder.pyx":214
 *                 buf.push_back(c0)
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 214, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
      goto __pyx_L9;
    }

    /* "src/_decoder.pyx":216
 *             c0 = _reader_get(reader)
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromKindAndData(
 */
    /*else*/ {
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32((-(__pyx_v_c1 + 1)));
    }
    __pyx_L9:;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":218
 *             c0 = cast_to_uint32(-(c1 + 1))
 * 
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":219
 * 
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_string_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::uint32_t __pyx_v_delim, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::int32_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_string_sub", 1);

  /* "src/_decoder.pyx":190
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c0 == delim, False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 == __pyx_v_delim), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":192
 *     while True:
 *         if expect(c0 == delim, False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 194, __pyx_L1_error)
    __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":195
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *         if expect(c0 != b'\\', True):
 */
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 195, __pyx_L1_error)

      /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    }

    /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 != '\\'), 1) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      switch (__pyx_v_c0) {
        case 0xA:
        case 0xD:
        __pyx_t_1 = 1;
        break;
        default:
        __pyx_t_1 = 0;
        break;
      }
      __pyx_t_4 = (JSON5EncoderCpp_expect(__pyx_t_1, 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":199
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             buf.push_back(c0)
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 199, __pyx_L1_error)

        /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":201
 *                 _raise_unclosed(b'string', start)
 * 
 *             buf.push_back(c0)             # <<<<<<<<<<<<<<
 *             c0 = _reader_get(reader)
 *             continue
 */
      __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 201, __pyx_L1_error)

      /* "src/_decoder.pyx":202
 * 
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 202, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":203
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         c1 = _get_escape_sequence(reader, start)
 */
      goto __pyx_L3_continue;

      /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    }

    /* "src/_decoder.pyx":205
 *             continue
 * 
 *         c1 = _get_escape_sequence(reader, start)             # <<<<<<<<<<<<<<
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__get_escape_sequence(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)0x7ffffff))) __PYX_ERR(11, 205, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_2;

    /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_4 = (__pyx_v_c1 >= -1L);
    if (__pyx_t_4) {

      /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 207, __pyx_L1_error)
      __pyx_t_4 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":208
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             if c1 >= 0:
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 208, __pyx_L1_error)

        /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      __pyx_t_4 = (__pyx_v_c1 >= 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":211
 * 
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *                 buf.push_back(c0)
 * 
 */
        __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

        /* "src/_decoder.pyx":212
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 212, __pyx_L1_error)

        /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      }

      /* "src/_decoder.pyx":214
 *                 buf.push_back(c0)
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 214, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
      goto __pyx_L9;
    }

    /* "src/_decoder.pyx":216
 *             c0 = _reader_get(reader)
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromKindAndData(
 */
    /*else*/ {
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32((-(__pyx_v_c1 + 1)));
    }
    __pyx_L9:;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":218
 *             c0 = cast_to_uint32(-(c1 + 1))
 * 
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":219
 * 
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_string_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_string_sub(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::uint32_t __pyx_v_delim, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_c0) {
  std::int32_t __pyx_v_c1;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::int32_t __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_string_sub", 1);

  /* "src/_decoder.pyx":190
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c0 == delim, False):
 *             break
 */
  while (1) {

    /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 == __pyx_v_delim), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":192
 *     while True:
 *         if expect(c0 == delim, False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":191
 * 
 *     while True:
 *         if expect(c0 == delim, False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 194, __pyx_L1_error)
    __pyx_t_1 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":195
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *         if expect(c0 != b'\\', True):
 */
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 195, __pyx_L1_error)

      /* "src/_decoder.pyx":194
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'string', start)
 * 
 */
    }

    /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_c0 != '\\'), 1) != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      switch (__pyx_v_c0) {
        case 0xA:
        case 0xD:
        __pyx_t_1 = 1;
        break;
        default:
        __pyx_t_1 = 0;
        break;
      }
      __pyx_t_4 = (JSON5EncoderCpp_expect(__pyx_t_1, 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":199
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             buf.push_back(c0)
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 199, __pyx_L1_error)

        /* "src/_decoder.pyx":198
 * 
 *         if expect(c0 != b'\\', True):
 *             if expect(c0 in (0xA, 0xD), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":201
 *                 _raise_unclosed(b'string', start)
 * 
 *             buf.push_back(c0)             # <<<<<<<<<<<<<<
 *             c0 = _reader_get(reader)
 *             continue
 */
      __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 201, __pyx_L1_error)

      /* "src/_decoder.pyx":202
 * 
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 202, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":203
 *             buf.push_back(c0)
 *             c0 = _reader_get(reader)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         c1 = _get_escape_sequence(reader, start)
 */
      goto __pyx_L3_continue;

      /* "src/_decoder.pyx":197
 *             _raise_unclosed(b'string', start)
 * 
 *         if expect(c0 != b'\\', True):             # <<<<<<<<<<<<<<
 *             if expect(c0 in (0xA, 0xD), False):
 *                 _raise_unclosed(b'string', start)
 */
    }

    /* "src/_decoder.pyx":205
 *             continue
 * 
 *         c1 = _get_escape_sequence(reader, start)             # <<<<<<<<<<<<<<
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__get_escape_sequence(__pyx_v_reader, __pyx_v_start); if (unlikely(__pyx_t_2 == ((std::int32_t)0x7ffffff))) __PYX_ERR(11, 205, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_2;

    /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
    __pyx_t_4 = (__pyx_v_c1 >= -1L);
    if (__pyx_t_4) {

      /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 207, __pyx_L1_error)
      __pyx_t_4 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":208
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *             if c1 >= 0:
 */
        __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 208, __pyx_L1_error)

        /* "src/_decoder.pyx":207
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed(b'string', start)
 * 
 */
      }

      /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      __pyx_t_4 = (__pyx_v_c1 >= 0);
      if (__pyx_t_4) {

        /* "src/_decoder.pyx":211
 * 
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *                 buf.push_back(c0)
 * 
 */
        __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

        /* "src/_decoder.pyx":212
 *             if c1 >= 0:
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        __pyx_t_5 = __pyx_v_buf.push_back(__pyx_v_c0); if (unlikely(__pyx_t_5 == ((bool)0))) __PYX_ERR(11, 212, __pyx_L1_error)

        /* "src/_decoder.pyx":210
 *                 _raise_unclosed(b'string', start)
 * 
 *             if c1 >= 0:             # <<<<<<<<<<<<<<
 *                 c0 = cast_to_uint32(c1)
 *                 buf.push_back(c0)
 */
      }

      /* "src/_decoder.pyx":214
 *                 buf.push_back(c0)
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 214, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_6;

      /* "src/_decoder.pyx":206
 * 
 *         c1 = _get_escape_sequence(reader, start)
 *         if c1 >= -1:             # <<<<<<<<<<<<<<
 *             if expect(not _reader_good(reader), False):
 *                 _raise_unclosed(b'string', start)
 */
      goto __pyx_L9;
    }

    /* "src/_decoder.pyx":216
 *             c0 = _reader_get(reader)
 *         else:
 *             c0 = cast_to_uint32(-(c1 + 1))             # <<<<<<<<<<<<<<
 * 
 *     return PyUnicode_FromKindAndData(
 */
    /*else*/ {
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32((-(__pyx_v_c1 + 1)));
    }
    __pyx_L9:;
    __pyx_L3_continue:;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":218
 *             c0 = cast_to_uint32(-(c1 + 1))
 * 
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":219
 * 
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":185
 * 
 * 
 * cdef object _decode_string_sub(ReaderRef reader, uint32_t delim,             # <<<<<<<<<<<<<<
 *                                Py_ssize_t start, uint32_t c0):
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_string_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_delim;
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_string", 1);

  /* "src/_decoder.pyx":230
 *     cdef object result
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":231
 * 
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
  __pyx_v_delim = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":232
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 232, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":235
 * 
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 235, __pyx_L1_error)

    /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":237
 *         _raise_unclosed(b'string', start)
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 */
  __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 237, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_5;

  /* "src/_decoder.pyx":238
 * 
 *     c0 = _reader_get(reader)
 *     result = _decode_string_sub(reader, delim, start, c0)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
  __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__decode_string_sub(__pyx_v_reader, __pyx_v_delim, __pyx_v_start, __pyx_v_c0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_result = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/_decoder.pyx":240
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

  /* "src/_decoder.pyx":241
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyjson5._decode_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_delim;
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_string", 1);

  /* "src/_decoder.pyx":230
 *     cdef object result
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":231
 * 
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
  __pyx_v_delim = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":232
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 232, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":235
 * 
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 235, __pyx_L1_error)

    /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":237
 *         _raise_unclosed(b'string', start)
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 */
  __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 237, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_5;

  /* "src/_decoder.pyx":238
 * 
 *     c0 = _reader_get(reader)
 *     result = _decode_string_sub(reader, delim, start, c0)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
  __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__decode_string_sub(__pyx_v_reader, __pyx_v_delim, __pyx_v_start, __pyx_v_c0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_result = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/_decoder.pyx":240
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

  /* "src/_decoder.pyx":241
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyjson5._decode_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_delim;
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_string", 1);

  /* "src/_decoder.pyx":230
 *     cdef object result
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":231
 * 
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
  __pyx_v_delim = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":232
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 232, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":235
 * 
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 235, __pyx_L1_error)

    /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":237
 *         _raise_unclosed(b'string', start)
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 */
  __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 237, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_5;

  /* "src/_decoder.pyx":238
 * 
 *     c0 = _reader_get(reader)
 *     result = _decode_string_sub(reader, delim, start, c0)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
  __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__decode_string_sub(__pyx_v_reader, __pyx_v_delim, __pyx_v_start, __pyx_v_c0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_result = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/_decoder.pyx":240
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

  /* "src/_decoder.pyx":241
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyjson5._decode_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_delim;
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_string", 1);

  /* "src/_decoder.pyx":230
 *     cdef object result
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":231
 * 
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
  __pyx_v_delim = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":232
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 232, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":235
 * 
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 235, __pyx_L1_error)

    /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":237
 *         _raise_unclosed(b'string', start)
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 */
  __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 237, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_5;

  /* "src/_decoder.pyx":238
 * 
 *     c0 = _reader_get(reader)
 *     result = _decode_string_sub(reader, delim, start, c0)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
  __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__decode_string_sub(__pyx_v_reader, __pyx_v_delim, __pyx_v_start, __pyx_v_c0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_result = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/_decoder.pyx":240
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

  /* "src/_decoder.pyx":241
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyjson5._decode_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_string(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_delim;
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_string", 1);

  /* "src/_decoder.pyx":230
 *     cdef object result
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":231
 * 
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
  __pyx_v_delim = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":232
 *     c1 = c_in_out[0]
 *     delim = cast_to_uint32(c1)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 232, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":235
 * 
 *     if expect(not _reader_good(reader), False):
 *         _raise_unclosed(b'string', start)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"string"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 235, __pyx_L1_error)

    /* "src/_decoder.pyx":234
 *     start = _reader_tell(reader)
 * 
 *     if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *         _raise_unclosed(b'string', start)
 * 
 */
  }

  /* "src/_decoder.pyx":237
 *         _raise_unclosed(b'string', start)
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 */
  __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 237, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_5;

  /* "src/_decoder.pyx":238
 * 
 *     c0 = _reader_get(reader)
 *     result = _decode_string_sub(reader, delim, start, c0)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
  __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__decode_string_sub(__pyx_v_reader, __pyx_v_delim, __pyx_v_start, __pyx_v_c0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_result = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/_decoder.pyx":240
 *     result = _decode_string_sub(reader, delim, start, c0)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

  /* "src/_decoder.pyx":241
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/_decoder.pyx":223
 * 
 * 
 * cdef object _decode_string(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t delim
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyjson5._decode_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":244
 * 
 * 
 * cdef object _decode_double(StackHeapString[char] &buf, Py_ssize_t start):             # <<<<<<<<<<<<<<
 *     cdef double d0
 *     cdef const char *end_of_double
 */

static PyObject *__pyx_f_7pyjson5__decode_double(JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, Py_ssize_t __pyx_v_start) {
  double __pyx_v_d0;
  char const *__pyx_v_end_of_double;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_decode_double", 1);

  /* "src/_decoder.pyx":248
 *     cdef const char *end_of_double
 * 
 *     d0 = 0.0  # silence warning             # <<<<<<<<<<<<<<
 *     end_of_double = parse_number(buf.data(), &d0)
 *     if end_of_double != NULL and end_of_double[0] == b'\0':
 */
  __pyx_v_d0 = 0.0;

  /* "src/_decoder.pyx":249
 * 
 *     d0 = 0.0  # silence warning
 *     end_of_double = parse_number(buf.data(), &d0)             # <<<<<<<<<<<<<<
 *     if end_of_double != NULL and end_of_double[0] == b'\0':
 *         return PyFloat_FromDouble(d0)
 */
  __pyx_v_end_of_double = fast_double_parser::parse_number(__pyx_v_buf.data(), (&__pyx_v_d0));

  /* "src/_decoder.pyx":250
 *     d0 = 0.0  # silence warning
 *     end_of_double = parse_number(buf.data(), &d0)
 *     if end_of_double != NULL and end_of_double[0] == b'\0':             # <<<<<<<<<<<<<<
 *         return PyFloat_FromDouble(d0)
 * 
 */
  __pyx_t_2 = (__pyx_v_end_of_double != NULL);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_end_of_double[0]) == '\x00');
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":251
 *     end_of_double = parse_number(buf.data(), &d0)
 *     if end_of_double != NULL and end_of_double[0] == b'\0':
 *         return PyFloat_FromDouble(d0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed('NumericLiteral', start)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_d0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":250
 *     d0 = 0.0  # silence warning
 *     end_of_double = parse_number(buf.data(), &d0)
 *     if end_of_double != NULL and end_of_double[0] == b'\0':             # <<<<<<<<<<<<<<
 *         return PyFloat_FromDouble(d0)
 * 
 */
  }

  /* "src/_decoder.pyx":253
 *         return PyFloat_FromDouble(d0)
 * 
 *     _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 253, __pyx_L1_error)

  /* "src/_decoder.pyx":244
 * 
 * 
 * cdef object _decode_double(StackHeapString[char] &buf, Py_ssize_t start):             # <<<<<<<<<<<<<<
 *     cdef double d0
 *     cdef const char *end_of_double
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyjson5._decode_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_number_leading_zero", 1);

  /* "src/_decoder.pyx":259
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     if not _reader_good(reader):
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 261, __pyx_L1_error)
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":262
 * 
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = -1L;

    /* "src/_decoder.pyx":263
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  }

  /* "src/_decoder.pyx":265
 *         return 0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if _is_x(c0):
 *         while True:
 */
  __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 265, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_3;

  /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_x(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 266, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":267
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 268, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":269
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":270
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":272
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 272, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_hexadecimal(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":274
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 274, __pyx_L1_error)

        /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L8;
      }

      /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":276
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":277
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L8:;
    }
    __pyx_L6_break:;

    /* "src/_decoder.pyx":279
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'\0')
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":281
 *         c_in_out[0] = c1
 * 
 *         buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 */
    __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 281, __pyx_L1_error)

    /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "src/_decoder.pyx":283
 *         buf.push_back(b'\0')
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyLong_FromString(__pyx_v_buf.data(), NULL, 16); if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 283, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L13_try_return;

        /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      }
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/_decoder.pyx":284
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 284, __pyx_L11_except_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "src/_decoder.pyx":285
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 */
        __pyx_t_12 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 285, __pyx_L11_except_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_exception_handled;
      }
      goto __pyx_L11_except_error;

      /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      __pyx_L11_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    }

    /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
    goto __pyx_L4;
  }

  /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  __pyx_t_2 = (__pyx_v_c0 == '.');
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":287
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         buf.push_back(b'.')
 * 
 */
    __pyx_t_4 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 287, __pyx_L1_error)

    /* "src/_decoder.pyx":288
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_4 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 288, __pyx_L1_error)

    /* "src/_decoder.pyx":290
 *         buf.push_back(b'.')
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 291, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":292
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":293
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":295
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 295, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 296, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":297
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 297, __pyx_L1_error)

        /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L20;
      }

      /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":299
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":300
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L20:;
    }
    __pyx_L18_break:;

    /* "src/_decoder.pyx":302
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_buf.data()[(__pyx_v_buf.size() - 1)]) == '.');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":305
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'             # <<<<<<<<<<<<<<
 *         else:
 *             buf.push_back(b'\0')
 */
      (((char *)__pyx_v_buf.data())[(__pyx_v_buf.size() - 1)]) = '\x00';

      /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/_decoder.pyx":307
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 *             buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *         return _decode_double(buf, start)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 307, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "src/_decoder.pyx":309
 *             buf.push_back(b'\0')
 * 
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 *     elif _is_e(c0):
 *         while True:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_11)) __PYX_ERR(11, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  }

  /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":311
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 312, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":313
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":314
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L23_break;

        /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":316
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 pass
 */
      __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 316, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":317
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 pass
 *             elif c0 == b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 317, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":319
 *             if _is_in_float_representation(c0):
 *                 pass
 *             elif c0 == b'_':             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_2 = (__pyx_v_c0 == '_');
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":322
 *                 pass
 *             else:
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":323
 *             else:
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L23_break;
      }
      __pyx_L25:;
    }
    __pyx_L23_break:;

    /* "src/_decoder.pyx":325
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0.0
 *     else:
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":326
 * 
 *         c_in_out[0] = c1
 *         return 0.0             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  }

  /* "src/_decoder.pyx":328
 *         return 0.0
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return 0
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":329
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":330
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyjson5._decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_number_leading_zero", 1);

  /* "src/_decoder.pyx":259
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     if not _reader_good(reader):
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 261, __pyx_L1_error)
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":262
 * 
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = -1L;

    /* "src/_decoder.pyx":263
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  }

  /* "src/_decoder.pyx":265
 *         return 0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if _is_x(c0):
 *         while True:
 */
  __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 265, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_3;

  /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_x(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 266, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":267
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 268, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":269
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":270
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":272
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 272, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_hexadecimal(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":274
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 274, __pyx_L1_error)

        /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L8;
      }

      /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":276
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":277
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L8:;
    }
    __pyx_L6_break:;

    /* "src/_decoder.pyx":279
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'\0')
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":281
 *         c_in_out[0] = c1
 * 
 *         buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 */
    __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 281, __pyx_L1_error)

    /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "src/_decoder.pyx":283
 *         buf.push_back(b'\0')
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyLong_FromString(__pyx_v_buf.data(), NULL, 16); if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 283, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L13_try_return;

        /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      }
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/_decoder.pyx":284
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 284, __pyx_L11_except_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "src/_decoder.pyx":285
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 */
        __pyx_t_12 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 285, __pyx_L11_except_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_exception_handled;
      }
      goto __pyx_L11_except_error;

      /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      __pyx_L11_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    }

    /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
    goto __pyx_L4;
  }

  /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  __pyx_t_2 = (__pyx_v_c0 == '.');
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":287
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         buf.push_back(b'.')
 * 
 */
    __pyx_t_4 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 287, __pyx_L1_error)

    /* "src/_decoder.pyx":288
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_4 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 288, __pyx_L1_error)

    /* "src/_decoder.pyx":290
 *         buf.push_back(b'.')
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 291, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":292
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":293
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":295
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 295, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 296, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":297
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 297, __pyx_L1_error)

        /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L20;
      }

      /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":299
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":300
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L20:;
    }
    __pyx_L18_break:;

    /* "src/_decoder.pyx":302
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_buf.data()[(__pyx_v_buf.size() - 1)]) == '.');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":305
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'             # <<<<<<<<<<<<<<
 *         else:
 *             buf.push_back(b'\0')
 */
      (((char *)__pyx_v_buf.data())[(__pyx_v_buf.size() - 1)]) = '\x00';

      /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/_decoder.pyx":307
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 *             buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *         return _decode_double(buf, start)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 307, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "src/_decoder.pyx":309
 *             buf.push_back(b'\0')
 * 
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 *     elif _is_e(c0):
 *         while True:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_11)) __PYX_ERR(11, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  }

  /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":311
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 312, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":313
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":314
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L23_break;

        /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":316
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 pass
 */
      __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 316, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":317
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 pass
 *             elif c0 == b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 317, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":319
 *             if _is_in_float_representation(c0):
 *                 pass
 *             elif c0 == b'_':             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_2 = (__pyx_v_c0 == '_');
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":322
 *                 pass
 *             else:
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":323
 *             else:
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L23_break;
      }
      __pyx_L25:;
    }
    __pyx_L23_break:;

    /* "src/_decoder.pyx":325
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0.0
 *     else:
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":326
 * 
 *         c_in_out[0] = c1
 *         return 0.0             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  }

  /* "src/_decoder.pyx":328
 *         return 0.0
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return 0
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":329
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":330
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyjson5._decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_number_leading_zero", 1);

  /* "src/_decoder.pyx":259
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     if not _reader_good(reader):
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 261, __pyx_L1_error)
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":262
 * 
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = -1L;

    /* "src/_decoder.pyx":263
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  }

  /* "src/_decoder.pyx":265
 *         return 0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if _is_x(c0):
 *         while True:
 */
  __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 265, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_3;

  /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_x(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 266, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":267
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 268, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":269
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":270
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":272
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 272, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_hexadecimal(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":274
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 274, __pyx_L1_error)

        /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L8;
      }

      /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":276
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":277
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L8:;
    }
    __pyx_L6_break:;

    /* "src/_decoder.pyx":279
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'\0')
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":281
 *         c_in_out[0] = c1
 * 
 *         buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 */
    __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 281, __pyx_L1_error)

    /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "src/_decoder.pyx":283
 *         buf.push_back(b'\0')
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyLong_FromString(__pyx_v_buf.data(), NULL, 16); if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 283, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L13_try_return;

        /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      }
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/_decoder.pyx":284
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 284, __pyx_L11_except_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "src/_decoder.pyx":285
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 */
        __pyx_t_12 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 285, __pyx_L11_except_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_exception_handled;
      }
      goto __pyx_L11_except_error;

      /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      __pyx_L11_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    }

    /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
    goto __pyx_L4;
  }

  /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  __pyx_t_2 = (__pyx_v_c0 == '.');
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":287
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         buf.push_back(b'.')
 * 
 */
    __pyx_t_4 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 287, __pyx_L1_error)

    /* "src/_decoder.pyx":288
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_4 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 288, __pyx_L1_error)

    /* "src/_decoder.pyx":290
 *         buf.push_back(b'.')
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 291, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":292
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":293
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":295
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 295, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 296, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":297
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 297, __pyx_L1_error)

        /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L20;
      }

      /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":299
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":300
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L20:;
    }
    __pyx_L18_break:;

    /* "src/_decoder.pyx":302
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_buf.data()[(__pyx_v_buf.size() - 1)]) == '.');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":305
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'             # <<<<<<<<<<<<<<
 *         else:
 *             buf.push_back(b'\0')
 */
      (((char *)__pyx_v_buf.data())[(__pyx_v_buf.size() - 1)]) = '\x00';

      /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/_decoder.pyx":307
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 *             buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *         return _decode_double(buf, start)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 307, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "src/_decoder.pyx":309
 *             buf.push_back(b'\0')
 * 
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 *     elif _is_e(c0):
 *         while True:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_11)) __PYX_ERR(11, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  }

  /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":311
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 312, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":313
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":314
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L23_break;

        /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":316
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 pass
 */
      __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 316, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":317
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 pass
 *             elif c0 == b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 317, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":319
 *             if _is_in_float_representation(c0):
 *                 pass
 *             elif c0 == b'_':             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_2 = (__pyx_v_c0 == '_');
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":322
 *                 pass
 *             else:
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":323
 *             else:
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L23_break;
      }
      __pyx_L25:;
    }
    __pyx_L23_break:;

    /* "src/_decoder.pyx":325
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0.0
 *     else:
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":326
 * 
 *         c_in_out[0] = c1
 *         return 0.0             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  }

  /* "src/_decoder.pyx":328
 *         return 0.0
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return 0
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":329
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":330
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyjson5._decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_number_leading_zero", 1);

  /* "src/_decoder.pyx":259
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     if not _reader_good(reader):
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 261, __pyx_L1_error)
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":262
 * 
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = -1L;

    /* "src/_decoder.pyx":263
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  }

  /* "src/_decoder.pyx":265
 *         return 0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if _is_x(c0):
 *         while True:
 */
  __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 265, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_3;

  /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_x(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 266, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":267
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 268, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":269
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":270
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":272
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 272, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_hexadecimal(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":274
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 274, __pyx_L1_error)

        /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L8;
      }

      /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":276
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":277
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L8:;
    }
    __pyx_L6_break:;

    /* "src/_decoder.pyx":279
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'\0')
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":281
 *         c_in_out[0] = c1
 * 
 *         buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 */
    __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 281, __pyx_L1_error)

    /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "src/_decoder.pyx":283
 *         buf.push_back(b'\0')
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyLong_FromString(__pyx_v_buf.data(), NULL, 16); if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 283, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L13_try_return;

        /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      }
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/_decoder.pyx":284
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 284, __pyx_L11_except_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "src/_decoder.pyx":285
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 */
        __pyx_t_12 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 285, __pyx_L11_except_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_exception_handled;
      }
      goto __pyx_L11_except_error;

      /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      __pyx_L11_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    }

    /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
    goto __pyx_L4;
  }

  /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  __pyx_t_2 = (__pyx_v_c0 == '.');
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":287
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         buf.push_back(b'.')
 * 
 */
    __pyx_t_4 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 287, __pyx_L1_error)

    /* "src/_decoder.pyx":288
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_4 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 288, __pyx_L1_error)

    /* "src/_decoder.pyx":290
 *         buf.push_back(b'.')
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 291, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":292
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":293
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":295
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 295, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 296, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":297
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 297, __pyx_L1_error)

        /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L20;
      }

      /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":299
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":300
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L20:;
    }
    __pyx_L18_break:;

    /* "src/_decoder.pyx":302
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_buf.data()[(__pyx_v_buf.size() - 1)]) == '.');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":305
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'             # <<<<<<<<<<<<<<
 *         else:
 *             buf.push_back(b'\0')
 */
      (((char *)__pyx_v_buf.data())[(__pyx_v_buf.size() - 1)]) = '\x00';

      /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/_decoder.pyx":307
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 *             buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *         return _decode_double(buf, start)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 307, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "src/_decoder.pyx":309
 *             buf.push_back(b'\0')
 * 
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 *     elif _is_e(c0):
 *         while True:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_11)) __PYX_ERR(11, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  }

  /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":311
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 312, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":313
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":314
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L23_break;

        /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":316
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 pass
 */
      __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 316, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":317
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 pass
 *             elif c0 == b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 317, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":319
 *             if _is_in_float_representation(c0):
 *                 pass
 *             elif c0 == b'_':             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_2 = (__pyx_v_c0 == '_');
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":322
 *                 pass
 *             else:
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":323
 *             else:
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L23_break;
      }
      __pyx_L25:;
    }
    __pyx_L23_break:;

    /* "src/_decoder.pyx":325
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0.0
 *     else:
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":326
 * 
 *         c_in_out[0] = c1
 *         return 0.0             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  }

  /* "src/_decoder.pyx":328
 *         return 0.0
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return 0
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":329
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":330
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyjson5._decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  std::uint32_t __pyx_t_3;
  bool __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_number_leading_zero", 1);

  /* "src/_decoder.pyx":259
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 *     cdef int32_t c1 = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     if not _reader_good(reader):
 */
  __pyx_v_c1 = 0;

  /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 261, __pyx_L1_error)
  __pyx_t_2 = (!(__pyx_t_1 != 0));
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":262
 * 
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = -1L;

    /* "src/_decoder.pyx":263
 *     if not _reader_good(reader):
 *         c_in_out[0] = -1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     c0 = _reader_get(reader)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":261
 *     cdef int32_t c1 = 0  # silence warning
 * 
 *     if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *         c_in_out[0] = -1
 *         return 0
 */
  }

  /* "src/_decoder.pyx":265
 *         return 0
 * 
 *     c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *     if _is_x(c0):
 *         while True:
 */
  __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 265, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_3;

  /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_x(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 266, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":267
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 268, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":269
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":270
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":268
 *     if _is_x(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":272
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 272, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_hexadecimal(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":274
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 274, __pyx_L1_error)

        /* "src/_decoder.pyx":273
 * 
 *             c0 = _reader_get(reader)
 *             if _is_hexadecimal(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L8;
      }

      /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":276
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":277
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L6_break;

        /* "src/_decoder.pyx":275
 *             if _is_hexadecimal(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L8:;
    }
    __pyx_L6_break:;

    /* "src/_decoder.pyx":279
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'\0')
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":281
 *         c_in_out[0] = c1
 * 
 *         buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 */
    __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 281, __pyx_L1_error)

    /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "src/_decoder.pyx":283
 *         buf.push_back(b'\0')
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = PyLong_FromString(__pyx_v_buf.data(), NULL, 16); if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 283, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L13_try_return;

        /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      }
      __pyx_L9_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "src/_decoder.pyx":284
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 284, __pyx_L11_except_error)
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "src/_decoder.pyx":285
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 */
        __pyx_t_12 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 285, __pyx_L11_except_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L10_exception_handled;
      }
      goto __pyx_L11_except_error;

      /* "src/_decoder.pyx":282
 * 
 *         buf.push_back(b'\0')
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 16)
 *         except Exception:
 */
      __pyx_L11_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L10_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    }

    /* "src/_decoder.pyx":266
 * 
 *     c0 = _reader_get(reader)
 *     if _is_x(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
    goto __pyx_L4;
  }

  /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  __pyx_t_2 = (__pyx_v_c0 == '.');
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":287
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         buf.push_back(b'.')
 * 
 */
    __pyx_t_4 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 287, __pyx_L1_error)

    /* "src/_decoder.pyx":288
 *     elif c0 == b'.':
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_t_4 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 288, __pyx_L1_error)

    /* "src/_decoder.pyx":290
 *         buf.push_back(b'.')
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 291, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":292
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":293
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":291
 * 
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":295
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 */
      __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 295, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 296, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":297
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 */
        __pyx_t_4 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 297, __pyx_L1_error)

        /* "src/_decoder.pyx":296
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 */
        goto __pyx_L20;
      }

      /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      __pyx_t_2 = (__pyx_v_c0 != '_');
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":299
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":300
 *             elif c0 != b'_':
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L18_break;

        /* "src/_decoder.pyx":298
 *             if _is_in_float_representation(c0):
 *                 buf.push_back(<char> <unsigned char> c0)
 *             elif c0 != b'_':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_int32(c0)
 *                 break
 */
      }
      __pyx_L20:;
    }
    __pyx_L18_break:;

    /* "src/_decoder.pyx":302
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_buf.data()[(__pyx_v_buf.size() - 1)]) == '.');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":305
 * 
 *         if buf.data()[buf.size() - 1] == b'.':
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'             # <<<<<<<<<<<<<<
 *         else:
 *             buf.push_back(b'\0')
 */
      (((char *)__pyx_v_buf.data())[(__pyx_v_buf.size() - 1)]) = '\x00';

      /* "src/_decoder.pyx":304
 *         c_in_out[0] = c1
 * 
 *         if buf.data()[buf.size() - 1] == b'.':             # <<<<<<<<<<<<<<
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 */
      goto __pyx_L21;
    }

    /* "src/_decoder.pyx":307
 *             (<char*> buf.data())[buf.size() - 1] = b'\0'
 *         else:
 *             buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *         return _decode_double(buf, start)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(11, 307, __pyx_L1_error)
    }
    __pyx_L21:;

    /* "src/_decoder.pyx":309
 *             buf.push_back(b'\0')
 * 
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 *     elif _is_e(c0):
 *         while True:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_11 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_11)) __PYX_ERR(11, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_r = __pyx_t_11;
    __pyx_t_11 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":286
 *         except Exception:
 *             _raise_unclosed('NumericLiteral', start)
 *     elif c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         buf.push_back(b'.')
 */
  }

  /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  __pyx_t_4 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "src/_decoder.pyx":311
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):
 *         while True:             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 c1 = -1
 */
    while (1) {

      /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 312, __pyx_L1_error)
      __pyx_t_2 = (!(__pyx_t_1 != 0));
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":313
 *         while True:
 *             if not _reader_good(reader):
 *                 c1 = -1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_c1 = -1L;

        /* "src/_decoder.pyx":314
 *             if not _reader_good(reader):
 *                 c1 = -1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _reader_get(reader)
 */
        goto __pyx_L23_break;

        /* "src/_decoder.pyx":312
 *     elif _is_e(c0):
 *         while True:
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 c1 = -1
 *                 break
 */
      }

      /* "src/_decoder.pyx":316
 *                 break
 * 
 *             c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if _is_in_float_representation(c0):
 *                 pass
 */
      __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 316, __pyx_L1_error)
      __pyx_v_c0 = __pyx_t_3;

      /* "src/_decoder.pyx":317
 * 
 *             c0 = _reader_get(reader)
 *             if _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *                 pass
 *             elif c0 == b'_':
 */
      __pyx_t_4 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_4 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 317, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":319
 *             if _is_in_float_representation(c0):
 *                 pass
 *             elif c0 == b'_':             # <<<<<<<<<<<<<<
 *                 pass
 *             else:
 */
      __pyx_t_2 = (__pyx_v_c0 == '_');
      if (__pyx_t_2) {
        goto __pyx_L25;
      }

      /* "src/_decoder.pyx":322
 *                 pass
 *             else:
 *                 c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

        /* "src/_decoder.pyx":323
 *             else:
 *                 c1 = cast_to_int32(c0)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         c_in_out[0] = c1
 */
        goto __pyx_L23_break;
      }
      __pyx_L25:;
    }
    __pyx_L23_break:;

    /* "src/_decoder.pyx":325
 *                 break
 * 
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0.0
 *     else:
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":326
 * 
 *         c_in_out[0] = c1
 *         return 0.0             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":310
 * 
 *         return _decode_double(buf, start)
 *     elif _is_e(c0):             # <<<<<<<<<<<<<<
 *         while True:
 *             if not _reader_good(reader):
 */
  }

  /* "src/_decoder.pyx":328
 *         return 0.0
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return 0
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":329
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":330
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L4:;

  /* "src/_decoder.pyx":256
 * 
 * 
 * cdef object _decode_number_leading_zero(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                         int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyjson5._decode_number_leading_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  bool __pyx_v_is_float;
  bool __pyx_v_was_point;
  bool __pyx_v_leading_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  std::int32_t __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_number_any", 1);

  /* "src/_decoder.pyx":337
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef boolean is_float = False             # <<<<<<<<<<<<<<
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False
 */
  __pyx_v_is_float = 0;

  /* "src/_decoder.pyx":338
 *     cdef int32_t c1
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False             # <<<<<<<<<<<<<<
 *     cdef boolean leading_point = False
 * 
 */
  __pyx_v_was_point = 0;

  /* "src/_decoder.pyx":339
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False             # <<<<<<<<<<<<<<
 * 
 *     c1 = c_in_out[0]
 */
  __pyx_v_leading_point = 0;

  /* "src/_decoder.pyx":341
 *     cdef boolean leading_point = False
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":342
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'.':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  __pyx_t_1 = (__pyx_v_c0 == '.');
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":345
 * 
 *     if c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         is_float = True
 *         leading_point = True
 */
    __pyx_t_2 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 345, __pyx_L1_error)

    /* "src/_decoder.pyx":346
 *     if c0 == b'.':
 *         buf.push_back(b'0')
 *         is_float = True             # <<<<<<<<<<<<<<
 *         leading_point = True
 * 
 */
    __pyx_v_is_float = 1;

    /* "src/_decoder.pyx":347
 *         buf.push_back(b'0')
 *         is_float = True
 *         leading_point = True             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_v_leading_point = 1;

    /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  }

  /* "src/_decoder.pyx":349
 *         leading_point = True
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if _is_decimal(c0):
 *             pass
 */
  while (1) {

    /* "src/_decoder.pyx":350
 * 
 *     while True:
 *         if _is_decimal(c0):             # <<<<<<<<<<<<<<
 *             pass
 *         elif _is_in_float_representation(c0):
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 352, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":353
 *             pass
 *         elif _is_in_float_representation(c0):
 *             is_float = True             # <<<<<<<<<<<<<<
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_is_float = 1;

      /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_1 = (__pyx_v_c0 != '_');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":355
 *             is_float = True
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":356
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c0 == b'_':
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }
    __pyx_L6:;

    /* "src/_decoder.pyx":358
 *             break
 * 
 *         if c0 == b'_':             # <<<<<<<<<<<<<<
 *             pass
 *         elif c0 != b'.':
 */
    __pyx_t_1 = (__pyx_v_c0 == '_');
    if (__pyx_t_1) {
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
    __pyx_t_1 = (__pyx_v_c0 != '.');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      __pyx_t_1 = (__pyx_v_was_point != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":362
 *         elif c0 != b'.':
 *             if was_point:
 *                 was_point = False             # <<<<<<<<<<<<<<
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 */
        __pyx_v_was_point = 0;

        /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        __pyx_t_2 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 363, __pyx_L1_error)
        __pyx_t_1 = (!(__pyx_t_2 != 0));
        if (__pyx_t_1) {

          /* "src/_decoder.pyx":364
 *                 was_point = False
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')             # <<<<<<<<<<<<<<
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 */
          __pyx_t_2 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 364, __pyx_L1_error)

          /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        }

        /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      }

      /* "src/_decoder.pyx":365
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *         elif not was_point:
 *             was_point = True
 */
      __pyx_t_2 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 365, __pyx_L1_error)

      /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
    __pyx_t_1 = (!(__pyx_v_was_point != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":367
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 *             was_point = True             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_unclosed('NumericLiteral', start)
 */
      __pyx_v_was_point = 1;

      /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":369
 *             was_point = True
 *         else:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 369, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 371, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_4 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":372
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":373
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":375
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c1
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 375, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":377
 *         c0 = _reader_get(reader)
 * 
 *     c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c1;

  /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  __pyx_t_6 = (__pyx_v_leading_point != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_buf.size() == 1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":380
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *     buf.push_back(b'\0')
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 380, __pyx_L1_error)

    /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  }

  /* "src/_decoder.pyx":382
 *         _raise_unclosed('NumericLiteral', start)
 * 
 *     buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *     if not is_float:
 */
  __pyx_t_2 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 382, __pyx_L1_error)

  /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
  __pyx_t_1 = (!(__pyx_v_is_float != 0));
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "src/_decoder.pyx":386
 *     if not is_float:
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = PyLong_FromString(__pyx_v_buf.data(), NULL, 10); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 386, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L19_try_return;

        /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      }
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/_decoder.pyx":387
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 *         _raise_unclosed('NumericLiteral', start)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L16_exception_handled;
      }
      goto __pyx_L17_except_error;

      /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      __pyx_L17_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L19_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L16_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    }

    /* "src/_decoder.pyx":389
 *         except Exception:
 *             pass
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     else:
 *         return _decode_double(buf, start)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 389, __pyx_L1_error)

    /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
    goto __pyx_L14;
  }

  /* "src/_decoder.pyx":391
 *         _raise_unclosed('NumericLiteral', start)
 *     else:
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  __pyx_L14:;

  /* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyjson5._decode_number_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  bool __pyx_v_is_float;
  bool __pyx_v_was_point;
  bool __pyx_v_leading_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  std::int32_t __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_number_any", 1);

  /* "src/_decoder.pyx":337
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef boolean is_float = False             # <<<<<<<<<<<<<<
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False
 */
  __pyx_v_is_float = 0;

  /* "src/_decoder.pyx":338
 *     cdef int32_t c1
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False             # <<<<<<<<<<<<<<
 *     cdef boolean leading_point = False
 * 
 */
  __pyx_v_was_point = 0;

  /* "src/_decoder.pyx":339
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False             # <<<<<<<<<<<<<<
 * 
 *     c1 = c_in_out[0]
 */
  __pyx_v_leading_point = 0;

  /* "src/_decoder.pyx":341
 *     cdef boolean leading_point = False
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":342
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'.':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  __pyx_t_1 = (__pyx_v_c0 == '.');
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":345
 * 
 *     if c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         is_float = True
 *         leading_point = True
 */
    __pyx_t_2 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 345, __pyx_L1_error)

    /* "src/_decoder.pyx":346
 *     if c0 == b'.':
 *         buf.push_back(b'0')
 *         is_float = True             # <<<<<<<<<<<<<<
 *         leading_point = True
 * 
 */
    __pyx_v_is_float = 1;

    /* "src/_decoder.pyx":347
 *         buf.push_back(b'0')
 *         is_float = True
 *         leading_point = True             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_v_leading_point = 1;

    /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  }

  /* "src/_decoder.pyx":349
 *         leading_point = True
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if _is_decimal(c0):
 *             pass
 */
  while (1) {

    /* "src/_decoder.pyx":350
 * 
 *     while True:
 *         if _is_decimal(c0):             # <<<<<<<<<<<<<<
 *             pass
 *         elif _is_in_float_representation(c0):
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 352, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":353
 *             pass
 *         elif _is_in_float_representation(c0):
 *             is_float = True             # <<<<<<<<<<<<<<
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_is_float = 1;

      /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_1 = (__pyx_v_c0 != '_');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":355
 *             is_float = True
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":356
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c0 == b'_':
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }
    __pyx_L6:;

    /* "src/_decoder.pyx":358
 *             break
 * 
 *         if c0 == b'_':             # <<<<<<<<<<<<<<
 *             pass
 *         elif c0 != b'.':
 */
    __pyx_t_1 = (__pyx_v_c0 == '_');
    if (__pyx_t_1) {
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
    __pyx_t_1 = (__pyx_v_c0 != '.');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      __pyx_t_1 = (__pyx_v_was_point != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":362
 *         elif c0 != b'.':
 *             if was_point:
 *                 was_point = False             # <<<<<<<<<<<<<<
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 */
        __pyx_v_was_point = 0;

        /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        __pyx_t_2 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 363, __pyx_L1_error)
        __pyx_t_1 = (!(__pyx_t_2 != 0));
        if (__pyx_t_1) {

          /* "src/_decoder.pyx":364
 *                 was_point = False
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')             # <<<<<<<<<<<<<<
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 */
          __pyx_t_2 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 364, __pyx_L1_error)

          /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        }

        /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      }

      /* "src/_decoder.pyx":365
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *         elif not was_point:
 *             was_point = True
 */
      __pyx_t_2 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 365, __pyx_L1_error)

      /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
    __pyx_t_1 = (!(__pyx_v_was_point != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":367
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 *             was_point = True             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_unclosed('NumericLiteral', start)
 */
      __pyx_v_was_point = 1;

      /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":369
 *             was_point = True
 *         else:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 369, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 371, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_4 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":372
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":373
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":375
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c1
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 375, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":377
 *         c0 = _reader_get(reader)
 * 
 *     c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c1;

  /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  __pyx_t_6 = (__pyx_v_leading_point != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_buf.size() == 1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":380
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *     buf.push_back(b'\0')
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 380, __pyx_L1_error)

    /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  }

  /* "src/_decoder.pyx":382
 *         _raise_unclosed('NumericLiteral', start)
 * 
 *     buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *     if not is_float:
 */
  __pyx_t_2 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 382, __pyx_L1_error)

  /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
  __pyx_t_1 = (!(__pyx_v_is_float != 0));
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "src/_decoder.pyx":386
 *     if not is_float:
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = PyLong_FromString(__pyx_v_buf.data(), NULL, 10); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 386, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L19_try_return;

        /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      }
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/_decoder.pyx":387
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 *         _raise_unclosed('NumericLiteral', start)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L16_exception_handled;
      }
      goto __pyx_L17_except_error;

      /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      __pyx_L17_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L19_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L16_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    }

    /* "src/_decoder.pyx":389
 *         except Exception:
 *             pass
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     else:
 *         return _decode_double(buf, start)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 389, __pyx_L1_error)

    /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
    goto __pyx_L14;
  }

  /* "src/_decoder.pyx":391
 *         _raise_unclosed('NumericLiteral', start)
 *     else:
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  __pyx_L14:;

  /* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyjson5._decode_number_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  bool __pyx_v_is_float;
  bool __pyx_v_was_point;
  bool __pyx_v_leading_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  std::int32_t __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_number_any", 1);

  /* "src/_decoder.pyx":337
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef boolean is_float = False             # <<<<<<<<<<<<<<
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False
 */
  __pyx_v_is_float = 0;

  /* "src/_decoder.pyx":338
 *     cdef int32_t c1
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False             # <<<<<<<<<<<<<<
 *     cdef boolean leading_point = False
 * 
 */
  __pyx_v_was_point = 0;

  /* "src/_decoder.pyx":339
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False             # <<<<<<<<<<<<<<
 * 
 *     c1 = c_in_out[0]
 */
  __pyx_v_leading_point = 0;

  /* "src/_decoder.pyx":341
 *     cdef boolean leading_point = False
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":342
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'.':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  __pyx_t_1 = (__pyx_v_c0 == '.');
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":345
 * 
 *     if c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         is_float = True
 *         leading_point = True
 */
    __pyx_t_2 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 345, __pyx_L1_error)

    /* "src/_decoder.pyx":346
 *     if c0 == b'.':
 *         buf.push_back(b'0')
 *         is_float = True             # <<<<<<<<<<<<<<
 *         leading_point = True
 * 
 */
    __pyx_v_is_float = 1;

    /* "src/_decoder.pyx":347
 *         buf.push_back(b'0')
 *         is_float = True
 *         leading_point = True             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_v_leading_point = 1;

    /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  }

  /* "src/_decoder.pyx":349
 *         leading_point = True
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if _is_decimal(c0):
 *             pass
 */
  while (1) {

    /* "src/_decoder.pyx":350
 * 
 *     while True:
 *         if _is_decimal(c0):             # <<<<<<<<<<<<<<
 *             pass
 *         elif _is_in_float_representation(c0):
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 352, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":353
 *             pass
 *         elif _is_in_float_representation(c0):
 *             is_float = True             # <<<<<<<<<<<<<<
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_is_float = 1;

      /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_1 = (__pyx_v_c0 != '_');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":355
 *             is_float = True
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":356
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c0 == b'_':
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }
    __pyx_L6:;

    /* "src/_decoder.pyx":358
 *             break
 * 
 *         if c0 == b'_':             # <<<<<<<<<<<<<<
 *             pass
 *         elif c0 != b'.':
 */
    __pyx_t_1 = (__pyx_v_c0 == '_');
    if (__pyx_t_1) {
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
    __pyx_t_1 = (__pyx_v_c0 != '.');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      __pyx_t_1 = (__pyx_v_was_point != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":362
 *         elif c0 != b'.':
 *             if was_point:
 *                 was_point = False             # <<<<<<<<<<<<<<
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 */
        __pyx_v_was_point = 0;

        /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        __pyx_t_2 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 363, __pyx_L1_error)
        __pyx_t_1 = (!(__pyx_t_2 != 0));
        if (__pyx_t_1) {

          /* "src/_decoder.pyx":364
 *                 was_point = False
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')             # <<<<<<<<<<<<<<
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 */
          __pyx_t_2 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 364, __pyx_L1_error)

          /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        }

        /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      }

      /* "src/_decoder.pyx":365
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *         elif not was_point:
 *             was_point = True
 */
      __pyx_t_2 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 365, __pyx_L1_error)

      /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
    __pyx_t_1 = (!(__pyx_v_was_point != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":367
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 *             was_point = True             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_unclosed('NumericLiteral', start)
 */
      __pyx_v_was_point = 1;

      /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":369
 *             was_point = True
 *         else:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 369, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 371, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_4 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":372
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":373
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":375
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c1
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 375, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":377
 *         c0 = _reader_get(reader)
 * 
 *     c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c1;

  /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  __pyx_t_6 = (__pyx_v_leading_point != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_buf.size() == 1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":380
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *     buf.push_back(b'\0')
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 380, __pyx_L1_error)

    /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  }

  /* "src/_decoder.pyx":382
 *         _raise_unclosed('NumericLiteral', start)
 * 
 *     buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *     if not is_float:
 */
  __pyx_t_2 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 382, __pyx_L1_error)

  /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
  __pyx_t_1 = (!(__pyx_v_is_float != 0));
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "src/_decoder.pyx":386
 *     if not is_float:
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = PyLong_FromString(__pyx_v_buf.data(), NULL, 10); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 386, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L19_try_return;

        /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      }
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/_decoder.pyx":387
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 *         _raise_unclosed('NumericLiteral', start)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L16_exception_handled;
      }
      goto __pyx_L17_except_error;

      /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      __pyx_L17_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L19_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L16_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    }

    /* "src/_decoder.pyx":389
 *         except Exception:
 *             pass
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     else:
 *         return _decode_double(buf, start)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 389, __pyx_L1_error)

    /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
    goto __pyx_L14;
  }

  /* "src/_decoder.pyx":391
 *         _raise_unclosed('NumericLiteral', start)
 *     else:
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  __pyx_L14:;

  /* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyjson5._decode_number_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  bool __pyx_v_is_float;
  bool __pyx_v_was_point;
  bool __pyx_v_leading_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  std::int32_t __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_number_any", 1);

  /* "src/_decoder.pyx":337
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef boolean is_float = False             # <<<<<<<<<<<<<<
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False
 */
  __pyx_v_is_float = 0;

  /* "src/_decoder.pyx":338
 *     cdef int32_t c1
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False             # <<<<<<<<<<<<<<
 *     cdef boolean leading_point = False
 * 
 */
  __pyx_v_was_point = 0;

  /* "src/_decoder.pyx":339
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False             # <<<<<<<<<<<<<<
 * 
 *     c1 = c_in_out[0]
 */
  __pyx_v_leading_point = 0;

  /* "src/_decoder.pyx":341
 *     cdef boolean leading_point = False
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":342
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'.':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  __pyx_t_1 = (__pyx_v_c0 == '.');
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":345
 * 
 *     if c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         is_float = True
 *         leading_point = True
 */
    __pyx_t_2 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 345, __pyx_L1_error)

    /* "src/_decoder.pyx":346
 *     if c0 == b'.':
 *         buf.push_back(b'0')
 *         is_float = True             # <<<<<<<<<<<<<<
 *         leading_point = True
 * 
 */
    __pyx_v_is_float = 1;

    /* "src/_decoder.pyx":347
 *         buf.push_back(b'0')
 *         is_float = True
 *         leading_point = True             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_v_leading_point = 1;

    /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  }

  /* "src/_decoder.pyx":349
 *         leading_point = True
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if _is_decimal(c0):
 *             pass
 */
  while (1) {

    /* "src/_decoder.pyx":350
 * 
 *     while True:
 *         if _is_decimal(c0):             # <<<<<<<<<<<<<<
 *             pass
 *         elif _is_in_float_representation(c0):
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 352, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":353
 *             pass
 *         elif _is_in_float_representation(c0):
 *             is_float = True             # <<<<<<<<<<<<<<
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_is_float = 1;

      /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_1 = (__pyx_v_c0 != '_');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":355
 *             is_float = True
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":356
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c0 == b'_':
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }
    __pyx_L6:;

    /* "src/_decoder.pyx":358
 *             break
 * 
 *         if c0 == b'_':             # <<<<<<<<<<<<<<
 *             pass
 *         elif c0 != b'.':
 */
    __pyx_t_1 = (__pyx_v_c0 == '_');
    if (__pyx_t_1) {
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
    __pyx_t_1 = (__pyx_v_c0 != '.');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      __pyx_t_1 = (__pyx_v_was_point != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":362
 *         elif c0 != b'.':
 *             if was_point:
 *                 was_point = False             # <<<<<<<<<<<<<<
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 */
        __pyx_v_was_point = 0;

        /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        __pyx_t_2 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 363, __pyx_L1_error)
        __pyx_t_1 = (!(__pyx_t_2 != 0));
        if (__pyx_t_1) {

          /* "src/_decoder.pyx":364
 *                 was_point = False
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')             # <<<<<<<<<<<<<<
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 */
          __pyx_t_2 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 364, __pyx_L1_error)

          /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        }

        /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      }

      /* "src/_decoder.pyx":365
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *         elif not was_point:
 *             was_point = True
 */
      __pyx_t_2 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 365, __pyx_L1_error)

      /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
    __pyx_t_1 = (!(__pyx_v_was_point != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":367
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 *             was_point = True             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_unclosed('NumericLiteral', start)
 */
      __pyx_v_was_point = 1;

      /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":369
 *             was_point = True
 *         else:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 369, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 371, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_4 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":372
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":373
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":375
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c1
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 375, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":377
 *         c0 = _reader_get(reader)
 * 
 *     c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c1;

  /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  __pyx_t_6 = (__pyx_v_leading_point != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_buf.size() == 1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":380
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *     buf.push_back(b'\0')
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 380, __pyx_L1_error)

    /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  }

  /* "src/_decoder.pyx":382
 *         _raise_unclosed('NumericLiteral', start)
 * 
 *     buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *     if not is_float:
 */
  __pyx_t_2 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 382, __pyx_L1_error)

  /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
  __pyx_t_1 = (!(__pyx_v_is_float != 0));
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "src/_decoder.pyx":386
 *     if not is_float:
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = PyLong_FromString(__pyx_v_buf.data(), NULL, 10); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 386, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L19_try_return;

        /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      }
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/_decoder.pyx":387
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 *         _raise_unclosed('NumericLiteral', start)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L16_exception_handled;
      }
      goto __pyx_L17_except_error;

      /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      __pyx_L17_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L19_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L16_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    }

    /* "src/_decoder.pyx":389
 *         except Exception:
 *             pass
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     else:
 *         return _decode_double(buf, start)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 389, __pyx_L1_error)

    /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
    goto __pyx_L14;
  }

  /* "src/_decoder.pyx":391
 *         _raise_unclosed('NumericLiteral', start)
 *     else:
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  __pyx_L14:;

  /* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyjson5._decode_number_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number_any(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, JSON5EncoderCpp::StackHeapString<char>  &__pyx_v_buf, std::int32_t *__pyx_v_c_in_out, Py_ssize_t __pyx_v_start) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  bool __pyx_v_is_float;
  bool __pyx_v_was_point;
  bool __pyx_v_leading_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
  std::int32_t __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_number_any", 1);

  /* "src/_decoder.pyx":337
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef boolean is_float = False             # <<<<<<<<<<<<<<
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False
 */
  __pyx_v_is_float = 0;

  /* "src/_decoder.pyx":338
 *     cdef int32_t c1
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False             # <<<<<<<<<<<<<<
 *     cdef boolean leading_point = False
 * 
 */
  __pyx_v_was_point = 0;

  /* "src/_decoder.pyx":339
 *     cdef boolean is_float = False
 *     cdef boolean was_point = False
 *     cdef boolean leading_point = False             # <<<<<<<<<<<<<<
 * 
 *     c1 = c_in_out[0]
 */
  __pyx_v_leading_point = 0;

  /* "src/_decoder.pyx":341
 *     cdef boolean leading_point = False
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":342
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'.':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  __pyx_t_1 = (__pyx_v_c0 == '.');
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":345
 * 
 *     if c0 == b'.':
 *         buf.push_back(b'0')             # <<<<<<<<<<<<<<
 *         is_float = True
 *         leading_point = True
 */
    __pyx_t_2 = __pyx_v_buf.push_back('0'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 345, __pyx_L1_error)

    /* "src/_decoder.pyx":346
 *     if c0 == b'.':
 *         buf.push_back(b'0')
 *         is_float = True             # <<<<<<<<<<<<<<
 *         leading_point = True
 * 
 */
    __pyx_v_is_float = 1;

    /* "src/_decoder.pyx":347
 *         buf.push_back(b'0')
 *         is_float = True
 *         leading_point = True             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_v_leading_point = 1;

    /* "src/_decoder.pyx":344
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'.':             # <<<<<<<<<<<<<<
 *         buf.push_back(b'0')
 *         is_float = True
 */
  }

  /* "src/_decoder.pyx":349
 *         leading_point = True
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if _is_decimal(c0):
 *             pass
 */
  while (1) {

    /* "src/_decoder.pyx":350
 * 
 *     while True:
 *         if _is_decimal(c0):             # <<<<<<<<<<<<<<
 *             pass
 *         elif _is_in_float_representation(c0):
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_decimal(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 350, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_in_float_representation(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 352, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":353
 *             pass
 *         elif _is_in_float_representation(c0):
 *             is_float = True             # <<<<<<<<<<<<<<
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 */
      __pyx_v_is_float = 1;

      /* "src/_decoder.pyx":352
 *         if _is_decimal(c0):
 *             pass
 *         elif _is_in_float_representation(c0):             # <<<<<<<<<<<<<<
 *             is_float = True
 *         elif c0 != b'_':
 */
      goto __pyx_L6;
    }

    /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    __pyx_t_1 = (__pyx_v_c0 != '_');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":355
 *             is_float = True
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

      /* "src/_decoder.pyx":356
 *         elif c0 != b'_':
 *             c1 = cast_to_int32(c0)
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if c0 == b'_':
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":354
 *         elif _is_in_float_representation(c0):
 *             is_float = True
 *         elif c0 != b'_':             # <<<<<<<<<<<<<<
 *             c1 = cast_to_int32(c0)
 *             break
 */
    }
    __pyx_L6:;

    /* "src/_decoder.pyx":358
 *             break
 * 
 *         if c0 == b'_':             # <<<<<<<<<<<<<<
 *             pass
 *         elif c0 != b'.':
 */
    __pyx_t_1 = (__pyx_v_c0 == '_');
    if (__pyx_t_1) {
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
    __pyx_t_1 = (__pyx_v_c0 != '.');
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      __pyx_t_1 = (__pyx_v_was_point != 0);
      if (__pyx_t_1) {

        /* "src/_decoder.pyx":362
 *         elif c0 != b'.':
 *             if was_point:
 *                 was_point = False             # <<<<<<<<<<<<<<
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 */
        __pyx_v_was_point = 0;

        /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        __pyx_t_2 = __pyx_f_7pyjson5__is_e(__pyx_v_c0); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 363, __pyx_L1_error)
        __pyx_t_1 = (!(__pyx_t_2 != 0));
        if (__pyx_t_1) {

          /* "src/_decoder.pyx":364
 *                 was_point = False
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')             # <<<<<<<<<<<<<<
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 */
          __pyx_t_2 = __pyx_v_buf.push_back('.'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 364, __pyx_L1_error)

          /* "src/_decoder.pyx":363
 *             if was_point:
 *                 was_point = False
 *                 if not _is_e(c0):             # <<<<<<<<<<<<<<
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 */
        }

        /* "src/_decoder.pyx":361
 *             pass
 *         elif c0 != b'.':
 *             if was_point:             # <<<<<<<<<<<<<<
 *                 was_point = False
 *                 if not _is_e(c0):
 */
      }

      /* "src/_decoder.pyx":365
 *                 if not _is_e(c0):
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)             # <<<<<<<<<<<<<<
 *         elif not was_point:
 *             was_point = True
 */
      __pyx_t_2 = __pyx_v_buf.push_back(((char)((unsigned char)__pyx_v_c0))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 365, __pyx_L1_error)

      /* "src/_decoder.pyx":360
 *         if c0 == b'_':
 *             pass
 *         elif c0 != b'.':             # <<<<<<<<<<<<<<
 *             if was_point:
 *                 was_point = False
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
    __pyx_t_1 = (!(__pyx_v_was_point != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":367
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:
 *             was_point = True             # <<<<<<<<<<<<<<
 *         else:
 *             _raise_unclosed('NumericLiteral', start)
 */
      __pyx_v_was_point = 1;

      /* "src/_decoder.pyx":366
 *                     buf.push_back(b'.')
 *             buf.push_back(<char> <unsigned char> c0)
 *         elif not was_point:             # <<<<<<<<<<<<<<
 *             was_point = True
 *         else:
 */
      goto __pyx_L7;
    }

    /* "src/_decoder.pyx":369
 *             was_point = True
 *         else:
 *             _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    /*else*/ {
      __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 369, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    __pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_4 == ((std::int32_t)-1L))) __PYX_ERR(11, 371, __pyx_L1_error)
    __pyx_t_1 = (!(__pyx_t_4 != 0));
    if (__pyx_t_1) {

      /* "src/_decoder.pyx":372
 * 
 *         if not _reader_good(reader):
 *             c1 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c1 = -1L;

      /* "src/_decoder.pyx":373
 *         if not _reader_good(reader):
 *             c1 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":371
 *             _raise_unclosed('NumericLiteral', start)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c1 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":375
 *             break
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c1
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 375, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":377
 *         c0 = _reader_get(reader)
 * 
 *     c_in_out[0] = c1             # <<<<<<<<<<<<<<
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c1;

  /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  __pyx_t_6 = (__pyx_v_leading_point != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_buf.size() == 1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":380
 * 
 *     if leading_point and buf.size() == 1:  # single '.'
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 * 
 *     buf.push_back(b'\0')
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 380, __pyx_L1_error)

    /* "src/_decoder.pyx":379
 *     c_in_out[0] = c1
 * 
 *     if leading_point and buf.size() == 1:  # single '.'             # <<<<<<<<<<<<<<
 *         _raise_unclosed('NumericLiteral', start)
 * 
 */
  }

  /* "src/_decoder.pyx":382
 *         _raise_unclosed('NumericLiteral', start)
 * 
 *     buf.push_back(b'\0')             # <<<<<<<<<<<<<<
 * 
 *     if not is_float:
 */
  __pyx_t_2 = __pyx_v_buf.push_back('\x00'); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 382, __pyx_L1_error)

  /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
  __pyx_t_1 = (!(__pyx_v_is_float != 0));
  if (__pyx_t_1) {

    /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "src/_decoder.pyx":386
 *     if not is_float:
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)             # <<<<<<<<<<<<<<
 *         except Exception:
 *             pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_10 = PyLong_FromString(__pyx_v_buf.data(), NULL, 10); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 386, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_r = __pyx_t_10;
        __pyx_t_10 = 0;
        goto __pyx_L19_try_return;

        /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      }
      __pyx_L15_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/_decoder.pyx":387
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:             # <<<<<<<<<<<<<<
 *             pass
 *         _raise_unclosed('NumericLiteral', start)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L16_exception_handled;
      }
      goto __pyx_L17_except_error;

      /* "src/_decoder.pyx":385
 * 
 *     if not is_float:
 *         try:             # <<<<<<<<<<<<<<
 *             return PyLong_FromString(buf.data(), NULL, 10)
 *         except Exception:
 */
      __pyx_L17_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L19_try_return:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L16_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    }

    /* "src/_decoder.pyx":389
 *         except Exception:
 *             pass
 *         _raise_unclosed('NumericLiteral', start)             # <<<<<<<<<<<<<<
 *     else:
 *         return _decode_double(buf, start)
 */
    __pyx_t_3 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"NumericLiteral"), __pyx_v_start); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 389, __pyx_L1_error)

    /* "src/_decoder.pyx":384
 *     buf.push_back(b'\0')
 * 
 *     if not is_float:             # <<<<<<<<<<<<<<
 *         try:
 *             return PyLong_FromString(buf.data(), NULL, 10)
 */
    goto __pyx_L14;
  }

  /* "src/_decoder.pyx":391
 *         _raise_unclosed('NumericLiteral', start)
 *     else:
 *         return _decode_double(buf, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_10 = __pyx_f_7pyjson5__decode_double(__pyx_v_buf, __pyx_v_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(11, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  __pyx_L14:;

  /* "src/_decoder.pyx":333
 * 
 * 
 * cdef object _decode_number_any(ReaderRef reader, StackHeapString[char] &buf,             # <<<<<<<<<<<<<<
 *                                int32_t *c_in_out, Py_ssize_t start):
 *     cdef uint32_t c0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyjson5._decode_number_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<char>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_number", 1);

  /* "src/_decoder.pyx":397
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef Py_ssize_t start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     cdef StackHeapString[char] buf
 * 
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 397, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":400
 *     cdef StackHeapString[char] buf
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":401
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'+':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
  switch (__pyx_v_c0) {
    case '+':

    /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 404, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":405
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 405, __pyx_L1_error)

      /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":407
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 407, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":409
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 409, __pyx_L1_error)

      /* "src/_decoder.pyx":410
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":411
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":413
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 413, __pyx_L1_error)

      /* "src/_decoder.pyx":414
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":415
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN             # <<<<<<<<<<<<<<
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":412
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    case '-':

    /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 417, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":418
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 418, __pyx_L1_error)

      /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":420
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 420, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":422
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 422, __pyx_L1_error)

      /* "src/_decoder.pyx":423
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":424
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":426
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 426, __pyx_L1_error)

      /* "src/_decoder.pyx":427
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_NAN
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":428
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'-')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":425
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":430
 *             return CONST_NEG_NAN
 * 
 *         buf.push_back(b'-')             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'0':
 */
    __pyx_t_6 = __pyx_v_buf.push_back('-'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 430, __pyx_L1_error)

    /* "src/_decoder.pyx":416
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 *     elif c0 == b'-':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    default: break;
  }

  /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":433
 * 
 *     if c0 == b'0':
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_0__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  }

  /* "src/_decoder.pyx":435
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":436
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return _decode_number_any(reader, buf, c_in_out, start)
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":437
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_0__pyx_f_7pyjson5__decode_number_any(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<char>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_number", 1);

  /* "src/_decoder.pyx":397
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef Py_ssize_t start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     cdef StackHeapString[char] buf
 * 
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 397, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":400
 *     cdef StackHeapString[char] buf
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":401
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'+':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
  switch (__pyx_v_c0) {
    case '+':

    /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 404, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":405
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 405, __pyx_L1_error)

      /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":407
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 407, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":409
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 409, __pyx_L1_error)

      /* "src/_decoder.pyx":410
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":411
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":413
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 413, __pyx_L1_error)

      /* "src/_decoder.pyx":414
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":415
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN             # <<<<<<<<<<<<<<
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":412
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    case '-':

    /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 417, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":418
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 418, __pyx_L1_error)

      /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":420
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 420, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":422
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 422, __pyx_L1_error)

      /* "src/_decoder.pyx":423
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":424
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":426
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 426, __pyx_L1_error)

      /* "src/_decoder.pyx":427
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_NAN
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":428
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'-')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":425
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":430
 *             return CONST_NEG_NAN
 * 
 *         buf.push_back(b'-')             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'0':
 */
    __pyx_t_6 = __pyx_v_buf.push_back('-'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 430, __pyx_L1_error)

    /* "src/_decoder.pyx":416
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 *     elif c0 == b'-':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    default: break;
  }

  /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":433
 * 
 *     if c0 == b'0':
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_1__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  }

  /* "src/_decoder.pyx":435
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":436
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return _decode_number_any(reader, buf, c_in_out, start)
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":437
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_1__pyx_f_7pyjson5__decode_number_any(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<char>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_number", 1);

  /* "src/_decoder.pyx":397
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef Py_ssize_t start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     cdef StackHeapString[char] buf
 * 
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 397, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":400
 *     cdef StackHeapString[char] buf
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":401
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'+':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
  switch (__pyx_v_c0) {
    case '+':

    /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 404, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":405
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 405, __pyx_L1_error)

      /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":407
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 407, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":409
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 409, __pyx_L1_error)

      /* "src/_decoder.pyx":410
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":411
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":413
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 413, __pyx_L1_error)

      /* "src/_decoder.pyx":414
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":415
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN             # <<<<<<<<<<<<<<
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":412
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    case '-':

    /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 417, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":418
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 418, __pyx_L1_error)

      /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":420
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 420, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":422
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 422, __pyx_L1_error)

      /* "src/_decoder.pyx":423
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":424
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":426
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 426, __pyx_L1_error)

      /* "src/_decoder.pyx":427
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_NAN
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":428
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'-')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":425
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":430
 *             return CONST_NEG_NAN
 * 
 *         buf.push_back(b'-')             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'0':
 */
    __pyx_t_6 = __pyx_v_buf.push_back('-'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 430, __pyx_L1_error)

    /* "src/_decoder.pyx":416
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 *     elif c0 == b'-':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    default: break;
  }

  /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":433
 * 
 *     if c0 == b'0':
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_2__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  }

  /* "src/_decoder.pyx":435
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":436
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return _decode_number_any(reader, buf, c_in_out, start)
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":437
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_2__pyx_f_7pyjson5__decode_number_any(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<char>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_number", 1);

  /* "src/_decoder.pyx":397
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef Py_ssize_t start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     cdef StackHeapString[char] buf
 * 
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 397, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":400
 *     cdef StackHeapString[char] buf
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":401
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'+':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
  switch (__pyx_v_c0) {
    case '+':

    /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 404, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":405
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 405, __pyx_L1_error)

      /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":407
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 407, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":409
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 409, __pyx_L1_error)

      /* "src/_decoder.pyx":410
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":411
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":413
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 413, __pyx_L1_error)

      /* "src/_decoder.pyx":414
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":415
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN             # <<<<<<<<<<<<<<
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":412
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    case '-':

    /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 417, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":418
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 418, __pyx_L1_error)

      /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":420
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 420, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":422
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 422, __pyx_L1_error)

      /* "src/_decoder.pyx":423
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":424
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":426
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 426, __pyx_L1_error)

      /* "src/_decoder.pyx":427
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_NAN
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":428
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'-')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":425
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":430
 *             return CONST_NEG_NAN
 * 
 *         buf.push_back(b'-')             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'0':
 */
    __pyx_t_6 = __pyx_v_buf.push_back('-'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 430, __pyx_L1_error)

    /* "src/_decoder.pyx":416
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 *     elif c0 == b'-':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    default: break;
  }

  /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":433
 * 
 *     if c0 == b'0':
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_3__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  }

  /* "src/_decoder.pyx":435
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":436
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return _decode_number_any(reader, buf, c_in_out, start)
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":437
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_3__pyx_f_7pyjson5__decode_number_any(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_number(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::uint32_t __pyx_v_c0;
  std::int32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<char>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  bool __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_number", 1);

  /* "src/_decoder.pyx":397
 *     cdef uint32_t c0
 *     cdef int32_t c1
 *     cdef Py_ssize_t start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     cdef StackHeapString[char] buf
 * 
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 397, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":400
 *     cdef StackHeapString[char] buf
 * 
 *     c1 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c0 = cast_to_uint32(c1)
 * 
 */
  __pyx_v_c1 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":401
 * 
 *     c1 = c_in_out[0]
 *     c0 = cast_to_uint32(c1)             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'+':
 */
  __pyx_v_c0 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c1);

  /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
  switch (__pyx_v_c0) {
    case '+':

    /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 404, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":405
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 405, __pyx_L1_error)

      /* "src/_decoder.pyx":404
 * 
 *     if c0 == b'+':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":407
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 407, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":409
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 409, __pyx_L1_error)

      /* "src/_decoder.pyx":410
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":411
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":408
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":413
 *             return CONST_POS_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 413, __pyx_L1_error)

      /* "src/_decoder.pyx":414
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":415
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN             # <<<<<<<<<<<<<<
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":412
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":403
 *     c0 = cast_to_uint32(c1)
 * 
 *     if c0 == b'+':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    case '-':

    /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    __pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 417, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":418
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)             # <<<<<<<<<<<<<<
 * 
 *         c0 = _reader_get(reader)
 */
      __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"number"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 418, __pyx_L1_error)

      /* "src/_decoder.pyx":417
 *             return CONST_POS_NAN
 *     elif c0 == b'-':
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'number', start)
 * 
 */
    }

    /* "src/_decoder.pyx":420
 *             _raise_unclosed(b'number', start)
 * 
 *         c0 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 420, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_5;

    /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    switch (__pyx_v_c0) {
      case 'I':

      /* "src/_decoder.pyx":422
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 422, __pyx_L1_error)

      /* "src/_decoder.pyx":423
 *         if c0 == b'I':
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":424
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF             # <<<<<<<<<<<<<<
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_INF);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_INF;
      goto __pyx_L0;

      /* "src/_decoder.pyx":421
 * 
 *         c0 = _reader_get(reader)
 *         if c0 == b'I':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'nfinity')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      case 'N':

      /* "src/_decoder.pyx":426
 *             return CONST_NEG_INF
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 426, __pyx_L1_error)

      /* "src/_decoder.pyx":427
 *         elif c0 == b'N':
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return CONST_NEG_NAN
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":428
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_NAN             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(b'-')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
      __pyx_r = __pyx_v_7pyjson5_CONST_NEG_NAN;
      goto __pyx_L0;

      /* "src/_decoder.pyx":425
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_NEG_INF
 *         elif c0 == b'N':             # <<<<<<<<<<<<<<
 *             _accept_string(reader, b'aN')
 *             c_in_out[0] = NO_EXTRA_DATA
 */
      break;
      default: break;
    }

    /* "src/_decoder.pyx":430
 *             return CONST_NEG_NAN
 * 
 *         buf.push_back(b'-')             # <<<<<<<<<<<<<<
 * 
 *     if c0 == b'0':
 */
    __pyx_t_6 = __pyx_v_buf.push_back('-'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(11, 430, __pyx_L1_error)

    /* "src/_decoder.pyx":416
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return CONST_POS_NAN
 *     elif c0 == b'-':             # <<<<<<<<<<<<<<
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'number', start)
 */
    break;
    default: break;
  }

  /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  __pyx_t_3 = (__pyx_v_c0 == '0');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":433
 * 
 *     if c0 == b'0':
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 *     else:
 *         c1 = cast_to_int32(c0)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_4__pyx_f_7pyjson5__decode_number_leading_zero(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "src/_decoder.pyx":432
 *         buf.push_back(b'-')
 * 
 *     if c0 == b'0':             # <<<<<<<<<<<<<<
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 */
  }

  /* "src/_decoder.pyx":435
 *         return _decode_number_leading_zero(reader, buf, c_in_out, start)
 *     else:
 *         c1 = cast_to_int32(c0)             # <<<<<<<<<<<<<<
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)
 */
  /*else*/ {
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c0);

    /* "src/_decoder.pyx":436
 *     else:
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1             # <<<<<<<<<<<<<<
 *         return _decode_number_any(reader, buf, c_in_out, start)
 * 
 */
    (__pyx_v_c_in_out[0]) = __pyx_v_c1;

    /* "src/_decoder.pyx":437
 *         c1 = cast_to_int32(c0)
 *         c_in_out[0] = c1
 *         return _decode_number_any(reader, buf, c_in_out, start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __pyx_fuse_4__pyx_f_7pyjson5__decode_number_any(__pyx_v_reader, __pyx_v_buf, __pyx_v_c_in_out, __pyx_v_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* "src/_decoder.pyx":394
 * 
 * 
 * cdef object _decode_number(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef int32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

static std::uint32_t __pyx_fuse_0__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_terminator, char const *__pyx_v_what, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  bool __pyx_v_needs_comma;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":451
 *     cdef uint32_t done
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":452
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     needs_comma = True
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":454
 *     c1 = cast_to_uint32(c0)
 * 
 *     needs_comma = True             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 */
  __pyx_v_needs_comma = 1;

  /* "src/_decoder.pyx":455
 * 
 *     needs_comma = True
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 */
  while (1) {

    /* "src/_decoder.pyx":456
 *     needs_comma = True
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             break
 */
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 456, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = (__pyx_v_c0 < 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":458
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = cast_to_uint32(c0)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":460
 *             break
 * 
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    __pyx_t_2 = (__pyx_v_c1 == __pyx_v_terminator);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":462
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":463
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if c1 != b',':
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    }

    /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    __pyx_t_2 = (__pyx_v_c1 != ',');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      __pyx_t_2 = (JSON5EncoderCpp_expect(__pyx_v_needs_comma, 0) != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":468
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,             # <<<<<<<<<<<<<<
 *                 )
 *             c_in_out[0] = c0
 */
        __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 468, __pyx_L1_error)

        /* "src/_decoder.pyx":467
 *         if c1 != b',':
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(             # <<<<<<<<<<<<<<
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_sc(((char const *)"comma"), __pyx_v_terminator, __pyx_t_3, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 467, __pyx_L1_error)

        /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      }

      /* "src/_decoder.pyx":470
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 *             c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_v_c0;

      /* "src/_decoder.pyx":471
 *                 )
 *             c_in_out[0] = c0
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if expect(not needs_comma, False):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    }

    /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_v_needs_comma != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":474
 * 
 *         if expect(not needs_comma, False):
 *             _raise_stray_character('comma', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      __pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 474, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"comma"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 474, __pyx_L1_error)

      /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    }

    /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 476, __pyx_L1_error)
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_1 != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":477
 * 
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":479
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         needs_comma = False
 * 
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 479, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_5;

    /* "src/_decoder.pyx":480
 * 
 *         c1 = _reader_get(reader)
 *         needs_comma = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(what, start)
 */
    __pyx_v_needs_comma = 0;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":482
 *         needs_comma = False
 * 
 *     _raise_unclosed(what, start)             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(__pyx_v_what, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 482, __pyx_L1_error)

  /* "src/_decoder.pyx":483
 * 
 *     _raise_unclosed(what, start)
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1L;
  goto __pyx_L0;

  /* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_comma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::uint32_t __pyx_fuse_1__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_terminator, char const *__pyx_v_what, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  bool __pyx_v_needs_comma;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":451
 *     cdef uint32_t done
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":452
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     needs_comma = True
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":454
 *     c1 = cast_to_uint32(c0)
 * 
 *     needs_comma = True             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 */
  __pyx_v_needs_comma = 1;

  /* "src/_decoder.pyx":455
 * 
 *     needs_comma = True
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 */
  while (1) {

    /* "src/_decoder.pyx":456
 *     needs_comma = True
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             break
 */
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 456, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = (__pyx_v_c0 < 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":458
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = cast_to_uint32(c0)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":460
 *             break
 * 
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    __pyx_t_2 = (__pyx_v_c1 == __pyx_v_terminator);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":462
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":463
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if c1 != b',':
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    }

    /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    __pyx_t_2 = (__pyx_v_c1 != ',');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      __pyx_t_2 = (JSON5EncoderCpp_expect(__pyx_v_needs_comma, 0) != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":468
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,             # <<<<<<<<<<<<<<
 *                 )
 *             c_in_out[0] = c0
 */
        __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 468, __pyx_L1_error)

        /* "src/_decoder.pyx":467
 *         if c1 != b',':
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(             # <<<<<<<<<<<<<<
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_sc(((char const *)"comma"), __pyx_v_terminator, __pyx_t_3, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 467, __pyx_L1_error)

        /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      }

      /* "src/_decoder.pyx":470
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 *             c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_v_c0;

      /* "src/_decoder.pyx":471
 *                 )
 *             c_in_out[0] = c0
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if expect(not needs_comma, False):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    }

    /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_v_needs_comma != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":474
 * 
 *         if expect(not needs_comma, False):
 *             _raise_stray_character('comma', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      __pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 474, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"comma"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 474, __pyx_L1_error)

      /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    }

    /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 476, __pyx_L1_error)
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_1 != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":477
 * 
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":479
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         needs_comma = False
 * 
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 479, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_5;

    /* "src/_decoder.pyx":480
 * 
 *         c1 = _reader_get(reader)
 *         needs_comma = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(what, start)
 */
    __pyx_v_needs_comma = 0;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":482
 *         needs_comma = False
 * 
 *     _raise_unclosed(what, start)             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(__pyx_v_what, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 482, __pyx_L1_error)

  /* "src/_decoder.pyx":483
 * 
 *     _raise_unclosed(what, start)
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1L;
  goto __pyx_L0;

  /* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_comma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::uint32_t __pyx_fuse_2__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_terminator, char const *__pyx_v_what, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  bool __pyx_v_needs_comma;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":451
 *     cdef uint32_t done
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":452
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     needs_comma = True
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":454
 *     c1 = cast_to_uint32(c0)
 * 
 *     needs_comma = True             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 */
  __pyx_v_needs_comma = 1;

  /* "src/_decoder.pyx":455
 * 
 *     needs_comma = True
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 */
  while (1) {

    /* "src/_decoder.pyx":456
 *     needs_comma = True
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             break
 */
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 456, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = (__pyx_v_c0 < 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":458
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = cast_to_uint32(c0)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":460
 *             break
 * 
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    __pyx_t_2 = (__pyx_v_c1 == __pyx_v_terminator);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":462
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":463
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if c1 != b',':
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    }

    /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    __pyx_t_2 = (__pyx_v_c1 != ',');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      __pyx_t_2 = (JSON5EncoderCpp_expect(__pyx_v_needs_comma, 0) != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":468
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,             # <<<<<<<<<<<<<<
 *                 )
 *             c_in_out[0] = c0
 */
        __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 468, __pyx_L1_error)

        /* "src/_decoder.pyx":467
 *         if c1 != b',':
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(             # <<<<<<<<<<<<<<
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_sc(((char const *)"comma"), __pyx_v_terminator, __pyx_t_3, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 467, __pyx_L1_error)

        /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      }

      /* "src/_decoder.pyx":470
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 *             c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_v_c0;

      /* "src/_decoder.pyx":471
 *                 )
 *             c_in_out[0] = c0
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if expect(not needs_comma, False):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    }

    /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_v_needs_comma != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":474
 * 
 *         if expect(not needs_comma, False):
 *             _raise_stray_character('comma', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      __pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 474, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"comma"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 474, __pyx_L1_error)

      /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    }

    /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 476, __pyx_L1_error)
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_1 != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":477
 * 
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":479
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         needs_comma = False
 * 
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 479, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_5;

    /* "src/_decoder.pyx":480
 * 
 *         c1 = _reader_get(reader)
 *         needs_comma = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(what, start)
 */
    __pyx_v_needs_comma = 0;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":482
 *         needs_comma = False
 * 
 *     _raise_unclosed(what, start)             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(__pyx_v_what, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 482, __pyx_L1_error)

  /* "src/_decoder.pyx":483
 * 
 *     _raise_unclosed(what, start)
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1L;
  goto __pyx_L0;

  /* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_comma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::uint32_t __pyx_fuse_3__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_terminator, char const *__pyx_v_what, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  bool __pyx_v_needs_comma;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":451
 *     cdef uint32_t done
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":452
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     needs_comma = True
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":454
 *     c1 = cast_to_uint32(c0)
 * 
 *     needs_comma = True             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 */
  __pyx_v_needs_comma = 1;

  /* "src/_decoder.pyx":455
 * 
 *     needs_comma = True
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 */
  while (1) {

    /* "src/_decoder.pyx":456
 *     needs_comma = True
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             break
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 456, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = (__pyx_v_c0 < 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":458
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = cast_to_uint32(c0)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":460
 *             break
 * 
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    __pyx_t_2 = (__pyx_v_c1 == __pyx_v_terminator);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":462
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":463
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if c1 != b',':
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    }

    /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    __pyx_t_2 = (__pyx_v_c1 != ',');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      __pyx_t_2 = (JSON5EncoderCpp_expect(__pyx_v_needs_comma, 0) != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":468
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,             # <<<<<<<<<<<<<<
 *                 )
 *             c_in_out[0] = c0
 */
        __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 468, __pyx_L1_error)

        /* "src/_decoder.pyx":467
 *         if c1 != b',':
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(             # <<<<<<<<<<<<<<
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_sc(((char const *)"comma"), __pyx_v_terminator, __pyx_t_3, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 467, __pyx_L1_error)

        /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      }

      /* "src/_decoder.pyx":470
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 *             c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_v_c0;

      /* "src/_decoder.pyx":471
 *                 )
 *             c_in_out[0] = c0
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if expect(not needs_comma, False):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    }

    /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_v_needs_comma != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":474
 * 
 *         if expect(not needs_comma, False):
 *             _raise_stray_character('comma', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      __pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 474, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"comma"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 474, __pyx_L1_error)

      /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    }

    /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 476, __pyx_L1_error)
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_1 != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":477
 * 
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":479
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         needs_comma = False
 * 
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 479, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_5;

    /* "src/_decoder.pyx":480
 * 
 *         c1 = _reader_get(reader)
 *         needs_comma = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(what, start)
 */
    __pyx_v_needs_comma = 0;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":482
 *         needs_comma = False
 * 
 *     _raise_unclosed(what, start)             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(__pyx_v_what, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 482, __pyx_L1_error)

  /* "src/_decoder.pyx":483
 * 
 *     _raise_unclosed(what, start)
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1L;
  goto __pyx_L0;

  /* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_comma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

static std::uint32_t __pyx_fuse_4__pyx_f_7pyjson5__skip_comma(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, Py_ssize_t __pyx_v_start, std::uint32_t __pyx_v_terminator, char const *__pyx_v_what, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  bool __pyx_v_needs_comma;
  std::uint32_t __pyx_r;
  std::int32_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::uint32_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "src/_decoder.pyx":451
 *     cdef uint32_t done
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":452
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     needs_comma = True
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":454
 *     c1 = cast_to_uint32(c0)
 * 
 *     needs_comma = True             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 */
  __pyx_v_needs_comma = 1;

  /* "src/_decoder.pyx":455
 * 
 *     needs_comma = True
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 */
  while (1) {

    /* "src/_decoder.pyx":456
 *     needs_comma = True
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             break
 */
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_1 == ((std::int32_t)-2L))) __PYX_ERR(11, 456, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_1;

    /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = (__pyx_v_c0 < 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":458
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = cast_to_uint32(c0)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":457
 *     while True:
 *         c0 = _skip_to_data_sub(reader, c1)
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":460
 *             break
 * 
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    __pyx_t_2 = (__pyx_v_c1 == __pyx_v_terminator);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":462
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

      /* "src/_decoder.pyx":463
 *         if c1 == terminator:
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if c1 != b',':
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "src/_decoder.pyx":461
 * 
 *         c1 = cast_to_uint32(c0)
 *         if c1 == terminator:             # <<<<<<<<<<<<<<
 *             c_in_out[0] = NO_EXTRA_DATA
 *             return 1
 */
    }

    /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    __pyx_t_2 = (__pyx_v_c1 != ',');
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      __pyx_t_2 = (JSON5EncoderCpp_expect(__pyx_v_needs_comma, 0) != 0);
      if (__pyx_t_2) {

        /* "src/_decoder.pyx":468
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,             # <<<<<<<<<<<<<<
 *                 )
 *             c_in_out[0] = c0
 */
        __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 468, __pyx_L1_error)

        /* "src/_decoder.pyx":467
 *         if c1 != b',':
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(             # <<<<<<<<<<<<<<
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_sc(((char const *)"comma"), __pyx_v_terminator, __pyx_t_3, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 467, __pyx_L1_error)

        /* "src/_decoder.pyx":466
 * 
 *         if c1 != b',':
 *             if expect(needs_comma, False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_sc(
 *                     'comma', terminator, _reader_tell(reader), c1,
 */
      }

      /* "src/_decoder.pyx":470
 *                     'comma', terminator, _reader_tell(reader), c1,
 *                 )
 *             c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      (__pyx_v_c_in_out[0]) = __pyx_v_c0;

      /* "src/_decoder.pyx":471
 *                 )
 *             c_in_out[0] = c0
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         if expect(not needs_comma, False):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "src/_decoder.pyx":465
 *             return 1
 * 
 *         if c1 != b',':             # <<<<<<<<<<<<<<
 *             if expect(needs_comma, False):
 *                 _raise_expected_sc(
 */
    }

    /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_v_needs_comma != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":474
 * 
 *         if expect(not needs_comma, False):
 *             _raise_stray_character('comma', _reader_tell(reader))             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
      __pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 474, __pyx_L1_error)
      __pyx_t_4 = __pyx_f_7pyjson5__raise_stray_character(((char const *)"comma"), __pyx_t_3); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 474, __pyx_L1_error)

      /* "src/_decoder.pyx":473
 *             return 0
 * 
 *         if expect(not needs_comma, False):             # <<<<<<<<<<<<<<
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 */
    }

    /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((std::int32_t)-1L))) __PYX_ERR(11, 476, __pyx_L1_error)
    __pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_1 != 0)), 0) != 0);
    if (__pyx_t_2) {

      /* "src/_decoder.pyx":477
 * 
 *         if expect(not _reader_good(reader), False):
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L4_break;

      /* "src/_decoder.pyx":476
 *             _raise_stray_character('comma', _reader_tell(reader))
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "src/_decoder.pyx":479
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         needs_comma = False
 * 
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 479, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_5;

    /* "src/_decoder.pyx":480
 * 
 *         c1 = _reader_get(reader)
 *         needs_comma = False             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(what, start)
 */
    __pyx_v_needs_comma = 0;
  }
  __pyx_L4_break:;

  /* "src/_decoder.pyx":482
 *         needs_comma = False
 * 
 *     _raise_unclosed(what, start)             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
  __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(__pyx_v_what, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 482, __pyx_L1_error)

  /* "src/_decoder.pyx":483
 * 
 *     _raise_unclosed(what, start)
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = -1L;
  goto __pyx_L0;

  /* "src/_decoder.pyx":443
 * #  0: data found
 * # -1: exception (exhausted)
 * cdef uint32_t _skip_comma(ReaderRef reader, Py_ssize_t start,             # <<<<<<<<<<<<<<
 *                           uint32_t terminator, const char *what,
 *                           int32_t *c_in_out) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyjson5._skip_comma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1L;
  __pyx_L0:;
  return __pyx_r;
}

/* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_identifier_name", 1);

  /* "src/_decoder.pyx":492
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = c_in_out[0]
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 492, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":494
 *     start = _reader_tell(reader)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":495
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_start(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 496, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":497
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 497, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"IdentifierStart"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 497, __pyx_L1_error)

    /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  }

  /* "src/_decoder.pyx":499
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 */
  while (1) {

    /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 == '\\'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 501, __pyx_L1_error)
      __pyx_t_3 = (!(__pyx_t_5 != 0));
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":502
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"IdentifierName"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 502, __pyx_L1_error)

        /* "src/_decoder.pyx":503
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = _reader_get(reader)
 */
        goto __pyx_L5_break;

        /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      }

      /* "src/_decoder.pyx":505
 *                 break
 * 
 *             c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 */
      __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 505, __pyx_L1_error)
      __pyx_v_c1 = __pyx_t_6;

      /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
      switch (__pyx_v_c1) {
        case 'u':

        /* "src/_decoder.pyx":507
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))             # <<<<<<<<<<<<<<
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 */
        __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_t_1); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
        break;
        case 'U':

        /* "src/_decoder.pyx":509
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))             # <<<<<<<<<<<<<<
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 */
        __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 509, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":508
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 */
        break;
        default:

        /* "src/_decoder.pyx":511
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(c1)
 */
        __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 511, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"UnicodeEscapeSequence"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 511, __pyx_L1_error)
        break;
      }

      /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    }

    /* "src/_decoder.pyx":513
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 * 
 *         buf.push_back(c1)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    __pyx_t_2 = __pyx_v_buf.push_back(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 513, __pyx_L1_error)

    /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 515, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_5 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":516
 * 
 *         if not _reader_good(reader):
 *             c0 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = -1L;

      /* "src/_decoder.pyx":517
 *         if not _reader_good(reader):
 *             c0 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":519
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 */
    __pyx_t_6 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 519, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_6;

    /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_part(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 520, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_2 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":521
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c1);

      /* "src/_decoder.pyx":522
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c0
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":524
 *             break
 * 
 *     c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c0;

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":526
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(11, 525, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_identifier_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_decode_identifier_name", 1);

  /* "src/_decoder.pyx":492
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = c_in_out[0]
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 492, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":494
 *     start = _reader_tell(reader)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":495
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_start(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 496, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":497
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 497, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"IdentifierStart"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 497, __pyx_L1_error)

    /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  }

  /* "src/_decoder.pyx":499
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 */
  while (1) {

    /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 == '\\'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 501, __pyx_L1_error)
      __pyx_t_3 = (!(__pyx_t_5 != 0));
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":502
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"IdentifierName"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 502, __pyx_L1_error)

        /* "src/_decoder.pyx":503
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = _reader_get(reader)
 */
        goto __pyx_L5_break;

        /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      }

      /* "src/_decoder.pyx":505
 *                 break
 * 
 *             c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 */
      __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 505, __pyx_L1_error)
      __pyx_v_c1 = __pyx_t_6;

      /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
      switch (__pyx_v_c1) {
        case 'u':

        /* "src/_decoder.pyx":507
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))             # <<<<<<<<<<<<<<
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 */
        __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_t_1); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
        break;
        case 'U':

        /* "src/_decoder.pyx":509
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))             # <<<<<<<<<<<<<<
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 */
        __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 509, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":508
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 */
        break;
        default:

        /* "src/_decoder.pyx":511
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(c1)
 */
        __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 511, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"UnicodeEscapeSequence"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 511, __pyx_L1_error)
        break;
      }

      /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    }

    /* "src/_decoder.pyx":513
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 * 
 *         buf.push_back(c1)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    __pyx_t_2 = __pyx_v_buf.push_back(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 513, __pyx_L1_error)

    /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 515, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_5 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":516
 * 
 *         if not _reader_good(reader):
 *             c0 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = -1L;

      /* "src/_decoder.pyx":517
 *         if not _reader_good(reader):
 *             c0 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":519
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 */
    __pyx_t_6 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 519, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_6;

    /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_part(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 520, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_2 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":521
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c1);

      /* "src/_decoder.pyx":522
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c0
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":524
 *             break
 * 
 *     c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c0;

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":526
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(11, 525, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_identifier_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_2_decode_identifier_name", 1);

  /* "src/_decoder.pyx":492
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = c_in_out[0]
 */
  __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 492, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":494
 *     start = _reader_tell(reader)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":495
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_start(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 496, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":497
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 497, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"IdentifierStart"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 497, __pyx_L1_error)

    /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  }

  /* "src/_decoder.pyx":499
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 */
  while (1) {

    /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 == '\\'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 501, __pyx_L1_error)
      __pyx_t_3 = (!(__pyx_t_5 != 0));
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":502
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"IdentifierName"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 502, __pyx_L1_error)

        /* "src/_decoder.pyx":503
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = _reader_get(reader)
 */
        goto __pyx_L5_break;

        /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      }

      /* "src/_decoder.pyx":505
 *                 break
 * 
 *             c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 */
      __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 505, __pyx_L1_error)
      __pyx_v_c1 = __pyx_t_6;

      /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
      switch (__pyx_v_c1) {
        case 'u':

        /* "src/_decoder.pyx":507
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))             # <<<<<<<<<<<<<<
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 */
        __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_t_1); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
        break;
        case 'U':

        /* "src/_decoder.pyx":509
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))             # <<<<<<<<<<<<<<
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 */
        __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 509, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":508
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 */
        break;
        default:

        /* "src/_decoder.pyx":511
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(c1)
 */
        __pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 511, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"UnicodeEscapeSequence"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 511, __pyx_L1_error)
        break;
      }

      /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    }

    /* "src/_decoder.pyx":513
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 * 
 *         buf.push_back(c1)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    __pyx_t_2 = __pyx_v_buf.push_back(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 513, __pyx_L1_error)

    /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 515, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_5 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":516
 * 
 *         if not _reader_good(reader):
 *             c0 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = -1L;

      /* "src/_decoder.pyx":517
 *         if not _reader_good(reader):
 *             c0 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":519
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 */
    __pyx_t_6 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 519, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_6;

    /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_part(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 520, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_2 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":521
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c1);

      /* "src/_decoder.pyx":522
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c0
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":524
 *             break
 * 
 *     c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c0;

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":526
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(11, 525, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_identifier_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_3_decode_identifier_name", 1);

  /* "src/_decoder.pyx":492
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = c_in_out[0]
 */
  __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 492, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":494
 *     start = _reader_tell(reader)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":495
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_start(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 496, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":497
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 497, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"IdentifierStart"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 497, __pyx_L1_error)

    /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  }

  /* "src/_decoder.pyx":499
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 */
  while (1) {

    /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 == '\\'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 501, __pyx_L1_error)
      __pyx_t_3 = (!(__pyx_t_5 != 0));
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":502
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"IdentifierName"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 502, __pyx_L1_error)

        /* "src/_decoder.pyx":503
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = _reader_get(reader)
 */
        goto __pyx_L5_break;

        /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      }

      /* "src/_decoder.pyx":505
 *                 break
 * 
 *             c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 */
      __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 505, __pyx_L1_error)
      __pyx_v_c1 = __pyx_t_6;

      /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
      switch (__pyx_v_c1) {
        case 'u':

        /* "src/_decoder.pyx":507
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))             # <<<<<<<<<<<<<<
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 */
        __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_t_1); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
        break;
        case 'U':

        /* "src/_decoder.pyx":509
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))             # <<<<<<<<<<<<<<
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 */
        __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 509, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":508
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 */
        break;
        default:

        /* "src/_decoder.pyx":511
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(c1)
 */
        __pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 511, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"UnicodeEscapeSequence"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 511, __pyx_L1_error)
        break;
      }

      /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    }

    /* "src/_decoder.pyx":513
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 * 
 *         buf.push_back(c1)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    __pyx_t_2 = __pyx_v_buf.push_back(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 513, __pyx_L1_error)

    /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 515, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_5 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":516
 * 
 *         if not _reader_good(reader):
 *             c0 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = -1L;

      /* "src/_decoder.pyx":517
 *         if not _reader_good(reader):
 *             c0 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":519
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 */
    __pyx_t_6 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 519, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_6;

    /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_part(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 520, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_2 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":521
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c1);

      /* "src/_decoder.pyx":522
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c0
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":524
 *             break
 * 
 *     c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c0;

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":526
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(11, 525, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_identifier_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_identifier_name(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  JSON5EncoderCpp::StackHeapString<std::uint32_t>  __pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_t_3;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
  std::int32_t __pyx_t_5;
  std::uint32_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_4_decode_identifier_name", 1);

  /* "src/_decoder.pyx":492
 *     cdef StackHeapString[uint32_t] buf
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = c_in_out[0]
 */
  __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 492, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":494
 *     start = _reader_tell(reader)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 */
  __pyx_v_c0 = (__pyx_v_c_in_out[0]);

  /* "src/_decoder.pyx":495
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

  /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_start(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 496, __pyx_L1_error)
  __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":497
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
    __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 497, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"IdentifierStart"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 497, __pyx_L1_error)

    /* "src/_decoder.pyx":496
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if expect(not _is_identifier_start(c1), False):             # <<<<<<<<<<<<<<
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 */
  }

  /* "src/_decoder.pyx":499
 *         _raise_expected_s('IdentifierStart', _reader_tell(reader), c1)
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 */
  while (1) {

    /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 == '\\'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 501, __pyx_L1_error)
      __pyx_t_3 = (!(__pyx_t_5 != 0));
      if (__pyx_t_3) {

        /* "src/_decoder.pyx":502
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"IdentifierName"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 502, __pyx_L1_error)

        /* "src/_decoder.pyx":503
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = _reader_get(reader)
 */
        goto __pyx_L5_break;

        /* "src/_decoder.pyx":501
 *     while True:
 *         if expect(c1 == b'\\', False):
 *             if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *                 _raise_unclosed('IdentifierName', start)
 *                 break
 */
      }

      /* "src/_decoder.pyx":505
 *                 break
 * 
 *             c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 */
      __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 505, __pyx_L1_error)
      __pyx_v_c1 = __pyx_t_6;

      /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
      switch (__pyx_v_c1) {
        case 'u':

        /* "src/_decoder.pyx":507
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))             # <<<<<<<<<<<<<<
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 */
        __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__get_escaped_unicode_maybe_surrogate(__pyx_v_reader, __pyx_t_1); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 507, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":506
 * 
 *             c1 = _reader_get(reader)
 *             if c1 == b'u':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 */
        break;
        case 'U':

        /* "src/_decoder.pyx":509
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))             # <<<<<<<<<<<<<<
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 */
        __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__get_hex_character(__pyx_v_reader, 8); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 509, __pyx_L1_error)
        __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_t_5);

        /* "src/_decoder.pyx":508
 *             if c1 == b'u':
 *                 c1 = cast_to_uint32(_get_escaped_unicode_maybe_surrogate(reader, _reader_tell(reader)))
 *             elif c1 == b'U':             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 */
        break;
        default:

        /* "src/_decoder.pyx":511
 *                 c1 = cast_to_uint32(_get_hex_character(reader, 8))
 *             else:
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *         buf.push_back(c1)
 */
        __pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 511, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"UnicodeEscapeSequence"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 511, __pyx_L1_error)
        break;
      }

      /* "src/_decoder.pyx":500
 * 
 *     while True:
 *         if expect(c1 == b'\\', False):             # <<<<<<<<<<<<<<
 *             if not _reader_good(reader):
 *                 _raise_unclosed('IdentifierName', start)
 */
    }

    /* "src/_decoder.pyx":513
 *                 _raise_expected_s('UnicodeEscapeSequence', _reader_tell(reader), c1)
 * 
 *         buf.push_back(c1)             # <<<<<<<<<<<<<<
 * 
 *         if not _reader_good(reader):
 */
    __pyx_t_2 = __pyx_v_buf.push_back(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(11, 513, __pyx_L1_error)

    /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    __pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::int32_t)-1L))) __PYX_ERR(11, 515, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_5 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":516
 * 
 *         if not _reader_good(reader):
 *             c0 = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = -1L;

      /* "src/_decoder.pyx":517
 *         if not _reader_good(reader):
 *             c0 = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":515
 *         buf.push_back(c1)
 * 
 *         if not _reader_good(reader):             # <<<<<<<<<<<<<<
 *             c0 = -1
 *             break
 */
    }

    /* "src/_decoder.pyx":519
 *             break
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 */
    __pyx_t_6 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_6 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 519, __pyx_L1_error)
    __pyx_v_c1 = __pyx_t_6;

    /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    __pyx_t_2 = __pyx_f_7pyjson5__is_identifier_part(__pyx_v_c1); if (unlikely(__pyx_t_2 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 520, __pyx_L1_error)
    __pyx_t_3 = (!(__pyx_t_2 != 0));
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":521
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c0 = JSON5EncoderCpp::cast_to_int32(__pyx_v_c1);

      /* "src/_decoder.pyx":522
 *         if not _is_identifier_part(c1):
 *             c0 = cast_to_int32(c1)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = c0
 */
      goto __pyx_L5_break;

      /* "src/_decoder.pyx":520
 * 
 *         c1 = _reader_get(reader)
 *         if not _is_identifier_part(c1):             # <<<<<<<<<<<<<<
 *             c0 = cast_to_int32(c1)
 *             break
 */
    }
  }
  __pyx_L5_break:;

  /* "src/_decoder.pyx":524
 *             break
 * 
 *     c_in_out[0] = c0             # <<<<<<<<<<<<<<
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 */
  (__pyx_v_c_in_out[0]) = __pyx_v_c0;

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "src/_decoder.pyx":526
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __pyx_t_7 = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, __pyx_v_buf.data(), __pyx_v_buf.size()); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "src/_decoder.pyx":525
 * 
 *     c_in_out[0] = c0
 *     return PyUnicode_FromKindAndData(             # <<<<<<<<<<<<<<
 *         PyUnicode_4BYTE_KIND, buf.data(), buf.size(),
 *     )
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(11, 525, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "src/_decoder.pyx":486
 * 
 * 
 * cdef unicode _decode_identifier_name(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyjson5._decode_identifier_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, PyObject *__pyx_v_result) {
  std::int32_t __pyx_v_c0;
  std::uint32_t __pyx_v_c1;
  Py_ssize_t __pyx_v_start;
  bool __pyx_v_done;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_ex = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::int32_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  std::uint32_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_decode_object", 1);

  /* "src/_decoder.pyx":539
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
  __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 539, __pyx_L1_error)
  __pyx_v_start = __pyx_t_1;

  /* "src/_decoder.pyx":541
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
  __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 541, __pyx_L1_error)
  __pyx_v_c0 = __pyx_t_2;

  /* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
  __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":543
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b'}':
 *             return True
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_3 = (__pyx_v_c1 == '}');
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":545
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  }

  /* "src/_decoder.pyx":547
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)
 */
  while (1) {

    /* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
    switch (__pyx_v_c1) {
      case '"':
      case '\'':

      /* "src/_decoder.pyx":549
 *         while True:
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 */
      __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__decode_string(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
      break;
      default:

      /* "src/_decoder.pyx":551
 *                 key = _decode_string(reader, &c0)
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
      __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__decode_identifier_name(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;
      break;
    }

    /* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":553
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
      goto __pyx_L6_break;

      /* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "src/_decoder.pyx":555
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":556
 * 
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 556, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_2;

    /* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":558
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
      goto __pyx_L6_break;

      /* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "src/_decoder.pyx":560
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 */
    __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

    /* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 != ':'), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":562
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *             if expect(not _reader_good(reader), False):
 */
      __pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 562, __pyx_L1_error)
      __pyx_t_5 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"colon"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 562, __pyx_L1_error)

      /* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
    }

    /* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 564, __pyx_L1_error)
    __pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":565
 * 
 *             if expect(not _reader_good(reader), False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _skip_to_data(reader)
 */
      goto __pyx_L6_break;

      /* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "src/_decoder.pyx":567
 *                 break
 * 
 *             c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
    __pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 567, __pyx_L1_error)
    __pyx_v_c0 = __pyx_t_2;

    /* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":569
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      goto __pyx_L6_break;

      /* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "src/_decoder.pyx":572
 * 
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 */
        __pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 572, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L19_try_end;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 573, __pyx_L14_except_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __pyx_v_ex = __pyx_t_10;
        /*try:*/ {

          /* "src/_decoder.pyx":574
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
          __pyx_t_12 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
          __Pyx_INCREF(__pyx_t_12);
          __pyx_t_9 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(11, 574, __pyx_L25_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "src/_decoder.pyx":575
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
          __Pyx_GIVEREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_10, __pyx_t_11);
          __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; 
          __PYX_ERR(11, 575, __pyx_L25_error)
        }

        /* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
        /*finally:*/ {
          __pyx_L25_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            }
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
            __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
            goto __pyx_L14_except_error;
          }
        }
      }
      goto __pyx_L14_except_error;

      /* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
      __pyx_L14_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L19_try_end:;
    }

    /* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
    if (__pyx_t_3) {

      /* "src/_decoder.pyx":578
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyDict_SetItem(result, key, value)
 */
      goto __pyx_L6_break;

      /* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "src/_decoder.pyx":580
 *                 break
 * 
 *             PyDict_SetItem(result, key, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
    __pyx_t_13 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(11, 580, __pyx_L1_error)

    /* "src/_decoder.pyx":582
 *             PyDict_SetItem(result, key, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 */
  __pyx_t_21 = __pyx_fuse_0__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)'}'), ((char const *)"object"), (&__pyx_v_c0)); if (unlikely(__pyx_t_21 == ((std::uint32_t)-1L))) __PYX_ERR(11, 582, __pyx_L1_error)
  __pyx_v_done = __pyx_t_21;

  /* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
  __pyx_t_3 = (__pyx_v_done != 0);
  if (__pyx_t_3) {

    /* "src/_decoder.pyx":586
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
  }

  /* "src/_decoder.pyx":588
 *                 return True
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'object', start)
 */
  __pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);
}
__pyx_L6_break:;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
}

/* "src/_decoder.pyx":590
 *             c1 = cast_to_uint32(c0)
 * 
 *     _raise_unclosed(b'object', start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
__pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"object"), __pyx_v_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 590, __pyx_L1_error)

/* "src/_decoder.pyx":591
 * 
 *     _raise_unclosed(b'object', start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_key = 0;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
int __pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
std::uint32_t __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_object", 1);

/* "src/_decoder.pyx":539
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 539, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":541
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 541, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":543
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b'}':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == '}');
if (__pyx_t_3) {

/* "src/_decoder.pyx":545
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":547
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
switch (__pyx_v_c1) {
  case '"':
  case '\'':

  /* "src/_decoder.pyx":549
 *         while True:
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 */
  __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__decode_string(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
  break;
  default:

  /* "src/_decoder.pyx":551
 *                 key = _decode_string(reader, &c0)
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
  __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__decode_identifier_name(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
  __pyx_t_4 = 0;
  break;
}

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":553
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
  goto __pyx_L6_break;

  /* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":555
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":556
 * 
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 556, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":558
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
  goto __pyx_L6_break;

  /* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":560
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 != ':'), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":562
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *             if expect(not _reader_good(reader), False):
 */
  __pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 562, __pyx_L1_error)
  __pyx_t_5 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"colon"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 562, __pyx_L1_error)

  /* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
}

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 564, __pyx_L1_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":565
 * 
 *             if expect(not _reader_good(reader), False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _skip_to_data(reader)
 */
  goto __pyx_L6_break;

  /* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":567
 *                 break
 * 
 *             c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 567, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":569
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
  goto __pyx_L6_break;

  /* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
  __Pyx_PyThreadState_declare
  __Pyx_PyThreadState_assign
  __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
  __Pyx_XGOTREF(__pyx_t_6);
  __Pyx_XGOTREF(__pyx_t_7);
  __Pyx_XGOTREF(__pyx_t_8);
  /*try:*/ {

    /* "src/_decoder.pyx":572
 * 
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 */
    __pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 572, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
  }
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  goto __pyx_L19_try_end;
  __pyx_L12_error:;
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
  __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
  if (__pyx_t_9) {
    __Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
    if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 573, __pyx_L14_except_error)
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_t_10);
    __pyx_v_ex = __pyx_t_10;
    /*try:*/ {

      /* "src/_decoder.pyx":574
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
      __pyx_t_12 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
      __Pyx_INCREF(__pyx_t_12);
      __pyx_t_9 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(11, 574, __pyx_L25_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "src/_decoder.pyx":575
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_10, __pyx_t_11);
      __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; 
      __PYX_ERR(11, 575, __pyx_L25_error)
    }

    /* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
    /*finally:*/ {
      __pyx_L25_error:;
      /*exception exit:*/{
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_18);
        __Pyx_XGOTREF(__pyx_t_19);
        __Pyx_XGOTREF(__pyx_t_20);
        __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
        {
          __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
        }
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
        __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
        goto __pyx_L14_except_error;
      }
    }
  }
  goto __pyx_L14_except_error;

  /* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
  __pyx_L14_except_error:;
  __Pyx_XGIVEREF(__pyx_t_6);
  __Pyx_XGIVEREF(__pyx_t_7);
  __Pyx_XGIVEREF(__pyx_t_8);
  __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
  goto __pyx_L1_error;
  __pyx_L19_try_end:;
}

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

  /* "src/_decoder.pyx":578
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyDict_SetItem(result, key, value)
 */
  goto __pyx_L6_break;

  /* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":580
 *                 break
 * 
 *             PyDict_SetItem(result, key, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_13 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(11, 580, __pyx_L1_error)

/* "src/_decoder.pyx":582
 *             PyDict_SetItem(result, key, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 */
__pyx_t_21 = __pyx_fuse_1__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)'}'), ((char const *)"object"), (&__pyx_v_c0)); if (unlikely(__pyx_t_21 == ((std::uint32_t)-1L))) __PYX_ERR(11, 582, __pyx_L1_error)
__pyx_v_done = __pyx_t_21;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":586
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}

/* "src/_decoder.pyx":588
 *                 return True
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'object', start)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);
}
__pyx_L6_break:;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
}

/* "src/_decoder.pyx":590
 *             c1 = cast_to_uint32(c0)
 * 
 *     _raise_unclosed(b'object', start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
__pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"object"), __pyx_v_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 590, __pyx_L1_error)

/* "src/_decoder.pyx":591
 * 
 *     _raise_unclosed(b'object', start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_key = 0;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
int __pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
std::uint32_t __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_object", 1);

/* "src/_decoder.pyx":539
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 539, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":541
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 541, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":543
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b'}':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == '}');
if (__pyx_t_3) {

/* "src/_decoder.pyx":545
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":547
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
switch (__pyx_v_c1) {
case '"':
case '\'':

/* "src/_decoder.pyx":549
 *         while True:
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 */
__pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__decode_string(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 549, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
break;
default:

/* "src/_decoder.pyx":551
 *                 key = _decode_string(reader, &c0)
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__decode_identifier_name(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;
break;
}

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":553
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":555
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":556
 * 
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 556, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":558
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":560
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 != ':'), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":562
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *             if expect(not _reader_good(reader), False):
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 562, __pyx_L1_error)
__pyx_t_5 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"colon"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 562, __pyx_L1_error)

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
}

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 564, __pyx_L1_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":565
 * 
 *             if expect(not _reader_good(reader), False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _skip_to_data(reader)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":567
 *                 break
 * 
 *             c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 567, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":569
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":572
 * 
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 */
__pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 572, __pyx_L12_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L19_try_end;
__pyx_L12_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_9) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 573, __pyx_L14_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_INCREF(__pyx_t_10);
__pyx_v_ex = __pyx_t_10;
/*try:*/ {

  /* "src/_decoder.pyx":574
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
  __pyx_t_12 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
  __Pyx_INCREF(__pyx_t_12);
  __pyx_t_9 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(11, 574, __pyx_L25_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "src/_decoder.pyx":575
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_XGIVEREF(__pyx_t_11);
  __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_10, __pyx_t_11);
  __pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; 
  __PYX_ERR(11, 575, __pyx_L25_error)
}

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
  __pyx_L25_error:;
  /*exception exit:*/{
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
    if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
    __Pyx_XGOTREF(__pyx_t_15);
    __Pyx_XGOTREF(__pyx_t_16);
    __Pyx_XGOTREF(__pyx_t_17);
    __Pyx_XGOTREF(__pyx_t_18);
    __Pyx_XGOTREF(__pyx_t_19);
    __Pyx_XGOTREF(__pyx_t_20);
    __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
    {
      __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
    }
    if (PY_MAJOR_VERSION >= 3) {
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
    }
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_XGIVEREF(__pyx_t_16);
    __Pyx_XGIVEREF(__pyx_t_17);
    __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
    __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
    __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
    goto __pyx_L14_except_error;
  }
}
}
goto __pyx_L14_except_error;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L14_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L19_try_end:;
}

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":578
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyDict_SetItem(result, key, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":580
 *                 break
 * 
 *             PyDict_SetItem(result, key, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_13 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(11, 580, __pyx_L1_error)

/* "src/_decoder.pyx":582
 *             PyDict_SetItem(result, key, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 */
__pyx_t_21 = __pyx_fuse_2__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)'}'), ((char const *)"object"), (&__pyx_v_c0)); if (unlikely(__pyx_t_21 == ((std::uint32_t)-1L))) __PYX_ERR(11, 582, __pyx_L1_error)
__pyx_v_done = __pyx_t_21;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":586
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}

/* "src/_decoder.pyx":588
 *                 return True
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'object', start)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);
}
__pyx_L6_break:;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
}

/* "src/_decoder.pyx":590
 *             c1 = cast_to_uint32(c0)
 * 
 *     _raise_unclosed(b'object', start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
__pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"object"), __pyx_v_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 590, __pyx_L1_error)

/* "src/_decoder.pyx":591
 * 
 *     _raise_unclosed(b'object', start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_key = 0;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
int __pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
std::uint32_t __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_object", 1);

/* "src/_decoder.pyx":539
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 539, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":541
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 541, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":543
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b'}':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == '}');
if (__pyx_t_3) {

/* "src/_decoder.pyx":545
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":547
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
switch (__pyx_v_c1) {
case '"':
case '\'':

/* "src/_decoder.pyx":549
 *         while True:
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 */
__pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__decode_string(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 549, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
break;
default:

/* "src/_decoder.pyx":551
 *                 key = _decode_string(reader, &c0)
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__decode_identifier_name(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;
break;
}

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":553
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":555
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":556
 * 
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 556, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":558
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":560
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 != ':'), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":562
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *             if expect(not _reader_good(reader), False):
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 562, __pyx_L1_error)
__pyx_t_5 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"colon"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 562, __pyx_L1_error)

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
}

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 564, __pyx_L1_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":565
 * 
 *             if expect(not _reader_good(reader), False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _skip_to_data(reader)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":567
 *                 break
 * 
 *             c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 567, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":569
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":572
 * 
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 */
__pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 572, __pyx_L12_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L19_try_end;
__pyx_L12_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_9) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 573, __pyx_L14_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_INCREF(__pyx_t_10);
__pyx_v_ex = __pyx_t_10;
/*try:*/ {

/* "src/_decoder.pyx":574
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_12 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_12);
__pyx_t_9 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(11, 574, __pyx_L25_error)
__Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

/* "src/_decoder.pyx":575
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_4);
__Pyx_GIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_10, __pyx_t_11);
__pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; 
__PYX_ERR(11, 575, __pyx_L25_error)
}

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L25_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L14_except_error;
}
}
}
goto __pyx_L14_except_error;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L14_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L19_try_end:;
}

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":578
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyDict_SetItem(result, key, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":580
 *                 break
 * 
 *             PyDict_SetItem(result, key, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_13 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(11, 580, __pyx_L1_error)

/* "src/_decoder.pyx":582
 *             PyDict_SetItem(result, key, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 */
__pyx_t_21 = __pyx_fuse_3__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)'}'), ((char const *)"object"), (&__pyx_v_c0)); if (unlikely(__pyx_t_21 == ((std::uint32_t)-1L))) __PYX_ERR(11, 582, __pyx_L1_error)
__pyx_v_done = __pyx_t_21;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":586
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}

/* "src/_decoder.pyx":588
 *                 return True
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'object', start)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);
}
__pyx_L6_break:;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
}

/* "src/_decoder.pyx":590
 *             c1 = cast_to_uint32(c0)
 * 
 *     _raise_unclosed(b'object', start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
__pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"object"), __pyx_v_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 590, __pyx_L1_error)

/* "src/_decoder.pyx":591
 * 
 *     _raise_unclosed(b'object', start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__decode_object(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_key = 0;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
int __pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
std::uint32_t __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_object", 1);

/* "src/_decoder.pyx":539
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 539, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":541
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 541, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":543
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b'}':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == '}');
if (__pyx_t_3) {

/* "src/_decoder.pyx":545
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":544
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":547
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
switch (__pyx_v_c1) {
case '"':
case '\'':

/* "src/_decoder.pyx":549
 *         while True:
 *             if c1 in b'"\'':
 *                 key = _decode_string(reader, &c0)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 */
__pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__decode_string(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 549, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":548
 * 
 *         while True:
 *             if c1 in b'"\'':             # <<<<<<<<<<<<<<
 *                 key = _decode_string(reader, &c0)
 *             else:
 */
break;
default:

/* "src/_decoder.pyx":551
 *                 key = _decode_string(reader, &c0)
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__decode_identifier_name(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
__pyx_t_4 = 0;
break;
}

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":553
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":552
 *             else:
 *                 key = _decode_identifier_name(reader, &c0)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":555
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":556
 * 
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 556, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":558
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":557
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":560
 *                 break
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c1 != ':'), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":562
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)             # <<<<<<<<<<<<<<
 * 
 *             if expect(not _reader_good(reader), False):
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 562, __pyx_L1_error)
__pyx_t_5 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"colon"), __pyx_t_1, __pyx_v_c1); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 562, __pyx_L1_error)

/* "src/_decoder.pyx":561
 * 
 *             c1 = cast_to_uint32(c0)
 *             if expect(c1 != b':', False):             # <<<<<<<<<<<<<<
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 */
}

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-1L))) __PYX_ERR(11, 564, __pyx_L1_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_2 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":565
 * 
 *             if expect(not _reader_good(reader), False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             c0 = _skip_to_data(reader)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":564
 *                 _raise_expected_s('colon', _reader_tell(reader), c1)
 * 
 *             if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":567
 *                 break
 * 
 *             c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *             if expect(c0 < 0, False):
 *                 break
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 567, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":569
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":568
 * 
 *             c0 = _skip_to_data(reader)
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":572
 * 
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 */
__pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 572, __pyx_L12_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L19_try_end;
__pyx_L12_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_9) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_10, &__pyx_t_11) < 0) __PYX_ERR(11, 573, __pyx_L14_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_INCREF(__pyx_t_10);
__pyx_v_ex = __pyx_t_10;
/*try:*/ {

/* "src/_decoder.pyx":574
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_12 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_12);
__pyx_t_9 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_t_12); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(11, 574, __pyx_L25_error)
__Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

/* "src/_decoder.pyx":575
 *             except _DecoderException as ex:
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_4);
__Pyx_GIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_10, __pyx_t_11);
__pyx_t_4 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; 
__PYX_ERR(11, 575, __pyx_L25_error)
}

/* "src/_decoder.pyx":573
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyDict_SetItem(result, key, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L25_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L14_except_error;
}
}
}
goto __pyx_L14_except_error;

/* "src/_decoder.pyx":571
 *                 break
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L14_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L19_try_end:;
}

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":578
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyDict_SetItem(result, key, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":577
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":580
 *                 break
 * 
 *             PyDict_SetItem(result, key, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_13 = PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_value); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(11, 580, __pyx_L1_error)

/* "src/_decoder.pyx":582
 *             PyDict_SetItem(result, key, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 */
__pyx_t_21 = __pyx_fuse_4__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)'}'), ((char const *)"object"), (&__pyx_v_c0)); if (unlikely(__pyx_t_21 == ((std::uint32_t)-1L))) __PYX_ERR(11, 582, __pyx_L1_error)
__pyx_v_done = __pyx_t_21;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":586
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             c1 = cast_to_uint32(c0)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":585
 *                 reader, start, <unsigned char>b'}', b'object', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}

/* "src/_decoder.pyx":588
 *                 return True
 * 
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'object', start)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);
}
__pyx_L6_break:;

/* "src/_decoder.pyx":542
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b'}':
 */
}

/* "src/_decoder.pyx":590
 *             c1 = cast_to_uint32(c0)
 * 
 *     _raise_unclosed(b'object', start)             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
__pyx_t_5 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"object"), __pyx_v_start); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 590, __pyx_L1_error)

/* "src/_decoder.pyx":591
 * 
 *     _raise_unclosed(b'object', start)
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":530
 * 
 * 
 * cdef boolean _decode_object(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
std::uint32_t __pyx_t_20;
JSON5EncoderCpp::AlwaysTrue __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_array", 1);

/* "src/_decoder.pyx":602
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 602, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":604
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 604, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":606
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b']':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == ']');
if (__pyx_t_3) {

/* "src/_decoder.pyx":608
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":610
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":612
 *         while True:
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 */
__pyx_t_7 = __pyx_fuse_0__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 612, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L14_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_8) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(11, 613, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_INCREF(__pyx_t_9);
__pyx_v_ex = __pyx_t_9;
/*try:*/ {

/* "src/_decoder.pyx":614
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_11 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_11);
__pyx_t_8 = PyList_Append(__pyx_v_result, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(11, 614, __pyx_L20_error)
__Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

/* "src/_decoder.pyx":615
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_10);
__pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
__PYX_ERR(11, 615, __pyx_L20_error)
}

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L1_error;
__pyx_L14_try_end:;
}

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":618
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyList_Append(result, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":620
 *                 break
 * 
 *             PyList_Append(result, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_12 = PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(11, 620, __pyx_L1_error)

/* "src/_decoder.pyx":622
 *             PyList_Append(result, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 */
__pyx_t_20 = __pyx_fuse_0__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)']'), ((char const *)"array"), (&__pyx_v_c0)); if (unlikely(__pyx_t_20 == ((std::uint32_t)-1L))) __PYX_ERR(11, 622, __pyx_L1_error)
__pyx_v_done = __pyx_t_20;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":626
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'array', start)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}
}
__pyx_L6_break:;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
}

/* "src/_decoder.pyx":628
 *                 return True
 * 
 *     _raise_unclosed(b'array', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_21 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"array"), __pyx_v_start); if (unlikely(__pyx_t_21 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 628, __pyx_L1_error)

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_AddTraceback("pyjson5._decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
std::uint32_t __pyx_t_20;
JSON5EncoderCpp::AlwaysTrue __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_array", 1);

/* "src/_decoder.pyx":602
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 602, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":604
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 604, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":606
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b']':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == ']');
if (__pyx_t_3) {

/* "src/_decoder.pyx":608
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":610
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":612
 *         while True:
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 */
__pyx_t_7 = __pyx_fuse_1__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 612, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L14_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_8) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(11, 613, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_INCREF(__pyx_t_9);
__pyx_v_ex = __pyx_t_9;
/*try:*/ {

/* "src/_decoder.pyx":614
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_11 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_11);
__pyx_t_8 = PyList_Append(__pyx_v_result, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(11, 614, __pyx_L20_error)
__Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

/* "src/_decoder.pyx":615
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_10);
__pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
__PYX_ERR(11, 615, __pyx_L20_error)
}

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L1_error;
__pyx_L14_try_end:;
}

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":618
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyList_Append(result, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":620
 *                 break
 * 
 *             PyList_Append(result, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_12 = PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(11, 620, __pyx_L1_error)

/* "src/_decoder.pyx":622
 *             PyList_Append(result, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 */
__pyx_t_20 = __pyx_fuse_1__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)']'), ((char const *)"array"), (&__pyx_v_c0)); if (unlikely(__pyx_t_20 == ((std::uint32_t)-1L))) __PYX_ERR(11, 622, __pyx_L1_error)
__pyx_v_done = __pyx_t_20;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":626
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'array', start)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}
}
__pyx_L6_break:;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
}

/* "src/_decoder.pyx":628
 *                 return True
 * 
 *     _raise_unclosed(b'array', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_21 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"array"), __pyx_v_start); if (unlikely(__pyx_t_21 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 628, __pyx_L1_error)

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_AddTraceback("pyjson5._decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
std::uint32_t __pyx_t_20;
JSON5EncoderCpp::AlwaysTrue __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_array", 1);

/* "src/_decoder.pyx":602
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 602, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":604
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 604, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":606
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b']':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == ']');
if (__pyx_t_3) {

/* "src/_decoder.pyx":608
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":610
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":612
 *         while True:
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 */
__pyx_t_7 = __pyx_fuse_2__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 612, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L14_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_8) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(11, 613, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_INCREF(__pyx_t_9);
__pyx_v_ex = __pyx_t_9;
/*try:*/ {

/* "src/_decoder.pyx":614
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_11 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_11);
__pyx_t_8 = PyList_Append(__pyx_v_result, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(11, 614, __pyx_L20_error)
__Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

/* "src/_decoder.pyx":615
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_10);
__pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
__PYX_ERR(11, 615, __pyx_L20_error)
}

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L1_error;
__pyx_L14_try_end:;
}

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":618
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyList_Append(result, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":620
 *                 break
 * 
 *             PyList_Append(result, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_12 = PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(11, 620, __pyx_L1_error)

/* "src/_decoder.pyx":622
 *             PyList_Append(result, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 */
__pyx_t_20 = __pyx_fuse_2__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)']'), ((char const *)"array"), (&__pyx_v_c0)); if (unlikely(__pyx_t_20 == ((std::uint32_t)-1L))) __PYX_ERR(11, 622, __pyx_L1_error)
__pyx_v_done = __pyx_t_20;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":626
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'array', start)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}
}
__pyx_L6_break:;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
}

/* "src/_decoder.pyx":628
 *                 return True
 * 
 *     _raise_unclosed(b'array', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_21 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"array"), __pyx_v_start); if (unlikely(__pyx_t_21 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 628, __pyx_L1_error)

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_AddTraceback("pyjson5._decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
std::uint32_t __pyx_t_20;
JSON5EncoderCpp::AlwaysTrue __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_array", 1);

/* "src/_decoder.pyx":602
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 602, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":604
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 604, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":606
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b']':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == ']');
if (__pyx_t_3) {

/* "src/_decoder.pyx":608
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":610
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":612
 *         while True:
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 */
__pyx_t_7 = __pyx_fuse_3__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 612, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L14_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_8) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(11, 613, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_INCREF(__pyx_t_9);
__pyx_v_ex = __pyx_t_9;
/*try:*/ {

/* "src/_decoder.pyx":614
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_11 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_11);
__pyx_t_8 = PyList_Append(__pyx_v_result, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(11, 614, __pyx_L20_error)
__Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

/* "src/_decoder.pyx":615
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_10);
__pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
__PYX_ERR(11, 615, __pyx_L20_error)
}

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L1_error;
__pyx_L14_try_end:;
}

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":618
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyList_Append(result, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":620
 *                 break
 * 
 *             PyList_Append(result, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_12 = PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(11, 620, __pyx_L1_error)

/* "src/_decoder.pyx":622
 *             PyList_Append(result, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 */
__pyx_t_20 = __pyx_fuse_3__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)']'), ((char const *)"array"), (&__pyx_v_c0)); if (unlikely(__pyx_t_20 == ((std::uint32_t)-1L))) __PYX_ERR(11, 622, __pyx_L1_error)
__pyx_v_done = __pyx_t_20;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":626
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'array', start)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}
}
__pyx_L6_break:;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
}

/* "src/_decoder.pyx":628
 *                 return True
 * 
 *     _raise_unclosed(b'array', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_21 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"array"), __pyx_v_start); if (unlikely(__pyx_t_21 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 628, __pyx_L1_error)

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_AddTraceback("pyjson5._decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__decode_array(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, PyObject *__pyx_v_result) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_v_done;
PyObject *__pyx_v_value = 0;
PyObject *__pyx_v_ex = 0;
bool __pyx_r;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
std::uint32_t __pyx_t_20;
JSON5EncoderCpp::AlwaysTrue __pyx_t_21;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_array", 1);

/* "src/_decoder.pyx":602
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     c0 = _skip_to_data(reader)
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 602, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":604
 *     start = _reader_tell(reader)
 * 
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 604, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 1) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":606
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *         if c1 == b']':
 *             return True
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
__pyx_t_3 = (__pyx_v_c1 == ']');
if (__pyx_t_3) {

/* "src/_decoder.pyx":608
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         while True:
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":607
 *     if expect(c0 >= 0, True):
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
}

/* "src/_decoder.pyx":610
 *             return True
 * 
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 */
while (1) {

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":612
 *         while True:
 *             try:
 *                 value = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 */
__pyx_t_7 = __pyx_fuse_4__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 612, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L14_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
__pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_8) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(11, 613, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_INCREF(__pyx_t_9);
__pyx_v_ex = __pyx_t_9;
/*try:*/ {

/* "src/_decoder.pyx":614
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
__pyx_t_11 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result;
__Pyx_INCREF(__pyx_t_11);
__pyx_t_8 = PyList_Append(__pyx_v_result, __pyx_t_11); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(11, 614, __pyx_L20_error)
__Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

/* "src/_decoder.pyx":615
 *             except _DecoderException as ex:
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *             if expect(c0 < 0, False):
 */
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_10);
__pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
__PYX_ERR(11, 615, __pyx_L20_error)
}

/* "src/_decoder.pyx":613
 *             try:
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *                 PyList_Append(result, (<_DecoderException> ex).result)
 *                 raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":611
 * 
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 value = _decode_recursive(reader, &c0)
 *             except _DecoderException as ex:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L1_error;
__pyx_L14_try_end:;
}

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":618
 * 
 *             if expect(c0 < 0, False):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             PyList_Append(result, value)
 */
goto __pyx_L6_break;

/* "src/_decoder.pyx":617
 *                 raise
 * 
 *             if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_decoder.pyx":620
 *                 break
 * 
 *             PyList_Append(result, value)             # <<<<<<<<<<<<<<
 * 
 *             done = _skip_comma(
 */
__pyx_t_12 = PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(11, 620, __pyx_L1_error)

/* "src/_decoder.pyx":622
 *             PyList_Append(result, value)
 * 
 *             done = _skip_comma(             # <<<<<<<<<<<<<<
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 */
__pyx_t_20 = __pyx_fuse_4__pyx_f_7pyjson5__skip_comma(__pyx_v_reader, __pyx_v_start, ((unsigned char)']'), ((char const *)"array"), (&__pyx_v_c0)); if (unlikely(__pyx_t_20 == ((std::uint32_t)-1L))) __PYX_ERR(11, 622, __pyx_L1_error)
__pyx_v_done = __pyx_t_20;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
__pyx_t_3 = (__pyx_v_done != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":626
 *             )
 *             if done:
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *     _raise_unclosed(b'array', start)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":625
 *                 reader, start, <unsigned char>b']', b'array', &c0,
 *             )
 *             if done:             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
}
}
__pyx_L6_break:;

/* "src/_decoder.pyx":605
 * 
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 >= 0, True):             # <<<<<<<<<<<<<<
 *         c1 = cast_to_uint32(c0)
 *         if c1 == b']':
 */
}

/* "src/_decoder.pyx":628
 *                 return True
 * 
 *     _raise_unclosed(b'array', start)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_21 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"array"), __pyx_v_start); if (unlikely(__pyx_t_21 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 628, __pyx_L1_error)

/* "src/_decoder.pyx":594
 * 
 * 
 * cdef boolean _decode_array(ReaderRef reader, object result) except False:             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_AddTraceback("pyjson5._decode_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

static bool __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, char const *__pyx_v_string) {
std::uint32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_r;
Py_ssize_t __pyx_t_1;
int __pyx_t_2;
std::int32_t __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
std::uint32_t __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_decoder.pyx":636
 *     cdef Py_ssize_t start
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = string[0]
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 636, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":637
 * 
 *     start = _reader_tell(reader)
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = string[0]
 *         string += 1
 */
while (1) {

/* "src/_decoder.pyx":638
 *     start = _reader_tell(reader)
 *     while True:
 *         c0 = string[0]             # <<<<<<<<<<<<<<
 *         string += 1
 *         if not c0:
 */
__pyx_v_c0 = (__pyx_v_string[0]);

/* "src/_decoder.pyx":639
 *     while True:
 *         c0 = string[0]
 *         string += 1             # <<<<<<<<<<<<<<
 *         if not c0:
 *             break
 */
__pyx_v_string = (__pyx_v_string + 1);

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_2 = (!(__pyx_v_c0 != 0));
if (__pyx_t_2) {

/* "src/_decoder.pyx":641
 *         string += 1
 *         if not c0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
goto __pyx_L4_break;

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
__pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::int32_t)-1L))) __PYX_ERR(11, 643, __pyx_L1_error)
__pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_3 != 0)), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":644
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'literal', start)             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"literal"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 644, __pyx_L1_error)

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
}

/* "src/_decoder.pyx":646
 *             _raise_unclosed(b'literal', start)
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)
 */
__pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 646, __pyx_L1_error)
__pyx_v_c1 = __pyx_t_5;

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
__pyx_t_2 = (JSON5EncoderCpp_expect((__pyx_v_c0 != __pyx_v_c1), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":648
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_expected_c(__pyx_v_c0, __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 648, __pyx_L1_error)

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
}
}
__pyx_L4_break:;

/* "src/_decoder.pyx":650
 *             _raise_expected_c(c0, start, c1)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._accept_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

static bool __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, char const *__pyx_v_string) {
std::uint32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_r;
Py_ssize_t __pyx_t_1;
int __pyx_t_2;
std::int32_t __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
std::uint32_t __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_decoder.pyx":636
 *     cdef Py_ssize_t start
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = string[0]
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 636, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":637
 * 
 *     start = _reader_tell(reader)
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = string[0]
 *         string += 1
 */
while (1) {

/* "src/_decoder.pyx":638
 *     start = _reader_tell(reader)
 *     while True:
 *         c0 = string[0]             # <<<<<<<<<<<<<<
 *         string += 1
 *         if not c0:
 */
__pyx_v_c0 = (__pyx_v_string[0]);

/* "src/_decoder.pyx":639
 *     while True:
 *         c0 = string[0]
 *         string += 1             # <<<<<<<<<<<<<<
 *         if not c0:
 *             break
 */
__pyx_v_string = (__pyx_v_string + 1);

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_2 = (!(__pyx_v_c0 != 0));
if (__pyx_t_2) {

/* "src/_decoder.pyx":641
 *         string += 1
 *         if not c0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
goto __pyx_L4_break;

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
__pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::int32_t)-1L))) __PYX_ERR(11, 643, __pyx_L1_error)
__pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_3 != 0)), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":644
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'literal', start)             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"literal"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 644, __pyx_L1_error)

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
}

/* "src/_decoder.pyx":646
 *             _raise_unclosed(b'literal', start)
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)
 */
__pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 646, __pyx_L1_error)
__pyx_v_c1 = __pyx_t_5;

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
__pyx_t_2 = (JSON5EncoderCpp_expect((__pyx_v_c0 != __pyx_v_c1), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":648
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_expected_c(__pyx_v_c0, __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 648, __pyx_L1_error)

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
}
}
__pyx_L4_break:;

/* "src/_decoder.pyx":650
 *             _raise_expected_c(c0, start, c1)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._accept_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

static bool __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, char const *__pyx_v_string) {
std::uint32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_r;
Py_ssize_t __pyx_t_1;
int __pyx_t_2;
std::int32_t __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
std::uint32_t __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_decoder.pyx":636
 *     cdef Py_ssize_t start
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = string[0]
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 636, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":637
 * 
 *     start = _reader_tell(reader)
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = string[0]
 *         string += 1
 */
while (1) {

/* "src/_decoder.pyx":638
 *     start = _reader_tell(reader)
 *     while True:
 *         c0 = string[0]             # <<<<<<<<<<<<<<
 *         string += 1
 *         if not c0:
 */
__pyx_v_c0 = (__pyx_v_string[0]);

/* "src/_decoder.pyx":639
 *     while True:
 *         c0 = string[0]
 *         string += 1             # <<<<<<<<<<<<<<
 *         if not c0:
 *             break
 */
__pyx_v_string = (__pyx_v_string + 1);

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_2 = (!(__pyx_v_c0 != 0));
if (__pyx_t_2) {

/* "src/_decoder.pyx":641
 *         string += 1
 *         if not c0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
goto __pyx_L4_break;

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
__pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::int32_t)-1L))) __PYX_ERR(11, 643, __pyx_L1_error)
__pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_3 != 0)), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":644
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'literal', start)             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"literal"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 644, __pyx_L1_error)

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
}

/* "src/_decoder.pyx":646
 *             _raise_unclosed(b'literal', start)
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)
 */
__pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 646, __pyx_L1_error)
__pyx_v_c1 = __pyx_t_5;

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
__pyx_t_2 = (JSON5EncoderCpp_expect((__pyx_v_c0 != __pyx_v_c1), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":648
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_expected_c(__pyx_v_c0, __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 648, __pyx_L1_error)

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
}
}
__pyx_L4_break:;

/* "src/_decoder.pyx":650
 *             _raise_expected_c(c0, start, c1)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._accept_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

static bool __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, char const *__pyx_v_string) {
std::uint32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_r;
Py_ssize_t __pyx_t_1;
int __pyx_t_2;
std::int32_t __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
std::uint32_t __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_decoder.pyx":636
 *     cdef Py_ssize_t start
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = string[0]
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 636, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":637
 * 
 *     start = _reader_tell(reader)
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = string[0]
 *         string += 1
 */
while (1) {

/* "src/_decoder.pyx":638
 *     start = _reader_tell(reader)
 *     while True:
 *         c0 = string[0]             # <<<<<<<<<<<<<<
 *         string += 1
 *         if not c0:
 */
__pyx_v_c0 = (__pyx_v_string[0]);

/* "src/_decoder.pyx":639
 *     while True:
 *         c0 = string[0]
 *         string += 1             # <<<<<<<<<<<<<<
 *         if not c0:
 *             break
 */
__pyx_v_string = (__pyx_v_string + 1);

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_2 = (!(__pyx_v_c0 != 0));
if (__pyx_t_2) {

/* "src/_decoder.pyx":641
 *         string += 1
 *         if not c0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
goto __pyx_L4_break;

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
__pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::int32_t)-1L))) __PYX_ERR(11, 643, __pyx_L1_error)
__pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_3 != 0)), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":644
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'literal', start)             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"literal"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 644, __pyx_L1_error)

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
}

/* "src/_decoder.pyx":646
 *             _raise_unclosed(b'literal', start)
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)
 */
__pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 646, __pyx_L1_error)
__pyx_v_c1 = __pyx_t_5;

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
__pyx_t_2 = (JSON5EncoderCpp_expect((__pyx_v_c0 != __pyx_v_c1), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":648
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_expected_c(__pyx_v_c0, __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 648, __pyx_L1_error)

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
}
}
__pyx_L4_break:;

/* "src/_decoder.pyx":650
 *             _raise_expected_c(c0, start, c1)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._accept_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

static bool __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, char const *__pyx_v_string) {
std::uint32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
bool __pyx_r;
Py_ssize_t __pyx_t_1;
int __pyx_t_2;
std::int32_t __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
std::uint32_t __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_decoder.pyx":636
 *     cdef Py_ssize_t start
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     while True:
 *         c0 = string[0]
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 636, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":637
 * 
 *     start = _reader_tell(reader)
 *     while True:             # <<<<<<<<<<<<<<
 *         c0 = string[0]
 *         string += 1
 */
while (1) {

/* "src/_decoder.pyx":638
 *     start = _reader_tell(reader)
 *     while True:
 *         c0 = string[0]             # <<<<<<<<<<<<<<
 *         string += 1
 *         if not c0:
 */
__pyx_v_c0 = (__pyx_v_string[0]);

/* "src/_decoder.pyx":639
 *     while True:
 *         c0 = string[0]
 *         string += 1             # <<<<<<<<<<<<<<
 *         if not c0:
 *             break
 */
__pyx_v_string = (__pyx_v_string + 1);

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_2 = (!(__pyx_v_c0 != 0));
if (__pyx_t_2) {

/* "src/_decoder.pyx":641
 *         string += 1
 *         if not c0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         if expect(not _reader_good(reader), False):
 */
goto __pyx_L4_break;

/* "src/_decoder.pyx":640
 *         c0 = string[0]
 *         string += 1
 *         if not c0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
__pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_good(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((std::int32_t)-1L))) __PYX_ERR(11, 643, __pyx_L1_error)
__pyx_t_2 = (JSON5EncoderCpp_expect((!(__pyx_t_3 != 0)), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":644
 * 
 *         if expect(not _reader_good(reader), False):
 *             _raise_unclosed(b'literal', start)             # <<<<<<<<<<<<<<
 * 
 *         c1 = _reader_get(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unclosed(((char const *)"literal"), __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 644, __pyx_L1_error)

/* "src/_decoder.pyx":643
 *             break
 * 
 *         if expect(not _reader_good(reader), False):             # <<<<<<<<<<<<<<
 *             _raise_unclosed(b'literal', start)
 * 
 */
}

/* "src/_decoder.pyx":646
 *             _raise_unclosed(b'literal', start)
 * 
 *         c1 = _reader_get(reader)             # <<<<<<<<<<<<<<
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)
 */
__pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__reader_get(__pyx_v_reader); if (unlikely(__pyx_t_5 == ((std::uint32_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 646, __pyx_L1_error)
__pyx_v_c1 = __pyx_t_5;

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
__pyx_t_2 = (JSON5EncoderCpp_expect((__pyx_v_c0 != __pyx_v_c1), 0) != 0);
if (__pyx_t_2) {

/* "src/_decoder.pyx":648
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):
 *             _raise_expected_c(c0, start, c1)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_expected_c(__pyx_v_c0, __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 648, __pyx_L1_error)

/* "src/_decoder.pyx":647
 * 
 *         c1 = _reader_get(reader)
 *         if expect(c0 != c1, False):             # <<<<<<<<<<<<<<
 *             _raise_expected_c(c0, start, c1)
 * 
 */
}
}
__pyx_L4_break:;

/* "src/_decoder.pyx":650
 *             _raise_expected_c(c0, start, c1)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_decoder.pyx":631
 * 
 * 
 * cdef boolean _accept_string(ReaderRef reader, const char *string) except False:             # <<<<<<<<<<<<<<
 *     cdef uint32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._accept_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_null", 1);

/* "src/_decoder.pyx":655
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):
 *     #                       n
 *     _accept_string(reader, b'ull')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"ull")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 655, __pyx_L1_error)

/* "src/_decoder.pyx":656
 *     #                       n
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":657
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_null", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_null", 1);

/* "src/_decoder.pyx":655
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):
 *     #                       n
 *     _accept_string(reader, b'ull')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"ull")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 655, __pyx_L1_error)

/* "src/_decoder.pyx":656
 *     #                       n
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":657
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_null", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_null", 1);

/* "src/_decoder.pyx":655
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):
 *     #                       n
 *     _accept_string(reader, b'ull')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"ull")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 655, __pyx_L1_error)

/* "src/_decoder.pyx":656
 *     #                       n
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":657
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_null", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_null", 1);

/* "src/_decoder.pyx":655
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):
 *     #                       n
 *     _accept_string(reader, b'ull')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"ull")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 655, __pyx_L1_error)

/* "src/_decoder.pyx":656
 *     #                       n
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":657
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_null", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_null(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_null", 1);

/* "src/_decoder.pyx":655
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):
 *     #                       n
 *     _accept_string(reader, b'ull')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"ull")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 655, __pyx_L1_error)

/* "src/_decoder.pyx":656
 *     #                       n
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":657
 *     _accept_string(reader, b'ull')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_decoder.pyx":653
 * 
 * 
 * cdef object _decode_null(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       n
 *     _accept_string(reader, b'ull')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_null", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_true", 1);

/* "src/_decoder.pyx":662
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):
 *     #                       t
 *     _accept_string(reader, b'rue')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"rue")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 662, __pyx_L1_error)

/* "src/_decoder.pyx":663
 *     #                       t
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":664
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_true", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_true", 1);

/* "src/_decoder.pyx":662
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):
 *     #                       t
 *     _accept_string(reader, b'rue')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"rue")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 662, __pyx_L1_error)

/* "src/_decoder.pyx":663
 *     #                       t
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":664
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_true", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_true", 1);

/* "src/_decoder.pyx":662
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):
 *     #                       t
 *     _accept_string(reader, b'rue')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"rue")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 662, __pyx_L1_error)

/* "src/_decoder.pyx":663
 *     #                       t
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":664
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_true", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_true", 1);

/* "src/_decoder.pyx":662
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):
 *     #                       t
 *     _accept_string(reader, b'rue')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"rue")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 662, __pyx_L1_error)

/* "src/_decoder.pyx":663
 *     #                       t
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":664
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_true", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_true(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_true", 1);

/* "src/_decoder.pyx":662
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):
 *     #                       t
 *     _accept_string(reader, b'rue')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"rue")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 662, __pyx_L1_error)

/* "src/_decoder.pyx":663
 *     #                       t
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":664
 *     _accept_string(reader, b'rue')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_decoder.pyx":660
 * 
 * 
 * cdef object _decode_true(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       t
 *     _accept_string(reader, b'rue')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_true", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_false", 1);

/* "src/_decoder.pyx":669
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):
 *     #                      f
 *     _accept_string(reader, b'alse')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"alse")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 669, __pyx_L1_error)

/* "src/_decoder.pyx":670
 *     #                      f
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":671
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_False);
__pyx_r = Py_False;
goto __pyx_L0;

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_false", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_false", 1);

/* "src/_decoder.pyx":669
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):
 *     #                      f
 *     _accept_string(reader, b'alse')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"alse")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 669, __pyx_L1_error)

/* "src/_decoder.pyx":670
 *     #                      f
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":671
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_False);
__pyx_r = Py_False;
goto __pyx_L0;

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_false", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_false", 1);

/* "src/_decoder.pyx":669
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):
 *     #                      f
 *     _accept_string(reader, b'alse')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"alse")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 669, __pyx_L1_error)

/* "src/_decoder.pyx":670
 *     #                      f
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":671
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_False);
__pyx_r = Py_False;
goto __pyx_L0;

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_false", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_false", 1);

/* "src/_decoder.pyx":669
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):
 *     #                      f
 *     _accept_string(reader, b'alse')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"alse")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 669, __pyx_L1_error)

/* "src/_decoder.pyx":670
 *     #                      f
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":671
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_False);
__pyx_r = Py_False;
goto __pyx_L0;

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_false", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_false(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_false", 1);

/* "src/_decoder.pyx":669
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):
 *     #                      f
 *     _accept_string(reader, b'alse')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"alse")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 669, __pyx_L1_error)

/* "src/_decoder.pyx":670
 *     #                      f
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":671
 *     _accept_string(reader, b'alse')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_False);
__pyx_r = Py_False;
goto __pyx_L0;

/* "src/_decoder.pyx":667
 * 
 * 
 * cdef object _decode_false(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                      f
 *     _accept_string(reader, b'alse')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_false", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_inf", 1);

/* "src/_decoder.pyx":676
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):
 *     #                       I
 *     _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 676, __pyx_L1_error)

/* "src/_decoder.pyx":677
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_INF
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":678
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
goto __pyx_L0;

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_inf", 1);

/* "src/_decoder.pyx":676
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):
 *     #                       I
 *     _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 676, __pyx_L1_error)

/* "src/_decoder.pyx":677
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_INF
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":678
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
goto __pyx_L0;

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_inf", 1);

/* "src/_decoder.pyx":676
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):
 *     #                       I
 *     _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 676, __pyx_L1_error)

/* "src/_decoder.pyx":677
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_INF
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":678
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
goto __pyx_L0;

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_inf", 1);

/* "src/_decoder.pyx":676
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):
 *     #                       I
 *     _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 676, __pyx_L1_error)

/* "src/_decoder.pyx":677
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_INF
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":678
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
goto __pyx_L0;

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_inf(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_inf", 1);

/* "src/_decoder.pyx":676
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):
 *     #                       I
 *     _accept_string(reader, b'nfinity')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"nfinity")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 676, __pyx_L1_error)

/* "src/_decoder.pyx":677
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_INF
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":678
 *     _accept_string(reader, b'nfinity')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_INF             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_INF);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_INF;
goto __pyx_L0;

/* "src/_decoder.pyx":674
 * 
 * 
 * cdef object _decode_inf(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       I
 *     _accept_string(reader, b'nfinity')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_inf", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_nan", 1);

/* "src/_decoder.pyx":683
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):
 *     #                       N
 *     _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 683, __pyx_L1_error)

/* "src/_decoder.pyx":684
 *     #                       N
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_NAN
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":685
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
goto __pyx_L0;

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_nan", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_nan", 1);

/* "src/_decoder.pyx":683
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):
 *     #                       N
 *     _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 683, __pyx_L1_error)

/* "src/_decoder.pyx":684
 *     #                       N
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_NAN
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":685
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
goto __pyx_L0;

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_nan", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_nan", 1);

/* "src/_decoder.pyx":683
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):
 *     #                       N
 *     _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 683, __pyx_L1_error)

/* "src/_decoder.pyx":684
 *     #                       N
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_NAN
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":685
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
goto __pyx_L0;

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_nan", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_nan", 1);

/* "src/_decoder.pyx":683
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):
 *     #                       N
 *     _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 683, __pyx_L1_error)

/* "src/_decoder.pyx":684
 *     #                       N
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_NAN
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":685
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
goto __pyx_L0;

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_nan", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_nan(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_nan", 1);

/* "src/_decoder.pyx":683
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):
 *     #                       N
 *     _accept_string(reader, b'aN')             # <<<<<<<<<<<<<<
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__accept_string(__pyx_v_reader, ((char const *)"aN")); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(11, 683, __pyx_L1_error)

/* "src/_decoder.pyx":684
 *     #                       N
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return CONST_POS_NAN
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":685
 *     _accept_string(reader, b'aN')
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return CONST_POS_NAN             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_7pyjson5_CONST_POS_NAN);
__pyx_r = __pyx_v_7pyjson5_CONST_POS_NAN;
goto __pyx_L0;

/* "src/_decoder.pyx":681
 * 
 * 
 * cdef object _decode_nan(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     #                       N
 *     _accept_string(reader, b'aN')
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decode_nan", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
bool (*__pyx_v_fn)(__pyx_t_7pyjson5_ReaderUCS1Ref, PyObject *);
PyObject *__pyx_v_result = 0;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
Py_ssize_t __pyx_t_11;
JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
struct __pyx_opt_args_7pyjson5__raise_nesting __pyx_t_13;
int __pyx_t_14;
char const *__pyx_t_15;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
PyObject *__pyx_t_21 = NULL;
char const *__pyx_t_22;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_recursive_enter", 1);

/* "src/_decoder.pyx":695
 *     cdef object ex
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":696
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     if c1 == b'{':
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
__pyx_t_1 = (__pyx_v_c1 == '{');
if (__pyx_t_1) {

/* "src/_decoder.pyx":699
 * 
 *     if c1 == b'{':
 *         result = {}             # <<<<<<<<<<<<<<
 *         fn = _decode_object
 *     else:
 */
__pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 699, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":700
 *     if c1 == b'{':
 *         result = {}
 *         fn = _decode_object             # <<<<<<<<<<<<<<
 *     else:
 *         result = []
 */
__pyx_v_fn = __pyx_fuse_0__pyx_f_7pyjson5__decode_object;

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
goto __pyx_L3;
}

/* "src/_decoder.pyx":702
 *         fn = _decode_object
 *     else:
 *         result = []             # <<<<<<<<<<<<<<
 *         fn = _decode_array
 * 
 */
/*else*/ {
__pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 702, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":703
 *     else:
 *         result = []
 *         fn = _decode_array             # <<<<<<<<<<<<<<
 * 
 *     _reader_enter(reader)
 */
__pyx_v_fn = __pyx_fuse_0__pyx_f_7pyjson5__decode_array;
}
__pyx_L3:;

/* "src/_decoder.pyx":705
 *         fn = _decode_array
 * 
 *     _reader_enter(reader)             # <<<<<<<<<<<<<<
 *     try:
 *         fn(reader, result)
 */
__pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__reader_enter(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 705, __pyx_L1_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
/*try:*/ {
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":707
 *     _reader_enter(reader)
 *     try:
 *         fn(reader, result)             # <<<<<<<<<<<<<<
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 */
__pyx_t_3 = __pyx_v_fn(__pyx_v_reader, __pyx_v_result); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 707, __pyx_L7_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_decoder.pyx":708
 *     try:
 *         fn(reader, result)
 *     except RecursionError:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 */
__Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8);
__Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_RecursionError); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_GOTREF(__pyx_t_9);
__pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_ErrRestore(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_2);

/* "src/_decoder.pyx":709
 *         fn(reader, result)
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_11 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 709, __pyx_L9_except_error)
__pyx_t_13.__pyx_n = 1;
__pyx_t_13.result = __pyx_v_result;
__pyx_t_12 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_11, &__pyx_t_13); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 709, __pyx_L9_except_error)
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
goto __pyx_L8_exception_handled;
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(11, 710, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_INCREF(__pyx_t_7);
__pyx_v_ex = __pyx_t_7;
/*try:*/ {

/* "src/_decoder.pyx":711
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 *     finally:
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":712
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 *     finally:
 *         _reader_leave(reader)
 */
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
__PYX_ERR(11, 712, __pyx_L20_error)
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_21);
__pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
}
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_decoder.pyx":714
 *         raise
 *     finally:
 *         _reader_leave(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_fuse_0__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L1_error)
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_21);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
{
__pyx_fuse_0__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L27_error)
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
goto __pyx_L1_error;
__pyx_L27_error:;
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
goto __pyx_L1_error;
}
__pyx_L6:;
}

/* "src/_decoder.pyx":716
 *         _reader_leave(reader)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":717
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
bool (*__pyx_v_fn)(__pyx_t_7pyjson5_ReaderUCS2Ref, PyObject *);
PyObject *__pyx_v_result = 0;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
Py_ssize_t __pyx_t_11;
JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
struct __pyx_opt_args_7pyjson5__raise_nesting __pyx_t_13;
int __pyx_t_14;
char const *__pyx_t_15;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
PyObject *__pyx_t_21 = NULL;
char const *__pyx_t_22;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_recursive_enter", 1);

/* "src/_decoder.pyx":695
 *     cdef object ex
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":696
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     if c1 == b'{':
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
__pyx_t_1 = (__pyx_v_c1 == '{');
if (__pyx_t_1) {

/* "src/_decoder.pyx":699
 * 
 *     if c1 == b'{':
 *         result = {}             # <<<<<<<<<<<<<<
 *         fn = _decode_object
 *     else:
 */
__pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 699, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":700
 *     if c1 == b'{':
 *         result = {}
 *         fn = _decode_object             # <<<<<<<<<<<<<<
 *     else:
 *         result = []
 */
__pyx_v_fn = __pyx_fuse_1__pyx_f_7pyjson5__decode_object;

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
goto __pyx_L3;
}

/* "src/_decoder.pyx":702
 *         fn = _decode_object
 *     else:
 *         result = []             # <<<<<<<<<<<<<<
 *         fn = _decode_array
 * 
 */
/*else*/ {
__pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 702, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":703
 *     else:
 *         result = []
 *         fn = _decode_array             # <<<<<<<<<<<<<<
 * 
 *     _reader_enter(reader)
 */
__pyx_v_fn = __pyx_fuse_1__pyx_f_7pyjson5__decode_array;
}
__pyx_L3:;

/* "src/_decoder.pyx":705
 *         fn = _decode_array
 * 
 *     _reader_enter(reader)             # <<<<<<<<<<<<<<
 *     try:
 *         fn(reader, result)
 */
__pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__reader_enter(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 705, __pyx_L1_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
/*try:*/ {
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":707
 *     _reader_enter(reader)
 *     try:
 *         fn(reader, result)             # <<<<<<<<<<<<<<
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 */
__pyx_t_3 = __pyx_v_fn(__pyx_v_reader, __pyx_v_result); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 707, __pyx_L7_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_decoder.pyx":708
 *     try:
 *         fn(reader, result)
 *     except RecursionError:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 */
__Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8);
__Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_RecursionError); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_GOTREF(__pyx_t_9);
__pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_ErrRestore(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_2);

/* "src/_decoder.pyx":709
 *         fn(reader, result)
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_11 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 709, __pyx_L9_except_error)
__pyx_t_13.__pyx_n = 1;
__pyx_t_13.result = __pyx_v_result;
__pyx_t_12 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_11, &__pyx_t_13); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 709, __pyx_L9_except_error)
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
goto __pyx_L8_exception_handled;
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(11, 710, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_INCREF(__pyx_t_7);
__pyx_v_ex = __pyx_t_7;
/*try:*/ {

/* "src/_decoder.pyx":711
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 *     finally:
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":712
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 *     finally:
 *         _reader_leave(reader)
 */
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
__PYX_ERR(11, 712, __pyx_L20_error)
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_21);
__pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
}
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_decoder.pyx":714
 *         raise
 *     finally:
 *         _reader_leave(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_fuse_1__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L1_error)
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_21);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
{
__pyx_fuse_1__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L27_error)
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
goto __pyx_L1_error;
__pyx_L27_error:;
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
goto __pyx_L1_error;
}
__pyx_L6:;
}

/* "src/_decoder.pyx":716
 *         _reader_leave(reader)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":717
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
bool (*__pyx_v_fn)(__pyx_t_7pyjson5_ReaderUCS4Ref, PyObject *);
PyObject *__pyx_v_result = 0;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
Py_ssize_t __pyx_t_11;
JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
struct __pyx_opt_args_7pyjson5__raise_nesting __pyx_t_13;
int __pyx_t_14;
char const *__pyx_t_15;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
PyObject *__pyx_t_21 = NULL;
char const *__pyx_t_22;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_recursive_enter", 1);

/* "src/_decoder.pyx":695
 *     cdef object ex
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":696
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     if c1 == b'{':
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
__pyx_t_1 = (__pyx_v_c1 == '{');
if (__pyx_t_1) {

/* "src/_decoder.pyx":699
 * 
 *     if c1 == b'{':
 *         result = {}             # <<<<<<<<<<<<<<
 *         fn = _decode_object
 *     else:
 */
__pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 699, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":700
 *     if c1 == b'{':
 *         result = {}
 *         fn = _decode_object             # <<<<<<<<<<<<<<
 *     else:
 *         result = []
 */
__pyx_v_fn = __pyx_fuse_2__pyx_f_7pyjson5__decode_object;

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
goto __pyx_L3;
}

/* "src/_decoder.pyx":702
 *         fn = _decode_object
 *     else:
 *         result = []             # <<<<<<<<<<<<<<
 *         fn = _decode_array
 * 
 */
/*else*/ {
__pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 702, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":703
 *     else:
 *         result = []
 *         fn = _decode_array             # <<<<<<<<<<<<<<
 * 
 *     _reader_enter(reader)
 */
__pyx_v_fn = __pyx_fuse_2__pyx_f_7pyjson5__decode_array;
}
__pyx_L3:;

/* "src/_decoder.pyx":705
 *         fn = _decode_array
 * 
 *     _reader_enter(reader)             # <<<<<<<<<<<<<<
 *     try:
 *         fn(reader, result)
 */
__pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__reader_enter(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 705, __pyx_L1_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
/*try:*/ {
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":707
 *     _reader_enter(reader)
 *     try:
 *         fn(reader, result)             # <<<<<<<<<<<<<<
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 */
__pyx_t_3 = __pyx_v_fn(__pyx_v_reader, __pyx_v_result); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 707, __pyx_L7_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_decoder.pyx":708
 *     try:
 *         fn(reader, result)
 *     except RecursionError:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 */
__Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8);
__Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_RecursionError); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_GOTREF(__pyx_t_9);
__pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_ErrRestore(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_2);

/* "src/_decoder.pyx":709
 *         fn(reader, result)
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_11 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 709, __pyx_L9_except_error)
__pyx_t_13.__pyx_n = 1;
__pyx_t_13.result = __pyx_v_result;
__pyx_t_12 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_11, &__pyx_t_13); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 709, __pyx_L9_except_error)
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
goto __pyx_L8_exception_handled;
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(11, 710, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_INCREF(__pyx_t_7);
__pyx_v_ex = __pyx_t_7;
/*try:*/ {

/* "src/_decoder.pyx":711
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 *     finally:
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":712
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 *     finally:
 *         _reader_leave(reader)
 */
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
__PYX_ERR(11, 712, __pyx_L20_error)
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_21);
__pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
}
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_decoder.pyx":714
 *         raise
 *     finally:
 *         _reader_leave(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_fuse_2__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L1_error)
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_21);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
{
__pyx_fuse_2__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L27_error)
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
goto __pyx_L1_error;
__pyx_L27_error:;
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
goto __pyx_L1_error;
}
__pyx_L6:;
}

/* "src/_decoder.pyx":716
 *         _reader_leave(reader)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":717
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
bool (*__pyx_v_fn)(__pyx_t_7pyjson5_ReaderUTF8Ref, PyObject *);
PyObject *__pyx_v_result = 0;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
Py_ssize_t __pyx_t_11;
JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
struct __pyx_opt_args_7pyjson5__raise_nesting __pyx_t_13;
int __pyx_t_14;
char const *__pyx_t_15;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
PyObject *__pyx_t_21 = NULL;
char const *__pyx_t_22;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_recursive_enter", 1);

/* "src/_decoder.pyx":695
 *     cdef object ex
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":696
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     if c1 == b'{':
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
__pyx_t_1 = (__pyx_v_c1 == '{');
if (__pyx_t_1) {

/* "src/_decoder.pyx":699
 * 
 *     if c1 == b'{':
 *         result = {}             # <<<<<<<<<<<<<<
 *         fn = _decode_object
 *     else:
 */
__pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 699, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":700
 *     if c1 == b'{':
 *         result = {}
 *         fn = _decode_object             # <<<<<<<<<<<<<<
 *     else:
 *         result = []
 */
__pyx_v_fn = __pyx_fuse_3__pyx_f_7pyjson5__decode_object;

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
goto __pyx_L3;
}

/* "src/_decoder.pyx":702
 *         fn = _decode_object
 *     else:
 *         result = []             # <<<<<<<<<<<<<<
 *         fn = _decode_array
 * 
 */
/*else*/ {
__pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 702, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":703
 *     else:
 *         result = []
 *         fn = _decode_array             # <<<<<<<<<<<<<<
 * 
 *     _reader_enter(reader)
 */
__pyx_v_fn = __pyx_fuse_3__pyx_f_7pyjson5__decode_array;
}
__pyx_L3:;

/* "src/_decoder.pyx":705
 *         fn = _decode_array
 * 
 *     _reader_enter(reader)             # <<<<<<<<<<<<<<
 *     try:
 *         fn(reader, result)
 */
__pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__reader_enter(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 705, __pyx_L1_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
/*try:*/ {
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":707
 *     _reader_enter(reader)
 *     try:
 *         fn(reader, result)             # <<<<<<<<<<<<<<
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 */
__pyx_t_3 = __pyx_v_fn(__pyx_v_reader, __pyx_v_result); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 707, __pyx_L7_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_decoder.pyx":708
 *     try:
 *         fn(reader, result)
 *     except RecursionError:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 */
__Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8);
__Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_RecursionError); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_GOTREF(__pyx_t_9);
__pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_ErrRestore(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_2);

/* "src/_decoder.pyx":709
 *         fn(reader, result)
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_11 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 709, __pyx_L9_except_error)
__pyx_t_13.__pyx_n = 1;
__pyx_t_13.result = __pyx_v_result;
__pyx_t_12 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_11, &__pyx_t_13); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 709, __pyx_L9_except_error)
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
goto __pyx_L8_exception_handled;
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(11, 710, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_INCREF(__pyx_t_7);
__pyx_v_ex = __pyx_t_7;
/*try:*/ {

/* "src/_decoder.pyx":711
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 *     finally:
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":712
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 *     finally:
 *         _reader_leave(reader)
 */
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
__PYX_ERR(11, 712, __pyx_L20_error)
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_21);
__pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_XGIVEREF(__pyx_t_21);
  __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
}
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
__pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_decoder.pyx":714
 *         raise
 *     finally:
 *         _reader_leave(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_fuse_3__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L1_error)
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_21);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
{
__pyx_fuse_3__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L27_error)
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
goto __pyx_L1_error;
__pyx_L27_error:;
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
goto __pyx_L1_error;
}
__pyx_L6:;
}

/* "src/_decoder.pyx":716
 *         _reader_leave(reader)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":717
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_recursive_enter(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
bool (*__pyx_v_fn)(__pyx_t_7pyjson5_ReaderCallbackRef, PyObject *);
PyObject *__pyx_v_result = 0;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
Py_ssize_t __pyx_t_11;
JSON5EncoderCpp::AlwaysTrue __pyx_t_12;
struct __pyx_opt_args_7pyjson5__raise_nesting __pyx_t_13;
int __pyx_t_14;
char const *__pyx_t_15;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
PyObject *__pyx_t_21 = NULL;
char const *__pyx_t_22;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_recursive_enter", 1);

/* "src/_decoder.pyx":695
 *     cdef object ex
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 * 
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":696
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 * 
 *     if c1 == b'{':
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
__pyx_t_1 = (__pyx_v_c1 == '{');
if (__pyx_t_1) {

/* "src/_decoder.pyx":699
 * 
 *     if c1 == b'{':
 *         result = {}             # <<<<<<<<<<<<<<
 *         fn = _decode_object
 *     else:
 */
__pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 699, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":700
 *     if c1 == b'{':
 *         result = {}
 *         fn = _decode_object             # <<<<<<<<<<<<<<
 *     else:
 *         result = []
 */
__pyx_v_fn = __pyx_fuse_4__pyx_f_7pyjson5__decode_object;

/* "src/_decoder.pyx":698
 *     c1 = cast_to_uint32(c0)
 * 
 *     if c1 == b'{':             # <<<<<<<<<<<<<<
 *         result = {}
 *         fn = _decode_object
 */
goto __pyx_L3;
}

/* "src/_decoder.pyx":702
 *         fn = _decode_object
 *     else:
 *         result = []             # <<<<<<<<<<<<<<
 *         fn = _decode_array
 * 
 */
/*else*/ {
__pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 702, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_v_result = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_decoder.pyx":703
 *     else:
 *         result = []
 *         fn = _decode_array             # <<<<<<<<<<<<<<
 * 
 *     _reader_enter(reader)
 */
__pyx_v_fn = __pyx_fuse_4__pyx_f_7pyjson5__decode_array;
}
__pyx_L3:;

/* "src/_decoder.pyx":705
 *         fn = _decode_array
 * 
 *     _reader_enter(reader)             # <<<<<<<<<<<<<<
 *     try:
 *         fn(reader, result)
 */
__pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__reader_enter(__pyx_v_reader); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 705, __pyx_L1_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
/*try:*/ {
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_decoder.pyx":707
 *     _reader_enter(reader)
 *     try:
 *         fn(reader, result)             # <<<<<<<<<<<<<<
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 */
__pyx_t_3 = __pyx_v_fn(__pyx_v_reader, __pyx_v_result); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(11, 707, __pyx_L7_error)

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_decoder.pyx":708
 *     try:
 *         fn(reader, result)
 *     except RecursionError:             # <<<<<<<<<<<<<<
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 */
__Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8);
__Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_RecursionError); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_GOTREF(__pyx_t_9);
__pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_ErrRestore(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(11, 708, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_2);

/* "src/_decoder.pyx":709
 *         fn(reader, result)
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_11 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 709, __pyx_L9_except_error)
__pyx_t_13.__pyx_n = 1;
__pyx_t_13.result = __pyx_v_result;
__pyx_t_12 = __pyx_f_7pyjson5__raise_nesting(__pyx_t_11, &__pyx_t_13); if (unlikely(__pyx_t_12 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 709, __pyx_L9_except_error)
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
goto __pyx_L8_exception_handled;
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(11, 710, __pyx_L9_except_error)
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_INCREF(__pyx_t_7);
__pyx_v_ex = __pyx_t_7;
/*try:*/ {

/* "src/_decoder.pyx":711
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 *     finally:
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":712
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 *     finally:
 *         _reader_leave(reader)
 */
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_7, __pyx_t_8);
__pyx_t_2 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
__PYX_ERR(11, 712, __pyx_L20_error)
}

/* "src/_decoder.pyx":710
 *     except RecursionError:
 *         _raise_nesting(_reader_tell(reader), result)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L20_error:;
/*exception exit:*/{
  __Pyx_PyThreadState_declare
  __Pyx_PyThreadState_assign
  __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
  if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
  __Pyx_XGOTREF(__pyx_t_16);
  __Pyx_XGOTREF(__pyx_t_17);
  __Pyx_XGOTREF(__pyx_t_18);
  __Pyx_XGOTREF(__pyx_t_19);
  __Pyx_XGOTREF(__pyx_t_20);
  __Pyx_XGOTREF(__pyx_t_21);
  __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
  {
    __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
  }
  if (PY_MAJOR_VERSION >= 3) {
    __Pyx_XGIVEREF(__pyx_t_19);
    __Pyx_XGIVEREF(__pyx_t_20);
    __Pyx_XGIVEREF(__pyx_t_21);
    __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
  }
  __Pyx_XGIVEREF(__pyx_t_16);
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
  __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
  __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
  goto __pyx_L9_except_error;
}
}
}
goto __pyx_L9_except_error;

/* "src/_decoder.pyx":706
 * 
 *     _reader_enter(reader)
 *     try:             # <<<<<<<<<<<<<<
 *         fn(reader, result)
 *     except RecursionError:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_decoder.pyx":714
 *         raise
 *     finally:
 *         _reader_leave(reader)             # <<<<<<<<<<<<<<
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_fuse_4__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L1_error)
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_21);
__Pyx_XGOTREF(__pyx_t_20);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
{
__pyx_fuse_4__pyx_f_7pyjson5__reader_leave(__pyx_v_reader); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 714, __pyx_L27_error)
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
goto __pyx_L1_error;
__pyx_L27_error:;
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_21);
__Pyx_XGIVEREF(__pyx_t_20);
__Pyx_XGIVEREF(__pyx_t_19);
__Pyx_ExceptionReset(__pyx_t_21, __pyx_t_20, __pyx_t_19);
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0;
goto __pyx_L1_error;
}
__pyx_L6:;
}

/* "src/_decoder.pyx":716
 *         _reader_leave(reader)
 * 
 *     c_in_out[0] = NO_EXTRA_DATA             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
(__pyx_v_c_in_out[0]) = __pyx_e_7pyjson5_NO_EXTRA_DATA;

/* "src/_decoder.pyx":717
 * 
 *     c_in_out[0] = NO_EXTRA_DATA
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":688
 * 
 * 
 * cdef object _decode_recursive_enter(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef boolean (*fn)(ReaderRef reader, object result) except False
 *     cdef object result
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._decode_recursive_enter", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
JSON5EncoderCpp::AlwaysTrue __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decoder_unknown", 1);

/* "src/_decoder.pyx":725
 *     cdef Py_ssize_t start
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":726
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":727
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 727, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":729
 *     start = _reader_tell(reader)
 * 
 *     _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 729, __pyx_L1_error)

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decoder_unknown", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
JSON5EncoderCpp::AlwaysTrue __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decoder_unknown", 1);

/* "src/_decoder.pyx":725
 *     cdef Py_ssize_t start
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":726
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":727
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 727, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":729
 *     start = _reader_tell(reader)
 * 
 *     _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 729, __pyx_L1_error)

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decoder_unknown", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
JSON5EncoderCpp::AlwaysTrue __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decoder_unknown", 1);

/* "src/_decoder.pyx":725
 *     cdef Py_ssize_t start
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":726
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":727
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 727, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":729
 *     start = _reader_tell(reader)
 * 
 *     _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 729, __pyx_L1_error)

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decoder_unknown", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
JSON5EncoderCpp::AlwaysTrue __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decoder_unknown", 1);

/* "src/_decoder.pyx":725
 *     cdef Py_ssize_t start
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":726
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":727
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 727, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":729
 *     start = _reader_tell(reader)
 * 
 *     _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 729, __pyx_L1_error)

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decoder_unknown", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decoder_unknown(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
JSON5EncoderCpp::AlwaysTrue __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decoder_unknown", 1);

/* "src/_decoder.pyx":725
 *     cdef Py_ssize_t start
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":726
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     start = _reader_tell(reader)
 * 
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":727
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 * 
 *     _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 727, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":729
 *     start = _reader_tell(reader)
 * 
 *     _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 729, __pyx_L1_error)

/* "src/_decoder.pyx":720
 * 
 * 
 * cdef object _decoder_unknown(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._decoder_unknown", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
enum JSON5EncoderCpp::DrsKind __pyx_v_kind;
PyObject *(*__pyx_v_decoder)(__pyx_t_7pyjson5_ReaderUCS1Ref, std::int32_t *);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
Py_ssize_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_recursive", 1);

/* "src/_decoder.pyx":739
 *     cdef object (*decoder)(ReaderRef, int32_t*)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":740
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = (__pyx_v_c1 >= 0x80);
if (__pyx_t_1) {

/* "src/_decoder.pyx":742
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 *         start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 */
__pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 742, __pyx_L1_error)
__pyx_v_start = __pyx_t_2;

/* "src/_decoder.pyx":743
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     kind = drs_lookup[c1]
 */
__pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 743, __pyx_L1_error)

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
}

/* "src/_decoder.pyx":745
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 *     kind = drs_lookup[c1]             # <<<<<<<<<<<<<<
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 */
__pyx_v_kind = (JSON5EncoderCpp::drs_lookup[__pyx_v_c1]);

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
switch (__pyx_v_kind) {
case JSON5EncoderCpp::DRS_fail:

/* "src/_decoder.pyx":747
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decoder_unknown;

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
break;
case JSON5EncoderCpp::DRS_null:

/* "src/_decoder.pyx":749
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 *         decoder = _decode_null             # <<<<<<<<<<<<<<
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_null;

/* "src/_decoder.pyx":748
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:             # <<<<<<<<<<<<<<
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 */
break;
case JSON5EncoderCpp::DRS_true:

/* "src/_decoder.pyx":751
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 *         decoder = _decode_true             # <<<<<<<<<<<<<<
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_true;

/* "src/_decoder.pyx":750
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 *     elif kind == DRS_true:             # <<<<<<<<<<<<<<
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 */
break;
case JSON5EncoderCpp::DRS_false:

/* "src/_decoder.pyx":753
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 *         decoder = _decode_false             # <<<<<<<<<<<<<<
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_false;

/* "src/_decoder.pyx":752
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 *     elif kind == DRS_false:             # <<<<<<<<<<<<<<
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 */
break;
case JSON5EncoderCpp::DRS_inf:

/* "src/_decoder.pyx":755
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf             # <<<<<<<<<<<<<<
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_inf;

/* "src/_decoder.pyx":754
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 *     elif kind == DRS_inf:             # <<<<<<<<<<<<<<
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 */
break;
case JSON5EncoderCpp::DRS_nan:

/* "src/_decoder.pyx":757
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan             # <<<<<<<<<<<<<<
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_nan;

/* "src/_decoder.pyx":756
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:             # <<<<<<<<<<<<<<
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 */
break;
case JSON5EncoderCpp::DRS_string:

/* "src/_decoder.pyx":759
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 *         decoder = _decode_string             # <<<<<<<<<<<<<<
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_string;

/* "src/_decoder.pyx":758
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 *     elif kind == DRS_string:             # <<<<<<<<<<<<<<
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 */
break;
case JSON5EncoderCpp::DRS_number:

/* "src/_decoder.pyx":761
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 *         decoder = _decode_number             # <<<<<<<<<<<<<<
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_number;

/* "src/_decoder.pyx":760
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 *     elif kind == DRS_number:             # <<<<<<<<<<<<<<
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 */
break;
case JSON5EncoderCpp::DRS_recursive:

/* "src/_decoder.pyx":763
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decode_recursive_enter;

/* "src/_decoder.pyx":762
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:             # <<<<<<<<<<<<<<
 *         decoder = _decode_recursive_enter
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":765
 *         decoder = _decode_recursive_enter
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 * 
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":766
 *     else:
 *         unreachable()
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 * 
 *     return decoder(reader, c_in_out)
 */
__pyx_v_decoder = __pyx_fuse_0__pyx_f_7pyjson5__decoder_unknown;
break;
}

/* "src/_decoder.pyx":768
 *         decoder = _decoder_unknown
 * 
 *     return decoder(reader, c_in_out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_v_decoder(__pyx_v_reader, __pyx_v_c_in_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 768, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._decode_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
enum JSON5EncoderCpp::DrsKind __pyx_v_kind;
PyObject *(*__pyx_v_decoder)(__pyx_t_7pyjson5_ReaderUCS2Ref, std::int32_t *);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
Py_ssize_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_recursive", 1);

/* "src/_decoder.pyx":739
 *     cdef object (*decoder)(ReaderRef, int32_t*)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":740
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = (__pyx_v_c1 >= 0x80);
if (__pyx_t_1) {

/* "src/_decoder.pyx":742
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 *         start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 742, __pyx_L1_error)
__pyx_v_start = __pyx_t_2;

/* "src/_decoder.pyx":743
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     kind = drs_lookup[c1]
 */
__pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 743, __pyx_L1_error)

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
}

/* "src/_decoder.pyx":745
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 *     kind = drs_lookup[c1]             # <<<<<<<<<<<<<<
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 */
__pyx_v_kind = (JSON5EncoderCpp::drs_lookup[__pyx_v_c1]);

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
switch (__pyx_v_kind) {
case JSON5EncoderCpp::DRS_fail:

/* "src/_decoder.pyx":747
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decoder_unknown;

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
break;
case JSON5EncoderCpp::DRS_null:

/* "src/_decoder.pyx":749
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 *         decoder = _decode_null             # <<<<<<<<<<<<<<
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_null;

/* "src/_decoder.pyx":748
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:             # <<<<<<<<<<<<<<
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 */
break;
case JSON5EncoderCpp::DRS_true:

/* "src/_decoder.pyx":751
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 *         decoder = _decode_true             # <<<<<<<<<<<<<<
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_true;

/* "src/_decoder.pyx":750
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 *     elif kind == DRS_true:             # <<<<<<<<<<<<<<
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 */
break;
case JSON5EncoderCpp::DRS_false:

/* "src/_decoder.pyx":753
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 *         decoder = _decode_false             # <<<<<<<<<<<<<<
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_false;

/* "src/_decoder.pyx":752
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 *     elif kind == DRS_false:             # <<<<<<<<<<<<<<
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 */
break;
case JSON5EncoderCpp::DRS_inf:

/* "src/_decoder.pyx":755
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf             # <<<<<<<<<<<<<<
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_inf;

/* "src/_decoder.pyx":754
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 *     elif kind == DRS_inf:             # <<<<<<<<<<<<<<
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 */
break;
case JSON5EncoderCpp::DRS_nan:

/* "src/_decoder.pyx":757
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan             # <<<<<<<<<<<<<<
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_nan;

/* "src/_decoder.pyx":756
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:             # <<<<<<<<<<<<<<
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 */
break;
case JSON5EncoderCpp::DRS_string:

/* "src/_decoder.pyx":759
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 *         decoder = _decode_string             # <<<<<<<<<<<<<<
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_string;

/* "src/_decoder.pyx":758
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 *     elif kind == DRS_string:             # <<<<<<<<<<<<<<
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 */
break;
case JSON5EncoderCpp::DRS_number:

/* "src/_decoder.pyx":761
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 *         decoder = _decode_number             # <<<<<<<<<<<<<<
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_number;

/* "src/_decoder.pyx":760
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 *     elif kind == DRS_number:             # <<<<<<<<<<<<<<
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 */
break;
case JSON5EncoderCpp::DRS_recursive:

/* "src/_decoder.pyx":763
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decode_recursive_enter;

/* "src/_decoder.pyx":762
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:             # <<<<<<<<<<<<<<
 *         decoder = _decode_recursive_enter
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":765
 *         decoder = _decode_recursive_enter
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 * 
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":766
 *     else:
 *         unreachable()
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 * 
 *     return decoder(reader, c_in_out)
 */
__pyx_v_decoder = __pyx_fuse_1__pyx_f_7pyjson5__decoder_unknown;
break;
}

/* "src/_decoder.pyx":768
 *         decoder = _decoder_unknown
 * 
 *     return decoder(reader, c_in_out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_v_decoder(__pyx_v_reader, __pyx_v_c_in_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 768, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._decode_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
enum JSON5EncoderCpp::DrsKind __pyx_v_kind;
PyObject *(*__pyx_v_decoder)(__pyx_t_7pyjson5_ReaderUCS4Ref, std::int32_t *);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
Py_ssize_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_recursive", 1);

/* "src/_decoder.pyx":739
 *     cdef object (*decoder)(ReaderRef, int32_t*)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":740
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = (__pyx_v_c1 >= 0x80);
if (__pyx_t_1) {

/* "src/_decoder.pyx":742
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 *         start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 742, __pyx_L1_error)
__pyx_v_start = __pyx_t_2;

/* "src/_decoder.pyx":743
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     kind = drs_lookup[c1]
 */
__pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 743, __pyx_L1_error)

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
}

/* "src/_decoder.pyx":745
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 *     kind = drs_lookup[c1]             # <<<<<<<<<<<<<<
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 */
__pyx_v_kind = (JSON5EncoderCpp::drs_lookup[__pyx_v_c1]);

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
switch (__pyx_v_kind) {
case JSON5EncoderCpp::DRS_fail:

/* "src/_decoder.pyx":747
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decoder_unknown;

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
break;
case JSON5EncoderCpp::DRS_null:

/* "src/_decoder.pyx":749
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 *         decoder = _decode_null             # <<<<<<<<<<<<<<
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_null;

/* "src/_decoder.pyx":748
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:             # <<<<<<<<<<<<<<
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 */
break;
case JSON5EncoderCpp::DRS_true:

/* "src/_decoder.pyx":751
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 *         decoder = _decode_true             # <<<<<<<<<<<<<<
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_true;

/* "src/_decoder.pyx":750
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 *     elif kind == DRS_true:             # <<<<<<<<<<<<<<
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 */
break;
case JSON5EncoderCpp::DRS_false:

/* "src/_decoder.pyx":753
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 *         decoder = _decode_false             # <<<<<<<<<<<<<<
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_false;

/* "src/_decoder.pyx":752
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 *     elif kind == DRS_false:             # <<<<<<<<<<<<<<
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 */
break;
case JSON5EncoderCpp::DRS_inf:

/* "src/_decoder.pyx":755
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf             # <<<<<<<<<<<<<<
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_inf;

/* "src/_decoder.pyx":754
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 *     elif kind == DRS_inf:             # <<<<<<<<<<<<<<
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 */
break;
case JSON5EncoderCpp::DRS_nan:

/* "src/_decoder.pyx":757
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan             # <<<<<<<<<<<<<<
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_nan;

/* "src/_decoder.pyx":756
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:             # <<<<<<<<<<<<<<
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 */
break;
case JSON5EncoderCpp::DRS_string:

/* "src/_decoder.pyx":759
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 *         decoder = _decode_string             # <<<<<<<<<<<<<<
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_string;

/* "src/_decoder.pyx":758
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 *     elif kind == DRS_string:             # <<<<<<<<<<<<<<
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 */
break;
case JSON5EncoderCpp::DRS_number:

/* "src/_decoder.pyx":761
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 *         decoder = _decode_number             # <<<<<<<<<<<<<<
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_number;

/* "src/_decoder.pyx":760
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 *     elif kind == DRS_number:             # <<<<<<<<<<<<<<
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 */
break;
case JSON5EncoderCpp::DRS_recursive:

/* "src/_decoder.pyx":763
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decode_recursive_enter;

/* "src/_decoder.pyx":762
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:             # <<<<<<<<<<<<<<
 *         decoder = _decode_recursive_enter
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":765
 *         decoder = _decode_recursive_enter
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 * 
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":766
 *     else:
 *         unreachable()
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 * 
 *     return decoder(reader, c_in_out)
 */
__pyx_v_decoder = __pyx_fuse_2__pyx_f_7pyjson5__decoder_unknown;
break;
}

/* "src/_decoder.pyx":768
 *         decoder = _decoder_unknown
 * 
 *     return decoder(reader, c_in_out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_v_decoder(__pyx_v_reader, __pyx_v_c_in_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 768, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._decode_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
enum JSON5EncoderCpp::DrsKind __pyx_v_kind;
PyObject *(*__pyx_v_decoder)(__pyx_t_7pyjson5_ReaderUTF8Ref, std::int32_t *);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
Py_ssize_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_recursive", 1);

/* "src/_decoder.pyx":739
 *     cdef object (*decoder)(ReaderRef, int32_t*)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":740
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = (__pyx_v_c1 >= 0x80);
if (__pyx_t_1) {

/* "src/_decoder.pyx":742
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 *         start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 742, __pyx_L1_error)
__pyx_v_start = __pyx_t_2;

/* "src/_decoder.pyx":743
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     kind = drs_lookup[c1]
 */
__pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 743, __pyx_L1_error)

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
}

/* "src/_decoder.pyx":745
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 *     kind = drs_lookup[c1]             # <<<<<<<<<<<<<<
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 */
__pyx_v_kind = (JSON5EncoderCpp::drs_lookup[__pyx_v_c1]);

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
switch (__pyx_v_kind) {
case JSON5EncoderCpp::DRS_fail:

/* "src/_decoder.pyx":747
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decoder_unknown;

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
break;
case JSON5EncoderCpp::DRS_null:

/* "src/_decoder.pyx":749
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 *         decoder = _decode_null             # <<<<<<<<<<<<<<
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_null;

/* "src/_decoder.pyx":748
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:             # <<<<<<<<<<<<<<
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 */
break;
case JSON5EncoderCpp::DRS_true:

/* "src/_decoder.pyx":751
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 *         decoder = _decode_true             # <<<<<<<<<<<<<<
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_true;

/* "src/_decoder.pyx":750
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 *     elif kind == DRS_true:             # <<<<<<<<<<<<<<
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 */
break;
case JSON5EncoderCpp::DRS_false:

/* "src/_decoder.pyx":753
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 *         decoder = _decode_false             # <<<<<<<<<<<<<<
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_false;

/* "src/_decoder.pyx":752
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 *     elif kind == DRS_false:             # <<<<<<<<<<<<<<
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 */
break;
case JSON5EncoderCpp::DRS_inf:

/* "src/_decoder.pyx":755
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf             # <<<<<<<<<<<<<<
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_inf;

/* "src/_decoder.pyx":754
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 *     elif kind == DRS_inf:             # <<<<<<<<<<<<<<
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 */
break;
case JSON5EncoderCpp::DRS_nan:

/* "src/_decoder.pyx":757
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan             # <<<<<<<<<<<<<<
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_nan;

/* "src/_decoder.pyx":756
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:             # <<<<<<<<<<<<<<
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 */
break;
case JSON5EncoderCpp::DRS_string:

/* "src/_decoder.pyx":759
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 *         decoder = _decode_string             # <<<<<<<<<<<<<<
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_string;

/* "src/_decoder.pyx":758
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 *     elif kind == DRS_string:             # <<<<<<<<<<<<<<
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 */
break;
case JSON5EncoderCpp::DRS_number:

/* "src/_decoder.pyx":761
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 *         decoder = _decode_number             # <<<<<<<<<<<<<<
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_number;

/* "src/_decoder.pyx":760
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 *     elif kind == DRS_number:             # <<<<<<<<<<<<<<
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 */
break;
case JSON5EncoderCpp::DRS_recursive:

/* "src/_decoder.pyx":763
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decode_recursive_enter;

/* "src/_decoder.pyx":762
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:             # <<<<<<<<<<<<<<
 *         decoder = _decode_recursive_enter
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":765
 *         decoder = _decode_recursive_enter
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 * 
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":766
 *     else:
 *         unreachable()
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 * 
 *     return decoder(reader, c_in_out)
 */
__pyx_v_decoder = __pyx_fuse_3__pyx_f_7pyjson5__decoder_unknown;
break;
}

/* "src/_decoder.pyx":768
 *         decoder = _decoder_unknown
 * 
 *     return decoder(reader, c_in_out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_v_decoder(__pyx_v_reader, __pyx_v_c_in_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 768, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._decode_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_recursive(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, std::int32_t *__pyx_v_c_in_out) {
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
Py_ssize_t __pyx_v_start;
enum JSON5EncoderCpp::DrsKind __pyx_v_kind;
PyObject *(*__pyx_v_decoder)(__pyx_t_7pyjson5_ReaderCallbackRef, std::int32_t *);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
Py_ssize_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_recursive", 1);

/* "src/_decoder.pyx":739
 *     cdef object (*decoder)(ReaderRef, int32_t*)
 * 
 *     c0 = c_in_out[0]             # <<<<<<<<<<<<<<
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 */
__pyx_v_c0 = (__pyx_v_c_in_out[0]);

/* "src/_decoder.pyx":740
 * 
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
__pyx_t_1 = (__pyx_v_c1 >= 0x80);
if (__pyx_t_1) {

/* "src/_decoder.pyx":742
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:
 *         start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 742, __pyx_L1_error)
__pyx_v_start = __pyx_t_2;

/* "src/_decoder.pyx":743
 *     if c1 >= 128:
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)             # <<<<<<<<<<<<<<
 * 
 *     kind = drs_lookup[c1]
 */
__pyx_t_3 = __pyx_f_7pyjson5__raise_expected_s(((char const *)"JSON5Value"), __pyx_v_start, __pyx_v_c1); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 743, __pyx_L1_error)

/* "src/_decoder.pyx":741
 *     c0 = c_in_out[0]
 *     c1 = cast_to_uint32(c0)
 *     if c1 >= 128:             # <<<<<<<<<<<<<<
 *         start = _reader_tell(reader)
 *         _raise_expected_s('JSON5Value', start, c1)
 */
}

/* "src/_decoder.pyx":745
 *         _raise_expected_s('JSON5Value', start, c1)
 * 
 *     kind = drs_lookup[c1]             # <<<<<<<<<<<<<<
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 */
__pyx_v_kind = (JSON5EncoderCpp::drs_lookup[__pyx_v_c1]);

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
switch (__pyx_v_kind) {
case JSON5EncoderCpp::DRS_fail:

/* "src/_decoder.pyx":747
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decoder_unknown;

/* "src/_decoder.pyx":746
 * 
 *     kind = drs_lookup[c1]
 *     if kind == DRS_fail:             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 */
break;
case JSON5EncoderCpp::DRS_null:

/* "src/_decoder.pyx":749
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:
 *         decoder = _decode_null             # <<<<<<<<<<<<<<
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_null;

/* "src/_decoder.pyx":748
 *     if kind == DRS_fail:
 *         decoder = _decoder_unknown
 *     elif kind == DRS_null:             # <<<<<<<<<<<<<<
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 */
break;
case JSON5EncoderCpp::DRS_true:

/* "src/_decoder.pyx":751
 *         decoder = _decode_null
 *     elif kind == DRS_true:
 *         decoder = _decode_true             # <<<<<<<<<<<<<<
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_true;

/* "src/_decoder.pyx":750
 *     elif kind == DRS_null:
 *         decoder = _decode_null
 *     elif kind == DRS_true:             # <<<<<<<<<<<<<<
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 */
break;
case JSON5EncoderCpp::DRS_false:

/* "src/_decoder.pyx":753
 *         decoder = _decode_true
 *     elif kind == DRS_false:
 *         decoder = _decode_false             # <<<<<<<<<<<<<<
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_false;

/* "src/_decoder.pyx":752
 *     elif kind == DRS_true:
 *         decoder = _decode_true
 *     elif kind == DRS_false:             # <<<<<<<<<<<<<<
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 */
break;
case JSON5EncoderCpp::DRS_inf:

/* "src/_decoder.pyx":755
 *         decoder = _decode_false
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf             # <<<<<<<<<<<<<<
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_inf;

/* "src/_decoder.pyx":754
 *     elif kind == DRS_false:
 *         decoder = _decode_false
 *     elif kind == DRS_inf:             # <<<<<<<<<<<<<<
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 */
break;
case JSON5EncoderCpp::DRS_nan:

/* "src/_decoder.pyx":757
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan             # <<<<<<<<<<<<<<
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_nan;

/* "src/_decoder.pyx":756
 *     elif kind == DRS_inf:
 *         decoder = _decode_inf
 *     elif kind == DRS_nan:             # <<<<<<<<<<<<<<
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 */
break;
case JSON5EncoderCpp::DRS_string:

/* "src/_decoder.pyx":759
 *         decoder = _decode_nan
 *     elif kind == DRS_string:
 *         decoder = _decode_string             # <<<<<<<<<<<<<<
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_string;

/* "src/_decoder.pyx":758
 *     elif kind == DRS_nan:
 *         decoder = _decode_nan
 *     elif kind == DRS_string:             # <<<<<<<<<<<<<<
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 */
break;
case JSON5EncoderCpp::DRS_number:

/* "src/_decoder.pyx":761
 *         decoder = _decode_string
 *     elif kind == DRS_number:
 *         decoder = _decode_number             # <<<<<<<<<<<<<<
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_number;

/* "src/_decoder.pyx":760
 *     elif kind == DRS_string:
 *         decoder = _decode_string
 *     elif kind == DRS_number:             # <<<<<<<<<<<<<<
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 */
break;
case JSON5EncoderCpp::DRS_recursive:

/* "src/_decoder.pyx":763
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:
 *         decoder = _decode_recursive_enter             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decode_recursive_enter;

/* "src/_decoder.pyx":762
 *     elif kind == DRS_number:
 *         decoder = _decode_number
 *     elif kind == DRS_recursive:             # <<<<<<<<<<<<<<
 *         decoder = _decode_recursive_enter
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":765
 *         decoder = _decode_recursive_enter
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 *         decoder = _decoder_unknown
 * 
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":766
 *     else:
 *         unreachable()
 *         decoder = _decoder_unknown             # <<<<<<<<<<<<<<
 * 
 *     return decoder(reader, c_in_out)
 */
__pyx_v_decoder = __pyx_fuse_4__pyx_f_7pyjson5__decoder_unknown;
break;
}

/* "src/_decoder.pyx":768
 *         decoder = _decoder_unknown
 * 
 *     return decoder(reader, c_in_out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_v_decoder(__pyx_v_reader, __pyx_v_c_in_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 768, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":732
 * 
 * 
 * cdef object _decode_recursive(ReaderRef reader, int32_t *c_in_out):             # <<<<<<<<<<<<<<
 *     cdef int32_t c0
 *     cdef uint32_t c1
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._decode_recursive", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, bool __pyx_v_some) {
Py_ssize_t __pyx_v_start;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_result = 0;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
bool __pyx_t_9;
int __pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_all_sub", 1);

/* "src/_decoder.pyx":778
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 778, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":779
 * 
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)
 */
__pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 779, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":781
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)             # <<<<<<<<<<<<<<
 * 
 *     result = _decode_recursive(reader, &c0)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_no_data(__pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 781, __pyx_L1_error)

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
}

/* "src/_decoder.pyx":783
 *         _raise_no_data(start)
 * 
 *     result = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *     try:
 *         if c0 < 0:
 */
__pyx_t_5 = __pyx_fuse_0__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 783, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_v_result = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":785
 *     result = _decode_recursive(reader, &c0)
 *     try:
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             pass
 *         elif not some:
 */
__pyx_t_3 = (__pyx_v_c0 < 0);
if (__pyx_t_3) {
goto __pyx_L10;
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_3 = (!(__pyx_v_some != 0));
if (__pyx_t_3) {

/* "src/_decoder.pyx":788
 *             pass
 *         elif not some:
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 788, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":789
 *         elif not some:
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":790
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_0__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 790, __pyx_L4_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":792
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":793
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)             # <<<<<<<<<<<<<<
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_extra_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 793, __pyx_L4_error)

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L10;
}

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_9 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_9 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 794, __pyx_L4_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_9 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":795
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 795, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":796
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":797
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unframed_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 797, __pyx_L4_error)

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
}
__pyx_L10:;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L9_try_end;
__pyx_L4_error:;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(11, 798, __pyx_L6_except_error)
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_INCREF(__pyx_t_11);
__pyx_v_ex = __pyx_t_11;
/*try:*/ {

/* "src/_decoder.pyx":799
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":800
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
__Pyx_GIVEREF(__pyx_t_5);
__Pyx_GIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_11, __pyx_t_12);
__pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; 
__PYX_ERR(11, 800, __pyx_L17_error)
}

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L17_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L6_except_error;
}
}
}
goto __pyx_L6_except_error;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
__pyx_L6_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L9_try_end:;
}

/* "src/_decoder.pyx":802
 *         raise
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, bool __pyx_v_some) {
Py_ssize_t __pyx_v_start;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_result = 0;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
bool __pyx_t_9;
int __pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_all_sub", 1);

/* "src/_decoder.pyx":778
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 778, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":779
 * 
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 779, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":781
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)             # <<<<<<<<<<<<<<
 * 
 *     result = _decode_recursive(reader, &c0)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_no_data(__pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 781, __pyx_L1_error)

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
}

/* "src/_decoder.pyx":783
 *         _raise_no_data(start)
 * 
 *     result = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *     try:
 *         if c0 < 0:
 */
__pyx_t_5 = __pyx_fuse_1__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 783, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_v_result = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":785
 *     result = _decode_recursive(reader, &c0)
 *     try:
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             pass
 *         elif not some:
 */
__pyx_t_3 = (__pyx_v_c0 < 0);
if (__pyx_t_3) {
goto __pyx_L10;
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_3 = (!(__pyx_v_some != 0));
if (__pyx_t_3) {

/* "src/_decoder.pyx":788
 *             pass
 *         elif not some:
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 788, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":789
 *         elif not some:
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":790
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_1__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 790, __pyx_L4_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":792
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":793
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)             # <<<<<<<<<<<<<<
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_extra_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 793, __pyx_L4_error)

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L10;
}

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_9 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_9 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 794, __pyx_L4_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_9 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":795
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 795, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":796
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":797
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unframed_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 797, __pyx_L4_error)

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
}
__pyx_L10:;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L9_try_end;
__pyx_L4_error:;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(11, 798, __pyx_L6_except_error)
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_INCREF(__pyx_t_11);
__pyx_v_ex = __pyx_t_11;
/*try:*/ {

/* "src/_decoder.pyx":799
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":800
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
__Pyx_GIVEREF(__pyx_t_5);
__Pyx_GIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_11, __pyx_t_12);
__pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; 
__PYX_ERR(11, 800, __pyx_L17_error)
}

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L17_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L6_except_error;
}
}
}
goto __pyx_L6_except_error;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
__pyx_L6_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L9_try_end:;
}

/* "src/_decoder.pyx":802
 *         raise
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, bool __pyx_v_some) {
Py_ssize_t __pyx_v_start;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_result = 0;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
bool __pyx_t_9;
int __pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_all_sub", 1);

/* "src/_decoder.pyx":778
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 778, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":779
 * 
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 779, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":781
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)             # <<<<<<<<<<<<<<
 * 
 *     result = _decode_recursive(reader, &c0)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_no_data(__pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 781, __pyx_L1_error)

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
}

/* "src/_decoder.pyx":783
 *         _raise_no_data(start)
 * 
 *     result = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *     try:
 *         if c0 < 0:
 */
__pyx_t_5 = __pyx_fuse_2__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 783, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_v_result = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":785
 *     result = _decode_recursive(reader, &c0)
 *     try:
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             pass
 *         elif not some:
 */
__pyx_t_3 = (__pyx_v_c0 < 0);
if (__pyx_t_3) {
goto __pyx_L10;
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_3 = (!(__pyx_v_some != 0));
if (__pyx_t_3) {

/* "src/_decoder.pyx":788
 *             pass
 *         elif not some:
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 788, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":789
 *         elif not some:
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":790
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_2__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 790, __pyx_L4_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":792
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":793
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)             # <<<<<<<<<<<<<<
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_extra_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 793, __pyx_L4_error)

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L10;
}

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_9 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_9 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 794, __pyx_L4_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_9 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":795
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 795, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":796
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":797
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unframed_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 797, __pyx_L4_error)

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
}
__pyx_L10:;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L9_try_end;
__pyx_L4_error:;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(11, 798, __pyx_L6_except_error)
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_INCREF(__pyx_t_11);
__pyx_v_ex = __pyx_t_11;
/*try:*/ {

/* "src/_decoder.pyx":799
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":800
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
__Pyx_GIVEREF(__pyx_t_5);
__Pyx_GIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_11, __pyx_t_12);
__pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; 
__PYX_ERR(11, 800, __pyx_L17_error)
}

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L17_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L6_except_error;
}
}
}
goto __pyx_L6_except_error;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
__pyx_L6_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L9_try_end:;
}

/* "src/_decoder.pyx":802
 *         raise
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, bool __pyx_v_some) {
Py_ssize_t __pyx_v_start;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_result = 0;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
bool __pyx_t_9;
int __pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_all_sub", 1);

/* "src/_decoder.pyx":778
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 778, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":779
 * 
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 779, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":781
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)             # <<<<<<<<<<<<<<
 * 
 *     result = _decode_recursive(reader, &c0)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_no_data(__pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 781, __pyx_L1_error)

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
}

/* "src/_decoder.pyx":783
 *         _raise_no_data(start)
 * 
 *     result = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *     try:
 *         if c0 < 0:
 */
__pyx_t_5 = __pyx_fuse_3__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 783, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_v_result = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":785
 *     result = _decode_recursive(reader, &c0)
 *     try:
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             pass
 *         elif not some:
 */
__pyx_t_3 = (__pyx_v_c0 < 0);
if (__pyx_t_3) {
goto __pyx_L10;
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_3 = (!(__pyx_v_some != 0));
if (__pyx_t_3) {

/* "src/_decoder.pyx":788
 *             pass
 *         elif not some:
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 788, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":789
 *         elif not some:
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":790
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_3__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 790, __pyx_L4_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":792
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":793
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)             # <<<<<<<<<<<<<<
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_extra_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 793, __pyx_L4_error)

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L10;
}

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_9 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_9 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 794, __pyx_L4_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_9 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":795
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 */
__pyx_t_1 = __pyx_fuse_3__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 795, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":796
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":797
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unframed_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 797, __pyx_L4_error)

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
}
__pyx_L10:;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L9_try_end;
__pyx_L4_error:;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(11, 798, __pyx_L6_except_error)
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_INCREF(__pyx_t_11);
__pyx_v_ex = __pyx_t_11;
/*try:*/ {

/* "src/_decoder.pyx":799
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":800
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
__Pyx_GIVEREF(__pyx_t_5);
__Pyx_GIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_11, __pyx_t_12);
__pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; 
__PYX_ERR(11, 800, __pyx_L17_error)
}

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L17_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L6_except_error;
}
}
}
goto __pyx_L6_except_error;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
__pyx_L6_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L9_try_end:;
}

/* "src/_decoder.pyx":802
 *         raise
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_all_sub(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, bool __pyx_v_some) {
Py_ssize_t __pyx_v_start;
std::int32_t __pyx_v_c0;
std::uint32_t __pyx_v_c1;
PyObject *__pyx_v_result = 0;
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
Py_ssize_t __pyx_t_1;
std::int32_t __pyx_t_2;
int __pyx_t_3;
JSON5EncoderCpp::AlwaysTrue __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
bool __pyx_t_9;
int __pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
int __pyx_t_13;
char const *__pyx_t_14;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
PyObject *__pyx_t_20 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_all_sub", 1);

/* "src/_decoder.pyx":778
 *     cdef object ex
 * 
 *     start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 778, __pyx_L1_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":779
 * 
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)             # <<<<<<<<<<<<<<
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data(__pyx_v_reader); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 779, __pyx_L1_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":781
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):
 *         _raise_no_data(start)             # <<<<<<<<<<<<<<
 * 
 *     result = _decode_recursive(reader, &c0)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_no_data(__pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 781, __pyx_L1_error)

/* "src/_decoder.pyx":780
 *     start = _reader_tell(reader)
 *     c0 = _skip_to_data(reader)
 *     if expect(c0 < 0, False):             # <<<<<<<<<<<<<<
 *         _raise_no_data(start)
 * 
 */
}

/* "src/_decoder.pyx":783
 *         _raise_no_data(start)
 * 
 *     result = _decode_recursive(reader, &c0)             # <<<<<<<<<<<<<<
 *     try:
 *         if c0 < 0:
 */
__pyx_t_5 = __pyx_fuse_4__pyx_f_7pyjson5__decode_recursive(__pyx_v_reader, (&__pyx_v_c0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 783, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_v_result = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_XGOTREF(__pyx_t_8);
/*try:*/ {

/* "src/_decoder.pyx":785
 *     result = _decode_recursive(reader, &c0)
 *     try:
 *         if c0 < 0:             # <<<<<<<<<<<<<<
 *             pass
 *         elif not some:
 */
__pyx_t_3 = (__pyx_v_c0 < 0);
if (__pyx_t_3) {
goto __pyx_L10;
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_3 = (!(__pyx_v_some != 0));
if (__pyx_t_3) {

/* "src/_decoder.pyx":788
 *             pass
 *         elif not some:
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 788, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":789
 *         elif not some:
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":790
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)             # <<<<<<<<<<<<<<
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 */
__pyx_t_2 = __pyx_fuse_4__pyx_f_7pyjson5__skip_to_data_sub(__pyx_v_reader, __pyx_v_c1); if (unlikely(__pyx_t_2 == ((std::int32_t)-2L))) __PYX_ERR(11, 790, __pyx_L4_error)
__pyx_v_c0 = __pyx_t_2;

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_c0 >= 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":792
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":793
 *             if expect(c0 >= 0, False):
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)             # <<<<<<<<<<<<<<
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_extra_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 793, __pyx_L4_error)

/* "src/_decoder.pyx":791
 *             c1 = cast_to_uint32(c0)
 *             c0 = _skip_to_data_sub(reader, c1)
 *             if expect(c0 >= 0, False):             # <<<<<<<<<<<<<<
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 */
}

/* "src/_decoder.pyx":787
 *         if c0 < 0:
 *             pass
 *         elif not some:             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
goto __pyx_L10;
}

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
__pyx_t_9 = __pyx_f_7pyjson5__is_ws_zs(__pyx_v_c0); if (unlikely(__pyx_t_9 == ((bool)-1) && PyErr_Occurred())) __PYX_ERR(11, 794, __pyx_L4_error)
__pyx_t_3 = (JSON5EncoderCpp_expect((!(__pyx_t_9 != 0)), 0) != 0);
if (__pyx_t_3) {

/* "src/_decoder.pyx":795
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)             # <<<<<<<<<<<<<<
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 */
__pyx_t_1 = __pyx_fuse_4__pyx_f_7pyjson5__reader_tell(__pyx_v_reader); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 795, __pyx_L4_error)
__pyx_v_start = __pyx_t_1;

/* "src/_decoder.pyx":796
 *         elif expect(not _is_ws_zs(c0), False):
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)             # <<<<<<<<<<<<<<
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 */
__pyx_v_c1 = JSON5EncoderCpp::cast_to_uint32(__pyx_v_c0);

/* "src/_decoder.pyx":797
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 */
__pyx_t_4 = __pyx_f_7pyjson5__raise_unframed_data(__pyx_v_c1, __pyx_v_start); if (unlikely(__pyx_t_4 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 797, __pyx_L4_error)

/* "src/_decoder.pyx":794
 *                 c1 = cast_to_uint32(c0)
 *                 _raise_extra_data(c1, start)
 *         elif expect(not _is_ws_zs(c0), False):             # <<<<<<<<<<<<<<
 *             start = _reader_tell(reader)
 *             c1 = cast_to_uint32(c0)
 */
}
__pyx_L10:;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
}
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
goto __pyx_L9_try_end;
__pyx_L4_error:;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
__pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_10) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(11, 798, __pyx_L6_except_error)
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_INCREF(__pyx_t_11);
__pyx_v_ex = __pyx_t_11;
/*try:*/ {

/* "src/_decoder.pyx":799
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result             # <<<<<<<<<<<<<<
 *         raise
 * 
 */
__Pyx_INCREF(__pyx_v_result);
__Pyx_GIVEREF(__pyx_v_result);
__Pyx_GOTREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
__Pyx_DECREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result);
((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result = __pyx_v_result;

/* "src/_decoder.pyx":800
 *     except _DecoderException as ex:
 *         (<_DecoderException> ex).result = result
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
__Pyx_GIVEREF(__pyx_t_5);
__Pyx_GIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_11, __pyx_t_12);
__pyx_t_5 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; 
__PYX_ERR(11, 800, __pyx_L17_error)
}

/* "src/_decoder.pyx":798
 *             c1 = cast_to_uint32(c0)
 *             _raise_unframed_data(c1, start)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         (<_DecoderException> ex).result = result
 *         raise
 */
/*finally:*/ {
__pyx_L17_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__Pyx_XGOTREF(__pyx_t_20);
__pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_XGIVEREF(__pyx_t_20);
  __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
}
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
__pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
__pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
goto __pyx_L6_except_error;
}
}
}
goto __pyx_L6_except_error;

/* "src/_decoder.pyx":784
 * 
 *     result = _decode_recursive(reader, &c0)
 *     try:             # <<<<<<<<<<<<<<
 *         if c0 < 0:
 *             pass
 */
__pyx_L6_except_error:;
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_7);
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
goto __pyx_L1_error;
__pyx_L9_try_end:;
}

/* "src/_decoder.pyx":802
 *         raise
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_decoder.pyx":771
 * 
 * 
 * cdef object _decode_all_sub(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start
 *     cdef int32_t c0
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_11);
__Pyx_XDECREF(__pyx_t_12);
__Pyx_AddTraceback("pyjson5._decode_all_sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

static PyObject *__pyx_fuse_0__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS1Ref __pyx_v_reader, bool __pyx_v_some) {
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_v_ex2 = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
unsigned int __pyx_t_11;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_decode_all", 1);

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_decoder.pyx":808
 *     cdef object ex, ex2
 *     try:
 *         return _decode_all_sub(reader, some)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         ex2 = (<_DecoderException> ex).cls(
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_fuse_0__pyx_f_7pyjson5__decode_all_sub(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 808, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L7_try_return;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
}
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_0_decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(11, 809, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__pyx_v_ex = __pyx_t_6;
/*try:*/ {

/* "src/_decoder.pyx":813
 *             (<_DecoderException> ex).msg,
 *             (<_DecoderException> ex).result,
 *             (<_DecoderException> ex).extra,             # <<<<<<<<<<<<<<
 *         )
 *     raise ex2
 */
__Pyx_INCREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls);
__pyx_t_9 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls; __pyx_t_10 = NULL;
__pyx_t_11 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_9))) {
__pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
if (likely(__pyx_t_10)) {
  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
  __Pyx_INCREF(__pyx_t_10);
  __Pyx_INCREF(function);
  __Pyx_DECREF_SET(__pyx_t_9, function);
  __pyx_t_11 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_10, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->msg, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->extra};
__pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 810, __pyx_L14_error)
__Pyx_GOTREF(__pyx_t_8);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
}
__pyx_v_ex2 = __pyx_t_8;
__pyx_t_8 = 0;
}

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
/*finally:*/ {
/*normal exit:*/{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
goto __pyx_L15;
}
__pyx_L14_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_5 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L5_except_error;
}
__pyx_L15:;
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L4_exception_handled;
}
goto __pyx_L5_except_error;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L7_try_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L4_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
}

/* "src/_decoder.pyx":815
 *             (<_DecoderException> ex).extra,
 *         )
 *     raise ex2             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_Raise(__pyx_v_ex2, 0, 0, 0);
__PYX_ERR(11, 815, __pyx_L1_error)

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_AddTraceback("pyjson5._decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XDECREF(__pyx_v_ex2);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_1__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS2Ref __pyx_v_reader, bool __pyx_v_some) {
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_v_ex2 = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
unsigned int __pyx_t_11;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_decode_all", 1);

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_decoder.pyx":808
 *     cdef object ex, ex2
 *     try:
 *         return _decode_all_sub(reader, some)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         ex2 = (<_DecoderException> ex).cls(
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_fuse_1__pyx_f_7pyjson5__decode_all_sub(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 808, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L7_try_return;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
}
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_1_decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(11, 809, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__pyx_v_ex = __pyx_t_6;
/*try:*/ {

/* "src/_decoder.pyx":813
 *             (<_DecoderException> ex).msg,
 *             (<_DecoderException> ex).result,
 *             (<_DecoderException> ex).extra,             # <<<<<<<<<<<<<<
 *         )
 *     raise ex2
 */
__Pyx_INCREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls);
__pyx_t_9 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls; __pyx_t_10 = NULL;
__pyx_t_11 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_9))) {
__pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
if (likely(__pyx_t_10)) {
  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
  __Pyx_INCREF(__pyx_t_10);
  __Pyx_INCREF(function);
  __Pyx_DECREF_SET(__pyx_t_9, function);
  __pyx_t_11 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_10, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->msg, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->extra};
__pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 810, __pyx_L14_error)
__Pyx_GOTREF(__pyx_t_8);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
}
__pyx_v_ex2 = __pyx_t_8;
__pyx_t_8 = 0;
}

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
/*finally:*/ {
/*normal exit:*/{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
goto __pyx_L15;
}
__pyx_L14_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_5 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L5_except_error;
}
__pyx_L15:;
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L4_exception_handled;
}
goto __pyx_L5_except_error;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L7_try_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L4_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
}

/* "src/_decoder.pyx":815
 *             (<_DecoderException> ex).extra,
 *         )
 *     raise ex2             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_Raise(__pyx_v_ex2, 0, 0, 0);
__PYX_ERR(11, 815, __pyx_L1_error)

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_AddTraceback("pyjson5._decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XDECREF(__pyx_v_ex2);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_2__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUCS4Ref __pyx_v_reader, bool __pyx_v_some) {
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_v_ex2 = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
unsigned int __pyx_t_11;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_decode_all", 1);

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_decoder.pyx":808
 *     cdef object ex, ex2
 *     try:
 *         return _decode_all_sub(reader, some)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         ex2 = (<_DecoderException> ex).cls(
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_fuse_2__pyx_f_7pyjson5__decode_all_sub(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 808, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L7_try_return;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
}
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_2_decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(11, 809, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__pyx_v_ex = __pyx_t_6;
/*try:*/ {

/* "src/_decoder.pyx":813
 *             (<_DecoderException> ex).msg,
 *             (<_DecoderException> ex).result,
 *             (<_DecoderException> ex).extra,             # <<<<<<<<<<<<<<
 *         )
 *     raise ex2
 */
__Pyx_INCREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls);
__pyx_t_9 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls; __pyx_t_10 = NULL;
__pyx_t_11 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_9))) {
__pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
if (likely(__pyx_t_10)) {
  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
  __Pyx_INCREF(__pyx_t_10);
  __Pyx_INCREF(function);
  __Pyx_DECREF_SET(__pyx_t_9, function);
  __pyx_t_11 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_10, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->msg, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->extra};
__pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 810, __pyx_L14_error)
__Pyx_GOTREF(__pyx_t_8);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
}
__pyx_v_ex2 = __pyx_t_8;
__pyx_t_8 = 0;
}

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
/*finally:*/ {
/*normal exit:*/{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
goto __pyx_L15;
}
__pyx_L14_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_5 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L5_except_error;
}
__pyx_L15:;
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L4_exception_handled;
}
goto __pyx_L5_except_error;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L7_try_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L4_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
}

/* "src/_decoder.pyx":815
 *             (<_DecoderException> ex).extra,
 *         )
 *     raise ex2             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_Raise(__pyx_v_ex2, 0, 0, 0);
__PYX_ERR(11, 815, __pyx_L1_error)

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_AddTraceback("pyjson5._decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XDECREF(__pyx_v_ex2);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_3__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderUTF8Ref __pyx_v_reader, bool __pyx_v_some) {
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_v_ex2 = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
unsigned int __pyx_t_11;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_3_decode_all", 1);

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_decoder.pyx":808
 *     cdef object ex, ex2
 *     try:
 *         return _decode_all_sub(reader, some)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         ex2 = (<_DecoderException> ex).cls(
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_fuse_3__pyx_f_7pyjson5__decode_all_sub(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 808, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L7_try_return;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
}
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_3_decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(11, 809, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__pyx_v_ex = __pyx_t_6;
/*try:*/ {

/* "src/_decoder.pyx":813
 *             (<_DecoderException> ex).msg,
 *             (<_DecoderException> ex).result,
 *             (<_DecoderException> ex).extra,             # <<<<<<<<<<<<<<
 *         )
 *     raise ex2
 */
__Pyx_INCREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls);
__pyx_t_9 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls; __pyx_t_10 = NULL;
__pyx_t_11 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_9))) {
__pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
if (likely(__pyx_t_10)) {
  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
  __Pyx_INCREF(__pyx_t_10);
  __Pyx_INCREF(function);
  __Pyx_DECREF_SET(__pyx_t_9, function);
  __pyx_t_11 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_10, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->msg, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->extra};
__pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 810, __pyx_L14_error)
__Pyx_GOTREF(__pyx_t_8);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
}
__pyx_v_ex2 = __pyx_t_8;
__pyx_t_8 = 0;
}

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
/*finally:*/ {
/*normal exit:*/{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
goto __pyx_L15;
}
__pyx_L14_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_5 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L5_except_error;
}
__pyx_L15:;
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L4_exception_handled;
}
goto __pyx_L5_except_error;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L7_try_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L4_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
}

/* "src/_decoder.pyx":815
 *             (<_DecoderException> ex).extra,
 *         )
 *     raise ex2             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_Raise(__pyx_v_ex2, 0, 0, 0);
__PYX_ERR(11, 815, __pyx_L1_error)

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_AddTraceback("pyjson5._decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XDECREF(__pyx_v_ex2);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_fuse_4__pyx_f_7pyjson5__decode_all(__pyx_t_7pyjson5_ReaderCallbackRef __pyx_v_reader, bool __pyx_v_some) {
PyObject *__pyx_v_ex = 0;
PyObject *__pyx_v_ex2 = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
unsigned int __pyx_t_11;
int __pyx_t_12;
char const *__pyx_t_13;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
PyObject *__pyx_t_19 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_4_decode_all", 1);

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_decoder.pyx":808
 *     cdef object ex, ex2
 *     try:
 *         return _decode_all_sub(reader, some)             # <<<<<<<<<<<<<<
 *     except _DecoderException as ex:
 *         ex2 = (<_DecoderException> ex).cls(
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __pyx_fuse_4__pyx_f_7pyjson5__decode_all_sub(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 808, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L7_try_return;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
}
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)__pyx_ptype_7pyjson5__DecoderException));
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5.__pyx_fuse_4_decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(11, 809, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__pyx_v_ex = __pyx_t_6;
/*try:*/ {

/* "src/_decoder.pyx":813
 *             (<_DecoderException> ex).msg,
 *             (<_DecoderException> ex).result,
 *             (<_DecoderException> ex).extra,             # <<<<<<<<<<<<<<
 *         )
 *     raise ex2
 */
__Pyx_INCREF(((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls);
__pyx_t_9 = ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->cls; __pyx_t_10 = NULL;
__pyx_t_11 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_9))) {
__pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
if (likely(__pyx_t_10)) {
  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
  __Pyx_INCREF(__pyx_t_10);
  __Pyx_INCREF(function);
  __Pyx_DECREF_SET(__pyx_t_9, function);
  __pyx_t_11 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_10, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->msg, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->result, ((struct __pyx_obj_7pyjson5__DecoderException *)__pyx_v_ex)->extra};
__pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 3+__pyx_t_11);
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 810, __pyx_L14_error)
__Pyx_GOTREF(__pyx_t_8);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
}
__pyx_v_ex2 = __pyx_t_8;
__pyx_t_8 = 0;
}

/* "src/_decoder.pyx":809
 *     try:
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:             # <<<<<<<<<<<<<<
 *         ex2 = (<_DecoderException> ex).cls(
 *             (<_DecoderException> ex).msg,
 */
/*finally:*/ {
/*normal exit:*/{
__Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
goto __pyx_L15;
}
__pyx_L14_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
__Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__Pyx_XGOTREF(__pyx_t_19);
__pyx_t_5 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
{
  __Pyx_DECREF(__pyx_v_ex); __pyx_v_ex = 0;
}
if (PY_MAJOR_VERSION >= 3) {
  __Pyx_XGIVEREF(__pyx_t_17);
  __Pyx_XGIVEREF(__pyx_t_18);
  __Pyx_XGIVEREF(__pyx_t_19);
  __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
}
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
__pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
goto __pyx_L5_except_error;
}
__pyx_L15:;
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L4_exception_handled;
}
goto __pyx_L5_except_error;

/* "src/_decoder.pyx":807
 * cdef object _decode_all(ReaderRef reader, boolean some):
 *     cdef object ex, ex2
 *     try:             # <<<<<<<<<<<<<<
 *         return _decode_all_sub(reader, some)
 *     except _DecoderException as ex:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L7_try_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L4_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
}

/* "src/_decoder.pyx":815
 *             (<_DecoderException> ex).extra,
 *         )
 *     raise ex2             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_Raise(__pyx_v_ex2, 0, 0, 0);
__PYX_ERR(11, 815, __pyx_L1_error)

/* "src/_decoder.pyx":805
 * 
 * 
 * cdef object _decode_all(ReaderRef reader, boolean some):             # <<<<<<<<<<<<<<
 *     cdef object ex, ex2
 *     try:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_XDECREF(__pyx_t_10);
__Pyx_AddTraceback("pyjson5._decode_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_ex);
__Pyx_XDECREF(__pyx_v_ex2);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":818
 * 
 * 
 * cdef object _decode_ucs1(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS1 reader = ReaderUCS1(
 */

static PyObject *__pyx_f_7pyjson5__decode_ucs1(void const *__pyx_v_string, Py_ssize_t __pyx_v_length, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
struct __pyx_t_7pyjson5_ReaderUCS1 __pyx_v_reader;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_ReaderUCS1 __pyx_t_1;
struct __pyx_t_7pyjson5_ReaderUCS __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_ucs1", 1);

/* "src/_decoder.pyx":821
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS1 reader = ReaderUCS1(
 *         ReaderUCS(length, 0, maxdepth),             # <<<<<<<<<<<<<<
 *         <const Py_UCS1*> string,
 *     )
 */
__pyx_t_2.remaining = __pyx_v_length;
__pyx_t_2.position = 0;
__pyx_t_2.maxdepth = __pyx_v_maxdepth;
__pyx_t_1.base = __pyx_t_2;

/* "src/_decoder.pyx":822
 *     cdef ReaderUCS1 reader = ReaderUCS1(
 *         ReaderUCS(length, 0, maxdepth),
 *         <const Py_UCS1*> string,             # <<<<<<<<<<<<<<
 *     )
 *     return _decode_all(reader, some)
 */
__pyx_t_1.string = ((Py_UCS1 const *)__pyx_v_string);
__pyx_v_reader = __pyx_t_1;

/* "src/_decoder.pyx":824
 *         <const Py_UCS1*> string,
 *     )
 *     return _decode_all(reader, some)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_fuse_0__pyx_f_7pyjson5__decode_all(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 824, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":818
 * 
 * 
 * cdef object _decode_ucs1(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS1 reader = ReaderUCS1(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_ucs1", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":827
 * 
 * 
 * cdef object _decode_ucs2(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS2 reader = ReaderUCS2(
 */

static PyObject *__pyx_f_7pyjson5__decode_ucs2(void const *__pyx_v_string, Py_ssize_t __pyx_v_length, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
struct __pyx_t_7pyjson5_ReaderUCS2 __pyx_v_reader;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_ReaderUCS2 __pyx_t_1;
struct __pyx_t_7pyjson5_ReaderUCS __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_ucs2", 1);

/* "src/_decoder.pyx":830
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS2 reader = ReaderUCS2(
 *         ReaderUCS(length, 0, maxdepth),             # <<<<<<<<<<<<<<
 *         <const Py_UCS2*> string,
 *     )
 */
__pyx_t_2.remaining = __pyx_v_length;
__pyx_t_2.position = 0;
__pyx_t_2.maxdepth = __pyx_v_maxdepth;
__pyx_t_1.base = __pyx_t_2;

/* "src/_decoder.pyx":831
 *     cdef ReaderUCS2 reader = ReaderUCS2(
 *         ReaderUCS(length, 0, maxdepth),
 *         <const Py_UCS2*> string,             # <<<<<<<<<<<<<<
 *     )
 *     return _decode_all(reader, some)
 */
__pyx_t_1.string = ((Py_UCS2 const *)__pyx_v_string);
__pyx_v_reader = __pyx_t_1;

/* "src/_decoder.pyx":833
 *         <const Py_UCS2*> string,
 *     )
 *     return _decode_all(reader, some)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_fuse_1__pyx_f_7pyjson5__decode_all(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 833, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":827
 * 
 * 
 * cdef object _decode_ucs2(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS2 reader = ReaderUCS2(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_ucs2", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":836
 * 
 * 
 * cdef object _decode_ucs4(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS4 reader = ReaderUCS4(
 */

static PyObject *__pyx_f_7pyjson5__decode_ucs4(void const *__pyx_v_string, Py_ssize_t __pyx_v_length, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
struct __pyx_t_7pyjson5_ReaderUCS4 __pyx_v_reader;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_ReaderUCS4 __pyx_t_1;
struct __pyx_t_7pyjson5_ReaderUCS __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_ucs4", 1);

/* "src/_decoder.pyx":839
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS4 reader = ReaderUCS4(
 *         ReaderUCS(length, 0, maxdepth),             # <<<<<<<<<<<<<<
 *         <const Py_UCS4*> string,
 *     )
 */
__pyx_t_2.remaining = __pyx_v_length;
__pyx_t_2.position = 0;
__pyx_t_2.maxdepth = __pyx_v_maxdepth;
__pyx_t_1.base = __pyx_t_2;

/* "src/_decoder.pyx":840
 *     cdef ReaderUCS4 reader = ReaderUCS4(
 *         ReaderUCS(length, 0, maxdepth),
 *         <const Py_UCS4*> string,             # <<<<<<<<<<<<<<
 *     )
 *     return _decode_all(reader, some)
 */
__pyx_t_1.string = ((Py_UCS4 const *)__pyx_v_string);
__pyx_v_reader = __pyx_t_1;

/* "src/_decoder.pyx":842
 *         <const Py_UCS4*> string,
 *     )
 *     return _decode_all(reader, some)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_fuse_2__pyx_f_7pyjson5__decode_all(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 842, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":836
 * 
 * 
 * cdef object _decode_ucs4(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUCS4 reader = ReaderUCS4(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_ucs4", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":845
 * 
 * 
 * cdef object _decode_utf8(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUTF8 reader = ReaderUTF8(
 */

static PyObject *__pyx_f_7pyjson5__decode_utf8(void const *__pyx_v_string, Py_ssize_t __pyx_v_length, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
struct __pyx_t_7pyjson5_ReaderUTF8 __pyx_v_reader;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_ReaderUTF8 __pyx_t_1;
struct __pyx_t_7pyjson5_ReaderUCS __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_utf8", 1);

/* "src/_decoder.pyx":848
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUTF8 reader = ReaderUTF8(
 *         ReaderUCS(length, 0, maxdepth),             # <<<<<<<<<<<<<<
 *         <const Py_UCS1*> string,
 *     )
 */
__pyx_t_2.remaining = __pyx_v_length;
__pyx_t_2.position = 0;
__pyx_t_2.maxdepth = __pyx_v_maxdepth;
__pyx_t_1.base = __pyx_t_2;

/* "src/_decoder.pyx":849
 *     cdef ReaderUTF8 reader = ReaderUTF8(
 *         ReaderUCS(length, 0, maxdepth),
 *         <const Py_UCS1*> string,             # <<<<<<<<<<<<<<
 *     )
 *     return _decode_all(reader, some)
 */
__pyx_t_1.string = ((Py_UCS1 const *)__pyx_v_string);
__pyx_v_reader = __pyx_t_1;

/* "src/_decoder.pyx":851
 *         <const Py_UCS1*> string,
 *     )
 *     return _decode_all(reader, some)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_fuse_3__pyx_f_7pyjson5__decode_all(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 851, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":845
 * 
 * 
 * cdef object _decode_utf8(const void *string, Py_ssize_t length,             # <<<<<<<<<<<<<<
 *                          Py_ssize_t maxdepth, boolean some):
 *     cdef ReaderUTF8 reader = ReaderUTF8(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":854
 * 
 * 
 * cdef object _decode_unicode(object data, Py_ssize_t maxdepth, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef int kind
 */

static PyObject *__pyx_f_7pyjson5__decode_unicode(PyObject *__pyx_v_data, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
Py_ssize_t __pyx_v_length;
int __pyx_v_kind;
char const *__pyx_v_s;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
char const *__pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_unicode", 1);

/* "src/_decoder.pyx":859
 *     cdef const char *s
 * 
 *     PyUnicode_READY(data)             # <<<<<<<<<<<<<<
 * 
 *     if CYTHON_COMPILING_IN_PYPY:
 */
__pyx_t_1 = PyUnicode_READY(__pyx_v_data); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(11, 859, __pyx_L1_error)

/* "src/_decoder.pyx":861
 *     PyUnicode_READY(data)
 * 
 *     if CYTHON_COMPILING_IN_PYPY:             # <<<<<<<<<<<<<<
 *         length = 0
 *         s = PyUnicode_AsUTF8AndSize(data, &length)
 */
if (CYTHON_COMPILING_IN_PYPY) {

/* "src/_decoder.pyx":862
 * 
 *     if CYTHON_COMPILING_IN_PYPY:
 *         length = 0             # <<<<<<<<<<<<<<
 *         s = PyUnicode_AsUTF8AndSize(data, &length)
 *         return _decode_utf8(s, length, maxdepth, some)
 */
__pyx_v_length = 0;

/* "src/_decoder.pyx":863
 *     if CYTHON_COMPILING_IN_PYPY:
 *         length = 0
 *         s = PyUnicode_AsUTF8AndSize(data, &length)             # <<<<<<<<<<<<<<
 *         return _decode_utf8(s, length, maxdepth, some)
 * 
 */
__pyx_t_2 = PyUnicode_AsUTF8AndSize(__pyx_v_data, (&__pyx_v_length)); if (unlikely(__pyx_t_2 == ((char const *)NULL))) __PYX_ERR(11, 863, __pyx_L1_error)
__pyx_v_s = __pyx_t_2;

/* "src/_decoder.pyx":864
 *         length = 0
 *         s = PyUnicode_AsUTF8AndSize(data, &length)
 *         return _decode_utf8(s, length, maxdepth, some)             # <<<<<<<<<<<<<<
 * 
 *     length = PyUnicode_GET_LENGTH(data)
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_f_7pyjson5__decode_utf8(__pyx_v_s, __pyx_v_length, __pyx_v_maxdepth, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 864, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":861
 *     PyUnicode_READY(data)
 * 
 *     if CYTHON_COMPILING_IN_PYPY:             # <<<<<<<<<<<<<<
 *         length = 0
 *         s = PyUnicode_AsUTF8AndSize(data, &length)
 */
}

/* "src/_decoder.pyx":866
 *         return _decode_utf8(s, length, maxdepth, some)
 * 
 *     length = PyUnicode_GET_LENGTH(data)             # <<<<<<<<<<<<<<
 *     kind = PyUnicode_KIND(data)
 * 
 */
__pyx_v_length = PyUnicode_GET_LENGTH(__pyx_v_data);

/* "src/_decoder.pyx":867
 * 
 *     length = PyUnicode_GET_LENGTH(data)
 *     kind = PyUnicode_KIND(data)             # <<<<<<<<<<<<<<
 * 
 *     if kind == PyUnicode_1BYTE_KIND:
 */
__pyx_v_kind = PyUnicode_KIND(__pyx_v_data);

/* "src/_decoder.pyx":869
 *     kind = PyUnicode_KIND(data)
 * 
 *     if kind == PyUnicode_1BYTE_KIND:             # <<<<<<<<<<<<<<
 *         return _decode_ucs1(PyUnicode_1BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_2BYTE_KIND:
 */
switch (__pyx_v_kind) {
case PyUnicode_1BYTE_KIND:

/* "src/_decoder.pyx":870
 * 
 *     if kind == PyUnicode_1BYTE_KIND:
 *         return _decode_ucs1(PyUnicode_1BYTE_DATA(data), length, maxdepth, some)             # <<<<<<<<<<<<<<
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         return _decode_ucs2(PyUnicode_2BYTE_DATA(data), length, maxdepth, some)
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_f_7pyjson5__decode_ucs1(PyUnicode_1BYTE_DATA(__pyx_v_data), __pyx_v_length, __pyx_v_maxdepth, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 870, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":869
 *     kind = PyUnicode_KIND(data)
 * 
 *     if kind == PyUnicode_1BYTE_KIND:             # <<<<<<<<<<<<<<
 *         return _decode_ucs1(PyUnicode_1BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_2BYTE_KIND:
 */
break;
case PyUnicode_2BYTE_KIND:

/* "src/_decoder.pyx":872
 *         return _decode_ucs1(PyUnicode_1BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         return _decode_ucs2(PyUnicode_2BYTE_DATA(data), length, maxdepth, some)             # <<<<<<<<<<<<<<
 *     elif kind == PyUnicode_4BYTE_KIND:
 *         return _decode_ucs4(PyUnicode_4BYTE_DATA(data), length, maxdepth, some)
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_f_7pyjson5__decode_ucs2(PyUnicode_2BYTE_DATA(__pyx_v_data), __pyx_v_length, __pyx_v_maxdepth, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 872, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":871
 *     if kind == PyUnicode_1BYTE_KIND:
 *         return _decode_ucs1(PyUnicode_1BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_2BYTE_KIND:             # <<<<<<<<<<<<<<
 *         return _decode_ucs2(PyUnicode_2BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_4BYTE_KIND:
 */
break;
case PyUnicode_4BYTE_KIND:

/* "src/_decoder.pyx":874
 *         return _decode_ucs2(PyUnicode_2BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_4BYTE_KIND:
 *         return _decode_ucs4(PyUnicode_4BYTE_DATA(data), length, maxdepth, some)             # <<<<<<<<<<<<<<
 *     else:
 *         unreachable()
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_f_7pyjson5__decode_ucs4(PyUnicode_4BYTE_DATA(__pyx_v_data), __pyx_v_length, __pyx_v_maxdepth, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 874, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":873
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         return _decode_ucs2(PyUnicode_2BYTE_DATA(data), length, maxdepth, some)
 *     elif kind == PyUnicode_4BYTE_KIND:             # <<<<<<<<<<<<<<
 *         return _decode_ucs4(PyUnicode_4BYTE_DATA(data), length, maxdepth, some)
 *     else:
 */
break;
default:

/* "src/_decoder.pyx":876
 *         return _decode_ucs4(PyUnicode_4BYTE_DATA(data), length, maxdepth, some)
 *     else:
 *         unreachable()             # <<<<<<<<<<<<<<
 * 
 * 
 */
JSON5EncoderCpp::unreachable();
break;
}

/* "src/_decoder.pyx":854
 * 
 * 
 * cdef object _decode_unicode(object data, Py_ssize_t maxdepth, boolean some):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef int kind
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":879
 * 
 * 
 * cdef object _decode_buffer(Py_buffer &view, int32_t wordlength,             # <<<<<<<<<<<<<<
 *                            Py_ssize_t maxdepth, boolean some):
 *     cdef object (*decoder)(const void*, Py_ssize_t, Py_ssize_t, boolean)
 */

static PyObject *__pyx_f_7pyjson5__decode_buffer(Py_buffer &__pyx_v_view, std::int32_t __pyx_v_wordlength, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
PyObject *(*__pyx_v_decoder)(void const *, Py_ssize_t, Py_ssize_t, bool);
Py_ssize_t __pyx_v_length;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
JSON5EncoderCpp::AlwaysTrue __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_buffer", 1);

/* "src/_decoder.pyx":882
 *                            Py_ssize_t maxdepth, boolean some):
 *     cdef object (*decoder)(const void*, Py_ssize_t, Py_ssize_t, boolean)
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 * 
 *     if wordlength == 0:
 */
__pyx_v_length = 0;

/* "src/_decoder.pyx":884
 *     cdef Py_ssize_t length = 0
 * 
 *     if wordlength == 0:             # <<<<<<<<<<<<<<
 *         decoder = _decode_utf8
 *         length = view.len // 1
 */
switch (__pyx_v_wordlength) {
case 0:

/* "src/_decoder.pyx":885
 * 
 *     if wordlength == 0:
 *         decoder = _decode_utf8             # <<<<<<<<<<<<<<
 *         length = view.len // 1
 *     elif wordlength == 1:
 */
__pyx_v_decoder = __pyx_f_7pyjson5__decode_utf8;

/* "src/_decoder.pyx":886
 *     if wordlength == 0:
 *         decoder = _decode_utf8
 *         length = view.len // 1             # <<<<<<<<<<<<<<
 *     elif wordlength == 1:
 *         decoder = _decode_ucs1
 */
__pyx_v_length = __Pyx_div_Py_ssize_t(__pyx_v_view.len, 1);

/* "src/_decoder.pyx":884
 *     cdef Py_ssize_t length = 0
 * 
 *     if wordlength == 0:             # <<<<<<<<<<<<<<
 *         decoder = _decode_utf8
 *         length = view.len // 1
 */
break;
case 1:

/* "src/_decoder.pyx":888
 *         length = view.len // 1
 *     elif wordlength == 1:
 *         decoder = _decode_ucs1             # <<<<<<<<<<<<<<
 *         length = view.len // 1
 *     elif wordlength == 2:
 */
__pyx_v_decoder = __pyx_f_7pyjson5__decode_ucs1;

/* "src/_decoder.pyx":889
 *     elif wordlength == 1:
 *         decoder = _decode_ucs1
 *         length = view.len // 1             # <<<<<<<<<<<<<<
 *     elif wordlength == 2:
 *         decoder = _decode_ucs2
 */
__pyx_v_length = __Pyx_div_Py_ssize_t(__pyx_v_view.len, 1);

/* "src/_decoder.pyx":887
 *         decoder = _decode_utf8
 *         length = view.len // 1
 *     elif wordlength == 1:             # <<<<<<<<<<<<<<
 *         decoder = _decode_ucs1
 *         length = view.len // 1
 */
break;
case 2:

/* "src/_decoder.pyx":891
 *         length = view.len // 1
 *     elif wordlength == 2:
 *         decoder = _decode_ucs2             # <<<<<<<<<<<<<<
 *         length = view.len // 2
 *     elif wordlength == 4:
 */
__pyx_v_decoder = __pyx_f_7pyjson5__decode_ucs2;

/* "src/_decoder.pyx":892
 *     elif wordlength == 2:
 *         decoder = _decode_ucs2
 *         length = view.len // 2             # <<<<<<<<<<<<<<
 *     elif wordlength == 4:
 *         decoder = _decode_ucs4
 */
__pyx_v_length = __Pyx_div_Py_ssize_t(__pyx_v_view.len, 2);

/* "src/_decoder.pyx":890
 *         decoder = _decode_ucs1
 *         length = view.len // 1
 *     elif wordlength == 2:             # <<<<<<<<<<<<<<
 *         decoder = _decode_ucs2
 *         length = view.len // 2
 */
break;
case 4:

/* "src/_decoder.pyx":894
 *         length = view.len // 2
 *     elif wordlength == 4:
 *         decoder = _decode_ucs4             # <<<<<<<<<<<<<<
 *         length = view.len // 4
 *     else:
 */
__pyx_v_decoder = __pyx_f_7pyjson5__decode_ucs4;

/* "src/_decoder.pyx":895
 *     elif wordlength == 4:
 *         decoder = _decode_ucs4
 *         length = view.len // 4             # <<<<<<<<<<<<<<
 *     else:
 *         _raise_illegal_wordlength(wordlength)
 */
__pyx_v_length = __Pyx_div_Py_ssize_t(__pyx_v_view.len, 4);

/* "src/_decoder.pyx":893
 *         decoder = _decode_ucs2
 *         length = view.len // 2
 *     elif wordlength == 4:             # <<<<<<<<<<<<<<
 *         decoder = _decode_ucs4
 *         length = view.len // 4
 */
break;
default:

/* "src/_decoder.pyx":897
 *         length = view.len // 4
 *     else:
 *         _raise_illegal_wordlength(wordlength)             # <<<<<<<<<<<<<<
 *         unreachable()
 *         length = 0
 */
__pyx_t_1 = __pyx_f_7pyjson5__raise_illegal_wordlength(__pyx_v_wordlength); if (unlikely(__pyx_t_1 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(11, 897, __pyx_L1_error)

/* "src/_decoder.pyx":898
 *     else:
 *         _raise_illegal_wordlength(wordlength)
 *         unreachable()             # <<<<<<<<<<<<<<
 *         length = 0
 *         decoder = NULL
 */
JSON5EncoderCpp::unreachable();

/* "src/_decoder.pyx":899
 *         _raise_illegal_wordlength(wordlength)
 *         unreachable()
 *         length = 0             # <<<<<<<<<<<<<<
 *         decoder = NULL
 * 
 */
__pyx_v_length = 0;

/* "src/_decoder.pyx":900
 *         unreachable()
 *         length = 0
 *         decoder = NULL             # <<<<<<<<<<<<<<
 * 
 *     return decoder(view.buf, length, maxdepth, some)
 */
__pyx_v_decoder = NULL;
break;
}

/* "src/_decoder.pyx":902
 *         decoder = NULL
 * 
 *     return decoder(view.buf, length, maxdepth, some)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_2 = __pyx_v_decoder(__pyx_v_view.buf, __pyx_v_length, __pyx_v_maxdepth, __pyx_v_some); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 902, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_r = __pyx_t_2;
__pyx_t_2 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":879
 * 
 * 
 * cdef object _decode_buffer(Py_buffer &view, int32_t wordlength,             # <<<<<<<<<<<<<<
 *                            Py_ssize_t maxdepth, boolean some):
 *     cdef object (*decoder)(const void*, Py_ssize_t, Py_ssize_t, boolean)
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_AddTraceback("pyjson5._decode_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_decoder.pyx":905
 * 
 * 
 * cdef object _decode_callback(object cb, object args, Py_ssize_t maxdepth,             # <<<<<<<<<<<<<<
 *                              boolean some):
 *     cdef ReaderCallback reader = ReaderCallback(
 */

static PyObject *__pyx_f_7pyjson5__decode_callback(PyObject *__pyx_v_cb, PyObject *__pyx_v_args, Py_ssize_t __pyx_v_maxdepth, bool __pyx_v_some) {
struct __pyx_t_7pyjson5_ReaderCallback __pyx_v_reader;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_ReaderCallback __pyx_t_1;
struct __pyx_t_7pyjson5_ReaderCallbackBase __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_decode_callback", 1);

/* "src/_decoder.pyx":908
 *                              boolean some):
 *     cdef ReaderCallback reader = ReaderCallback(
 *         ReaderCallbackBase(0, maxdepth),             # <<<<<<<<<<<<<<
 *         <PyObject*> cb,
 *         <PyObject*> args,
 */
__pyx_t_2.position = 0;
__pyx_t_2.maxdepth = __pyx_v_maxdepth;
__pyx_t_1.base = __pyx_t_2;

/* "src/_decoder.pyx":909
 *     cdef ReaderCallback reader = ReaderCallback(
 *         ReaderCallbackBase(0, maxdepth),
 *         <PyObject*> cb,             # <<<<<<<<<<<<<<
 *         <PyObject*> args,
 *         -1,
 */
__pyx_t_1.callback = ((PyObject *)__pyx_v_cb);

/* "src/_decoder.pyx":910
 *         ReaderCallbackBase(0, maxdepth),
 *         <PyObject*> cb,
 *         <PyObject*> args,             # <<<<<<<<<<<<<<
 *         -1,
 *     )
 */
__pyx_t_1.args = ((PyObject *)__pyx_v_args);
__pyx_t_1.lookahead = -1L;
__pyx_v_reader = __pyx_t_1;

/* "src/_decoder.pyx":913
 *         -1,
 *     )
 *     return _decode_all(reader, some)             # <<<<<<<<<<<<<<
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __pyx_fuse_4__pyx_f_7pyjson5__decode_all(__pyx_v_reader, __pyx_v_some); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 913, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_decoder.pyx":905
 * 
 * 
 * cdef object _decode_callback(object cb, object args, Py_ssize_t maxdepth,             # <<<<<<<<<<<<<<
 *                              boolean some):
 *     cdef ReaderCallback reader = ReaderCallback(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._decode_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_writer_reallocatable.pyx":8
 * 
 * 
 * cdef boolean _WriterReallocatable_reserve(WriterRef writer_, size_t amount) except False:             # <<<<<<<<<<<<<<
 *     cdef size_t current_size
 *     cdef size_t needed_size
 */

static bool __pyx_f_7pyjson5__WriterReallocatable_reserve(__pyx_t_7pyjson5_WriterRef __pyx_v_writer_, size_t __pyx_v_amount) {
size_t __pyx_v_current_size;
size_t __pyx_v_needed_size;
size_t __pyx_v_new_size;
void *__pyx_v_temp;
struct __pyx_t_7pyjson5_WriterReallocatable *__pyx_v_writer;
bool __pyx_r;
int __pyx_t_1;
size_t __pyx_t_2;
JSON5EncoderCpp::AlwaysTrue __pyx_t_3;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_writer_reallocatable.pyx":13
 *     cdef size_t new_size
 *     cdef void *temp
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     if expect(amount <= 0, False):
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterReallocatable *)(&__pyx_v_writer_));

/* "src/_writer_reallocatable.pyx":15
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 *     if expect(amount <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_amount <= 0), 0) != 0);
if (__pyx_t_1) {

/* "src/_writer_reallocatable.pyx":16
 * 
 *     if expect(amount <= 0, False):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     needed_size = writer.position + amount
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":15
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 *     if expect(amount <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
}

/* "src/_writer_reallocatable.pyx":18
 *         return True
 * 
 *     needed_size = writer.position + amount             # <<<<<<<<<<<<<<
 *     current_size = writer.length
 *     if expect(needed_size < current_size, True):
 */
__pyx_v_needed_size = (__pyx_v_writer->position + __pyx_v_amount);

/* "src/_writer_reallocatable.pyx":19
 * 
 *     needed_size = writer.position + amount
 *     current_size = writer.length             # <<<<<<<<<<<<<<
 *     if expect(needed_size < current_size, True):
 *         return True
 */
__pyx_t_2 = __pyx_v_writer->length;
__pyx_v_current_size = __pyx_t_2;

/* "src/_writer_reallocatable.pyx":20
 *     needed_size = writer.position + amount
 *     current_size = writer.length
 *     if expect(needed_size < current_size, True):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_needed_size < __pyx_v_current_size), 1) != 0);
if (__pyx_t_1) {

/* "src/_writer_reallocatable.pyx":21
 *     current_size = writer.length
 *     if expect(needed_size < current_size, True):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     new_size = current_size
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":20
 *     needed_size = writer.position + amount
 *     current_size = writer.length
 *     if expect(needed_size < current_size, True):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
}

/* "src/_writer_reallocatable.pyx":23
 *         return True
 * 
 *     new_size = current_size             # <<<<<<<<<<<<<<
 *     while new_size <= needed_size:
 *         new_size = (new_size + 32) + (new_size // 4)
 */
__pyx_v_new_size = __pyx_v_current_size;

/* "src/_writer_reallocatable.pyx":24
 * 
 *     new_size = current_size
 *     while new_size <= needed_size:             # <<<<<<<<<<<<<<
 *         new_size = (new_size + 32) + (new_size // 4)
 *         if expect(new_size < current_size, False):
 */
while (1) {
__pyx_t_1 = (__pyx_v_new_size <= __pyx_v_needed_size);
if (!__pyx_t_1) break;

/* "src/_writer_reallocatable.pyx":25
 *     new_size = current_size
 *     while new_size <= needed_size:
 *         new_size = (new_size + 32) + (new_size // 4)             # <<<<<<<<<<<<<<
 *         if expect(new_size < current_size, False):
 *             ErrNoMemory()
 */
__pyx_v_new_size = ((__pyx_v_new_size + 32) + (__pyx_v_new_size / 4));

/* "src/_writer_reallocatable.pyx":26
 *     while new_size <= needed_size:
 *         new_size = (new_size + 32) + (new_size // 4)
 *         if expect(new_size < current_size, False):             # <<<<<<<<<<<<<<
 *             ErrNoMemory()
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_new_size < __pyx_v_current_size), 0) != 0);
if (__pyx_t_1) {

/* "src/_writer_reallocatable.pyx":27
 *         new_size = (new_size + 32) + (new_size // 4)
 *         if expect(new_size < current_size, False):
 *             ErrNoMemory()             # <<<<<<<<<<<<<<
 * 
 *     temp = ObjectRealloc(writer.obj, new_size + 1)
 */
__pyx_t_3 = PyErr_NoMemory(); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(12, 27, __pyx_L1_error)

/* "src/_writer_reallocatable.pyx":26
 *     while new_size <= needed_size:
 *         new_size = (new_size + 32) + (new_size // 4)
 *         if expect(new_size < current_size, False):             # <<<<<<<<<<<<<<
 *             ErrNoMemory()
 * 
 */
}
}

/* "src/_writer_reallocatable.pyx":29
 *             ErrNoMemory()
 * 
 *     temp = ObjectRealloc(writer.obj, new_size + 1)             # <<<<<<<<<<<<<<
 *     if temp is NULL:
 *         ErrNoMemory()
 */
__pyx_v_temp = PyObject_Realloc(__pyx_v_writer->obj, (__pyx_v_new_size + 1));

/* "src/_writer_reallocatable.pyx":30
 * 
 *     temp = ObjectRealloc(writer.obj, new_size + 1)
 *     if temp is NULL:             # <<<<<<<<<<<<<<
 *         ErrNoMemory()
 * 
 */
__pyx_t_1 = (__pyx_v_temp == NULL);
if (__pyx_t_1) {

/* "src/_writer_reallocatable.pyx":31
 *     temp = ObjectRealloc(writer.obj, new_size + 1)
 *     if temp is NULL:
 *         ErrNoMemory()             # <<<<<<<<<<<<<<
 * 
 *     writer.obj = temp
 */
__pyx_t_3 = PyErr_NoMemory(); if (unlikely(__pyx_t_3 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(12, 31, __pyx_L1_error)

/* "src/_writer_reallocatable.pyx":30
 * 
 *     temp = ObjectRealloc(writer.obj, new_size + 1)
 *     if temp is NULL:             # <<<<<<<<<<<<<<
 *         ErrNoMemory()
 * 
 */
}

/* "src/_writer_reallocatable.pyx":33
 *         ErrNoMemory()
 * 
 *     writer.obj = temp             # <<<<<<<<<<<<<<
 *     writer.length = new_size
 * 
 */
__pyx_v_writer->obj = __pyx_v_temp;

/* "src/_writer_reallocatable.pyx":34
 * 
 *     writer.obj = temp
 *     writer.length = new_size             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_v_writer->length = __pyx_v_new_size;

/* "src/_writer_reallocatable.pyx":36
 *     writer.length = new_size
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":8
 * 
 * 
 * cdef boolean _WriterReallocatable_reserve(WriterRef writer_, size_t amount) except False:             # <<<<<<<<<<<<<<
 *     cdef size_t current_size
 *     cdef size_t needed_size
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._WriterReallocatable_reserve", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

/* "src/_writer_reallocatable.pyx":39
 * 
 * 
 * cdef boolean _WriterReallocatable_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterReallocatable_append_c(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char __pyx_v_datum) {
struct __pyx_t_7pyjson5_WriterReallocatable *__pyx_v_writer;
bool __pyx_r;
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_writer_reallocatable.pyx":40
 * 
 * cdef boolean _WriterReallocatable_append_c(Writer &writer_, char datum) except False:
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     _WriterReallocatable_reserve(writer.base, 1)
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterReallocatable *)(&__pyx_v_writer_));

/* "src/_writer_reallocatable.pyx":42
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 *     _WriterReallocatable_reserve(writer.base, 1)             # <<<<<<<<<<<<<<
 *     (<char*> writer.obj)[writer.position] = datum
 *     writer.position += 1
 */
__pyx_t_1 = __pyx_f_7pyjson5__WriterReallocatable_reserve(__pyx_v_writer->base, 1); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(12, 42, __pyx_L1_error)

/* "src/_writer_reallocatable.pyx":43
 * 
 *     _WriterReallocatable_reserve(writer.base, 1)
 *     (<char*> writer.obj)[writer.position] = datum             # <<<<<<<<<<<<<<
 *     writer.position += 1
 * 
 */
(((char *)__pyx_v_writer->obj)[__pyx_v_writer->position]) = __pyx_v_datum;

/* "src/_writer_reallocatable.pyx":44
 *     _WriterReallocatable_reserve(writer.base, 1)
 *     (<char*> writer.obj)[writer.position] = datum
 *     writer.position += 1             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_v_writer->position = (__pyx_v_writer->position + 1);

/* "src/_writer_reallocatable.pyx":46
 *     writer.position += 1
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":39
 * 
 * 
 * cdef boolean _WriterReallocatable_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._WriterReallocatable_append_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

/* "src/_writer_reallocatable.pyx":49
 * 
 * 
 * cdef boolean _WriterReallocatable_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterReallocatable_append_s(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char const *__pyx_v_s, Py_ssize_t __pyx_v_length) {
struct __pyx_t_7pyjson5_WriterReallocatable *__pyx_v_writer;
bool __pyx_r;
int __pyx_t_1;
bool __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_writer_reallocatable.pyx":50
 * 
 * cdef boolean _WriterReallocatable_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     if expect(length <= 0, False):
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterReallocatable *)(&__pyx_v_writer_));

/* "src/_writer_reallocatable.pyx":52
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_length <= 0), 0) != 0);
if (__pyx_t_1) {

/* "src/_writer_reallocatable.pyx":53
 * 
 *     if expect(length <= 0, False):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     _WriterReallocatable_reserve(writer.base, length)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":52
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
}

/* "src/_writer_reallocatable.pyx":55
 *         return True
 * 
 *     _WriterReallocatable_reserve(writer.base, length)             # <<<<<<<<<<<<<<
 *     memcpy(&(<char*> writer.obj)[writer.position], s, length)
 *     writer.position += length
 */
__pyx_t_2 = __pyx_f_7pyjson5__WriterReallocatable_reserve(__pyx_v_writer->base, __pyx_v_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(12, 55, __pyx_L1_error)

/* "src/_writer_reallocatable.pyx":56
 * 
 *     _WriterReallocatable_reserve(writer.base, length)
 *     memcpy(&(<char*> writer.obj)[writer.position], s, length)             # <<<<<<<<<<<<<<
 *     writer.position += length
 * 
 */
std::memcpy((&(((char *)__pyx_v_writer->obj)[__pyx_v_writer->position])), __pyx_v_s, __pyx_v_length);

/* "src/_writer_reallocatable.pyx":57
 *     _WriterReallocatable_reserve(writer.base, length)
 *     memcpy(&(<char*> writer.obj)[writer.position], s, length)
 *     writer.position += length             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_v_writer->position = (__pyx_v_writer->position + __pyx_v_length);

/* "src/_writer_reallocatable.pyx":59
 *     writer.position += length
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_reallocatable.pyx":49
 * 
 * 
 * cdef boolean _WriterReallocatable_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable *writer = <WriterReallocatable*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._WriterReallocatable_append_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
return __pyx_r;
}

/* "src/_writer_callback.pyx":6
 * 
 * 
 * cdef boolean _WriterCbBytes_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterCbBytes_append_c(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char __pyx_v_datum) {
struct __pyx_t_7pyjson5_WriterCallback *__pyx_v_writer;
bool __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_WriterCbBytes_append_c", 1);

/* "src/_writer_callback.pyx":7
 * 
 * cdef boolean _WriterCbBytes_append_c(Writer &writer_, char datum) except False:
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     CallFunction(writer.callback, b'c', datum)
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterCallback *)(&__pyx_v_writer_));

/* "src/_writer_callback.pyx":9
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     CallFunction(writer.callback, b'c', datum)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_1 = PyObject_CallFunction(__pyx_v_writer->callback, ((char const *)"c"), __pyx_v_datum); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 9, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_writer_callback.pyx":11
 *     CallFunction(writer.callback, b'c', datum)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":6
 * 
 * 
 * cdef boolean _WriterCbBytes_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._WriterCbBytes_append_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_writer_callback.pyx":14
 * 
 * 
 * cdef boolean _WriterCbBytes_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterCbBytes_append_s(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char const *__pyx_v_s, Py_ssize_t __pyx_v_length) {
struct __pyx_t_7pyjson5_WriterCallback *__pyx_v_writer;
bool __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_WriterCbBytes_append_s", 1);

/* "src/_writer_callback.pyx":15
 * 
 * cdef boolean _WriterCbBytes_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     if expect(length <= 0, False):
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterCallback *)(&__pyx_v_writer_));

/* "src/_writer_callback.pyx":17
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_length <= 0), 0) != 0);
if (__pyx_t_1) {

/* "src/_writer_callback.pyx":18
 * 
 *     if expect(length <= 0, False):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     CallFunction(writer.callback, b'y#', s, <int> length)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":17
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
}

/* "src/_writer_callback.pyx":20
 *         return True
 * 
 *     CallFunction(writer.callback, b'y#', s, <int> length)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_2 = PyObject_CallFunction(__pyx_v_writer->callback, ((char const *)"y#"), __pyx_v_s, ((int)__pyx_v_length)); if (unlikely(!__pyx_t_2)) __PYX_ERR(13, 20, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_writer_callback.pyx":22
 *     CallFunction(writer.callback, b'y#', s, <int> length)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":14
 * 
 * 
 * cdef boolean _WriterCbBytes_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_AddTraceback("pyjson5._WriterCbBytes_append_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_writer_callback.pyx":25
 * 
 * 
 * cdef boolean _WriterCbStr_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterCbStr_append_c(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char __pyx_v_datum) {
struct __pyx_t_7pyjson5_WriterCallback *__pyx_v_writer;
bool __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_WriterCbStr_append_c", 1);

/* "src/_writer_callback.pyx":26
 * 
 * cdef boolean _WriterCbStr_append_c(Writer &writer_, char datum) except False:
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     CallFunction(writer.callback, b'C', datum)
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterCallback *)(&__pyx_v_writer_));

/* "src/_writer_callback.pyx":28
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     CallFunction(writer.callback, b'C', datum)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_1 = PyObject_CallFunction(__pyx_v_writer->callback, ((char const *)"C"), __pyx_v_datum); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 28, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_writer_callback.pyx":30
 *     CallFunction(writer.callback, b'C', datum)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":25
 * 
 * 
 * cdef boolean _WriterCbStr_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._WriterCbStr_append_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_writer_callback.pyx":33
 * 
 * 
 * cdef boolean _WriterCbStr_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

static bool __pyx_f_7pyjson5__WriterCbStr_append_s(struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, char const *__pyx_v_s, Py_ssize_t __pyx_v_length) {
struct __pyx_t_7pyjson5_WriterCallback *__pyx_v_writer;
bool __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_WriterCbStr_append_s", 1);

/* "src/_writer_callback.pyx":34
 * 
 * cdef boolean _WriterCbStr_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_             # <<<<<<<<<<<<<<
 * 
 *     if expect(length <= 0, False):
 */
__pyx_v_writer = ((struct __pyx_t_7pyjson5_WriterCallback *)(&__pyx_v_writer_));

/* "src/_writer_callback.pyx":36
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_1 = (JSON5EncoderCpp_expect((__pyx_v_length <= 0), 0) != 0);
if (__pyx_t_1) {

/* "src/_writer_callback.pyx":37
 * 
 *     if expect(length <= 0, False):
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     CallFunction(writer.callback, b'U#', s, <int> length)
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":36
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 *     if expect(length <= 0, False):             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
}

/* "src/_writer_callback.pyx":39
 *         return True
 * 
 *     CallFunction(writer.callback, b'U#', s, <int> length)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_2 = PyObject_CallFunction(__pyx_v_writer->callback, ((char const *)"U#"), __pyx_v_s, ((int)__pyx_v_length)); if (unlikely(!__pyx_t_2)) __PYX_ERR(13, 39, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_writer_callback.pyx":41
 *     CallFunction(writer.callback, b'U#', s, <int> length)
 * 
 *     return True             # <<<<<<<<<<<<<<
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_callback.pyx":33
 * 
 * 
 * cdef boolean _WriterCbStr_append_s(Writer &writer_, const char *s, Py_ssize_t length) except False:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback *writer = <WriterCallback*> &writer_
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_AddTraceback("pyjson5._WriterCbStr_append_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_writer_noop.pyx":5
 * 
 * 
 * cdef boolean _WriterNoop_reserve(WriterRef writer_, size_t amount) except False:             # <<<<<<<<<<<<<<
 *     return True
 * 
 */

static bool __pyx_f_7pyjson5__WriterNoop_reserve(CYTHON_UNUSED __pyx_t_7pyjson5_WriterRef __pyx_v_writer_, CYTHON_UNUSED size_t __pyx_v_amount) {
bool __pyx_r;

/* "src/_writer_noop.pyx":6
 * 
 * cdef boolean _WriterNoop_reserve(WriterRef writer_, size_t amount) except False:
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_noop.pyx":5
 * 
 * 
 * cdef boolean _WriterNoop_reserve(WriterRef writer_, size_t amount) except False:             # <<<<<<<<<<<<<<
 *     return True
 * 
 */

/* function exit code */
__pyx_L0:;
return __pyx_r;
}

/* "src/_writer_noop.pyx":9
 * 
 * 
 * cdef boolean _WriterNoop_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     return True
 * 
 */

static bool __pyx_f_7pyjson5__WriterNoop_append_c(CYTHON_UNUSED struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, CYTHON_UNUSED char __pyx_v_datum) {
bool __pyx_r;

/* "src/_writer_noop.pyx":10
 * 
 * cdef boolean _WriterNoop_append_c(Writer &writer_, char datum) except False:
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_noop.pyx":9
 * 
 * 
 * cdef boolean _WriterNoop_append_c(Writer &writer_, char datum) except False:             # <<<<<<<<<<<<<<
 *     return True
 * 
 */

/* function exit code */
__pyx_L0:;
return __pyx_r;
}

/* "src/_writer_noop.pyx":13
 * 
 * 
 * cdef boolean _WriterNoop_append_s(Writer &writer_, const char *s,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t length) except False:
 *     return True
 */

static bool __pyx_f_7pyjson5__WriterNoop_append_s(CYTHON_UNUSED struct __pyx_t_7pyjson5_Writer &__pyx_v_writer_, CYTHON_UNUSED char const *__pyx_v_s, CYTHON_UNUSED Py_ssize_t __pyx_v_length) {
bool __pyx_r;

/* "src/_writer_noop.pyx":15
 * cdef boolean _WriterNoop_append_s(Writer &writer_, const char *s,
 *                                   Py_ssize_t length) except False:
 *     return True             # <<<<<<<<<<<<<<
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_writer_noop.pyx":13
 * 
 * 
 * cdef boolean _WriterNoop_append_s(Writer &writer_, const char *s,             # <<<<<<<<<<<<<<
 *                                   Py_ssize_t length) except False:
 *     return True
 */

/* function exit code */
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder_options.pyx":8
 * 
 * 
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):             # <<<<<<<<<<<<<<
 *     if datum is False:
 *         return None
 */

static PyObject *__pyx_f_7pyjson5__options_ascii(PyObject *__pyx_v_datum, struct __pyx_opt_args_7pyjson5__options_ascii *__pyx_optional_args) {
bool __pyx_v_expect_ascii = ((bool)1);
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
int __pyx_t_4;
int __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_options_ascii", 0);
if (__pyx_optional_args) {
if (__pyx_optional_args->__pyx_n > 0) {
__pyx_v_expect_ascii = __pyx_optional_args->expect_ascii;
}
}
__Pyx_INCREF(__pyx_v_datum);

/* "src/_encoder_options.pyx":9
 * 
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):
 *     if datum is False:             # <<<<<<<<<<<<<<
 *         return None
 *     elif PyBytes_Check(datum):
 */
__pyx_t_1 = (__pyx_v_datum == Py_False);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":10
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):
 *     if datum is False:
 *         return None             # <<<<<<<<<<<<<<
 *     elif PyBytes_Check(datum):
 *         datum = unicode(datum, 'UTF-8', 'strict')
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_encoder_options.pyx":9
 * 
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):
 *     if datum is False:             # <<<<<<<<<<<<<<
 *         return None
 *     elif PyBytes_Check(datum):
 */
}

/* "src/_encoder_options.pyx":11
 *     if datum is False:
 *         return None
 *     elif PyBytes_Check(datum):             # <<<<<<<<<<<<<<
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):
 */
__pyx_t_1 = PyBytes_Check(__pyx_v_datum);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":12
 *         return None
 *     elif PyBytes_Check(datum):
 *         datum = unicode(datum, 'UTF-8', 'strict')             # <<<<<<<<<<<<<<
 *     elif not PyUnicode_Check(datum):
 *         raise TypeError('Expected str instance or False')
 */
__pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_INCREF(__pyx_v_datum);
__Pyx_GIVEREF(__pyx_v_datum);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_datum)) __PYX_ERR(3, 12, __pyx_L1_error);
__Pyx_INCREF(__pyx_kp_u_UTF_8);
__Pyx_GIVEREF(__pyx_kp_u_UTF_8);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_UTF_8)) __PYX_ERR(3, 12, __pyx_L1_error);
__Pyx_INCREF(__pyx_n_u_strict);
__Pyx_GIVEREF(__pyx_n_u_strict);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_n_u_strict)) __PYX_ERR(3, 12, __pyx_L1_error);
__pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 12, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_DECREF_SET(__pyx_v_datum, __pyx_t_3);
__pyx_t_3 = 0;

/* "src/_encoder_options.pyx":11
 *     if datum is False:
 *         return None
 *     elif PyBytes_Check(datum):             # <<<<<<<<<<<<<<
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):
 */
goto __pyx_L3;
}

/* "src/_encoder_options.pyx":13
 *     elif PyBytes_Check(datum):
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):             # <<<<<<<<<<<<<<
 *         raise TypeError('Expected str instance or False')
 * 
 */
__pyx_t_1 = (!PyUnicode_Check(__pyx_v_datum));
if (unlikely(__pyx_t_1)) {

/* "src/_encoder_options.pyx":14
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):
 *         raise TypeError('Expected str instance or False')             # <<<<<<<<<<<<<<
 * 
 *     PyUnicode_READY(datum)
 */
__pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 14, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_Raise(__pyx_t_3, 0, 0, 0);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__PYX_ERR(3, 14, __pyx_L1_error)

/* "src/_encoder_options.pyx":13
 *     elif PyBytes_Check(datum):
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):             # <<<<<<<<<<<<<<
 *         raise TypeError('Expected str instance or False')
 * 
 */
}
__pyx_L3:;

/* "src/_encoder_options.pyx":16
 *         raise TypeError('Expected str instance or False')
 * 
 *     PyUnicode_READY(datum)             # <<<<<<<<<<<<<<
 *     if expect_ascii and not PyUnicode_IS_ASCII(datum):
 *         raise ValueError('Expected ASCII data')
 */
__pyx_t_4 = PyUnicode_READY(__pyx_v_datum); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 16, __pyx_L1_error)

/* "src/_encoder_options.pyx":17
 * 
 *     PyUnicode_READY(datum)
 *     if expect_ascii and not PyUnicode_IS_ASCII(datum):             # <<<<<<<<<<<<<<
 *         raise ValueError('Expected ASCII data')
 * 
 */
__pyx_t_5 = (__pyx_v_expect_ascii != 0);
if (__pyx_t_5) {
} else {
__pyx_t_1 = __pyx_t_5;
goto __pyx_L5_bool_binop_done;
}
__pyx_t_5 = (!(PyUnicode_IS_ASCII(__pyx_v_datum) != 0));
__pyx_t_1 = __pyx_t_5;
__pyx_L5_bool_binop_done:;
if (unlikely(__pyx_t_1)) {

/* "src/_encoder_options.pyx":18
 *     PyUnicode_READY(datum)
 *     if expect_ascii and not PyUnicode_IS_ASCII(datum):
 *         raise ValueError('Expected ASCII data')             # <<<<<<<<<<<<<<
 * 
 *     return datum
 */
__pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 18, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_Raise(__pyx_t_3, 0, 0, 0);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__PYX_ERR(3, 18, __pyx_L1_error)

/* "src/_encoder_options.pyx":17
 * 
 *     PyUnicode_READY(datum)
 *     if expect_ascii and not PyUnicode_IS_ASCII(datum):             # <<<<<<<<<<<<<<
 *         raise ValueError('Expected ASCII data')
 * 
 */
}

/* "src/_encoder_options.pyx":20
 *         raise ValueError('Expected ASCII data')
 * 
 *     return datum             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_datum);
__pyx_r = __pyx_v_datum;
goto __pyx_L0;

/* "src/_encoder_options.pyx":8
 * 
 * 
 * cdef object _options_ascii(object datum, boolean expect_ascii=True):             # <<<<<<<<<<<<<<
 *     if datum is False:
 *         return None
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._options_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_datum);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":23
 * 
 * 
 * cdef object _options_reduce_arg(object key, object value, object default):             # <<<<<<<<<<<<<<
 *     if value != default:
 *         if value is not None:
 */

static PyObject *__pyx_f_7pyjson5__options_reduce_arg(PyObject *__pyx_v_key, PyObject *__pyx_v_value, PyObject *__pyx_v_default) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_options_reduce_arg", 1);

/* "src/_encoder_options.pyx":24
 * 
 * cdef object _options_reduce_arg(object key, object value, object default):
 *     if value != default:             # <<<<<<<<<<<<<<
 *         if value is not None:
 *             return key, value
 */
__pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_v_default, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 24, __pyx_L1_error)
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(3, 24, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
if (__pyx_t_2) {

/* "src/_encoder_options.pyx":25
 * cdef object _options_reduce_arg(object key, object value, object default):
 *     if value != default:
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             return key, value
 *         else:
 */
__pyx_t_2 = (__pyx_v_value != Py_None);
if (__pyx_t_2) {

/* "src/_encoder_options.pyx":26
 *     if value != default:
 *         if value is not None:
 *             return key, value             # <<<<<<<<<<<<<<
 *         else:
 *             return key, False
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 26, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_INCREF(__pyx_v_key);
__Pyx_GIVEREF(__pyx_v_key);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_key)) __PYX_ERR(3, 26, __pyx_L1_error);
__Pyx_INCREF(__pyx_v_value);
__Pyx_GIVEREF(__pyx_v_value);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_value)) __PYX_ERR(3, 26, __pyx_L1_error);
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":25
 * cdef object _options_reduce_arg(object key, object value, object default):
 *     if value != default:
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             return key, value
 *         else:
 */
}

/* "src/_encoder_options.pyx":28
 *             return key, value
 *         else:
 *             return key, False             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*else*/ {
__Pyx_XDECREF(__pyx_r);
__pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 28, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_INCREF(__pyx_v_key);
__Pyx_GIVEREF(__pyx_v_key);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_key)) __PYX_ERR(3, 28, __pyx_L1_error);
__Pyx_INCREF(Py_False);
__Pyx_GIVEREF(Py_False);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, Py_False)) __PYX_ERR(3, 28, __pyx_L1_error);
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;
}

/* "src/_encoder_options.pyx":24
 * 
 * cdef object _options_reduce_arg(object key, object value, object default):
 *     if value != default:             # <<<<<<<<<<<<<<
 *         if value is not None:
 *             return key, value
 */
}

/* "src/_encoder_options.pyx":23
 * 
 * 
 * cdef object _options_reduce_arg(object key, object value, object default):             # <<<<<<<<<<<<<<
 *     if value != default:
 *         if value is not None:
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._options_reduce_arg", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":31
 * 
 * 
 * cdef object _option_from_ascii(object name, object value, object default):             # <<<<<<<<<<<<<<
 *     if value == default:
 *         return
 */

static PyObject *__pyx_f_7pyjson5__option_from_ascii(PyObject *__pyx_v_name, PyObject *__pyx_v_value, PyObject *__pyx_v_default) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
Py_ssize_t __pyx_t_4;
Py_UCS4 __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_option_from_ascii", 1);

/* "src/_encoder_options.pyx":32
 * 
 * cdef object _option_from_ascii(object name, object value, object default):
 *     if value == default:             # <<<<<<<<<<<<<<
 *         return
 *     elif value is None:
 */
__pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_v_default, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(3, 32, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
if (__pyx_t_2) {

/* "src/_encoder_options.pyx":33
 * cdef object _option_from_ascii(object name, object value, object default):
 *     if value == default:
 *         return             # <<<<<<<<<<<<<<
 *     elif value is None:
 *         return f'{name}=False'
 */
__Pyx_XDECREF(__pyx_r);
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;

/* "src/_encoder_options.pyx":32
 * 
 * cdef object _option_from_ascii(object name, object value, object default):
 *     if value == default:             # <<<<<<<<<<<<<<
 *         return
 *     elif value is None:
 */
}

/* "src/_encoder_options.pyx":34
 *     if value == default:
 *         return
 *     elif value is None:             # <<<<<<<<<<<<<<
 *         return f'{name}=False'
 *     else:
 */
__pyx_t_2 = (__pyx_v_value == Py_None);
if (__pyx_t_2) {

/* "src/_encoder_options.pyx":35
 *         return
 *     elif value is None:
 *         return f'{name}=False'             # <<<<<<<<<<<<<<
 *     else:
 *         return f'{name}={value!r}'
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 35, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_1, __pyx_kp_u_False); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 35, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":34
 *     if value == default:
 *         return
 *     elif value is None:             # <<<<<<<<<<<<<<
 *         return f'{name}=False'
 *     else:
 */
}

/* "src/_encoder_options.pyx":37
 *         return f'{name}=False'
 *     else:
 *         return f'{name}={value!r}'             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*else*/ {
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_t_4 = 0;
__pyx_t_5 = 127;
__pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_name, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 37, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
__pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
__Pyx_GIVEREF(__pyx_t_1);
PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
__pyx_t_1 = 0;
__Pyx_INCREF(__pyx_kp_u__3);
__pyx_t_4 += 1;
__Pyx_GIVEREF(__pyx_kp_u__3);
PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__3);
__pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_value), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 37, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
__pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
__Pyx_GIVEREF(__pyx_t_1);
PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
__pyx_t_1 = 0;
__pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 37, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;
}

/* "src/_encoder_options.pyx":31
 * 
 * 
 * cdef object _option_from_ascii(object name, object value, object default):             # <<<<<<<<<<<<<<
 *     if value == default:
 *         return
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._option_from_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":40
 * 
 * 
 * cdef _options_from_ascii(Options self):             # <<<<<<<<<<<<<<
 *     return ', '.join(filter(bool, (
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */

static PyObject *__pyx_f_7pyjson5__options_from_ascii(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_options_from_ascii", 1);

/* "src/_encoder_options.pyx":41
 * 
 * cdef _options_from_ascii(Options self):
 *     return ', '.join(filter(bool, (             # <<<<<<<<<<<<<<
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *         _option_from_ascii('tojson', self.tojson, None),
 */
__Pyx_XDECREF(__pyx_r);

/* "src/_encoder_options.pyx":42
 * cdef _options_from_ascii(Options self):
 *     return ', '.join(filter(bool, (
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),             # <<<<<<<<<<<<<<
 *         _option_from_ascii('tojson', self.tojson, None),
 *     )))
 */
__pyx_t_1 = __pyx_v_self->quotationmark;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = __pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_3 = __pyx_f_7pyjson5__option_from_ascii(__pyx_n_u_quotationmark, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 42, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_encoder_options.pyx":43
 *     return ', '.join(filter(bool, (
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *         _option_from_ascii('tojson', self.tojson, None),             # <<<<<<<<<<<<<<
 *     )))
 * 
 */
__pyx_t_2 = __pyx_v_self->tojson;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_1 = __pyx_f_7pyjson5__option_from_ascii(__pyx_n_u_tojson, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 43, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_encoder_options.pyx":42
 * cdef _options_from_ascii(Options self):
 *     return ', '.join(filter(bool, (
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),             # <<<<<<<<<<<<<<
 *         _option_from_ascii('tojson', self.tojson, None),
 *     )))
 */
__pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 42, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_3);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(3, 42, __pyx_L1_error);
__Pyx_GIVEREF(__pyx_t_1);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1)) __PYX_ERR(3, 42, __pyx_L1_error);
__pyx_t_3 = 0;
__pyx_t_1 = 0;

/* "src/_encoder_options.pyx":41
 * 
 * cdef _options_from_ascii(Options self):
 *     return ', '.join(filter(bool, (             # <<<<<<<<<<<<<<
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *         _option_from_ascii('tojson', self.tojson, None),
 */
__pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 41, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_INCREF(((PyObject*)&PyBool_Type));
__Pyx_GIVEREF(((PyObject*)&PyBool_Type));
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject*)&PyBool_Type))) __PYX_ERR(3, 41, __pyx_L1_error);
__Pyx_GIVEREF(__pyx_t_2);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2)) __PYX_ERR(3, 41, __pyx_L1_error);
__pyx_t_2 = 0;
__pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 41, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_1 = PyUnicode_Join(__pyx_kp_u__4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 41, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":40
 * 
 * 
 * cdef _options_from_ascii(Options self):             # <<<<<<<<<<<<<<
 *     return ', '.join(filter(bool, (
 *         _option_from_ascii('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._options_from_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":83
 *     '''
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_1__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_7Options___reduce__, "Options.__reduce__(self)");
static PyMethodDef __pyx_mdef_7pyjson5_7Options_1__reduce__ = {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_7Options_1__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_7Options___reduce__};
static PyObject *__pyx_pw_7pyjson5_7Options_1__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
if (unlikely(__pyx_nargs > 0)) {
__Pyx_RaiseArgtupleInvalid("__reduce__", 1, 0, 0, __pyx_nargs); return NULL;}
if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce__", 0))) return NULL;
__pyx_r = __pyx_pf_7pyjson5_7Options___reduce__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options___reduce__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_v_args = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
int __pyx_t_6;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__reduce__", 1);

/* "src/_encoder_options.pyx":85
 *     def __reduce__(self):
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),             # <<<<<<<<<<<<<<
 *             _options_reduce_arg('tojson', self.tojson, None),
 *             _options_reduce_arg('mappingtypes', self.mappingtypes, DEFAULT_MAPPINGTYPES),
 */
__pyx_t_1 = __pyx_v_self->quotationmark;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = __pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_3 = __pyx_f_7pyjson5__options_reduce_arg(__pyx_n_u_quotationmark, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 85, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_encoder_options.pyx":86
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *             _options_reduce_arg('tojson', self.tojson, None),             # <<<<<<<<<<<<<<
 *             _options_reduce_arg('mappingtypes', self.mappingtypes, DEFAULT_MAPPINGTYPES),
 *         )))
 */
__pyx_t_2 = __pyx_v_self->tojson;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_1 = __pyx_f_7pyjson5__options_reduce_arg(__pyx_n_u_tojson, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 86, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

/* "src/_encoder_options.pyx":87
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *             _options_reduce_arg('tojson', self.tojson, None),
 *             _options_reduce_arg('mappingtypes', self.mappingtypes, DEFAULT_MAPPINGTYPES),             # <<<<<<<<<<<<<<
 *         )))
 *         return (_UnpickleOptions if args else Options), args
 */
__pyx_t_2 = __pyx_v_self->mappingtypes;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_4 = __pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES;
__Pyx_INCREF(__pyx_t_4);
__pyx_t_5 = __pyx_f_7pyjson5__options_reduce_arg(__pyx_n_u_mappingtypes, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 87, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_encoder_options.pyx":85
 *     def __reduce__(self):
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),             # <<<<<<<<<<<<<<
 *             _options_reduce_arg('tojson', self.tojson, None),
 *             _options_reduce_arg('mappingtypes', self.mappingtypes, DEFAULT_MAPPINGTYPES),
 */
__pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 85, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_GIVEREF(__pyx_t_3);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(3, 85, __pyx_L1_error);
__Pyx_GIVEREF(__pyx_t_1);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error);
__Pyx_GIVEREF(__pyx_t_5);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5)) __PYX_ERR(3, 85, __pyx_L1_error);
__pyx_t_3 = 0;
__pyx_t_1 = 0;
__pyx_t_5 = 0;

/* "src/_encoder_options.pyx":84
 * 
 *     def __reduce__(self):
 *         cdef object args = tuple(filter(bool, (             # <<<<<<<<<<<<<<
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 *             _options_reduce_arg('tojson', self.tojson, None),
 */
__pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 84, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__Pyx_INCREF(((PyObject*)&PyBool_Type));
__Pyx_GIVEREF(((PyObject*)&PyBool_Type));
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject*)&PyBool_Type))) __PYX_ERR(3, 84, __pyx_L1_error);
__Pyx_GIVEREF(__pyx_t_4);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(3, 84, __pyx_L1_error);
__pyx_t_4 = 0;
__pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 84, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__pyx_t_5 = __Pyx_PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 84, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_v_args = __pyx_t_5;
__pyx_t_5 = 0;

/* "src/_encoder_options.pyx":89
 *             _options_reduce_arg('mappingtypes', self.mappingtypes, DEFAULT_MAPPINGTYPES),
 *         )))
 *         return (_UnpickleOptions if args else Options), args             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_args); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(3, 89, __pyx_L1_error)
if (__pyx_t_6) {
__Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UnpickleOptions); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 89, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_t_5 = __pyx_t_4;
__pyx_t_4 = 0;
} else {
__Pyx_INCREF((PyObject *)__pyx_ptype_7pyjson5_Options);
__pyx_t_5 = ((PyObject *)__pyx_ptype_7pyjson5_Options);
}
__pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 89, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_GIVEREF(__pyx_t_5);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(3, 89, __pyx_L1_error);
__Pyx_INCREF(__pyx_v_args);
__Pyx_GIVEREF(__pyx_v_args);
if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_args)) __PYX_ERR(3, 89, __pyx_L1_error);
__pyx_t_5 = 0;
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":83
 *     '''
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_AddTraceback("pyjson5.Options.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_args);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":91
 *         return (_UnpickleOptions if args else Options), args
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef object repr_options = _options_from_ascii(self)
 *         cdef object repr_cls = (
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_7Options_3__repr__(PyObject *__pyx_v_self) {
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
__pyx_r = __pyx_pf_7pyjson5_7Options_2__repr__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_2__repr__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_v_repr_options = 0;
PyObject *__pyx_v_repr_cls = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
Py_ssize_t __pyx_t_5;
Py_UCS4 __pyx_t_6;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__repr__", 1);

/* "src/_encoder_options.pyx":92
 * 
 *     def __repr__(self):
 *         cdef object repr_options = _options_from_ascii(self)             # <<<<<<<<<<<<<<
 *         cdef object repr_cls = (
 *             ''
 */
__pyx_t_1 = __pyx_f_7pyjson5__options_from_ascii(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_repr_options = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_encoder_options.pyx":95
 *         cdef object repr_cls = (
 *             ''
 *             if self.mappingtypes == DEFAULT_MAPPINGTYPES else             # <<<<<<<<<<<<<<
 *             repr(DEFAULT_MAPPINGTYPES)
 *         )
 */
__pyx_t_2 = PyObject_RichCompare(__pyx_v_self->mappingtypes, __pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 95, __pyx_L1_error)
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(3, 95, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
if (__pyx_t_3) {
__Pyx_INCREF(__pyx_kp_u__5);
__pyx_t_1 = __pyx_kp_u__5;
} else {

/* "src/_encoder_options.pyx":96
 *             ''
 *             if self.mappingtypes == DEFAULT_MAPPINGTYPES else
 *             repr(DEFAULT_MAPPINGTYPES)             # <<<<<<<<<<<<<<
 *         )
 *         return (f'Options('
 */
__pyx_t_2 = __pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_4 = PyObject_Repr(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 96, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__pyx_t_1 = __pyx_t_4;
__pyx_t_4 = 0;
}
__pyx_v_repr_cls = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_encoder_options.pyx":98
 *             repr(DEFAULT_MAPPINGTYPES)
 *         )
 *         return (f'Options('             # <<<<<<<<<<<<<<
 *             f'{repr_options}'
 *             f'{repr_options and repr_cls and ", "}'
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 98, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_5 = 0;
__pyx_t_6 = 127;
__Pyx_INCREF(__pyx_kp_u_Options);
__pyx_t_5 += 8;
__Pyx_GIVEREF(__pyx_kp_u_Options);
PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Options);

/* "src/_encoder_options.pyx":99
 *         )
 *         return (f'Options('
 *             f'{repr_options}'             # <<<<<<<<<<<<<<
 *             f'{repr_options and repr_cls and ", "}'
 *             f'{repr_cls}'
 */
__pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_repr_options, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 99, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_6;
__pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
__Pyx_GIVEREF(__pyx_t_4);
PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_encoder_options.pyx":100
 *         return (f'Options('
 *             f'{repr_options}'
 *             f'{repr_options and repr_cls and ", "}'             # <<<<<<<<<<<<<<
 *             f'{repr_cls}'
 *         ')')
 */
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_repr_options); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(3, 100, __pyx_L1_error)
if (__pyx_t_3) {
} else {
__Pyx_INCREF(__pyx_v_repr_options);
__pyx_t_4 = __pyx_v_repr_options;
goto __pyx_L3_bool_binop_done;
}
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_repr_cls); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(3, 100, __pyx_L1_error)
if (__pyx_t_3) {
} else {
__Pyx_INCREF(__pyx_v_repr_cls);
__pyx_t_4 = __pyx_v_repr_cls;
goto __pyx_L3_bool_binop_done;
}
__Pyx_INCREF(__pyx_kp_u__4);
__pyx_t_4 = __pyx_kp_u__4;
__pyx_L3_bool_binop_done:;
__pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 100, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
__pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
__pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_2);
PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
__pyx_t_2 = 0;

/* "src/_encoder_options.pyx":101
 *             f'{repr_options}'
 *             f'{repr_options and repr_cls and ", "}'
 *             f'{repr_cls}'             # <<<<<<<<<<<<<<
 *         ')')
 * 
 */
__pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_repr_cls, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 101, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
__pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_2);
PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
__pyx_t_2 = 0;
__Pyx_INCREF(__pyx_kp_u__6);
__pyx_t_5 += 1;
__Pyx_GIVEREF(__pyx_kp_u__6);
PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__6);

/* "src/_encoder_options.pyx":98
 *             repr(DEFAULT_MAPPINGTYPES)
 *         )
 *         return (f'Options('             # <<<<<<<<<<<<<<
 *             f'{repr_options}'
 *             f'{repr_options and repr_cls and ", "}'
 */
__pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 98, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_r = __pyx_t_2;
__pyx_t_2 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":91
 *         return (_UnpickleOptions if args else Options), args
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef object repr_options = _options_from_ascii(self)
 *         cdef object repr_cls = (
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5.Options.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_repr_options);
__Pyx_XDECREF(__pyx_v_repr_cls);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":104
 *         ')')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__repr__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_7Options_5__str__(PyObject *__pyx_v_self) {
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
__pyx_r = __pyx_pf_7pyjson5_7Options_4__str__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_4__str__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
unsigned int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__str__", 1);

/* "src/_encoder_options.pyx":105
 * 
 *     def __str__(self):
 *         return self.__repr__()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, *,
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_repr); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 105, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = NULL;
__pyx_t_4 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_3)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_3);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_4 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 105, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":104
 *         ')')
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.__repr__()
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5.Options.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":107
 *         return self.__repr__()
 * 
 *     def __cinit__(self, *,             # <<<<<<<<<<<<<<
 *                   quotationmark=None,
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 */

/* Python wrapper */
static int __pyx_pw_7pyjson5_7Options_7__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyjson5_7Options_7__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
PyObject *__pyx_v_quotationmark = 0;
PyObject *__pyx_v_tojson = 0;
CYTHON_UNUSED PyObject *__pyx_v_posinfinity = 0;
CYTHON_UNUSED PyObject *__pyx_v_neginfinity = 0;
CYTHON_UNUSED PyObject *__pyx_v_nan = 0;
CYTHON_UNUSED PyObject *__pyx_v_decimalformat = 0;
CYTHON_UNUSED PyObject *__pyx_v_intformat = 0;
PyObject *__pyx_v_mappingtypes = 0;
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[8] = {0,0,0,0,0,0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
int __pyx_r;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
#endif
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quotationmark,&__pyx_n_s_tojson,&__pyx_n_s_posinfinity,&__pyx_n_s_neginfinity,&__pyx_n_s_nan,&__pyx_n_s_decimalformat,&__pyx_n_s_intformat,&__pyx_n_s_mappingtypes,0};

/* "src/_encoder_options.pyx":108
 * 
 *     def __cinit__(self, *,
 *                   quotationmark=None,             # <<<<<<<<<<<<<<
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 *                   decimalformat=None, intformat=None,
 */
values[0] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

/* "src/_encoder_options.pyx":109
 *     def __cinit__(self, *,
 *                   quotationmark=None,
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,             # <<<<<<<<<<<<<<
 *                   decimalformat=None, intformat=None,
 *                   mappingtypes=None):
 */
values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
values[4] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

/* "src/_encoder_options.pyx":110
 *                   quotationmark=None,
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 *                   decimalformat=None, intformat=None,             # <<<<<<<<<<<<<<
 *                   mappingtypes=None):
 *         cdef object cls
 */
values[5] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
values[6] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));

/* "src/_encoder_options.pyx":111
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 *                   decimalformat=None, intformat=None,
 *                   mappingtypes=None):             # <<<<<<<<<<<<<<
 *         cdef object cls
 *         cdef object ex
 */
values[7] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
if (kw_args > 0 && likely(kw_args <= 8)) {
Py_ssize_t index;
for (index = 0; index < 8 && kw_args > 0; index++) {
PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 107, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, 0, "__cinit__") < 0)) __PYX_ERR(3, 107, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 0)) {
goto __pyx_L5_argtuple_error;
} else {
}
__pyx_v_quotationmark = values[0];
__pyx_v_tojson = values[1];
__pyx_v_posinfinity = values[2];
__pyx_v_neginfinity = values[3];
__pyx_v_nan = values[4];
__pyx_v_decimalformat = values[5];
__pyx_v_intformat = values[6];
__pyx_v_mappingtypes = values[7];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); __PYX_ERR(3, 107, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.Options.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return -1;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_7Options_6__cinit__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self), __pyx_v_quotationmark, __pyx_v_tojson, __pyx_v_posinfinity, __pyx_v_neginfinity, __pyx_v_nan, __pyx_v_decimalformat, __pyx_v_intformat, __pyx_v_mappingtypes);

/* "src/_encoder_options.pyx":107
 *         return self.__repr__()
 * 
 *     def __cinit__(self, *,             # <<<<<<<<<<<<<<
 *                   quotationmark=None,
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 */

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static int __pyx_pf_7pyjson5_7Options_6__cinit__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self, PyObject *__pyx_v_quotationmark, PyObject *__pyx_v_tojson, CYTHON_UNUSED PyObject *__pyx_v_posinfinity, CYTHON_UNUSED PyObject *__pyx_v_neginfinity, CYTHON_UNUSED PyObject *__pyx_v_nan, CYTHON_UNUSED PyObject *__pyx_v_decimalformat, CYTHON_UNUSED PyObject *__pyx_v_intformat, PyObject *__pyx_v_mappingtypes) {
PyObject *__pyx_v_cls = 0;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
struct __pyx_opt_args_7pyjson5__options_ascii __pyx_t_3;
int __pyx_t_4;
Py_ssize_t __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__cinit__", 0);
__Pyx_INCREF(__pyx_v_quotationmark);
__Pyx_INCREF(__pyx_v_tojson);
__Pyx_INCREF(__pyx_v_mappingtypes);

/* "src/_encoder_options.pyx":115
 *         cdef object ex
 * 
 *         if quotationmark is None:             # <<<<<<<<<<<<<<
 *             quotationmark = DEFAULT_QUOTATIONMARK
 *         if tojson is None:
 */
__pyx_t_1 = (__pyx_v_quotationmark == Py_None);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":116
 * 
 *         if quotationmark is None:
 *             quotationmark = DEFAULT_QUOTATIONMARK             # <<<<<<<<<<<<<<
 *         if tojson is None:
 *             tojson = DEFAULT_TOJSON
 */
__Pyx_INCREF(__pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK);
__Pyx_DECREF_SET(__pyx_v_quotationmark, __pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK);

/* "src/_encoder_options.pyx":115
 *         cdef object ex
 * 
 *         if quotationmark is None:             # <<<<<<<<<<<<<<
 *             quotationmark = DEFAULT_QUOTATIONMARK
 *         if tojson is None:
 */
}

/* "src/_encoder_options.pyx":117
 *         if quotationmark is None:
 *             quotationmark = DEFAULT_QUOTATIONMARK
 *         if tojson is None:             # <<<<<<<<<<<<<<
 *             tojson = DEFAULT_TOJSON
 *         if mappingtypes is None:
 */
__pyx_t_1 = (__pyx_v_tojson == Py_None);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":118
 *             quotationmark = DEFAULT_QUOTATIONMARK
 *         if tojson is None:
 *             tojson = DEFAULT_TOJSON             # <<<<<<<<<<<<<<
 *         if mappingtypes is None:
 *             mappingtypes = DEFAULT_MAPPINGTYPES
 */
__Pyx_INCREF(__pyx_v_7pyjson5_DEFAULT_TOJSON);
__Pyx_DECREF_SET(__pyx_v_tojson, __pyx_v_7pyjson5_DEFAULT_TOJSON);

/* "src/_encoder_options.pyx":117
 *         if quotationmark is None:
 *             quotationmark = DEFAULT_QUOTATIONMARK
 *         if tojson is None:             # <<<<<<<<<<<<<<
 *             tojson = DEFAULT_TOJSON
 *         if mappingtypes is None:
 */
}

/* "src/_encoder_options.pyx":119
 *         if tojson is None:
 *             tojson = DEFAULT_TOJSON
 *         if mappingtypes is None:             # <<<<<<<<<<<<<<
 *             mappingtypes = DEFAULT_MAPPINGTYPES
 * 
 */
__pyx_t_1 = (__pyx_v_mappingtypes == Py_None);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":120
 *             tojson = DEFAULT_TOJSON
 *         if mappingtypes is None:
 *             mappingtypes = DEFAULT_MAPPINGTYPES             # <<<<<<<<<<<<<<
 * 
 *         self.quotationmark = _options_ascii(quotationmark)
 */
__Pyx_INCREF(__pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES);
__Pyx_DECREF_SET(__pyx_v_mappingtypes, __pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES);

/* "src/_encoder_options.pyx":119
 *         if tojson is None:
 *             tojson = DEFAULT_TOJSON
 *         if mappingtypes is None:             # <<<<<<<<<<<<<<
 *             mappingtypes = DEFAULT_MAPPINGTYPES
 * 
 */
}

/* "src/_encoder_options.pyx":122
 *             mappingtypes = DEFAULT_MAPPINGTYPES
 * 
 *         self.quotationmark = _options_ascii(quotationmark)             # <<<<<<<<<<<<<<
 *         self.tojson = _options_ascii(tojson, False)
 * 
 */
__pyx_t_2 = __pyx_f_7pyjson5__options_ascii(__pyx_v_quotationmark, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 122, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(3, 122, __pyx_L1_error)
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GOTREF(__pyx_v_self->quotationmark);
__Pyx_DECREF(__pyx_v_self->quotationmark);
__pyx_v_self->quotationmark = ((PyObject*)__pyx_t_2);
__pyx_t_2 = 0;

/* "src/_encoder_options.pyx":123
 * 
 *         self.quotationmark = _options_ascii(quotationmark)
 *         self.tojson = _options_ascii(tojson, False)             # <<<<<<<<<<<<<<
 * 
 *         if self.quotationmark is None or PyUnicode_GET_LENGTH(self.quotationmark) != 1:
 */
__pyx_t_3.__pyx_n = 1;
__pyx_t_3.expect_ascii = 0;
__pyx_t_2 = __pyx_f_7pyjson5__options_ascii(__pyx_v_tojson, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 123, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(3, 123, __pyx_L1_error)
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GOTREF(__pyx_v_self->tojson);
__Pyx_DECREF(__pyx_v_self->tojson);
__pyx_v_self->tojson = ((PyObject*)__pyx_t_2);
__pyx_t_2 = 0;

/* "src/_encoder_options.pyx":125
 *         self.tojson = _options_ascii(tojson, False)
 * 
 *         if self.quotationmark is None or PyUnicode_GET_LENGTH(self.quotationmark) != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('quotationmark must be one ASCII character.')
 * 
 */
__pyx_t_4 = (__pyx_v_self->quotationmark == ((PyObject*)Py_None));
if (!__pyx_t_4) {
} else {
__pyx_t_1 = __pyx_t_4;
goto __pyx_L7_bool_binop_done;
}
__pyx_t_2 = __pyx_v_self->quotationmark;
__Pyx_INCREF(__pyx_t_2);
__pyx_t_4 = (PyUnicode_GET_LENGTH(__pyx_t_2) != 1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__pyx_t_1 = __pyx_t_4;
__pyx_L7_bool_binop_done:;
if (unlikely(__pyx_t_1)) {

/* "src/_encoder_options.pyx":126
 * 
 *         if self.quotationmark is None or PyUnicode_GET_LENGTH(self.quotationmark) != 1:
 *             raise TypeError('quotationmark must be one ASCII character.')             # <<<<<<<<<<<<<<
 * 
 *         if mappingtypes is False:
 */
__pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 126, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_Raise(__pyx_t_2, 0, 0, 0);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__PYX_ERR(3, 126, __pyx_L1_error)

/* "src/_encoder_options.pyx":125
 *         self.tojson = _options_ascii(tojson, False)
 * 
 *         if self.quotationmark is None or PyUnicode_GET_LENGTH(self.quotationmark) != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('quotationmark must be one ASCII character.')
 * 
 */
}

/* "src/_encoder_options.pyx":128
 *             raise TypeError('quotationmark must be one ASCII character.')
 * 
 *         if mappingtypes is False:             # <<<<<<<<<<<<<<
 *             self.mappingtypes = ()
 *         else:
 */
__pyx_t_1 = (__pyx_v_mappingtypes == Py_False);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":129
 * 
 *         if mappingtypes is False:
 *             self.mappingtypes = ()             # <<<<<<<<<<<<<<
 *         else:
 *             self.mappingtypes = tuple(mappingtypes)
 */
__Pyx_INCREF(__pyx_empty_tuple);
__Pyx_GIVEREF(__pyx_empty_tuple);
__Pyx_GOTREF(__pyx_v_self->mappingtypes);
__Pyx_DECREF(__pyx_v_self->mappingtypes);
__pyx_v_self->mappingtypes = __pyx_empty_tuple;

/* "src/_encoder_options.pyx":128
 *             raise TypeError('quotationmark must be one ASCII character.')
 * 
 *         if mappingtypes is False:             # <<<<<<<<<<<<<<
 *             self.mappingtypes = ()
 *         else:
 */
goto __pyx_L9;
}

/* "src/_encoder_options.pyx":131
 *             self.mappingtypes = ()
 *         else:
 *             self.mappingtypes = tuple(mappingtypes)             # <<<<<<<<<<<<<<
 *             for cls in self.mappingtypes:
 *                 if not PyType_Check(cls):
 */
/*else*/ {
__pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_v_mappingtypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 131, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_GIVEREF(__pyx_t_2);
__Pyx_GOTREF(__pyx_v_self->mappingtypes);
__Pyx_DECREF(__pyx_v_self->mappingtypes);
__pyx_v_self->mappingtypes = ((PyObject*)__pyx_t_2);
__pyx_t_2 = 0;

/* "src/_encoder_options.pyx":132
 *         else:
 *             self.mappingtypes = tuple(mappingtypes)
 *             for cls in self.mappingtypes:             # <<<<<<<<<<<<<<
 *                 if not PyType_Check(cls):
 *                     raise TypeError('mappingtypes must be a sequence of types '
 */
if (unlikely(__pyx_v_self->mappingtypes == Py_None)) {
PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
__PYX_ERR(3, 132, __pyx_L1_error)
}
__pyx_t_2 = __pyx_v_self->mappingtypes; __Pyx_INCREF(__pyx_t_2);
__pyx_t_5 = 0;
for (;;) {
{
Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
#if !CYTHON_ASSUME_SAFE_MACROS
if (unlikely((__pyx_temp < 0))) __PYX_ERR(3, 132, __pyx_L1_error)
#endif
if (__pyx_t_5 >= __pyx_temp) break;
}
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
__pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(3, 132, __pyx_L1_error)
#else
__pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 132, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
#endif
__Pyx_XDECREF_SET(__pyx_v_cls, __pyx_t_6);
__pyx_t_6 = 0;

/* "src/_encoder_options.pyx":133
 *             self.mappingtypes = tuple(mappingtypes)
 *             for cls in self.mappingtypes:
 *                 if not PyType_Check(cls):             # <<<<<<<<<<<<<<
 *                     raise TypeError('mappingtypes must be a sequence of types '
 *                                     'or False')
 */
__pyx_t_1 = (!PyType_Check(__pyx_v_cls));
if (unlikely(__pyx_t_1)) {

/* "src/_encoder_options.pyx":134
 *             for cls in self.mappingtypes:
 *                 if not PyType_Check(cls):
 *                     raise TypeError('mappingtypes must be a sequence of types '             # <<<<<<<<<<<<<<
 *                                     'or False')
 * 
 */
__pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 134, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__Pyx_Raise(__pyx_t_6, 0, 0, 0);
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__PYX_ERR(3, 134, __pyx_L1_error)

/* "src/_encoder_options.pyx":133
 *             self.mappingtypes = tuple(mappingtypes)
 *             for cls in self.mappingtypes:
 *                 if not PyType_Check(cls):             # <<<<<<<<<<<<<<
 *                     raise TypeError('mappingtypes must be a sequence of types '
 *                                     'or False')
 */
}

/* "src/_encoder_options.pyx":132
 *         else:
 *             self.mappingtypes = tuple(mappingtypes)
 *             for cls in self.mappingtypes:             # <<<<<<<<<<<<<<
 *                 if not PyType_Check(cls):
 *                     raise TypeError('mappingtypes must be a sequence of types '
 */
}
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_L9:;

/* "src/_encoder_options.pyx":107
 *         return self.__repr__()
 * 
 *     def __cinit__(self, *,             # <<<<<<<<<<<<<<
 *                   quotationmark=None,
 *                   tojson=None, posinfinity=None, neginfinity=None, nan=None,
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_AddTraceback("pyjson5.Options.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_cls);
__Pyx_XDECREF(__pyx_v_quotationmark);
__Pyx_XDECREF(__pyx_v_tojson);
__Pyx_XDECREF(__pyx_v_mappingtypes);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":137
 *                                     'or False')
 * 
 *     def update(self, *args, **kw):             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a new Options instance by modifying some members.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_9update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_7Options_8update, "Options.update(self, *args, **kw)\n\n        Creates a new Options instance by modifying some members.\n        ");
static PyMethodDef __pyx_mdef_7pyjson5_7Options_9update = {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyjson5_7Options_9update, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pyjson5_7Options_8update};
static PyObject *__pyx_pw_7pyjson5_7Options_9update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
CYTHON_UNUSED PyObject *__pyx_v_args = 0;
PyObject *__pyx_v_kw = 0;
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("update (wrapper)", 0);
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "update", 1))) return NULL;
if (unlikely(__pyx_kwds)) {
__pyx_v_kw = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
} else {
__pyx_v_kw = PyDict_New();
if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
}
__Pyx_INCREF(__pyx_args);
__pyx_v_args = __pyx_args;
__pyx_r = __pyx_pf_7pyjson5_7Options_8update(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self), __pyx_v_args, __pyx_v_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_args);
__Pyx_DECREF(__pyx_v_kw);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_8update(struct __pyx_obj_7pyjson5_Options *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("update", 1);

/* "src/_encoder_options.pyx":141
 *         Creates a new Options instance by modifying some members.
 *         '''
 *         if kw:             # <<<<<<<<<<<<<<
 *             return _to_options(self, kw)
 *         else:
 */
__pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kw); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(3, 141, __pyx_L1_error)
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":142
 *         '''
 *         if kw:
 *             return _to_options(self, kw)             # <<<<<<<<<<<<<<
 *         else:
 *             return self
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_2 = __pyx_f_7pyjson5__to_options(__pyx_v_self, __pyx_v_kw); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 142, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_r = __pyx_t_2;
__pyx_t_2 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":141
 *         Creates a new Options instance by modifying some members.
 *         '''
 *         if kw:             # <<<<<<<<<<<<<<
 *             return _to_options(self, kw)
 *         else:
 */
}

/* "src/_encoder_options.pyx":144
 *             return _to_options(self, kw)
 *         else:
 *             return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*else*/ {
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF((PyObject *)__pyx_v_self);
__pyx_r = ((PyObject *)__pyx_v_self);
goto __pyx_L0;
}

/* "src/_encoder_options.pyx":137
 *                                     'or False')
 * 
 *     def update(self, *args, **kw):             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a new Options instance by modifying some members.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_AddTraceback("pyjson5.Options.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":71
 *         * **None:** Use default: ``[collections.abc.Mapping]``.
 *     '''
 *     cdef readonly unicode quotationmark             # <<<<<<<<<<<<<<
 *     '''The creation argument ``quotationmark``.
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_13quotationmark_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_7Options_13quotationmark_1__get__(PyObject *__pyx_v_self) {
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
__pyx_r = __pyx_pf_7pyjson5_7Options_13quotationmark___get__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_13quotationmark___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__", 1);
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_self->quotationmark);
__pyx_r = __pyx_v_self->quotationmark;
goto __pyx_L0;

/* function exit code */
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":74
 *     '''The creation argument ``quotationmark``.
 *     '''
 *     cdef readonly unicode tojson             # <<<<<<<<<<<<<<
 *     '''The creation argument ``tojson``.
 *     ``None`` if ``False`` was specified.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_6tojson_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_7Options_6tojson_1__get__(PyObject *__pyx_v_self) {
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
__pyx_r = __pyx_pf_7pyjson5_7Options_6tojson___get__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_6tojson___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__", 1);
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_self->tojson);
__pyx_r = __pyx_v_self->tojson;
goto __pyx_L0;

/* function exit code */
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":78
 *     ``None`` if ``False`` was specified.
 *     '''
 *     cdef readonly tuple mappingtypes             # <<<<<<<<<<<<<<
 *     '''The creation argument ``mappingtypes``.
 *     ``()`` if ``False`` was specified.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7Options_12mappingtypes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pyjson5_7Options_12mappingtypes_1__get__(PyObject *__pyx_v_self) {
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
__pyx_r = __pyx_pf_7pyjson5_7Options_12mappingtypes___get__(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_self));

/* function exit code */
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_7Options_12mappingtypes___get__(struct __pyx_obj_7pyjson5_Options *__pyx_v_self) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("__get__", 1);
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_self->mappingtypes);
__pyx_r = __pyx_v_self->mappingtypes;
goto __pyx_L0;

/* function exit code */
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":150
 * 
 * 
 * def _UnpickleOptions(*args):             # <<<<<<<<<<<<<<
 *     if args:
 *         return _to_options(None, dict(args))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_1_UnpickleOptions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5__UnpickleOptions, "_UnpickleOptions(*args)");
static PyMethodDef __pyx_mdef_7pyjson5_1_UnpickleOptions = {"_UnpickleOptions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyjson5_1_UnpickleOptions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pyjson5__UnpickleOptions};
static PyObject *__pyx_pw_7pyjson5_1_UnpickleOptions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
PyObject *__pyx_v_args = 0;
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("_UnpickleOptions (wrapper)", 0);
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_UnpickleOptions", 0))) return NULL;
__Pyx_INCREF(__pyx_args);
__pyx_v_args = __pyx_args;
__pyx_r = __pyx_pf_7pyjson5__UnpickleOptions(__pyx_self, __pyx_v_args);

/* function exit code */
__Pyx_DECREF(__pyx_v_args);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5__UnpickleOptions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_UnpickleOptions", 1);

/* "src/_encoder_options.pyx":151
 * 
 * def _UnpickleOptions(*args):
 *     if args:             # <<<<<<<<<<<<<<
 *         return _to_options(None, dict(args))
 *     else:
 */
__pyx_t_1 = (PyTuple_GET_SIZE(__pyx_v_args) != 0);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":152
 * def _UnpickleOptions(*args):
 *     if args:
 *         return _to_options(None, dict(args))             # <<<<<<<<<<<<<<
 *     else:
 *         return DEFAULT_OPTIONS_OBJECT
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyDict_Type)), __pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 152, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)Py_None), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 152, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":151
 * 
 * def _UnpickleOptions(*args):
 *     if args:             # <<<<<<<<<<<<<<
 *         return _to_options(None, dict(args))
 *     else:
 */
}

/* "src/_encoder_options.pyx":154
 *         return _to_options(None, dict(args))
 *     else:
 *         return DEFAULT_OPTIONS_OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*else*/ {
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF((PyObject *)__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT);
__pyx_r = ((PyObject *)__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT);
goto __pyx_L0;
}

/* "src/_encoder_options.pyx":150
 * 
 * 
 * def _UnpickleOptions(*args):             # <<<<<<<<<<<<<<
 *     if args:
 *         return _to_options(None, dict(args))
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._UnpickleOptions", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder_options.pyx":157
 * 
 * 
 * cdef object _to_options(Options arg, dict kw):             # <<<<<<<<<<<<<<
 *     if arg is None:
 *         if not kw:
 */

static PyObject *__pyx_f_7pyjson5__to_options(struct __pyx_obj_7pyjson5_Options *__pyx_v_arg, PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_to_options", 1);

/* "src/_encoder_options.pyx":158
 * 
 * cdef object _to_options(Options arg, dict kw):
 *     if arg is None:             # <<<<<<<<<<<<<<
 *         if not kw:
 *             return DEFAULT_OPTIONS_OBJECT
 */
__pyx_t_1 = (((PyObject *)__pyx_v_arg) == Py_None);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":159
 * cdef object _to_options(Options arg, dict kw):
 *     if arg is None:
 *         if not kw:             # <<<<<<<<<<<<<<
 *             return DEFAULT_OPTIONS_OBJECT
 *         else:
 */
__pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kw); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(3, 159, __pyx_L1_error)
__pyx_t_2 = (!__pyx_t_1);
if (__pyx_t_2) {

/* "src/_encoder_options.pyx":160
 *     if arg is None:
 *         if not kw:
 *             return DEFAULT_OPTIONS_OBJECT             # <<<<<<<<<<<<<<
 *         else:
 *             return Options(**kw)
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF((PyObject *)__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT);
__pyx_r = ((PyObject *)__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT);
goto __pyx_L0;

/* "src/_encoder_options.pyx":159
 * cdef object _to_options(Options arg, dict kw):
 *     if arg is None:
 *         if not kw:             # <<<<<<<<<<<<<<
 *             return DEFAULT_OPTIONS_OBJECT
 *         else:
 */
}

/* "src/_encoder_options.pyx":162
 *             return DEFAULT_OPTIONS_OBJECT
 *         else:
 *             return Options(**kw)             # <<<<<<<<<<<<<<
 *     elif not kw:
 *         return arg
 */
/*else*/ {
__Pyx_XDECREF(__pyx_r);
if (unlikely(__pyx_v_kw == Py_None)) {
PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
__PYX_ERR(3, 162, __pyx_L1_error)
}
__pyx_t_3 = PyDict_Copy(__pyx_v_kw); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 162, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pyjson5_Options), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 162, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;
}

/* "src/_encoder_options.pyx":158
 * 
 * cdef object _to_options(Options arg, dict kw):
 *     if arg is None:             # <<<<<<<<<<<<<<
 *         if not kw:
 *             return DEFAULT_OPTIONS_OBJECT
 */
}

/* "src/_encoder_options.pyx":163
 *         else:
 *             return Options(**kw)
 *     elif not kw:             # <<<<<<<<<<<<<<
 *         return arg
 * 
 */
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_kw); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(3, 163, __pyx_L1_error)
__pyx_t_1 = (!__pyx_t_2);
if (__pyx_t_1) {

/* "src/_encoder_options.pyx":164
 *             return Options(**kw)
 *     elif not kw:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 *     PyDict_SetDefault(kw, 'quotationmark', (<Options> arg).quotationmark)
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF((PyObject *)__pyx_v_arg);
__pyx_r = ((PyObject *)__pyx_v_arg);
goto __pyx_L0;

/* "src/_encoder_options.pyx":163
 *         else:
 *             return Options(**kw)
 *     elif not kw:             # <<<<<<<<<<<<<<
 *         return arg
 * 
 */
}

/* "src/_encoder_options.pyx":166
 *         return arg
 * 
 *     PyDict_SetDefault(kw, 'quotationmark', (<Options> arg).quotationmark)             # <<<<<<<<<<<<<<
 *     PyDict_SetDefault(kw, 'tojson', (<Options> arg).tojson)
 *     PyDict_SetDefault(kw, 'mappingtypes', (<Options> arg).mappingtypes)
 */
__pyx_t_4 = __pyx_v_arg->quotationmark;
__Pyx_INCREF(__pyx_t_4);
__pyx_t_3 = PyDict_SetDefault(__pyx_v_kw, __pyx_n_u_quotationmark, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 166, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder_options.pyx":167
 * 
 *     PyDict_SetDefault(kw, 'quotationmark', (<Options> arg).quotationmark)
 *     PyDict_SetDefault(kw, 'tojson', (<Options> arg).tojson)             # <<<<<<<<<<<<<<
 *     PyDict_SetDefault(kw, 'mappingtypes', (<Options> arg).mappingtypes)
 * 
 */
__pyx_t_3 = __pyx_v_arg->tojson;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_4 = PyDict_SetDefault(__pyx_v_kw, __pyx_n_u_tojson, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 167, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_encoder_options.pyx":168
 *     PyDict_SetDefault(kw, 'quotationmark', (<Options> arg).quotationmark)
 *     PyDict_SetDefault(kw, 'tojson', (<Options> arg).tojson)
 *     PyDict_SetDefault(kw, 'mappingtypes', (<Options> arg).mappingtypes)             # <<<<<<<<<<<<<<
 * 
 *     return Options(**kw)
 */
__pyx_t_4 = __pyx_v_arg->mappingtypes;
__Pyx_INCREF(__pyx_t_4);
__pyx_t_3 = PyDict_SetDefault(__pyx_v_kw, __pyx_n_u_mappingtypes, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 168, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder_options.pyx":170
 *     PyDict_SetDefault(kw, 'mappingtypes', (<Options> arg).mappingtypes)
 * 
 *     return Options(**kw)             # <<<<<<<<<<<<<<
 */
__Pyx_XDECREF(__pyx_r);
if (unlikely(__pyx_v_kw == Py_None)) {
PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
__PYX_ERR(3, 170, __pyx_L1_error)
}
__pyx_t_3 = PyDict_Copy(__pyx_v_kw); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 170, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pyjson5_Options), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 170, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_encoder_options.pyx":157
 * 
 * 
 * cdef object _to_options(Options arg, dict kw):             # <<<<<<<<<<<<<<
 *     if arg is None:
 *         if not kw:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_AddTraceback("pyjson5._to_options", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = 0;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":1
 * cdef int _encode_unicode_impl(WriterRef writer, UCSString data, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef char buf[32]
 *     cdef uint32_t c
 */

static int __pyx_fuse_0__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, __pyx_t_7pyjson5_UCS1String __pyx_v_data, Py_ssize_t __pyx_v_length) {
std::uint32_t __pyx_v_c;
char const *__pyx_v_escaped_string;
Py_ssize_t __pyx_v_escaped_length;
size_t __pyx_v_unescaped_length;
Py_ssize_t __pyx_v_sublength;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
bool __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_0_encode_unicode_impl", 1);

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":11
 * 
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:
 */
__pyx_t_2 = __pyx_v_writer.reserve(__pyx_v_writer, (2 + __pyx_v_length)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 11, __pyx_L1_error)

/* "src/_encoder.pyx":12
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *         while True:
 *             if UCSString is UCS1String:
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 12, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":13
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:             # <<<<<<<<<<<<<<
 *             if UCSString is UCS1String:
 *                 sublength = length
 */
while (1) {

/* "src/_encoder.pyx":15
 *         while True:
 *             if UCSString is UCS1String:
 *                 sublength = length             # <<<<<<<<<<<<<<
 *             else:
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))
 */
__pyx_v_sublength = __pyx_v_length;

/* "src/_encoder.pyx":19
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)             # <<<<<<<<<<<<<<
 *             if unescaped_length > 0:
 *                 if UCSString is UCS1String:
 */
__pyx_v_unescaped_length = JSON5EncoderCpp::ESCAPE_DCT.find_unescaped_range(__pyx_v_data, __pyx_v_sublength);

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
__pyx_t_1 = (__pyx_v_unescaped_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":22
 *             if unescaped_length > 0:
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)             # <<<<<<<<<<<<<<
 *                 else:
 *                     for index in range(unescaped_length):
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)__pyx_v_data), __pyx_v_unescaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 22, __pyx_L1_error)

/* "src/_encoder.pyx":28
 *                     writer.append_s(writer, buf, unescaped_length)
 * 
 *                 data += unescaped_length             # <<<<<<<<<<<<<<
 *                 length -= unescaped_length
 *                 if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + __pyx_v_unescaped_length);

/* "src/_encoder.pyx":29
 * 
 *                 data += unescaped_length
 *                 length -= unescaped_length             # <<<<<<<<<<<<<<
 *                 if length <= 0:
 *                     break
 */
__pyx_v_length = (__pyx_v_length - __pyx_v_unescaped_length);

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":31
 *                 length -= unescaped_length
 *                 if length <= 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 if UCSString is not UCS1String:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
}

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
}

/* "src/_encoder.pyx":36
 *                     continue
 * 
 *             c = data[0]             # <<<<<<<<<<<<<<
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 */
__pyx_v_c = (__pyx_v_data[0]);

/* "src/_encoder.pyx":38
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]             # <<<<<<<<<<<<<<
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)
 */
__pyx_v_escaped_length = ((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[0]);

/* "src/_encoder.pyx":39
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]             # <<<<<<<<<<<<<<
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 */
__pyx_v_escaped_string = (&((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[1]));

/* "src/_encoder.pyx":40
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)             # <<<<<<<<<<<<<<
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_escaped_string, __pyx_v_escaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 40, __pyx_L1_error)

/* "src/_encoder.pyx":75
 *                 writer.append_s(writer, buf, 12);
 * 
 *             data += 1             # <<<<<<<<<<<<<<
 *             length -= 1
 *             if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + 1);

/* "src/_encoder.pyx":76
 * 
 *             data += 1
 *             length -= 1             # <<<<<<<<<<<<<<
 *             if length <= 0:
 *                 break
 */
__pyx_v_length = (__pyx_v_length - 1);

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":78
 *             length -= 1
 *             if length <= 0:
 *                 break             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
}
}
__pyx_L5_break:;

/* "src/_encoder.pyx":79
 *             if length <= 0:
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *     else:
 *         writer.append_s(writer, b'""', 2)
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 79, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":81
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 *         writer.append_s(writer, b'""', 2)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*else*/ {
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"\"\""), 2); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 81, __pyx_L1_error)
}
__pyx_L3:;

/* "src/_encoder.pyx":83
 *         writer.append_s(writer, b'""', 2)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":1
 * cdef int _encode_unicode_impl(WriterRef writer, UCSString data, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef char buf[32]
 *     cdef uint32_t c
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._encode_unicode_impl", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static int __pyx_fuse_1__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, __pyx_t_7pyjson5_UCS2String __pyx_v_data, Py_ssize_t __pyx_v_length) {
char __pyx_v_buf[32];
std::uint32_t __pyx_v_c;
char const *__pyx_v_escaped_string;
Py_ssize_t __pyx_v_escaped_length;
size_t __pyx_v_unescaped_length;
size_t __pyx_v_index;
Py_ssize_t __pyx_v_sublength;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
bool __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
Py_ssize_t __pyx_t_4;
Py_ssize_t __pyx_t_5;
Py_ssize_t __pyx_t_6;
size_t __pyx_t_7;
size_t __pyx_t_8;
size_t __pyx_t_9;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_1_encode_unicode_impl", 1);

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":11
 * 
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:
 */
__pyx_t_2 = __pyx_v_writer.reserve(__pyx_v_writer, (2 + __pyx_v_length)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 11, __pyx_L1_error)

/* "src/_encoder.pyx":12
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *         while True:
 *             if UCSString is UCS1String:
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 12, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":13
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:             # <<<<<<<<<<<<<<
 *             if UCSString is UCS1String:
 *                 sublength = length
 */
while (1) {

/* "src/_encoder.pyx":17
 *                 sublength = length
 *             else:
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))             # <<<<<<<<<<<<<<
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 */
__pyx_t_4 = ((Py_ssize_t)(sizeof(__pyx_v_buf)));
__pyx_t_5 = __pyx_v_length;
__pyx_t_1 = (__pyx_t_4 < __pyx_t_5);
if (__pyx_t_1) {
__pyx_t_6 = __pyx_t_4;
} else {
__pyx_t_6 = __pyx_t_5;
}
__pyx_v_sublength = __pyx_t_6;

/* "src/_encoder.pyx":19
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)             # <<<<<<<<<<<<<<
 *             if unescaped_length > 0:
 *                 if UCSString is UCS1String:
 */
__pyx_v_unescaped_length = JSON5EncoderCpp::ESCAPE_DCT.find_unescaped_range(__pyx_v_data, __pyx_v_sublength);

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
__pyx_t_1 = (__pyx_v_unescaped_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":24
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 *                 else:
 *                     for index in range(unescaped_length):             # <<<<<<<<<<<<<<
 *                         buf[index] = <const char> data[index]
 *                     writer.append_s(writer, buf, unescaped_length)
 */
__pyx_t_7 = __pyx_v_unescaped_length;
__pyx_t_8 = __pyx_t_7;
for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
__pyx_v_index = __pyx_t_9;

/* "src/_encoder.pyx":25
 *                 else:
 *                     for index in range(unescaped_length):
 *                         buf[index] = <const char> data[index]             # <<<<<<<<<<<<<<
 *                     writer.append_s(writer, buf, unescaped_length)
 * 
 */
(__pyx_v_buf[__pyx_v_index]) = ((char const )(__pyx_v_data[__pyx_v_index]));
}

/* "src/_encoder.pyx":26
 *                     for index in range(unescaped_length):
 *                         buf[index] = <const char> data[index]
 *                     writer.append_s(writer, buf, unescaped_length)             # <<<<<<<<<<<<<<
 * 
 *                 data += unescaped_length
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, __pyx_v_unescaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 26, __pyx_L1_error)

/* "src/_encoder.pyx":28
 *                     writer.append_s(writer, buf, unescaped_length)
 * 
 *                 data += unescaped_length             # <<<<<<<<<<<<<<
 *                 length -= unescaped_length
 *                 if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + __pyx_v_unescaped_length);

/* "src/_encoder.pyx":29
 * 
 *                 data += unescaped_length
 *                 length -= unescaped_length             # <<<<<<<<<<<<<<
 *                 if length <= 0:
 *                     break
 */
__pyx_v_length = (__pyx_v_length - __pyx_v_unescaped_length);

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":31
 *                 length -= unescaped_length
 *                 if length <= 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 if UCSString is not UCS1String:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
}

/* "src/_encoder.pyx":34
 * 
 *                 if UCSString is not UCS1String:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             c = data[0]
 */
goto __pyx_L4_continue;

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
}

/* "src/_encoder.pyx":36
 *                     continue
 * 
 *             c = data[0]             # <<<<<<<<<<<<<<
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 */
__pyx_v_c = (__pyx_v_data[0]);

/* "src/_encoder.pyx":37
 * 
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):             # <<<<<<<<<<<<<<
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 */
__pyx_t_1 = (__pyx_v_c < 0x100);
if (__pyx_t_1) {

/* "src/_encoder.pyx":38
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]             # <<<<<<<<<<<<<<
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)
 */
__pyx_v_escaped_length = ((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[0]);

/* "src/_encoder.pyx":39
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]             # <<<<<<<<<<<<<<
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 */
__pyx_v_escaped_string = (&((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[1]));

/* "src/_encoder.pyx":40
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)             # <<<<<<<<<<<<<<
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_escaped_string, __pyx_v_escaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 40, __pyx_L1_error)

/* "src/_encoder.pyx":37
 * 
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):             # <<<<<<<<<<<<<<
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 */
goto __pyx_L10;
}

/* "src/_encoder.pyx":42
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';             # <<<<<<<<<<<<<<
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 */
/*else*/ {
(__pyx_v_buf[0]) = '\\';

/* "src/_encoder.pyx":43
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';             # <<<<<<<<<<<<<<
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 */
(__pyx_v_buf[1]) = 'u';

/* "src/_encoder.pyx":44
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 */
(__pyx_v_buf[2]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0xc) & 0xf)]);

/* "src/_encoder.pyx":45
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 */
(__pyx_v_buf[3]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x8) & 0xf)]);

/* "src/_encoder.pyx":46
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 *                 buf[6] = 0;
 */
(__pyx_v_buf[4]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x4) & 0xf)]);

/* "src/_encoder.pyx":47
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[6] = 0;
 * 
 */
(__pyx_v_buf[5]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x0) & 0xf)]);

/* "src/_encoder.pyx":48
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 *                 buf[6] = 0;             # <<<<<<<<<<<<<<
 * 
 *                 writer.append_s(writer, buf, 6);
 */
(__pyx_v_buf[6]) = 0;

/* "src/_encoder.pyx":50
 *                 buf[6] = 0;
 * 
 *                 writer.append_s(writer, buf, 6);             # <<<<<<<<<<<<<<
 *             else:
 *                 # surrogate pair
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, 6); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 50, __pyx_L1_error)
}
__pyx_L10:;

/* "src/_encoder.pyx":75
 *                 writer.append_s(writer, buf, 12);
 * 
 *             data += 1             # <<<<<<<<<<<<<<
 *             length -= 1
 *             if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + 1);

/* "src/_encoder.pyx":76
 * 
 *             data += 1
 *             length -= 1             # <<<<<<<<<<<<<<
 *             if length <= 0:
 *                 break
 */
__pyx_v_length = (__pyx_v_length - 1);

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":78
 *             length -= 1
 *             if length <= 0:
 *                 break             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
}
__pyx_L4_continue:;
}
__pyx_L5_break:;

/* "src/_encoder.pyx":79
 *             if length <= 0:
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *     else:
 *         writer.append_s(writer, b'""', 2)
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 79, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":81
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 *         writer.append_s(writer, b'""', 2)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*else*/ {
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"\"\""), 2); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 81, __pyx_L1_error)
}
__pyx_L3:;

/* "src/_encoder.pyx":83
 *         writer.append_s(writer, b'""', 2)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":1
 * cdef int _encode_unicode_impl(WriterRef writer, UCSString data, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef char buf[32]
 *     cdef uint32_t c
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._encode_unicode_impl", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static int __pyx_fuse_2__pyx_f_7pyjson5__encode_unicode_impl(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, __pyx_t_7pyjson5_UCS4String __pyx_v_data, Py_ssize_t __pyx_v_length) {
char __pyx_v_buf[32];
std::uint32_t __pyx_v_c;
std::uint32_t __pyx_v_s1;
std::uint32_t __pyx_v_s2;
char const *__pyx_v_escaped_string;
Py_ssize_t __pyx_v_escaped_length;
size_t __pyx_v_unescaped_length;
size_t __pyx_v_index;
Py_ssize_t __pyx_v_sublength;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
bool __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
Py_ssize_t __pyx_t_4;
Py_ssize_t __pyx_t_5;
Py_ssize_t __pyx_t_6;
size_t __pyx_t_7;
size_t __pyx_t_8;
size_t __pyx_t_9;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("__pyx_fuse_2_encode_unicode_impl", 1);

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":11
 * 
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:
 */
__pyx_t_2 = __pyx_v_writer.reserve(__pyx_v_writer, (2 + __pyx_v_length)); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 11, __pyx_L1_error)

/* "src/_encoder.pyx":12
 *     if length > 0:
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *         while True:
 *             if UCSString is UCS1String:
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 12, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":13
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         while True:             # <<<<<<<<<<<<<<
 *             if UCSString is UCS1String:
 *                 sublength = length
 */
while (1) {

/* "src/_encoder.pyx":17
 *                 sublength = length
 *             else:
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))             # <<<<<<<<<<<<<<
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 */
__pyx_t_4 = ((Py_ssize_t)(sizeof(__pyx_v_buf)));
__pyx_t_5 = __pyx_v_length;
__pyx_t_1 = (__pyx_t_4 < __pyx_t_5);
if (__pyx_t_1) {
__pyx_t_6 = __pyx_t_4;
} else {
__pyx_t_6 = __pyx_t_5;
}
__pyx_v_sublength = __pyx_t_6;

/* "src/_encoder.pyx":19
 *                 sublength = min(length, <Py_ssize_t> sizeof(buf))
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)             # <<<<<<<<<<<<<<
 *             if unescaped_length > 0:
 *                 if UCSString is UCS1String:
 */
__pyx_v_unescaped_length = JSON5EncoderCpp::ESCAPE_DCT.find_unescaped_range(__pyx_v_data, __pyx_v_sublength);

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
__pyx_t_1 = (__pyx_v_unescaped_length > 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":24
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 *                 else:
 *                     for index in range(unescaped_length):             # <<<<<<<<<<<<<<
 *                         buf[index] = <const char> data[index]
 *                     writer.append_s(writer, buf, unescaped_length)
 */
__pyx_t_7 = __pyx_v_unescaped_length;
__pyx_t_8 = __pyx_t_7;
for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
__pyx_v_index = __pyx_t_9;

/* "src/_encoder.pyx":25
 *                 else:
 *                     for index in range(unescaped_length):
 *                         buf[index] = <const char> data[index]             # <<<<<<<<<<<<<<
 *                     writer.append_s(writer, buf, unescaped_length)
 * 
 */
(__pyx_v_buf[__pyx_v_index]) = ((char const )(__pyx_v_data[__pyx_v_index]));
}

/* "src/_encoder.pyx":26
 *                     for index in range(unescaped_length):
 *                         buf[index] = <const char> data[index]
 *                     writer.append_s(writer, buf, unescaped_length)             # <<<<<<<<<<<<<<
 * 
 *                 data += unescaped_length
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, __pyx_v_unescaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 26, __pyx_L1_error)

/* "src/_encoder.pyx":28
 *                     writer.append_s(writer, buf, unescaped_length)
 * 
 *                 data += unescaped_length             # <<<<<<<<<<<<<<
 *                 length -= unescaped_length
 *                 if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + __pyx_v_unescaped_length);

/* "src/_encoder.pyx":29
 * 
 *                 data += unescaped_length
 *                 length -= unescaped_length             # <<<<<<<<<<<<<<
 *                 if length <= 0:
 *                     break
 */
__pyx_v_length = (__pyx_v_length - __pyx_v_unescaped_length);

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":31
 *                 length -= unescaped_length
 *                 if length <= 0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 if UCSString is not UCS1String:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":30
 *                 data += unescaped_length
 *                 length -= unescaped_length
 *                 if length <= 0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
}

/* "src/_encoder.pyx":34
 * 
 *                 if UCSString is not UCS1String:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             c = data[0]
 */
goto __pyx_L4_continue;

/* "src/_encoder.pyx":20
 * 
 *             unescaped_length = ESCAPE_DCT.find_unescaped_range(data, sublength)
 *             if unescaped_length > 0:             # <<<<<<<<<<<<<<
 *                 if UCSString is UCS1String:
 *                     writer.append_s(writer, <const char*> data, unescaped_length)
 */
}

/* "src/_encoder.pyx":36
 *                     continue
 * 
 *             c = data[0]             # <<<<<<<<<<<<<<
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 */
__pyx_v_c = (__pyx_v_data[0]);

/* "src/_encoder.pyx":37
 * 
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):             # <<<<<<<<<<<<<<
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 */
__pyx_t_1 = (__pyx_v_c < 0x100);
if (__pyx_t_1) {

/* "src/_encoder.pyx":38
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]             # <<<<<<<<<<<<<<
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)
 */
__pyx_v_escaped_length = ((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[0]);

/* "src/_encoder.pyx":39
 *             if (UCSString is UCS1String) or (c < 0x100):
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]             # <<<<<<<<<<<<<<
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 */
__pyx_v_escaped_string = (&((JSON5EncoderCpp::ESCAPE_DCT.items[__pyx_v_c])[1]));

/* "src/_encoder.pyx":40
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)             # <<<<<<<<<<<<<<
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_escaped_string, __pyx_v_escaped_length); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 40, __pyx_L1_error)

/* "src/_encoder.pyx":37
 * 
 *             c = data[0]
 *             if (UCSString is UCS1String) or (c < 0x100):             # <<<<<<<<<<<<<<
 *                 escaped_length = ESCAPE_DCT.items[c][0]
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 */
goto __pyx_L10;
}

/* "src/_encoder.pyx":41
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):             # <<<<<<<<<<<<<<
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';
 */
__pyx_t_1 = (__pyx_v_c <= 0xffff);
if (__pyx_t_1) {

/* "src/_encoder.pyx":42
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';             # <<<<<<<<<<<<<<
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 */
(__pyx_v_buf[0]) = '\\';

/* "src/_encoder.pyx":43
 *             elif (UCSString is UCS2String) or (c <= 0xffff):
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';             # <<<<<<<<<<<<<<
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 */
(__pyx_v_buf[1]) = 'u';

/* "src/_encoder.pyx":44
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 */
(__pyx_v_buf[2]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0xc) & 0xf)]);

/* "src/_encoder.pyx":45
 *                 buf[1] = b'u';
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 */
(__pyx_v_buf[3]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x8) & 0xf)]);

/* "src/_encoder.pyx":46
 *                 buf[2] = HEX[(c >> (4*3)) & 0xf];
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 *                 buf[6] = 0;
 */
(__pyx_v_buf[4]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x4) & 0xf)]);

/* "src/_encoder.pyx":47
 *                 buf[3] = HEX[(c >> (4*2)) & 0xf];
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[6] = 0;
 * 
 */
(__pyx_v_buf[5]) = (JSON5EncoderCpp::HEX[((__pyx_v_c >> 0x0) & 0xf)]);

/* "src/_encoder.pyx":48
 *                 buf[4] = HEX[(c >> (4*1)) & 0xf];
 *                 buf[5] = HEX[(c >> (4*0)) & 0xf];
 *                 buf[6] = 0;             # <<<<<<<<<<<<<<
 * 
 *                 writer.append_s(writer, buf, 6);
 */
(__pyx_v_buf[6]) = 0;

/* "src/_encoder.pyx":50
 *                 buf[6] = 0;
 * 
 *                 writer.append_s(writer, buf, 6);             # <<<<<<<<<<<<<<
 *             else:
 *                 # surrogate pair
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, 6); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 50, __pyx_L1_error)

/* "src/_encoder.pyx":41
 *                 escaped_string = &ESCAPE_DCT.items[c][1]
 *                 writer.append_s(writer, escaped_string, escaped_length)
 *             elif (UCSString is UCS2String) or (c <= 0xffff):             # <<<<<<<<<<<<<<
 *                 buf[0] = b'\\';
 *                 buf[1] = b'u';
 */
goto __pyx_L10;
}

/* "src/_encoder.pyx":53
 *             else:
 *                 # surrogate pair
 *                 c -= 0x10000             # <<<<<<<<<<<<<<
 *                 s1 = 0xd800 | ((c >> 10) & 0x3ff)
 *                 s2 = 0xdc00 | (c & 0x3ff)
 */
/*else*/ {
__pyx_v_c = (__pyx_v_c - 0x10000);

/* "src/_encoder.pyx":54
 *                 # surrogate pair
 *                 c -= 0x10000
 *                 s1 = 0xd800 | ((c >> 10) & 0x3ff)             # <<<<<<<<<<<<<<
 *                 s2 = 0xdc00 | (c & 0x3ff)
 * 
 */
__pyx_v_s1 = (0xd800 | ((__pyx_v_c >> 10) & 0x3ff));

/* "src/_encoder.pyx":55
 *                 c -= 0x10000
 *                 s1 = 0xd800 | ((c >> 10) & 0x3ff)
 *                 s2 = 0xdc00 | (c & 0x3ff)             # <<<<<<<<<<<<<<
 * 
 *                 buf[0x0] = b'\\';
 */
__pyx_v_s2 = (0xdc00 | (__pyx_v_c & 0x3ff));

/* "src/_encoder.pyx":57
 *                 s2 = 0xdc00 | (c & 0x3ff)
 * 
 *                 buf[0x0] = b'\\';             # <<<<<<<<<<<<<<
 *                 buf[0x1] = b'u';
 *                 buf[0x2] = HEX[(s1 >> (4*3)) & 0xf];
 */
(__pyx_v_buf[0x0]) = '\\';

/* "src/_encoder.pyx":58
 * 
 *                 buf[0x0] = b'\\';
 *                 buf[0x1] = b'u';             # <<<<<<<<<<<<<<
 *                 buf[0x2] = HEX[(s1 >> (4*3)) & 0xf];
 *                 buf[0x3] = HEX[(s1 >> (4*2)) & 0xf];
 */
(__pyx_v_buf[0x1]) = 'u';

/* "src/_encoder.pyx":59
 *                 buf[0x0] = b'\\';
 *                 buf[0x1] = b'u';
 *                 buf[0x2] = HEX[(s1 >> (4*3)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0x3] = HEX[(s1 >> (4*2)) & 0xf];
 *                 buf[0x4] = HEX[(s1 >> (4*1)) & 0xf];
 */
(__pyx_v_buf[0x2]) = (JSON5EncoderCpp::HEX[((__pyx_v_s1 >> 0xc) & 0xf)]);

/* "src/_encoder.pyx":60
 *                 buf[0x1] = b'u';
 *                 buf[0x2] = HEX[(s1 >> (4*3)) & 0xf];
 *                 buf[0x3] = HEX[(s1 >> (4*2)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0x4] = HEX[(s1 >> (4*1)) & 0xf];
 *                 buf[0x5] = HEX[(s1 >> (4*0)) & 0xf];
 */
(__pyx_v_buf[0x3]) = (JSON5EncoderCpp::HEX[((__pyx_v_s1 >> 0x8) & 0xf)]);

/* "src/_encoder.pyx":61
 *                 buf[0x2] = HEX[(s1 >> (4*3)) & 0xf];
 *                 buf[0x3] = HEX[(s1 >> (4*2)) & 0xf];
 *                 buf[0x4] = HEX[(s1 >> (4*1)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0x5] = HEX[(s1 >> (4*0)) & 0xf];
 * 
 */
(__pyx_v_buf[0x4]) = (JSON5EncoderCpp::HEX[((__pyx_v_s1 >> 0x4) & 0xf)]);

/* "src/_encoder.pyx":62
 *                 buf[0x3] = HEX[(s1 >> (4*2)) & 0xf];
 *                 buf[0x4] = HEX[(s1 >> (4*1)) & 0xf];
 *                 buf[0x5] = HEX[(s1 >> (4*0)) & 0xf];             # <<<<<<<<<<<<<<
 * 
 *                 buf[0x6] = b'\\';
 */
(__pyx_v_buf[0x5]) = (JSON5EncoderCpp::HEX[((__pyx_v_s1 >> 0x0) & 0xf)]);

/* "src/_encoder.pyx":64
 *                 buf[0x5] = HEX[(s1 >> (4*0)) & 0xf];
 * 
 *                 buf[0x6] = b'\\';             # <<<<<<<<<<<<<<
 *                 buf[0x7] = b'u';
 *                 buf[0x8] = HEX[(s2 >> (4*3)) & 0xf];
 */
(__pyx_v_buf[0x6]) = '\\';

/* "src/_encoder.pyx":65
 * 
 *                 buf[0x6] = b'\\';
 *                 buf[0x7] = b'u';             # <<<<<<<<<<<<<<
 *                 buf[0x8] = HEX[(s2 >> (4*3)) & 0xf];
 *                 buf[0x9] = HEX[(s2 >> (4*2)) & 0xf];
 */
(__pyx_v_buf[0x7]) = 'u';

/* "src/_encoder.pyx":66
 *                 buf[0x6] = b'\\';
 *                 buf[0x7] = b'u';
 *                 buf[0x8] = HEX[(s2 >> (4*3)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0x9] = HEX[(s2 >> (4*2)) & 0xf];
 *                 buf[0xa] = HEX[(s2 >> (4*1)) & 0xf];
 */
(__pyx_v_buf[0x8]) = (JSON5EncoderCpp::HEX[((__pyx_v_s2 >> 0xc) & 0xf)]);

/* "src/_encoder.pyx":67
 *                 buf[0x7] = b'u';
 *                 buf[0x8] = HEX[(s2 >> (4*3)) & 0xf];
 *                 buf[0x9] = HEX[(s2 >> (4*2)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0xa] = HEX[(s2 >> (4*1)) & 0xf];
 *                 buf[0xb] = HEX[(s2 >> (4*0)) & 0xf];
 */
(__pyx_v_buf[0x9]) = (JSON5EncoderCpp::HEX[((__pyx_v_s2 >> 0x8) & 0xf)]);

/* "src/_encoder.pyx":68
 *                 buf[0x8] = HEX[(s2 >> (4*3)) & 0xf];
 *                 buf[0x9] = HEX[(s2 >> (4*2)) & 0xf];
 *                 buf[0xa] = HEX[(s2 >> (4*1)) & 0xf];             # <<<<<<<<<<<<<<
 *                 buf[0xb] = HEX[(s2 >> (4*0)) & 0xf];
 * 
 */
(__pyx_v_buf[0xa]) = (JSON5EncoderCpp::HEX[((__pyx_v_s2 >> 0x4) & 0xf)]);

/* "src/_encoder.pyx":69
 *                 buf[0x9] = HEX[(s2 >> (4*2)) & 0xf];
 *                 buf[0xa] = HEX[(s2 >> (4*1)) & 0xf];
 *                 buf[0xb] = HEX[(s2 >> (4*0)) & 0xf];             # <<<<<<<<<<<<<<
 * 
 *                 buf[0xc] = 0;
 */
(__pyx_v_buf[0xb]) = (JSON5EncoderCpp::HEX[((__pyx_v_s2 >> 0x0) & 0xf)]);

/* "src/_encoder.pyx":71
 *                 buf[0xb] = HEX[(s2 >> (4*0)) & 0xf];
 * 
 *                 buf[0xc] = 0;             # <<<<<<<<<<<<<<
 * 
 *                 writer.append_s(writer, buf, 12);
 */
(__pyx_v_buf[0xc]) = 0;

/* "src/_encoder.pyx":73
 *                 buf[0xc] = 0;
 * 
 *                 writer.append_s(writer, buf, 12);             # <<<<<<<<<<<<<<
 * 
 *             data += 1
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, 12); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 73, __pyx_L1_error)
}
__pyx_L10:;

/* "src/_encoder.pyx":75
 *                 writer.append_s(writer, buf, 12);
 * 
 *             data += 1             # <<<<<<<<<<<<<<
 *             length -= 1
 *             if length <= 0:
 */
__pyx_v_data = (__pyx_v_data + 1);

/* "src/_encoder.pyx":76
 * 
 *             data += 1
 *             length -= 1             # <<<<<<<<<<<<<<
 *             if length <= 0:
 *                 break
 */
__pyx_v_length = (__pyx_v_length - 1);

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = (__pyx_v_length <= 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":78
 *             length -= 1
 *             if length <= 0:
 *                 break             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 */
goto __pyx_L5_break;

/* "src/_encoder.pyx":77
 *             data += 1
 *             length -= 1
 *             if length <= 0:             # <<<<<<<<<<<<<<
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
}
__pyx_L4_continue:;
}
__pyx_L5_break:;

/* "src/_encoder.pyx":79
 *             if length <= 0:
 *                 break
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *     else:
 *         writer.append_s(writer, b'""', 2)
 */
__pyx_t_3 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_2 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_3)[0]))); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 79, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

/* "src/_encoder.pyx":10
 *     cdef Py_ssize_t sublength
 * 
 *     if length > 0:             # <<<<<<<<<<<<<<
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":81
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     else:
 *         writer.append_s(writer, b'""', 2)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*else*/ {
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"\"\""), 2); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 81, __pyx_L1_error)
}
__pyx_L3:;

/* "src/_encoder.pyx":83
 *         writer.append_s(writer, b'""', 2)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":1
 * cdef int _encode_unicode_impl(WriterRef writer, UCSString data, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef char buf[32]
 *     cdef uint32_t c
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._encode_unicode_impl", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":86
 * 
 * 
 * cdef int _encode_unicode(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef int kind
 */

static int __pyx_f_7pyjson5__encode_unicode(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
Py_ssize_t __pyx_v_length;
int __pyx_v_kind;
int __pyx_r;
int __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_encoder.pyx":90
 *     cdef int kind
 * 
 *     PyUnicode_READY(data)             # <<<<<<<<<<<<<<
 * 
 *     length = PyUnicode_GET_LENGTH(data)
 */
__pyx_t_1 = PyUnicode_READY(__pyx_v_data); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(14, 90, __pyx_L1_error)

/* "src/_encoder.pyx":92
 *     PyUnicode_READY(data)
 * 
 *     length = PyUnicode_GET_LENGTH(data)             # <<<<<<<<<<<<<<
 *     kind = PyUnicode_KIND(data)
 * 
 */
__pyx_v_length = PyUnicode_GET_LENGTH(__pyx_v_data);

/* "src/_encoder.pyx":93
 * 
 *     length = PyUnicode_GET_LENGTH(data)
 *     kind = PyUnicode_KIND(data)             # <<<<<<<<<<<<<<
 * 
 *     if kind == PyUnicode_1BYTE_KIND:
 */
__pyx_v_kind = PyUnicode_KIND(__pyx_v_data);

/* "src/_encoder.pyx":95
 *     kind = PyUnicode_KIND(data)
 * 
 *     if kind == PyUnicode_1BYTE_KIND:             # <<<<<<<<<<<<<<
 *         _encode_unicode_impl(writer, PyUnicode_1BYTE_DATA(data), length)
 *     elif kind == PyUnicode_2BYTE_KIND:
 */
switch (__pyx_v_kind) {
case PyUnicode_1BYTE_KIND:

/* "src/_encoder.pyx":96
 * 
 *     if kind == PyUnicode_1BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_1BYTE_DATA(data), length)             # <<<<<<<<<<<<<<
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_2BYTE_DATA(data), length)
 */
__pyx_t_1 = __pyx_fuse_0__pyx_f_7pyjson5__encode_unicode_impl(__pyx_v_writer, PyUnicode_1BYTE_DATA(__pyx_v_data), __pyx_v_length); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(14, 96, __pyx_L1_error)

/* "src/_encoder.pyx":95
 *     kind = PyUnicode_KIND(data)
 * 
 *     if kind == PyUnicode_1BYTE_KIND:             # <<<<<<<<<<<<<<
 *         _encode_unicode_impl(writer, PyUnicode_1BYTE_DATA(data), length)
 *     elif kind == PyUnicode_2BYTE_KIND:
 */
break;
case PyUnicode_2BYTE_KIND:

/* "src/_encoder.pyx":98
 *         _encode_unicode_impl(writer, PyUnicode_1BYTE_DATA(data), length)
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_2BYTE_DATA(data), length)             # <<<<<<<<<<<<<<
 *     elif kind == PyUnicode_4BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_4BYTE_DATA(data), length)
 */
__pyx_t_1 = __pyx_fuse_1__pyx_f_7pyjson5__encode_unicode_impl(__pyx_v_writer, PyUnicode_2BYTE_DATA(__pyx_v_data), __pyx_v_length); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(14, 98, __pyx_L1_error)

/* "src/_encoder.pyx":97
 *     if kind == PyUnicode_1BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_1BYTE_DATA(data), length)
 *     elif kind == PyUnicode_2BYTE_KIND:             # <<<<<<<<<<<<<<
 *         _encode_unicode_impl(writer, PyUnicode_2BYTE_DATA(data), length)
 *     elif kind == PyUnicode_4BYTE_KIND:
 */
break;
case PyUnicode_4BYTE_KIND:

/* "src/_encoder.pyx":100
 *         _encode_unicode_impl(writer, PyUnicode_2BYTE_DATA(data), length)
 *     elif kind == PyUnicode_4BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_4BYTE_DATA(data), length)             # <<<<<<<<<<<<<<
 *     else:
 *         pass  # impossible
 */
__pyx_t_1 = __pyx_fuse_2__pyx_f_7pyjson5__encode_unicode_impl(__pyx_v_writer, PyUnicode_4BYTE_DATA(__pyx_v_data), __pyx_v_length); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(14, 100, __pyx_L1_error)

/* "src/_encoder.pyx":99
 *     elif kind == PyUnicode_2BYTE_KIND:
 *         _encode_unicode_impl(writer, PyUnicode_2BYTE_DATA(data), length)
 *     elif kind == PyUnicode_4BYTE_KIND:             # <<<<<<<<<<<<<<
 *         _encode_unicode_impl(writer, PyUnicode_4BYTE_DATA(data), length)
 *     else:
 */
break;
default:
break;
}

/* "src/_encoder.pyx":104
 *         pass  # impossible
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":86
 * 
 * 
 * cdef int _encode_unicode(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef int kind
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._encode_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder.pyx":107
 * 
 * 
 * cdef int _encode_nested_key(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef const char *string
 *     cdef char c
 */

static int __pyx_f_7pyjson5__encode_nested_key(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
char const *__pyx_v_string;
char __pyx_v_c;
Py_ssize_t __pyx_v_index;
Py_ssize_t __pyx_v_length;
int __pyx_v_result;
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_v_sub_writer;
int __pyx_r;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_t_1;
struct __pyx_t_7pyjson5_Writer __pyx_t_2;
int __pyx_t_3;
int __pyx_t_4;
size_t __pyx_t_5;
bool __pyx_t_6;
PyObject *__pyx_t_7 = NULL;
Py_ssize_t __pyx_t_8;
Py_ssize_t __pyx_t_9;
Py_ssize_t __pyx_t_10;
int __pyx_t_11;
char const *__pyx_t_12;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
PyObject *__pyx_t_16 = NULL;
PyObject *__pyx_t_17 = NULL;
PyObject *__pyx_t_18 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_nested_key", 1);

/* "src/_encoder.pyx":115
 *     cdef WriterReallocatable sub_writer = WriterReallocatable(
 *         Writer(
 *             _WriterReallocatable_reserve,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 */
__pyx_t_2.reserve = __pyx_f_7pyjson5__WriterReallocatable_reserve;

/* "src/_encoder.pyx":116
 *         Writer(
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_s,
 *             writer.options,
 */
__pyx_t_2.append_c = __pyx_f_7pyjson5__WriterReallocatable_append_c;

/* "src/_encoder.pyx":117
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,             # <<<<<<<<<<<<<<
 *             writer.options,
 *         ),
 */
__pyx_t_2.append_s = __pyx_f_7pyjson5__WriterReallocatable_append_s;

/* "src/_encoder.pyx":118
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 *             writer.options,             # <<<<<<<<<<<<<<
 *         ),
 *         0, 0, NULL,
 */
__pyx_t_2.options = __pyx_v_writer.options;
__pyx_t_1.base = __pyx_t_2;
__pyx_t_1.position = 0;
__pyx_t_1.length = 0;

/* "src/_encoder.pyx":120
 *             writer.options,
 *         ),
 *         0, 0, NULL,             # <<<<<<<<<<<<<<
 *     )
 *     try:
 */
__pyx_t_1.obj = NULL;
__pyx_v_sub_writer = __pyx_t_1;

/* "src/_encoder.pyx":122
 *         0, 0, NULL,
 *     )
 *     try:             # <<<<<<<<<<<<<<
 *         result = _encode(sub_writer.base, data)
 *         if expect(result < 0, False):
 */
/*try:*/ {

/* "src/_encoder.pyx":123
 *     )
 *     try:
 *         result = _encode(sub_writer.base, data)             # <<<<<<<<<<<<<<
 *         if expect(result < 0, False):
 *             return result
 */
__pyx_t_3 = __pyx_f_7pyjson5__encode(__pyx_v_sub_writer.base, __pyx_v_data); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(14, 123, __pyx_L4_error)
__pyx_v_result = __pyx_t_3;

/* "src/_encoder.pyx":124
 *     try:
 *         result = _encode(sub_writer.base, data)
 *         if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
__pyx_t_4 = (JSON5EncoderCpp_expect((__pyx_v_result < 0), 0) != 0);
if (__pyx_t_4) {

/* "src/_encoder.pyx":125
 *         result = _encode(sub_writer.base, data)
 *         if expect(result < 0, False):
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         length = sub_writer.position
 */
__pyx_r = __pyx_v_result;
goto __pyx_L3_return;

/* "src/_encoder.pyx":124
 *     try:
 *         result = _encode(sub_writer.base, data)
 *         if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
}

/* "src/_encoder.pyx":127
 *             return result
 * 
 *         length = sub_writer.position             # <<<<<<<<<<<<<<
 *         string = <char*> sub_writer.obj
 * 
 */
__pyx_t_5 = __pyx_v_sub_writer.position;
__pyx_v_length = __pyx_t_5;

/* "src/_encoder.pyx":128
 * 
 *         length = sub_writer.position
 *         string = <char*> sub_writer.obj             # <<<<<<<<<<<<<<
 * 
 *         writer.reserve(writer, 2 + length)
 */
__pyx_v_string = ((char *)__pyx_v_sub_writer.obj);

/* "src/_encoder.pyx":130
 *         string = <char*> sub_writer.obj
 * 
 *         writer.reserve(writer, 2 + length)             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         for index in range(length):
 */
__pyx_t_6 = __pyx_v_writer.reserve(__pyx_v_writer, (2 + __pyx_v_length)); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(14, 130, __pyx_L4_error)

/* "src/_encoder.pyx":131
 * 
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *         for index in range(length):
 *             c = string[index]
 */
__pyx_t_7 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_7);
__pyx_t_6 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_7)[0]))); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(14, 131, __pyx_L4_error)
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_encoder.pyx":132
 *         writer.reserve(writer, 2 + length)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         for index in range(length):             # <<<<<<<<<<<<<<
 *             c = string[index]
 *             if c in b'\\"':
 */
__pyx_t_8 = __pyx_v_length;
__pyx_t_9 = __pyx_t_8;
for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
__pyx_v_index = __pyx_t_10;

/* "src/_encoder.pyx":133
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *         for index in range(length):
 *             c = string[index]             # <<<<<<<<<<<<<<
 *             if c in b'\\"':
 *                 writer.append_c(writer, b'\\')
 */
__pyx_v_c = (__pyx_v_string[__pyx_v_index]);

/* "src/_encoder.pyx":134
 *         for index in range(length):
 *             c = string[index]
 *             if c in b'\\"':             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, b'\\')
 *             writer.append_c(writer, c)
 */
switch (__pyx_v_c) {
case '"':
case '\\':

/* "src/_encoder.pyx":135
 *             c = string[index]
 *             if c in b'\\"':
 *                 writer.append_c(writer, b'\\')             # <<<<<<<<<<<<<<
 *             writer.append_c(writer, c)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_6 = __pyx_v_writer.append_c(__pyx_v_writer, '\\'); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(14, 135, __pyx_L4_error)

/* "src/_encoder.pyx":134
 *         for index in range(length):
 *             c = string[index]
 *             if c in b'\\"':             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, b'\\')
 *             writer.append_c(writer, c)
 */
break;
default: break;
}

/* "src/_encoder.pyx":136
 *             if c in b'\\"':
 *                 writer.append_c(writer, b'\\')
 *             writer.append_c(writer, c)             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     finally:
 */
__pyx_t_6 = __pyx_v_writer.append_c(__pyx_v_writer, __pyx_v_c); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(14, 136, __pyx_L4_error)
}

/* "src/_encoder.pyx":137
 *                 writer.append_c(writer, b'\\')
 *             writer.append_c(writer, c)
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *     finally:
 *         if sub_writer.obj is not NULL:
 */
__pyx_t_7 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_7);
__pyx_t_6 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_7)[0]))); if (unlikely(__pyx_t_6 == ((bool)0))) __PYX_ERR(14, 137, __pyx_L4_error)
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
}

/* "src/_encoder.pyx":139
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     finally:
 *         if sub_writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(sub_writer.obj)
 * 
 */
/*finally:*/ {
/*normal exit:*/{
__pyx_t_4 = (__pyx_v_sub_writer.obj != NULL);
if (__pyx_t_4) {

/* "src/_encoder.pyx":140
 *     finally:
 *         if sub_writer.obj is not NULL:
 *             ObjectFree(sub_writer.obj)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
PyObject_Free(__pyx_v_sub_writer.obj);

/* "src/_encoder.pyx":139
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     finally:
 *         if sub_writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(sub_writer.obj)
 * 
 */
}
goto __pyx_L5;
}
__pyx_L4_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__Pyx_XGOTREF(__pyx_t_16);
__Pyx_XGOTREF(__pyx_t_17);
__Pyx_XGOTREF(__pyx_t_18);
__pyx_t_3 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
{
__pyx_t_4 = (__pyx_v_sub_writer.obj != NULL);
if (__pyx_t_4) {

/* "src/_encoder.pyx":140
 *     finally:
 *         if sub_writer.obj is not NULL:
 *             ObjectFree(sub_writer.obj)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
PyObject_Free(__pyx_v_sub_writer.obj);

/* "src/_encoder.pyx":139
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     finally:
 *         if sub_writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(sub_writer.obj)
 * 
 */
}
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_16);
__Pyx_XGIVEREF(__pyx_t_17);
__Pyx_XGIVEREF(__pyx_t_18);
__Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
}
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
__pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
__pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
goto __pyx_L1_error;
}
__pyx_L3_return: {
__pyx_t_11 = __pyx_r;
__pyx_t_4 = (__pyx_v_sub_writer.obj != NULL);
if (__pyx_t_4) {

/* "src/_encoder.pyx":140
 *     finally:
 *         if sub_writer.obj is not NULL:
 *             ObjectFree(sub_writer.obj)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
PyObject_Free(__pyx_v_sub_writer.obj);

/* "src/_encoder.pyx":139
 *         writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     finally:
 *         if sub_writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(sub_writer.obj)
 * 
 */
}
__pyx_r = __pyx_t_11;
goto __pyx_L0;
}
__pyx_L5:;
}

/* "src/_encoder.pyx":142
 *             ObjectFree(sub_writer.obj)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":107
 * 
 * 
 * cdef int _encode_nested_key(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef const char *string
 *     cdef char c
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5._encode_nested_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":145
 * 
 * 
 * cdef int _append_ascii(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_buffer view
 *     cdef const char *buf
 */

static int __pyx_f_7pyjson5__append_ascii(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
Py_buffer __pyx_v_view;
char const *__pyx_v_buf;
Py_ssize_t __pyx_v_index;
unsigned char __pyx_v_c;
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
bool __pyx_t_4;
Py_ssize_t __pyx_t_5;
Py_ssize_t __pyx_t_6;
Py_ssize_t __pyx_t_7;
int __pyx_t_8;
char const *__pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_append_ascii", 1);

/* "src/_encoder.pyx":151
 *     cdef unsigned char c
 * 
 *     if PyUnicode_Check(data):             # <<<<<<<<<<<<<<
 *         PyUnicode_READY(data)
 *         if not PyUnicode_IS_ASCII(data):
 */
__pyx_t_1 = PyUnicode_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":152
 * 
 *     if PyUnicode_Check(data):
 *         PyUnicode_READY(data)             # <<<<<<<<<<<<<<
 *         if not PyUnicode_IS_ASCII(data):
 *             raise TypeError('Expected ASCII data')
 */
__pyx_t_2 = PyUnicode_READY(__pyx_v_data); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 152, __pyx_L1_error)

/* "src/_encoder.pyx":153
 *     if PyUnicode_Check(data):
 *         PyUnicode_READY(data)
 *         if not PyUnicode_IS_ASCII(data):             # <<<<<<<<<<<<<<
 *             raise TypeError('Expected ASCII data')
 *         writer.append_s(writer, <const char*> PyUnicode_1BYTE_DATA(data), PyUnicode_GET_LENGTH(data))
 */
__pyx_t_1 = (!(PyUnicode_IS_ASCII(__pyx_v_data) != 0));
if (unlikely(__pyx_t_1)) {

/* "src/_encoder.pyx":154
 *         PyUnicode_READY(data)
 *         if not PyUnicode_IS_ASCII(data):
 *             raise TypeError('Expected ASCII data')             # <<<<<<<<<<<<<<
 *         writer.append_s(writer, <const char*> PyUnicode_1BYTE_DATA(data), PyUnicode_GET_LENGTH(data))
 *     else:
 */
__pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(14, 154, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_Raise(__pyx_t_3, 0, 0, 0);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__PYX_ERR(14, 154, __pyx_L1_error)

/* "src/_encoder.pyx":153
 *     if PyUnicode_Check(data):
 *         PyUnicode_READY(data)
 *         if not PyUnicode_IS_ASCII(data):             # <<<<<<<<<<<<<<
 *             raise TypeError('Expected ASCII data')
 *         writer.append_s(writer, <const char*> PyUnicode_1BYTE_DATA(data), PyUnicode_GET_LENGTH(data))
 */
}

/* "src/_encoder.pyx":155
 *         if not PyUnicode_IS_ASCII(data):
 *             raise TypeError('Expected ASCII data')
 *         writer.append_s(writer, <const char*> PyUnicode_1BYTE_DATA(data), PyUnicode_GET_LENGTH(data))             # <<<<<<<<<<<<<<
 *     else:
 *         PyObject_GetBuffer(data, &view, PyBUF_CONTIG_RO)
 */
__pyx_t_4 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)PyUnicode_1BYTE_DATA(__pyx_v_data)), PyUnicode_GET_LENGTH(__pyx_v_data)); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 155, __pyx_L1_error)

/* "src/_encoder.pyx":151
 *     cdef unsigned char c
 * 
 *     if PyUnicode_Check(data):             # <<<<<<<<<<<<<<
 *         PyUnicode_READY(data)
 *         if not PyUnicode_IS_ASCII(data):
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":157
 *         writer.append_s(writer, <const char*> PyUnicode_1BYTE_DATA(data), PyUnicode_GET_LENGTH(data))
 *     else:
 *         PyObject_GetBuffer(data, &view, PyBUF_CONTIG_RO)             # <<<<<<<<<<<<<<
 *         try:
 *             buf = <const char*> view.buf
 */
/*else*/ {
__pyx_t_2 = PyObject_GetBuffer(__pyx_v_data, (&__pyx_v_view), PyBUF_CONTIG_RO); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 157, __pyx_L1_error)

/* "src/_encoder.pyx":158
 *     else:
 *         PyObject_GetBuffer(data, &view, PyBUF_CONTIG_RO)
 *         try:             # <<<<<<<<<<<<<<
 *             buf = <const char*> view.buf
 *             for index in range(view.len):
 */
/*try:*/ {

/* "src/_encoder.pyx":159
 *         PyObject_GetBuffer(data, &view, PyBUF_CONTIG_RO)
 *         try:
 *             buf = <const char*> view.buf             # <<<<<<<<<<<<<<
 *             for index in range(view.len):
 *                 c = <unsigned char> buf[index]
 */
__pyx_v_buf = ((char const *)__pyx_v_view.buf);

/* "src/_encoder.pyx":160
 *         try:
 *             buf = <const char*> view.buf
 *             for index in range(view.len):             # <<<<<<<<<<<<<<
 *                 c = <unsigned char> buf[index]
 *                 if c & ~0x7f:
 */
__pyx_t_5 = __pyx_v_view.len;
__pyx_t_6 = __pyx_t_5;
for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
__pyx_v_index = __pyx_t_7;

/* "src/_encoder.pyx":161
 *             buf = <const char*> view.buf
 *             for index in range(view.len):
 *                 c = <unsigned char> buf[index]             # <<<<<<<<<<<<<<
 *                 if c & ~0x7f:
 *                     raise TypeError('Expected ASCII data')
 */
__pyx_v_c = ((unsigned char)(__pyx_v_buf[__pyx_v_index]));

/* "src/_encoder.pyx":162
 *             for index in range(view.len):
 *                 c = <unsigned char> buf[index]
 *                 if c & ~0x7f:             # <<<<<<<<<<<<<<
 *                     raise TypeError('Expected ASCII data')
 * 
 */
__pyx_t_1 = ((__pyx_v_c & (~0x7f)) != 0);
if (unlikely(__pyx_t_1)) {

/* "src/_encoder.pyx":163
 *                 c = <unsigned char> buf[index]
 *                 if c & ~0x7f:
 *                     raise TypeError('Expected ASCII data')             # <<<<<<<<<<<<<<
 * 
 *             writer.append_s(writer, buf, view.len)
 */
__pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(14, 163, __pyx_L6_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_Raise(__pyx_t_3, 0, 0, 0);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__PYX_ERR(14, 163, __pyx_L6_error)

/* "src/_encoder.pyx":162
 *             for index in range(view.len):
 *                 c = <unsigned char> buf[index]
 *                 if c & ~0x7f:             # <<<<<<<<<<<<<<
 *                     raise TypeError('Expected ASCII data')
 * 
 */
}
}

/* "src/_encoder.pyx":165
 *                     raise TypeError('Expected ASCII data')
 * 
 *             writer.append_s(writer, buf, view.len)             # <<<<<<<<<<<<<<
 *         finally:
 *             PyBuffer_Release(&view)
 */
__pyx_t_4 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_buf, __pyx_v_view.len); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 165, __pyx_L6_error)
}

/* "src/_encoder.pyx":167
 *             writer.append_s(writer, buf, view.len)
 *         finally:
 *             PyBuffer_Release(&view)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*finally:*/ {
/*normal exit:*/{
PyBuffer_Release((&__pyx_v_view));
goto __pyx_L7;
}
__pyx_L6_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__pyx_t_2 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
{
PyBuffer_Release((&__pyx_v_view));
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
}
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
goto __pyx_L1_error;
}
__pyx_L7:;
}
}
__pyx_L3:;

/* "src/_encoder.pyx":169
 *             PyBuffer_Release(&view)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":145
 * 
 * 
 * cdef int _append_ascii(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_buffer view
 *     cdef const char *buf
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._append_ascii", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":172
 * 
 * 
 * cdef int _encode_tojson(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)
 *     if value is None:
 */

static int __pyx_f_7pyjson5__encode_tojson(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
PyObject *__pyx_v_value = 0;
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
int __pyx_t_3;
bool __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
unsigned int __pyx_t_6;
int __pyx_t_7;
int __pyx_t_8;
char const *__pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_tojson", 1);

/* "src/_encoder.pyx":173
 * 
 * cdef int _encode_tojson(WriterRef writer, object data) except -1:
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)             # <<<<<<<<<<<<<<
 *     if value is None:
 *         return False
 */
__pyx_t_1 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->tojson;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = __Pyx_GetAttr3(__pyx_v_data, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(14, 173, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_v_value = __pyx_t_2;
__pyx_t_2 = 0;

/* "src/_encoder.pyx":174
 * cdef int _encode_tojson(WriterRef writer, object data) except -1:
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)
 *     if value is None:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
__pyx_t_3 = (__pyx_v_value == Py_None);
if (__pyx_t_3) {

/* "src/_encoder.pyx":175
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)
 *     if value is None:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     if callable(value):
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_encoder.pyx":174
 * cdef int _encode_tojson(WriterRef writer, object data) except -1:
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)
 *     if value is None:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
}

/* "src/_encoder.pyx":177
 *         return False
 * 
 *     if callable(value):             # <<<<<<<<<<<<<<
 *         Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *         try:
 */
__pyx_t_3 = __Pyx_PyCallable_Check(__pyx_v_value); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(14, 177, __pyx_L1_error)
if (__pyx_t_3) {

/* "src/_encoder.pyx":178
 * 
 *     if callable(value):
 *         Py_EnterRecursiveCall(' while encoding nested JSON5 object')             # <<<<<<<<<<<<<<
 *         try:
 *             value = value()
 */
__pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while encoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(14, 178, __pyx_L1_error)

/* "src/_encoder.pyx":179
 *     if callable(value):
 *         Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *         try:             # <<<<<<<<<<<<<<
 *             value = value()
 *         finally:
 */
/*try:*/ {

/* "src/_encoder.pyx":180
 *         Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *         try:
 *             value = value()             # <<<<<<<<<<<<<<
 *         finally:
 *             Py_LeaveRecursiveCall()
 */
__Pyx_INCREF(__pyx_v_value);
__pyx_t_1 = __pyx_v_value; __pyx_t_5 = NULL;
__pyx_t_6 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_1))) {
__pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
if (likely(__pyx_t_5)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
__Pyx_INCREF(__pyx_t_5);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_1, function);
__pyx_t_6 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
__pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
if (unlikely(!__pyx_t_2)) __PYX_ERR(14, 180, __pyx_L6_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
}
__Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
__pyx_t_2 = 0;
}

/* "src/_encoder.pyx":182
 *             value = value()
 *         finally:
 *             Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 * 
 *     _append_ascii(writer, value)
 */
/*finally:*/ {
/*normal exit:*/{
Py_LeaveRecursiveCall();
goto __pyx_L7;
}
__pyx_L6_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
{
Py_LeaveRecursiveCall();
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
}
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
goto __pyx_L1_error;
}
__pyx_L7:;
}

/* "src/_encoder.pyx":177
 *         return False
 * 
 *     if callable(value):             # <<<<<<<<<<<<<<
 *         Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *         try:
 */
}

/* "src/_encoder.pyx":184
 *             Py_LeaveRecursiveCall()
 * 
 *     _append_ascii(writer, value)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
__pyx_t_8 = __pyx_f_7pyjson5__append_ascii(__pyx_v_writer, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(14, 184, __pyx_L1_error)

/* "src/_encoder.pyx":185
 * 
 *     _append_ascii(writer, value)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":172
 * 
 * 
 * cdef int _encode_tojson(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef object value = getattr(data, (<Options> writer.options).tojson, None)
 *     if value is None:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_AddTraceback("pyjson5._encode_tojson", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_value);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":188
 * 
 * 
 * cdef int _encode_sequence(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef boolean first
 *     cdef object iterator
 */

static int __pyx_f_7pyjson5__encode_sequence(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
bool __pyx_v_first;
PyObject *__pyx_v_iterator = 0;
PyObject *__pyx_v_value = 0;
int __pyx_v_result;
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
PyObject *__pyx_t_4 = NULL;
int __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
bool __pyx_t_8;
int __pyx_t_9;
int __pyx_t_10;
char const *__pyx_t_11;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_sequence", 1);

/* "src/_encoder.pyx":194
 *     cdef int result
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         iterator = PyObject_GetIter(data)
 *     except TypeError:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_3);
/*try:*/ {

/* "src/_encoder.pyx":195
 * 
 *     try:
 *         iterator = PyObject_GetIter(data)             # <<<<<<<<<<<<<<
 *     except TypeError:
 *         return False
 */
__pyx_t_4 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(14, 195, __pyx_L3_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_v_iterator = __pyx_t_4;
__pyx_t_4 = 0;

/* "src/_encoder.pyx":194
 *     cdef int result
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         iterator = PyObject_GetIter(data)
 *     except TypeError:
 */
}
__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
goto __pyx_L8_try_end;
__pyx_L3_error:;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

/* "src/_encoder.pyx":196
 *     try:
 *         iterator = PyObject_GetIter(data)
 *     except TypeError:             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
__pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
if (__pyx_t_5) {
__Pyx_AddTraceback("pyjson5._encode_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(14, 196, __pyx_L5_except_error)
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_7);

/* "src/_encoder.pyx":197
 *         iterator = PyObject_GetIter(data)
 *     except TypeError:
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 */
__pyx_r = 0;
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
goto __pyx_L6_except_return;
}
goto __pyx_L5_except_error;

/* "src/_encoder.pyx":194
 *     cdef int result
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         iterator = PyObject_GetIter(data)
 *     except TypeError:
 */
__pyx_L5_except_error:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L1_error;
__pyx_L6_except_return:;
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
goto __pyx_L0;
__pyx_L8_try_end:;
}

/* "src/_encoder.pyx":199
 *         return False
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')             # <<<<<<<<<<<<<<
 *     try:
 *         writer.append_c(writer, <char> b'[')
 */
__pyx_t_8 = Py_EnterRecursiveCall(((char const *)" while encoding nested JSON5 object")); if (unlikely(__pyx_t_8 == ((bool)1))) __PYX_ERR(14, 199, __pyx_L1_error)

/* "src/_encoder.pyx":200
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *     try:             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> b'[')
 *         first = True
 */
/*try:*/ {

/* "src/_encoder.pyx":201
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *     try:
 *         writer.append_c(writer, <char> b'[')             # <<<<<<<<<<<<<<
 *         first = True
 *         value = None
 */
__pyx_t_8 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)'[')); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 201, __pyx_L12_error)

/* "src/_encoder.pyx":202
 *     try:
 *         writer.append_c(writer, <char> b'[')
 *         first = True             # <<<<<<<<<<<<<<
 *         value = None
 *         while iter_next(iterator, &<PyObject*&> value):
 */
__pyx_v_first = 1;

/* "src/_encoder.pyx":203
 *         writer.append_c(writer, <char> b'[')
 *         first = True
 *         value = None             # <<<<<<<<<<<<<<
 *         while iter_next(iterator, &<PyObject*&> value):
 *             if not first:
 */
__Pyx_INCREF(Py_None);
__pyx_v_value = Py_None;

/* "src/_encoder.pyx":204
 *         first = True
 *         value = None
 *         while iter_next(iterator, &<PyObject*&> value):             # <<<<<<<<<<<<<<
 *             if not first:
 *                 writer.append_c(writer, <char> b',')
 */
while (1) {
__pyx_t_5 = JSON5EncoderCpp::iter_next(__pyx_v_iterator, (&((PyObject *&)__pyx_v_value))); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(14, 204, __pyx_L12_error)
__pyx_t_9 = (__pyx_t_5 != 0);
if (!__pyx_t_9) break;

/* "src/_encoder.pyx":205
 *         value = None
 *         while iter_next(iterator, &<PyObject*&> value):
 *             if not first:             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, <char> b',')
 *             else:
 */
__pyx_t_9 = (!(__pyx_v_first != 0));
if (__pyx_t_9) {

/* "src/_encoder.pyx":206
 *         while iter_next(iterator, &<PyObject*&> value):
 *             if not first:
 *                 writer.append_c(writer, <char> b',')             # <<<<<<<<<<<<<<
 *             else:
 *                 first = False
 */
__pyx_t_8 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)',')); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 206, __pyx_L12_error)

/* "src/_encoder.pyx":205
 *         value = None
 *         while iter_next(iterator, &<PyObject*&> value):
 *             if not first:             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, <char> b',')
 *             else:
 */
goto __pyx_L16;
}

/* "src/_encoder.pyx":208
 *                 writer.append_c(writer, <char> b',')
 *             else:
 *                 first = False             # <<<<<<<<<<<<<<
 * 
 *             result = _encode(writer, value)
 */
/*else*/ {
__pyx_v_first = 0;
}
__pyx_L16:;

/* "src/_encoder.pyx":210
 *                 first = False
 * 
 *             result = _encode(writer, value)             # <<<<<<<<<<<<<<
 *             if expect(result < 0, False):
 *                 return result
 */
__pyx_t_5 = __pyx_f_7pyjson5__encode(__pyx_v_writer, __pyx_v_value); if (unlikely(__pyx_t_5 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(14, 210, __pyx_L12_error)
__pyx_v_result = __pyx_t_5;

/* "src/_encoder.pyx":211
 * 
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *                 return result
 *         writer.append_c(writer, <char> b']')
 */
__pyx_t_9 = (JSON5EncoderCpp_expect((__pyx_v_result < 0), 0) != 0);
if (__pyx_t_9) {

/* "src/_encoder.pyx":212
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):
 *                 return result             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> b']')
 *     finally:
 */
__pyx_r = __pyx_v_result;
goto __pyx_L11_return;

/* "src/_encoder.pyx":211
 * 
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *                 return result
 *         writer.append_c(writer, <char> b']')
 */
}
}

/* "src/_encoder.pyx":213
 *             if expect(result < 0, False):
 *                 return result
 *         writer.append_c(writer, <char> b']')             # <<<<<<<<<<<<<<
 *     finally:
 *         Py_LeaveRecursiveCall()
 */
__pyx_t_8 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)']')); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 213, __pyx_L12_error)
}

/* "src/_encoder.pyx":215
 *         writer.append_c(writer, <char> b']')
 *     finally:
 *         Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*finally:*/ {
/*normal exit:*/{
Py_LeaveRecursiveCall();
goto __pyx_L13;
}
__pyx_L12_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0)) __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_3);
__Pyx_XGOTREF(__pyx_t_2);
__Pyx_XGOTREF(__pyx_t_1);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__pyx_t_5 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
{
Py_LeaveRecursiveCall();
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
}
__Pyx_XGIVEREF(__pyx_t_3);
__Pyx_XGIVEREF(__pyx_t_2);
__Pyx_XGIVEREF(__pyx_t_1);
__Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);
__pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
goto __pyx_L1_error;
}
__pyx_L11_return: {
__pyx_t_10 = __pyx_r;
Py_LeaveRecursiveCall();
__pyx_r = __pyx_t_10;
goto __pyx_L0;
}
__pyx_L13:;
}

/* "src/_encoder.pyx":217
 *         Py_LeaveRecursiveCall()
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":188
 * 
 * 
 * cdef int _encode_sequence(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef boolean first
 *     cdef object iterator
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5._encode_sequence", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_iterator);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":220
 * 
 * 
 * cdef int _encode_mapping(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef boolean first
 *     cdef object iterator, key, value
 */

static int __pyx_f_7pyjson5__encode_mapping(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
bool __pyx_v_first;
PyObject *__pyx_v_iterator = 0;
PyObject *__pyx_v_key = 0;
PyObject *__pyx_v_value = 0;
int __pyx_v_result;
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
bool __pyx_t_4;
int __pyx_t_5;
int __pyx_t_6;
char const *__pyx_t_7;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_mapping", 1);

/* "src/_encoder.pyx":225
 *     cdef int result
 * 
 *     if not isinstance(data, (<Options> writer.options).mappingtypes):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
__pyx_t_1 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->mappingtypes;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = PyObject_IsInstance(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 225, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_3 = (!__pyx_t_2);
if (__pyx_t_3) {

/* "src/_encoder.pyx":226
 * 
 *     if not isinstance(data, (<Options> writer.options).mappingtypes):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     iterator = PyObject_GetIter(data)
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_encoder.pyx":225
 *     cdef int result
 * 
 *     if not isinstance(data, (<Options> writer.options).mappingtypes):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
}

/* "src/_encoder.pyx":228
 *         return False
 * 
 *     iterator = PyObject_GetIter(data)             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 */
__pyx_t_1 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 228, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_iterator = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_encoder.pyx":230
 *     iterator = PyObject_GetIter(data)
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')             # <<<<<<<<<<<<<<
 *     try:
 *         writer.append_c(writer, <char> b'{')
 */
__pyx_t_4 = Py_EnterRecursiveCall(((char const *)" while encoding nested JSON5 object")); if (unlikely(__pyx_t_4 == ((bool)1))) __PYX_ERR(14, 230, __pyx_L1_error)

/* "src/_encoder.pyx":231
 * 
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *     try:             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> b'{')
 *         first = True
 */
/*try:*/ {

/* "src/_encoder.pyx":232
 *     Py_EnterRecursiveCall(' while encoding nested JSON5 object')
 *     try:
 *         writer.append_c(writer, <char> b'{')             # <<<<<<<<<<<<<<
 *         first = True
 *         key = None
 */
__pyx_t_4 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)'{')); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 232, __pyx_L5_error)

/* "src/_encoder.pyx":233
 *     try:
 *         writer.append_c(writer, <char> b'{')
 *         first = True             # <<<<<<<<<<<<<<
 *         key = None
 *         while iter_next(iterator, &<PyObject*&> key):
 */
__pyx_v_first = 1;

/* "src/_encoder.pyx":234
 *         writer.append_c(writer, <char> b'{')
 *         first = True
 *         key = None             # <<<<<<<<<<<<<<
 *         while iter_next(iterator, &<PyObject*&> key):
 *             if not first:
 */
__Pyx_INCREF(Py_None);
__pyx_v_key = Py_None;

/* "src/_encoder.pyx":235
 *         first = True
 *         key = None
 *         while iter_next(iterator, &<PyObject*&> key):             # <<<<<<<<<<<<<<
 *             if not first:
 *                 writer.append_c(writer, <char> b',')
 */
while (1) {
__pyx_t_5 = JSON5EncoderCpp::iter_next(__pyx_v_iterator, (&((PyObject *&)__pyx_v_key))); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(14, 235, __pyx_L5_error)
__pyx_t_3 = (__pyx_t_5 != 0);
if (!__pyx_t_3) break;

/* "src/_encoder.pyx":236
 *         key = None
 *         while iter_next(iterator, &<PyObject*&> key):
 *             if not first:             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, <char> b',')
 *             else:
 */
__pyx_t_3 = (!(__pyx_v_first != 0));
if (__pyx_t_3) {

/* "src/_encoder.pyx":237
 *         while iter_next(iterator, &<PyObject*&> key):
 *             if not first:
 *                 writer.append_c(writer, <char> b',')             # <<<<<<<<<<<<<<
 *             else:
 *                 first = False
 */
__pyx_t_4 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)',')); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 237, __pyx_L5_error)

/* "src/_encoder.pyx":236
 *         key = None
 *         while iter_next(iterator, &<PyObject*&> key):
 *             if not first:             # <<<<<<<<<<<<<<
 *                 writer.append_c(writer, <char> b',')
 *             else:
 */
goto __pyx_L9;
}

/* "src/_encoder.pyx":239
 *                 writer.append_c(writer, <char> b',')
 *             else:
 *                 first = False             # <<<<<<<<<<<<<<
 *             value = data[key]
 * 
 */
/*else*/ {
__pyx_v_first = 0;
}
__pyx_L9:;

/* "src/_encoder.pyx":240
 *             else:
 *                 first = False
 *             value = data[key]             # <<<<<<<<<<<<<<
 * 
 *             if PyUnicode_Check(key):
 */
__pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_data, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 240, __pyx_L5_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
__pyx_t_1 = 0;

/* "src/_encoder.pyx":242
 *             value = data[key]
 * 
 *             if PyUnicode_Check(key):             # <<<<<<<<<<<<<<
 *                 _encode_unicode(writer, key)
 *             else:
 */
__pyx_t_3 = PyUnicode_Check(__pyx_v_key);
if (__pyx_t_3) {

/* "src/_encoder.pyx":243
 * 
 *             if PyUnicode_Check(key):
 *                 _encode_unicode(writer, key)             # <<<<<<<<<<<<<<
 *             else:
 *                 _encode_nested_key(writer, key)
 */
__pyx_t_5 = __pyx_f_7pyjson5__encode_unicode(__pyx_v_writer, __pyx_v_key); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(14, 243, __pyx_L5_error)

/* "src/_encoder.pyx":242
 *             value = data[key]
 * 
 *             if PyUnicode_Check(key):             # <<<<<<<<<<<<<<
 *                 _encode_unicode(writer, key)
 *             else:
 */
goto __pyx_L10;
}

/* "src/_encoder.pyx":245
 *                 _encode_unicode(writer, key)
 *             else:
 *                 _encode_nested_key(writer, key)             # <<<<<<<<<<<<<<
 * 
 *             writer.append_c(writer, <char> b':')
 */
/*else*/ {
__pyx_t_5 = __pyx_f_7pyjson5__encode_nested_key(__pyx_v_writer, __pyx_v_key); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(14, 245, __pyx_L5_error)
}
__pyx_L10:;

/* "src/_encoder.pyx":247
 *                 _encode_nested_key(writer, key)
 * 
 *             writer.append_c(writer, <char> b':')             # <<<<<<<<<<<<<<
 * 
 *             result = _encode(writer, value)
 */
__pyx_t_4 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)':')); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 247, __pyx_L5_error)

/* "src/_encoder.pyx":249
 *             writer.append_c(writer, <char> b':')
 * 
 *             result = _encode(writer, value)             # <<<<<<<<<<<<<<
 *             if expect(result < 0, False):
 *                 return result
 */
__pyx_t_5 = __pyx_f_7pyjson5__encode(__pyx_v_writer, __pyx_v_value); if (unlikely(__pyx_t_5 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(14, 249, __pyx_L5_error)
__pyx_v_result = __pyx_t_5;

/* "src/_encoder.pyx":250
 * 
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *                 return result
 *         writer.append_c(writer, <char> b'}')
 */
__pyx_t_3 = (JSON5EncoderCpp_expect((__pyx_v_result < 0), 0) != 0);
if (__pyx_t_3) {

/* "src/_encoder.pyx":251
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):
 *                 return result             # <<<<<<<<<<<<<<
 *         writer.append_c(writer, <char> b'}')
 *     finally:
 */
__pyx_r = __pyx_v_result;
goto __pyx_L4_return;

/* "src/_encoder.pyx":250
 * 
 *             result = _encode(writer, value)
 *             if expect(result < 0, False):             # <<<<<<<<<<<<<<
 *                 return result
 *         writer.append_c(writer, <char> b'}')
 */
}
}

/* "src/_encoder.pyx":252
 *             if expect(result < 0, False):
 *                 return result
 *         writer.append_c(writer, <char> b'}')             # <<<<<<<<<<<<<<
 *     finally:
 *         Py_LeaveRecursiveCall()
 */
__pyx_t_4 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)'}')); if (unlikely(__pyx_t_4 == ((bool)0))) __PYX_ERR(14, 252, __pyx_L5_error)
}

/* "src/_encoder.pyx":254
 *         writer.append_c(writer, <char> b'}')
 *     finally:
 *         Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
/*finally:*/ {
/*normal exit:*/{
Py_LeaveRecursiveCall();
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
{
Py_LeaveRecursiveCall();
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
}
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_XGIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
__pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
goto __pyx_L1_error;
}
__pyx_L4_return: {
__pyx_t_6 = __pyx_r;
Py_LeaveRecursiveCall();
__pyx_r = __pyx_t_6;
goto __pyx_L0;
}
__pyx_L6:;
}

/* "src/_encoder.pyx":256
 *         Py_LeaveRecursiveCall()
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":220
 * 
 * 
 * cdef int _encode_mapping(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef boolean first
 *     cdef object iterator, key, value
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._encode_mapping", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_iterator);
__Pyx_XDECREF(__pyx_v_key);
__Pyx_XDECREF(__pyx_v_value);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":259
 * 
 * 
 * cdef int _encode_none(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     writer.append_s(writer, b'null', 4)
 *     return True
 */

static int __pyx_f_7pyjson5__encode_none(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, CYTHON_UNUSED PyObject *__pyx_v_data) {
int __pyx_r;
bool __pyx_t_1;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_encoder.pyx":260
 * 
 * cdef int _encode_none(WriterRef writer, object data) except -1:
 *     writer.append_s(writer, b'null', 4)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
__pyx_t_1 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"null"), 4); if (unlikely(__pyx_t_1 == ((bool)0))) __PYX_ERR(14, 260, __pyx_L1_error)

/* "src/_encoder.pyx":261
 * cdef int _encode_none(WriterRef writer, object data) except -1:
 *     writer.append_s(writer, b'null', 4)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":259
 * 
 * 
 * cdef int _encode_none(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     writer.append_s(writer, b'null', 4)
 *     return True
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._encode_none", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder.pyx":264
 * 
 * 
 * cdef int _encode_bytes(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     _encode_unicode(writer, PyUnicode_FromEncodedObject(data, 'UTF-8', 'strict'))
 *     return True
 */

static int __pyx_f_7pyjson5__encode_bytes(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_bytes", 1);

/* "src/_encoder.pyx":265
 * 
 * cdef int _encode_bytes(WriterRef writer, object data) except -1:
 *     _encode_unicode(writer, PyUnicode_FromEncodedObject(data, 'UTF-8', 'strict'))             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
__pyx_t_1 = PyUnicode_FromEncodedObject(__pyx_v_data, ((char *)"UTF-8"), ((char *)"strict")); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 265, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_2 = __pyx_f_7pyjson5__encode_unicode(__pyx_v_writer, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 265, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_encoder.pyx":266
 * cdef int _encode_bytes(WriterRef writer, object data) except -1:
 *     _encode_unicode(writer, PyUnicode_FromEncodedObject(data, 'UTF-8', 'strict'))
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":264
 * 
 * 
 * cdef int _encode_bytes(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     _encode_unicode(writer, PyUnicode_FromEncodedObject(data, 'UTF-8', 'strict'))
 *     return True
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._encode_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":269
 * 
 * 
 * cdef int _encode_datetime(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef object stringified
 *     cdef Py_ssize_t length
 */

static int __pyx_f_7pyjson5__encode_datetime(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
PyObject *__pyx_v_stringified = 0;
Py_ssize_t __pyx_v_length;
char const *__pyx_v_string;
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
unsigned int __pyx_t_6;
char const *__pyx_t_7;
bool __pyx_t_8;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_datetime", 1);

/* "src/_encoder.pyx":274
 *     cdef const char *string
 * 
 *     if not isinstance(data, DATETIME_CLASSES):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
__pyx_t_1 = __pyx_v_7pyjson5_DATETIME_CLASSES;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = PyObject_IsInstance(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 274, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_3 = (!__pyx_t_2);
if (__pyx_t_3) {

/* "src/_encoder.pyx":275
 * 
 *     if not isinstance(data, DATETIME_CLASSES):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     stringified = data.isoformat()
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_encoder.pyx":274
 *     cdef const char *string
 * 
 *     if not isinstance(data, DATETIME_CLASSES):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
}

/* "src/_encoder.pyx":277
 *         return False
 * 
 *     stringified = data.isoformat()             # <<<<<<<<<<<<<<
 *     length = 0
 *     string = PyUnicode_AsUTF8AndSize(stringified, &length)
 */
__pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_isoformat); if (unlikely(!__pyx_t_4)) __PYX_ERR(14, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_t_5 = NULL;
__pyx_t_6 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_4))) {
__pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
if (likely(__pyx_t_5)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
__Pyx_INCREF(__pyx_t_5);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_4, function);
__pyx_t_6 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
}
__pyx_v_stringified = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_encoder.pyx":278
 * 
 *     stringified = data.isoformat()
 *     length = 0             # <<<<<<<<<<<<<<
 *     string = PyUnicode_AsUTF8AndSize(stringified, &length)
 * 
 */
__pyx_v_length = 0;

/* "src/_encoder.pyx":279
 *     stringified = data.isoformat()
 *     length = 0
 *     string = PyUnicode_AsUTF8AndSize(stringified, &length)             # <<<<<<<<<<<<<<
 * 
 *     writer.reserve(writer, 2 + length)
 */
__pyx_t_7 = PyUnicode_AsUTF8AndSize(__pyx_v_stringified, (&__pyx_v_length)); if (unlikely(__pyx_t_7 == ((char const *)NULL))) __PYX_ERR(14, 279, __pyx_L1_error)
__pyx_v_string = __pyx_t_7;

/* "src/_encoder.pyx":281
 *     string = PyUnicode_AsUTF8AndSize(stringified, &length)
 * 
 *     writer.reserve(writer, 2 + length)             # <<<<<<<<<<<<<<
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     writer.append_s(writer, string, length)
 */
__pyx_t_8 = __pyx_v_writer.reserve(__pyx_v_writer, (2 + __pyx_v_length)); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 281, __pyx_L1_error)

/* "src/_encoder.pyx":282
 * 
 *     writer.reserve(writer, 2 + length)
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 *     writer.append_s(writer, string, length)
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 */
__pyx_t_1 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_8 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_1)[0]))); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 282, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_encoder.pyx":283
 *     writer.reserve(writer, 2 + length)
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     writer.append_s(writer, string, length)             # <<<<<<<<<<<<<<
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 * 
 */
__pyx_t_8 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_string, __pyx_v_length); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 283, __pyx_L1_error)

/* "src/_encoder.pyx":284
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 *     writer.append_s(writer, string, length)
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_1 = ((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->quotationmark;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_8 = __pyx_v_writer.append_c(__pyx_v_writer, ((char)(PyUnicode_1BYTE_DATA(__pyx_t_1)[0]))); if (unlikely(__pyx_t_8 == ((bool)0))) __PYX_ERR(14, 284, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_encoder.pyx":286
 *     writer.append_c(writer, <char> PyUnicode_1BYTE_DATA((<Options> writer.options).quotationmark)[0])
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":269
 * 
 * 
 * cdef int _encode_datetime(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef object stringified
 *     cdef Py_ssize_t length
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_AddTraceback("pyjson5._encode_datetime", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_stringified);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":289
 * 
 * 
 * cdef int _encode_format_string(WriterRef writer, object data, object fmt) except -1:             # <<<<<<<<<<<<<<
 *     cdef object formatted
 *     cdef const char *string
 */

static int __pyx_f_7pyjson5__encode_format_string(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data, PyObject *__pyx_v_fmt) {
PyObject *__pyx_v_formatted = 0;
char const *__pyx_v_string;
Py_ssize_t __pyx_v_length;
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
char const *__pyx_t_2;
bool __pyx_t_3;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_format_string", 1);

/* "src/_encoder.pyx":292
 *     cdef object formatted
 *     cdef const char *string
 *     cdef Py_ssize_t length = 0  # silence warning             # <<<<<<<<<<<<<<
 * 
 *     formatted = PyUnicode_Format(fmt, data)
 */
__pyx_v_length = 0;

/* "src/_encoder.pyx":294
 *     cdef Py_ssize_t length = 0  # silence warning
 * 
 *     formatted = PyUnicode_Format(fmt, data)             # <<<<<<<<<<<<<<
 *     string = PyUnicode_AsUTF8AndSize(formatted, &length)
 *     writer.append_s(writer, string, length)
 */
__pyx_t_1 = PyUnicode_Format(__pyx_v_fmt, __pyx_v_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 294, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_formatted = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_encoder.pyx":295
 * 
 *     formatted = PyUnicode_Format(fmt, data)
 *     string = PyUnicode_AsUTF8AndSize(formatted, &length)             # <<<<<<<<<<<<<<
 *     writer.append_s(writer, string, length)
 * 
 */
__pyx_t_2 = PyUnicode_AsUTF8AndSize(__pyx_v_formatted, (&__pyx_v_length)); if (unlikely(__pyx_t_2 == ((char const *)NULL))) __PYX_ERR(14, 295, __pyx_L1_error)
__pyx_v_string = __pyx_t_2;

/* "src/_encoder.pyx":296
 *     formatted = PyUnicode_Format(fmt, data)
 *     string = PyUnicode_AsUTF8AndSize(formatted, &length)
 *     writer.append_s(writer, string, length)             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_3 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_string, __pyx_v_length); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(14, 296, __pyx_L1_error)

/* "src/_encoder.pyx":298
 *     writer.append_s(writer, string, length)
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":289
 * 
 * 
 * cdef int _encode_format_string(WriterRef writer, object data, object fmt) except -1:             # <<<<<<<<<<<<<<
 *     cdef object formatted
 *     cdef const char *string
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._encode_format_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_formatted);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":301
 * 
 * 
 * cdef int _encode_float(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef double value = PyFloat_AsDouble(data)
 *     cdef int classification = fpclassify(value)
 */

static int __pyx_f_7pyjson5__encode_float(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
double __pyx_v_value;
int __pyx_v_classification;
char __pyx_v_buf[64];
char *__pyx_v_end;
char *__pyx_v_string;
Py_ssize_t __pyx_v_length;
int __pyx_r;
double __pyx_t_1;
int __pyx_t_2;
bool __pyx_t_3;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_encoder.pyx":302
 * 
 * cdef int _encode_float(WriterRef writer, object data) except -1:
 *     cdef double value = PyFloat_AsDouble(data)             # <<<<<<<<<<<<<<
 *     cdef int classification = fpclassify(value)
 *     cdef char buf[64]
 */
__pyx_t_1 = PyFloat_AsDouble(__pyx_v_data); if (unlikely(__pyx_t_1 == ((double)-1.0) && PyErr_Occurred())) __PYX_ERR(14, 302, __pyx_L1_error)
__pyx_v_value = __pyx_t_1;

/* "src/_encoder.pyx":303
 * cdef int _encode_float(WriterRef writer, object data) except -1:
 *     cdef double value = PyFloat_AsDouble(data)
 *     cdef int classification = fpclassify(value)             # <<<<<<<<<<<<<<
 *     cdef char buf[64]
 *     cdef char *end
 */
__pyx_v_classification = std::fpclassify(__pyx_v_value);

/* "src/_encoder.pyx":309
 *     cdef Py_ssize_t length
 * 
 *     if classification == FP_NORMAL:             # <<<<<<<<<<<<<<
 *         end = Dtoa(buf, PyFloat_AsDouble(data))
 *         length = end - buf
 */
switch (__pyx_v_classification) {
case FP_NORMAL:

/* "src/_encoder.pyx":310
 * 
 *     if classification == FP_NORMAL:
 *         end = Dtoa(buf, PyFloat_AsDouble(data))             # <<<<<<<<<<<<<<
 *         length = end - buf
 *         string = buf
 */
__pyx_t_1 = PyFloat_AsDouble(__pyx_v_data); if (unlikely(__pyx_t_1 == ((double)-1.0) && PyErr_Occurred())) __PYX_ERR(14, 310, __pyx_L1_error)
__pyx_v_end = dragonbox::Dtoa(__pyx_v_buf, __pyx_t_1);

/* "src/_encoder.pyx":311
 *     if classification == FP_NORMAL:
 *         end = Dtoa(buf, PyFloat_AsDouble(data))
 *         length = end - buf             # <<<<<<<<<<<<<<
 *         string = buf
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):
 */
__pyx_v_length = (__pyx_v_end - __pyx_v_buf);

/* "src/_encoder.pyx":312
 *         end = Dtoa(buf, PyFloat_AsDouble(data))
 *         length = end - buf
 *         string = buf             # <<<<<<<<<<<<<<
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):
 *         string = b'0.0'
 */
__pyx_v_string = __pyx_v_buf;

/* "src/_encoder.pyx":309
 *     cdef Py_ssize_t length
 * 
 *     if classification == FP_NORMAL:             # <<<<<<<<<<<<<<
 *         end = Dtoa(buf, PyFloat_AsDouble(data))
 *         length = end - buf
 */
break;
case FP_SUBNORMAL:

/* "src/_encoder.pyx":313
 *         length = end - buf
 *         string = buf
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):             # <<<<<<<<<<<<<<
 *         string = b'0.0'
 *         length = 3
 */
case FP_ZERO:

/* "src/_encoder.pyx":314
 *         string = buf
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):
 *         string = b'0.0'             # <<<<<<<<<<<<<<
 *         length = 3
 *     elif classification == FP_NAN:
 */
__pyx_v_string = ((char *)"0.0");

/* "src/_encoder.pyx":315
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):
 *         string = b'0.0'
 *         length = 3             # <<<<<<<<<<<<<<
 *     elif classification == FP_NAN:
 *         string = b'NaN'
 */
__pyx_v_length = 3;

/* "src/_encoder.pyx":313
 *         length = end - buf
 *         string = buf
 *     elif classification in (FP_SUBNORMAL, FP_ZERO):             # <<<<<<<<<<<<<<
 *         string = b'0.0'
 *         length = 3
 */
break;
case FP_NAN:

/* "src/_encoder.pyx":317
 *         length = 3
 *     elif classification == FP_NAN:
 *         string = b'NaN'             # <<<<<<<<<<<<<<
 *         length = 3
 *     else:
 */
__pyx_v_string = ((char *)"NaN");

/* "src/_encoder.pyx":318
 *     elif classification == FP_NAN:
 *         string = b'NaN'
 *         length = 3             # <<<<<<<<<<<<<<
 *     else:
 *         # classification == FP_INFINITE
 */
__pyx_v_length = 3;

/* "src/_encoder.pyx":316
 *         string = b'0.0'
 *         length = 3
 *     elif classification == FP_NAN:             # <<<<<<<<<<<<<<
 *         string = b'NaN'
 *         length = 3
 */
break;
default:

/* "src/_encoder.pyx":321
 *     else:
 *         # classification == FP_INFINITE
 *         if value > 0.0:             # <<<<<<<<<<<<<<
 *             string = b'Infinity'
 *             length = 8
 */
__pyx_t_2 = (__pyx_v_value > 0.0);
if (__pyx_t_2) {

/* "src/_encoder.pyx":322
 *         # classification == FP_INFINITE
 *         if value > 0.0:
 *             string = b'Infinity'             # <<<<<<<<<<<<<<
 *             length = 8
 *         else:
 */
__pyx_v_string = ((char *)"Infinity");

/* "src/_encoder.pyx":323
 *         if value > 0.0:
 *             string = b'Infinity'
 *             length = 8             # <<<<<<<<<<<<<<
 *         else:
 *             string = b'-Infinity'
 */
__pyx_v_length = 8;

/* "src/_encoder.pyx":321
 *     else:
 *         # classification == FP_INFINITE
 *         if value > 0.0:             # <<<<<<<<<<<<<<
 *             string = b'Infinity'
 *             length = 8
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":325
 *             length = 8
 *         else:
 *             string = b'-Infinity'             # <<<<<<<<<<<<<<
 *             length = 9
 * 
 */
/*else*/ {
__pyx_v_string = ((char *)"-Infinity");

/* "src/_encoder.pyx":326
 *         else:
 *             string = b'-Infinity'
 *             length = 9             # <<<<<<<<<<<<<<
 * 
 *     writer.append_s(writer, string, length)
 */
__pyx_v_length = 9;
}
__pyx_L3:;
break;
}

/* "src/_encoder.pyx":328
 *             length = 9
 * 
 *     writer.append_s(writer, string, length)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
__pyx_t_3 = __pyx_v_writer.append_s(__pyx_v_writer, __pyx_v_string, __pyx_v_length); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(14, 328, __pyx_L1_error)

/* "src/_encoder.pyx":329
 * 
 *     writer.append_s(writer, string, length)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":301
 * 
 * 
 * cdef int _encode_float(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     cdef double value = PyFloat_AsDouble(data)
 *     cdef int classification = fpclassify(value)
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._encode_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder.pyx":332
 * 
 * 
 * cdef int _encode_long(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if PyBool_Check(data):
 *         if data is True:
 */

static int __pyx_f_7pyjson5__encode_long(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
bool __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_long", 1);

/* "src/_encoder.pyx":333
 * 
 * cdef int _encode_long(WriterRef writer, object data) except -1:
 *     if PyBool_Check(data):             # <<<<<<<<<<<<<<
 *         if data is True:
 *             writer.append_s(writer, 'true', 4)
 */
__pyx_t_1 = PyBool_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":334
 * cdef int _encode_long(WriterRef writer, object data) except -1:
 *     if PyBool_Check(data):
 *         if data is True:             # <<<<<<<<<<<<<<
 *             writer.append_s(writer, 'true', 4)
 *         else:
 */
__pyx_t_1 = (__pyx_v_data == Py_True);
if (__pyx_t_1) {

/* "src/_encoder.pyx":335
 *     if PyBool_Check(data):
 *         if data is True:
 *             writer.append_s(writer, 'true', 4)             # <<<<<<<<<<<<<<
 *         else:
 *             writer.append_s(writer, 'false', 5)
 */
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"true"), 4); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 335, __pyx_L1_error)

/* "src/_encoder.pyx":334
 * cdef int _encode_long(WriterRef writer, object data) except -1:
 *     if PyBool_Check(data):
 *         if data is True:             # <<<<<<<<<<<<<<
 *             writer.append_s(writer, 'true', 4)
 *         else:
 */
goto __pyx_L4;
}

/* "src/_encoder.pyx":337
 *             writer.append_s(writer, 'true', 4)
 *         else:
 *             writer.append_s(writer, 'false', 5)             # <<<<<<<<<<<<<<
 *     else:
 *         _encode_format_string(writer, data, DEFAULT_INTFORMAT)
 */
/*else*/ {
__pyx_t_2 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"false"), 5); if (unlikely(__pyx_t_2 == ((bool)0))) __PYX_ERR(14, 337, __pyx_L1_error)
}
__pyx_L4:;

/* "src/_encoder.pyx":333
 * 
 * cdef int _encode_long(WriterRef writer, object data) except -1:
 *     if PyBool_Check(data):             # <<<<<<<<<<<<<<
 *         if data is True:
 *             writer.append_s(writer, 'true', 4)
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":339
 *             writer.append_s(writer, 'false', 5)
 *     else:
 *         _encode_format_string(writer, data, DEFAULT_INTFORMAT)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
/*else*/ {
__pyx_t_3 = __pyx_v_7pyjson5_DEFAULT_INTFORMAT;
__Pyx_INCREF(__pyx_t_3);
__pyx_t_4 = __pyx_f_7pyjson5__encode_format_string(__pyx_v_writer, __pyx_v_data, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(14, 339, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
}
__pyx_L3:;

/* "src/_encoder.pyx":340
 *     else:
 *         _encode_format_string(writer, data, DEFAULT_INTFORMAT)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":332
 * 
 * 
 * cdef int _encode_long(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if PyBool_Check(data):
 *         if data is True:
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5._encode_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":343
 * 
 * 
 * cdef int _encode_decimal(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if not isinstance(data, Decimal):
 *         return False
 */

static int __pyx_f_7pyjson5__encode_decimal(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int __pyx_r;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_decimal", 1);

/* "src/_encoder.pyx":344
 * 
 * cdef int _encode_decimal(WriterRef writer, object data) except -1:
 *     if not isinstance(data, Decimal):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
__pyx_t_1 = ((PyObject *)__pyx_v_7pyjson5_Decimal);
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = PyObject_IsInstance(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(14, 344, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_3 = (!__pyx_t_2);
if (__pyx_t_3) {

/* "src/_encoder.pyx":345
 * cdef int _encode_decimal(WriterRef writer, object data) except -1:
 *     if not isinstance(data, Decimal):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     _encode_format_string(writer, data, DEFAULT_DECIMALFORMAT)
 */
__pyx_r = 0;
goto __pyx_L0;

/* "src/_encoder.pyx":344
 * 
 * cdef int _encode_decimal(WriterRef writer, object data) except -1:
 *     if not isinstance(data, Decimal):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
}

/* "src/_encoder.pyx":347
 *         return False
 * 
 *     _encode_format_string(writer, data, DEFAULT_DECIMALFORMAT)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
__pyx_t_1 = __pyx_v_7pyjson5_DEFAULT_DECIMALFORMAT;
__Pyx_INCREF(__pyx_t_1);
__pyx_t_4 = __pyx_f_7pyjson5__encode_format_string(__pyx_v_writer, __pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(14, 347, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_encoder.pyx":348
 * 
 *     _encode_format_string(writer, data, DEFAULT_DECIMALFORMAT)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":343
 * 
 * 
 * cdef int _encode_decimal(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if not isinstance(data, Decimal):
 *         return False
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5._encode_decimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":351
 * 
 * 
 * cdef int _encode_unstringifiable(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if not data:
 *         writer.append_s(writer, b'none', 4)
 */

static int __pyx_f_7pyjson5__encode_unstringifiable(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int __pyx_r;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
bool __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_t_8;
int __pyx_t_9;
char const *__pyx_t_10;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
JSON5EncoderCpp::AlwaysTrue __pyx_t_14;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_unstringifiable", 0);
__Pyx_INCREF(__pyx_v_data);

/* "src/_encoder.pyx":352
 * 
 * cdef int _encode_unstringifiable(WriterRef writer, object data) except -1:
 *     if not data:             # <<<<<<<<<<<<<<
 *         writer.append_s(writer, b'none', 4)
 *         return True
 */
__pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_data); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(14, 352, __pyx_L1_error)
__pyx_t_2 = (!__pyx_t_1);
if (__pyx_t_2) {

/* "src/_encoder.pyx":353
 * cdef int _encode_unstringifiable(WriterRef writer, object data) except -1:
 *     if not data:
 *         writer.append_s(writer, b'none', 4)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
__pyx_t_3 = __pyx_v_writer.append_s(__pyx_v_writer, ((char const *)"none"), 4); if (unlikely(__pyx_t_3 == ((bool)0))) __PYX_ERR(14, 353, __pyx_L1_error)

/* "src/_encoder.pyx":354
 *     if not data:
 *         writer.append_s(writer, b'none', 4)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')
 */
__pyx_r = 1;
goto __pyx_L0;

/* "src/_encoder.pyx":352
 * 
 * cdef int _encode_unstringifiable(WriterRef writer, object data) except -1:
 *     if not data:             # <<<<<<<<<<<<<<
 *         writer.append_s(writer, b'none', 4)
 *         return True
 */
}

/* "src/_encoder.pyx":356
 *         return True
 * 
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')             # <<<<<<<<<<<<<<
 *     try:
 *         try:
 */
__pyx_t_3 = Py_EnterRecursiveCall(((char const *)" while encoding JSON5 object with vars(obj) fallback")); if (unlikely(__pyx_t_3 == ((bool)1))) __PYX_ERR(14, 356, __pyx_L1_error)

/* "src/_encoder.pyx":357
 * 
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')
 *     try:             # <<<<<<<<<<<<<<
 *         try:
 *             data = PyObject_GenericGetDict(data, NULL)
 */
/*try:*/ {

/* "src/_encoder.pyx":358
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')
 *     try:
 *         try:             # <<<<<<<<<<<<<<
 *             data = PyObject_GenericGetDict(data, NULL)
 *         except:
 */
{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_6);
/*try:*/ {

/* "src/_encoder.pyx":359
 *     try:
 *         try:
 *             data = PyObject_GenericGetDict(data, NULL)             # <<<<<<<<<<<<<<
 *         except:
 *             pass
 */
__pyx_t_7 = PyObject_GenericGetDict(__pyx_v_data, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(14, 359, __pyx_L7_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF_SET(__pyx_v_data, __pyx_t_7);
__pyx_t_7 = 0;

/* "src/_encoder.pyx":358
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')
 *     try:
 *         try:             # <<<<<<<<<<<<<<
 *             data = PyObject_GenericGetDict(data, NULL)
 *         except:
 */
}

/* "src/_encoder.pyx":363
 *             pass
 *         else:
 *             if _encode_mapping(writer, data):             # <<<<<<<<<<<<<<
 *                 return True
 *     finally:
 */
/*else:*/ {
__pyx_t_8 = __pyx_f_7pyjson5__encode_mapping(__pyx_v_writer, __pyx_v_data); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(14, 363, __pyx_L9_except_error)
__pyx_t_2 = (__pyx_t_8 != 0);
if (__pyx_t_2) {

/* "src/_encoder.pyx":364
 *         else:
 *             if _encode_mapping(writer, data):
 *                 return True             # <<<<<<<<<<<<<<
 *     finally:
 *         Py_LeaveRecursiveCall()
 */
__pyx_r = 1;
goto __pyx_L10_except_return;

/* "src/_encoder.pyx":363
 *             pass
 *         else:
 *             if _encode_mapping(writer, data):             # <<<<<<<<<<<<<<
 *                 return True
 *     finally:
 */
}
}
__Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
goto __pyx_L12_try_end;
__pyx_L7_error:;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

/* "src/_encoder.pyx":360
 *         try:
 *             data = PyObject_GenericGetDict(data, NULL)
 *         except:             # <<<<<<<<<<<<<<
 *             pass
 *         else:
 */
/*except:*/ {
__Pyx_ErrRestore(0,0,0);
goto __pyx_L8_exception_handled;
}

/* "src/_encoder.pyx":358
 *     Py_EnterRecursiveCall(' while encoding JSON5 object with vars(obj) fallback')
 *     try:
 *         try:             # <<<<<<<<<<<<<<
 *             data = PyObject_GenericGetDict(data, NULL)
 *         except:
 */
__pyx_L9_except_error:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L5_error;
__pyx_L10_except_return:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
goto __pyx_L4_return;
__pyx_L8_exception_handled:;
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
__pyx_L12_try_end:;
}
}

/* "src/_encoder.pyx":366
 *                 return True
 *     finally:
 *         Py_LeaveRecursiveCall()             # <<<<<<<<<<<<<<
 * 
 *     _raise_unstringifiable(data)
 */
/*finally:*/ {
/*normal exit:*/{
Py_LeaveRecursiveCall();
goto __pyx_L6;
}
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_6);
__Pyx_XGOTREF(__pyx_t_5);
__Pyx_XGOTREF(__pyx_t_4);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
{
Py_LeaveRecursiveCall();
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
}
__Pyx_XGIVEREF(__pyx_t_6);
__Pyx_XGIVEREF(__pyx_t_5);
__Pyx_XGIVEREF(__pyx_t_4);
__Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
__pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
goto __pyx_L1_error;
}
__pyx_L4_return: {
__pyx_t_9 = __pyx_r;
Py_LeaveRecursiveCall();
__pyx_r = __pyx_t_9;
goto __pyx_L0;
}
__pyx_L6:;
}

/* "src/_encoder.pyx":368
 *         Py_LeaveRecursiveCall()
 * 
 *     _raise_unstringifiable(data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_14 = __pyx_f_7pyjson5__raise_unstringifiable(__pyx_v_data); if (unlikely(__pyx_t_14 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(14, 368, __pyx_L1_error)

/* "src/_encoder.pyx":351
 * 
 * 
 * cdef int _encode_unstringifiable(WriterRef writer, object data) except -1:             # <<<<<<<<<<<<<<
 *     if not data:
 *         writer.append_s(writer, b'none', 4)
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5._encode_unstringifiable", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_data);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":371
 * 
 * 
 * cdef int _encode_other(WriterRef writer, object data):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 * 
 */

static int __pyx_f_7pyjson5__encode_other(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int __pyx_v_result;
int __pyx_r;
int __pyx_t_1;
int __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_encoder.pyx":372
 * 
 * cdef int _encode_other(WriterRef writer, object data):
 *     cdef int result = 0             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
__pyx_v_result = 0;

/* "src/_encoder.pyx":374
 *     cdef int result = 0
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         if (<Options> writer.options).tojson is not None:
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 */
while (1) {

/* "src/_encoder.pyx":375
 * 
 *     while True:
 *         if (<Options> writer.options).tojson is not None:             # <<<<<<<<<<<<<<
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 *             if result != 0:
 */
__pyx_t_1 = (((struct __pyx_obj_7pyjson5_Options *)__pyx_v_writer.options)->tojson != ((PyObject*)Py_None));
if (__pyx_t_1) {

/* "src/_encoder.pyx":376
 *     while True:
 *         if (<Options> writer.options).tojson is not None:
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)             # <<<<<<<<<<<<<<
 *             if result != 0:
 *                 break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_tojson)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 376, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":377
 *         if (<Options> writer.options).tojson is not None:
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":378
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 *             if result != 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         if obj_has_iter(data):
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":377
 *         if (<Options> writer.options).tojson is not None:
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_encoder.pyx":375
 * 
 *     while True:
 *         if (<Options> writer.options).tojson is not None:             # <<<<<<<<<<<<<<
 *             result = (<int(*)(WriterRef, object)> _encode_tojson)(writer, data)
 *             if result != 0:
 */
}

/* "src/_encoder.pyx":380
 *                 break
 * 
 *         if obj_has_iter(data):             # <<<<<<<<<<<<<<
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)
 *             if result != 0:
 */
__pyx_t_1 = (JSON5EncoderCpp::obj_has_iter(__pyx_v_data) != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":381
 * 
 *         if obj_has_iter(data):
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)             # <<<<<<<<<<<<<<
 *             if result != 0:
 *                 break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_mapping)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 381, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":382
 *         if obj_has_iter(data):
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":383
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)
 *             if result != 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             result = (<int(*)(WriterRef, object)> _encode_sequence)(writer, data)
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":382
 *         if obj_has_iter(data):
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_encoder.pyx":385
 *                 break
 * 
 *             result = (<int(*)(WriterRef, object)> _encode_sequence)(writer, data)             # <<<<<<<<<<<<<<
 *             if result != 0:
 *                 break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_sequence)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 385, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":386
 * 
 *             result = (<int(*)(WriterRef, object)> _encode_sequence)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":387
 *             result = (<int(*)(WriterRef, object)> _encode_sequence)(writer, data)
 *             if result != 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_decimal)(writer, data)
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":386
 * 
 *             result = (<int(*)(WriterRef, object)> _encode_sequence)(writer, data)
 *             if result != 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
}

/* "src/_encoder.pyx":380
 *                 break
 * 
 *         if obj_has_iter(data):             # <<<<<<<<<<<<<<
 *             result = (<int(*)(WriterRef, object)> _encode_mapping)(writer, data)
 *             if result != 0:
 */
}

/* "src/_encoder.pyx":389
 *                 break
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_decimal)(writer, data)             # <<<<<<<<<<<<<<
 *         if result != 0:
 *             break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_decimal)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 389, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":390
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_decimal)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":391
 *         result = (<int(*)(WriterRef, object)> _encode_decimal)(writer, data)
 *         if result != 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_datetime)(writer, data)
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":390
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_decimal)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_encoder.pyx":393
 *             break
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_datetime)(writer, data)             # <<<<<<<<<<<<<<
 *         if result != 0:
 *             break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_datetime)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 393, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":394
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_datetime)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":395
 *         result = (<int(*)(WriterRef, object)> _encode_datetime)(writer, data)
 *         if result != 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_unstringifiable)(writer, data)
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":394
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_datetime)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_encoder.pyx":397
 *             break
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_unstringifiable)(writer, data)             # <<<<<<<<<<<<<<
 *         if result != 0:
 *             break
 */
__pyx_t_2 = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_unstringifiable)(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 397, __pyx_L1_error)
__pyx_v_result = __pyx_t_2;

/* "src/_encoder.pyx":398
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_unstringifiable)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
__pyx_t_1 = (__pyx_v_result != 0);
if (__pyx_t_1) {

/* "src/_encoder.pyx":399
 *         result = (<int(*)(WriterRef, object)> _encode_unstringifiable)(writer, data)
 *         if result != 0:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         break
 */
goto __pyx_L4_break;

/* "src/_encoder.pyx":398
 * 
 *         result = (<int(*)(WriterRef, object)> _encode_unstringifiable)(writer, data)
 *         if result != 0:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
}

/* "src/_encoder.pyx":401
 *             break
 * 
 *         break             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
goto __pyx_L4_break;
}
__pyx_L4_break:;

/* "src/_encoder.pyx":403
 *         break
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_r = __pyx_v_result;
goto __pyx_L0;

/* "src/_encoder.pyx":371
 * 
 * 
 * cdef int _encode_other(WriterRef writer, object data):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._encode_other", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder.pyx":406
 * 
 * 
 * cdef int _encode(WriterRef writer, object data):             # <<<<<<<<<<<<<<
 *     cdef int (*encoder)(WriterRef, object)
 * 
 */

static int __pyx_f_7pyjson5__encode(__pyx_t_7pyjson5_WriterRef __pyx_v_writer, PyObject *__pyx_v_data) {
int (*__pyx_v_encoder)(__pyx_t_7pyjson5_WriterRef, PyObject *);
int __pyx_r;
int __pyx_t_1;
int __pyx_t_2;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;

/* "src/_encoder.pyx":409
 *     cdef int (*encoder)(WriterRef, object)
 * 
 *     if data is None:             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_none
 *     elif PyUnicode_Check(data):
 */
__pyx_t_1 = (__pyx_v_data == Py_None);
if (__pyx_t_1) {

/* "src/_encoder.pyx":410
 * 
 *     if data is None:
 *         encoder = <int(*)(WriterRef, object)> _encode_none             # <<<<<<<<<<<<<<
 *     elif PyUnicode_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 */
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_none);

/* "src/_encoder.pyx":409
 *     cdef int (*encoder)(WriterRef, object)
 * 
 *     if data is None:             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_none
 *     elif PyUnicode_Check(data):
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":411
 *     if data is None:
 *         encoder = <int(*)(WriterRef, object)> _encode_none
 *     elif PyUnicode_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 *     elif PyLong_Check(data):
 */
__pyx_t_1 = PyUnicode_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":412
 *         encoder = <int(*)(WriterRef, object)> _encode_none
 *     elif PyUnicode_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode             # <<<<<<<<<<<<<<
 *     elif PyLong_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 */
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_unicode);

/* "src/_encoder.pyx":411
 *     if data is None:
 *         encoder = <int(*)(WriterRef, object)> _encode_none
 *     elif PyUnicode_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 *     elif PyLong_Check(data):
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":413
 *     elif PyUnicode_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 *     elif PyLong_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 *     elif PyFloat_Check(data):
 */
__pyx_t_1 = PyLong_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":414
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 *     elif PyLong_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_long             # <<<<<<<<<<<<<<
 *     elif PyFloat_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 */
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_long);

/* "src/_encoder.pyx":413
 *     elif PyUnicode_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_unicode
 *     elif PyLong_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 *     elif PyFloat_Check(data):
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":415
 *     elif PyLong_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 *     elif PyFloat_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 *     elif PyBytes_Check(data):
 */
__pyx_t_1 = PyFloat_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":416
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 *     elif PyFloat_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_float             # <<<<<<<<<<<<<<
 *     elif PyBytes_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_bytes
 */
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_float);

/* "src/_encoder.pyx":415
 *     elif PyLong_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_long
 *     elif PyFloat_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 *     elif PyBytes_Check(data):
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":417
 *     elif PyFloat_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 *     elif PyBytes_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_bytes
 *     else:
 */
__pyx_t_1 = PyBytes_Check(__pyx_v_data);
if (__pyx_t_1) {

/* "src/_encoder.pyx":418
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 *     elif PyBytes_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_bytes             # <<<<<<<<<<<<<<
 *     else:
 *         encoder = <int(*)(WriterRef, object)> _encode_other
 */
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_bytes);

/* "src/_encoder.pyx":417
 *     elif PyFloat_Check(data):
 *         encoder = <int(*)(WriterRef, object)> _encode_float
 *     elif PyBytes_Check(data):             # <<<<<<<<<<<<<<
 *         encoder = <int(*)(WriterRef, object)> _encode_bytes
 *     else:
 */
goto __pyx_L3;
}

/* "src/_encoder.pyx":420
 *         encoder = <int(*)(WriterRef, object)> _encode_bytes
 *     else:
 *         encoder = <int(*)(WriterRef, object)> _encode_other             # <<<<<<<<<<<<<<
 * 
 *     return encoder(writer, data)
 */
/*else*/ {
__pyx_v_encoder = ((int (*)(__pyx_t_7pyjson5_WriterRef, PyObject *))__pyx_f_7pyjson5__encode_other);
}
__pyx_L3:;

/* "src/_encoder.pyx":422
 *         encoder = <int(*)(WriterRef, object)> _encode_other
 * 
 *     return encoder(writer, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_2 = __pyx_v_encoder(__pyx_v_writer, __pyx_v_data); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 422, __pyx_L1_error)
__pyx_r = __pyx_t_2;
goto __pyx_L0;

/* "src/_encoder.pyx":406
 * 
 * 
 * cdef int _encode(WriterRef writer, object data):             # <<<<<<<<<<<<<<
 *     cdef int (*encoder)(WriterRef, object)
 * 
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_AddTraceback("pyjson5._encode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
return __pyx_r;
}

/* "src/_encoder.pyx":425
 * 
 * 
 * cdef int _encode_callback_bytes(object data, object cb, object options) except -1:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 */

static int __pyx_f_7pyjson5__encode_callback_bytes(PyObject *__pyx_v_data, PyObject *__pyx_v_cb, PyObject *__pyx_v_options) {
struct __pyx_t_7pyjson5_WriterCallback __pyx_v_writer;
int __pyx_r;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_WriterCallback __pyx_t_1;
struct __pyx_t_7pyjson5_Writer __pyx_t_2;
int __pyx_t_3;
int __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
Py_ssize_t __pyx_t_6;
Py_UCS4 __pyx_t_7;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_callback_bytes", 1);

/* "src/_encoder.pyx":428
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 *             _WriterNoop_reserve,             # <<<<<<<<<<<<<<
 *             _WriterCbBytes_append_c,
 *             _WriterCbBytes_append_s,
 */
__pyx_t_2.reserve = __pyx_f_7pyjson5__WriterNoop_reserve;

/* "src/_encoder.pyx":429
 *         Writer(
 *             _WriterNoop_reserve,
 *             _WriterCbBytes_append_c,             # <<<<<<<<<<<<<<
 *             _WriterCbBytes_append_s,
 *             <PyObject*> options,
 */
__pyx_t_2.append_c = __pyx_f_7pyjson5__WriterCbBytes_append_c;

/* "src/_encoder.pyx":430
 *             _WriterNoop_reserve,
 *             _WriterCbBytes_append_c,
 *             _WriterCbBytes_append_s,             # <<<<<<<<<<<<<<
 *             <PyObject*> options,
 *         ),
 */
__pyx_t_2.append_s = __pyx_f_7pyjson5__WriterCbBytes_append_s;

/* "src/_encoder.pyx":431
 *             _WriterCbBytes_append_c,
 *             _WriterCbBytes_append_s,
 *             <PyObject*> options,             # <<<<<<<<<<<<<<
 *         ),
 *         <PyObject*> cb,
 */
__pyx_t_2.options = ((PyObject *)__pyx_v_options);
__pyx_t_1.base = __pyx_t_2;

/* "src/_encoder.pyx":433
 *             <PyObject*> options,
 *         ),
 *         <PyObject*> cb,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
__pyx_t_1.callback = ((PyObject *)__pyx_v_cb);
__pyx_v_writer = __pyx_t_1;

/* "src/_encoder.pyx":436
 *     )
 * 
 *     if expect(not callable(cb), False):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
__pyx_t_3 = __Pyx_PyCallable_Check(__pyx_v_cb); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(14, 436, __pyx_L1_error)
__pyx_t_4 = (JSON5EncoderCpp_expect((!__pyx_t_3), 0) != 0);
if (unlikely(__pyx_t_4)) {

/* "src/_encoder.pyx":437
 * 
 *     if expect(not callable(cb), False):
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')             # <<<<<<<<<<<<<<
 * 
 *     return _encode(writer.base, data)
 */
__pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(14, 437, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_t_6 = 0;
__pyx_t_7 = 127;
__Pyx_INCREF(__pyx_kp_u_type_cb);
__pyx_t_6 += 10;
__Pyx_GIVEREF(__pyx_kp_u_type_cb);
PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_type_cb);
__pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_cb); if (unlikely(!__pyx_t_8)) __PYX_ERR(14, 437, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_8);
__pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(14, 437, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_9);
__Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
__pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
__pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
__Pyx_GIVEREF(__pyx_t_9);
PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
__pyx_t_9 = 0;
__Pyx_INCREF(__pyx_kp_u_is_not_callable);
__pyx_t_6 += 16;
__Pyx_GIVEREF(__pyx_kp_u_is_not_callable);
PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_is_not_callable);
__pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(14, 437, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_9);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(14, 437, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_Raise(__pyx_t_5, 0, 0, 0);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__PYX_ERR(14, 437, __pyx_L1_error)

/* "src/_encoder.pyx":436
 *     )
 * 
 *     if expect(not callable(cb), False):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
}

/* "src/_encoder.pyx":439
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 *     return _encode(writer.base, data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__pyx_t_10 = __pyx_f_7pyjson5__encode(__pyx_v_writer.base, __pyx_v_data); if (unlikely(__pyx_t_10 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(14, 439, __pyx_L1_error)
__pyx_r = __pyx_t_10;
goto __pyx_L0;

/* "src/_encoder.pyx":425
 * 
 * 
 * cdef int _encode_callback_bytes(object data, object cb, object options) except -1:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._encode_callback_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_encoder.pyx":442
 * 
 * 
 * cdef int _encode_callback_str(object data, object cb, object options) except -1:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 */

static int __pyx_f_7pyjson5__encode_callback_str(PyObject *__pyx_v_data, PyObject *__pyx_v_cb, PyObject *__pyx_v_options) {
struct __pyx_t_7pyjson5_WriterCallback __pyx_v_writer;
int __pyx_r;
__Pyx_RefNannyDeclarations
struct __pyx_t_7pyjson5_WriterCallback __pyx_t_1;
struct __pyx_t_7pyjson5_Writer __pyx_t_2;
int __pyx_t_3;
int __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
Py_ssize_t __pyx_t_6;
Py_UCS4 __pyx_t_7;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
int __pyx_t_10;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("_encode_callback_str", 1);

/* "src/_encoder.pyx":445
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 *             _WriterNoop_reserve,             # <<<<<<<<<<<<<<
 *             _WriterCbStr_append_c,
 *             _WriterCbStr_append_s,
 */
__pyx_t_2.reserve = __pyx_f_7pyjson5__WriterNoop_reserve;

/* "src/_encoder.pyx":446
 *         Writer(
 *             _WriterNoop_reserve,
 *             _WriterCbStr_append_c,             # <<<<<<<<<<<<<<
 *             _WriterCbStr_append_s,
 *             <PyObject*> options,
 */
__pyx_t_2.append_c = __pyx_f_7pyjson5__WriterCbStr_append_c;

/* "src/_encoder.pyx":447
 *             _WriterNoop_reserve,
 *             _WriterCbStr_append_c,
 *             _WriterCbStr_append_s,             # <<<<<<<<<<<<<<
 *             <PyObject*> options,
 *         ),
 */
__pyx_t_2.append_s = __pyx_f_7pyjson5__WriterCbStr_append_s;

/* "src/_encoder.pyx":448
 *             _WriterCbStr_append_c,
 *             _WriterCbStr_append_s,
 *             <PyObject*> options,             # <<<<<<<<<<<<<<
 *         ),
 *         <PyObject*> cb,
 */
__pyx_t_2.options = ((PyObject *)__pyx_v_options);
__pyx_t_1.base = __pyx_t_2;

/* "src/_encoder.pyx":450
 *             <PyObject*> options,
 *         ),
 *         <PyObject*> cb,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
__pyx_t_1.callback = ((PyObject *)__pyx_v_cb);
__pyx_v_writer = __pyx_t_1;

/* "src/_encoder.pyx":453
 *     )
 * 
 *     if expect(not callable(cb), False):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
__pyx_t_3 = __Pyx_PyCallable_Check(__pyx_v_cb); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(14, 453, __pyx_L1_error)
__pyx_t_4 = (JSON5EncoderCpp_expect((!__pyx_t_3), 0) != 0);
if (unlikely(__pyx_t_4)) {

/* "src/_encoder.pyx":454
 * 
 *     if expect(not callable(cb), False):
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')             # <<<<<<<<<<<<<<
 * 
 *     return _encode(writer.base, data)
 */
__pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(14, 454, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_t_6 = 0;
__pyx_t_7 = 127;
__Pyx_INCREF(__pyx_kp_u_type_cb);
__pyx_t_6 += 10;
__Pyx_GIVEREF(__pyx_kp_u_type_cb);
PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_type_cb);
__pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_cb); if (unlikely(!__pyx_t_8)) __PYX_ERR(14, 454, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_8);
__pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_8), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(14, 454, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_9);
__Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
__pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
__pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
__Pyx_GIVEREF(__pyx_t_9);
PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
__pyx_t_9 = 0;
__Pyx_INCREF(__pyx_kp_u_is_not_callable);
__pyx_t_6 += 16;
__Pyx_GIVEREF(__pyx_kp_u_is_not_callable);
PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_is_not_callable);
__pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(14, 454, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_9);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(14, 454, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
__Pyx_Raise(__pyx_t_5, 0, 0, 0);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__PYX_ERR(14, 454, __pyx_L1_error)

/* "src/_encoder.pyx":453
 *     )
 * 
 *     if expect(not callable(cb), False):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
}

/* "src/_encoder.pyx":456
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 *     return _encode(writer.base, data)             # <<<<<<<<<<<<<<
 */
__pyx_t_10 = __pyx_f_7pyjson5__encode(__pyx_v_writer.base, __pyx_v_data); if (unlikely(__pyx_t_10 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(14, 456, __pyx_L1_error)
__pyx_r = __pyx_t_10;
goto __pyx_L0;

/* "src/_encoder.pyx":442
 * 
 * 
 * cdef int _encode_callback_str(object data, object cb, object options) except -1:             # <<<<<<<<<<<<<<
 *     cdef WriterCallback writer = WriterCallback(
 *         Writer(
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_8);
__Pyx_XDECREF(__pyx_t_9);
__Pyx_AddTraceback("pyjson5._encode_callback_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":14
 * 
 * 
 * def decode(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from an :class:`str` object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_3decode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_2decode, "decode(data, maxdepth=None, some=False)\n\n    Decodes JSON5 serialized data from an :class:`str` object.\n\n    .. code:: python\n\n        decode('[\"Hello\", \"world!\"]') == ['Hello', 'world!']\n\n    Parameters\n    ----------\n    data : str\n        JSON5 serialized data\n    maxdepth : Optional[int]\n        Maximum nesting level before are the parsing is aborted.\n\n        * If ``None`` is supplied, then the value of the global variable         ``DEFAULT_MAX_NESTING_LEVEL`` is used instead.\n        * If the value is ``0``, then only literals are accepted, e.g. ``false``,         ``47.11``, or ``\"string\"``.\n        * If the value is negative, then the any nesting level is allowed until         Python's recursion limit is hit.\n    some : bool\n        Allow trailing junk.\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    object\n        Deserialized data.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_3decode = {"decode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_3decode, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_2decode};
static PyObject *__pyx_pw_7pyjson5_3decode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[3] = {0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_maxdepth,&__pyx_n_s_some,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 14, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 14, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 14, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode") < 0)) __PYX_ERR(15, 14, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_data = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode", 0, 1, 3, __pyx_nargs); __PYX_ERR(15, 14, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_2decode(__pyx_self, __pyx_v_data, __pyx_v_maxdepth, __pyx_v_some);

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_2decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
Py_ssize_t __pyx_t_3;
Py_UCS4 __pyx_t_4;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode", 0);
__Pyx_INCREF(__pyx_v_maxdepth);

/* "src/_exports.pyx":50
 *         Deserialized data.
 *     '''
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
__pyx_t_1 = (__pyx_v_maxdepth == Py_None);
if (__pyx_t_1) {

/* "src/_exports.pyx":51
 *     '''
 *     if maxdepth is None:
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(data, unicode):
 */
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 51, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF_SET(__pyx_v_maxdepth, __pyx_t_2);
__pyx_t_2 = 0;

/* "src/_exports.pyx":50
 *         Deserialized data.
 *     '''
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
}

/* "src/_exports.pyx":53
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     if isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return _decode_unicode(data, maxdepth, bool(some))
 *     else:
 */
__pyx_t_1 = PyUnicode_Check(__pyx_v_data); 
if (likely(__pyx_t_1)) {

/* "src/_exports.pyx":54
 * 
 *     if isinstance(data, unicode):
 *         return _decode_unicode(data, maxdepth, bool(some))             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError(f'type(data) == {type(data)!r} not supported')
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_maxdepth); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(15, 54, __pyx_L1_error)
__pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(15, 54, __pyx_L1_error)
__pyx_t_2 = __pyx_f_7pyjson5__decode_unicode(__pyx_v_data, __pyx_t_3, (!(!__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 54, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_r = __pyx_t_2;
__pyx_t_2 = 0;
goto __pyx_L0;

/* "src/_exports.pyx":53
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     if isinstance(data, unicode):             # <<<<<<<<<<<<<<
 *         return _decode_unicode(data, maxdepth, bool(some))
 *     else:
 */
}

/* "src/_exports.pyx":56
 *         return _decode_unicode(data, maxdepth, bool(some))
 *     else:
 *         raise TypeError(f'type(data) == {type(data)!r} not supported')             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*else*/ {
__pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 56, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = 0;
__pyx_t_4 = 127;
__Pyx_INCREF(__pyx_kp_u_type_data);
__pyx_t_3 += 14;
__Pyx_GIVEREF(__pyx_kp_u_type_data);
PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_type_data);
__pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_data); if (unlikely(!__pyx_t_5)) __PYX_ERR(15, 56, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(15, 56, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
__pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_4;
__pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
__Pyx_GIVEREF(__pyx_t_6);
PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
__pyx_t_6 = 0;
__Pyx_INCREF(__pyx_kp_u_not_supported);
__pyx_t_3 += 14;
__Pyx_GIVEREF(__pyx_kp_u_not_supported);
PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_supported);
__pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(15, 56, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 56, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__Pyx_Raise(__pyx_t_2, 0, 0, 0);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
__PYX_ERR(15, 56, __pyx_L1_error)
}

/* "src/_exports.pyx":14
 * 
 * 
 * def decode(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from an :class:`str` object.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_AddTraceback("pyjson5.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_maxdepth);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":59
 * 
 * 
 * def decode_latin1(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_5decode_latin1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_4decode_latin1, "decode_latin1(data, maxdepth=None, some=False)\n\n    Decodes JSON5 serialized data from a :class:`bytes` object.\n\n    .. code:: python\n\n        decode_latin1(b'[\"Hello\", \"world!\"]') == ['Hello', 'world!']\n\n    Parameters\n    ----------\n    data : bytes\n        JSON5 serialized data, encoded as Latin-1 or ASCII.\n    maxdepth : Optional[int]\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    some : bool\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_5decode_latin1 = {"decode_latin1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_5decode_latin1, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_4decode_latin1};
static PyObject *__pyx_pw_7pyjson5_5decode_latin1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[3] = {0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode_latin1 (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_maxdepth,&__pyx_n_s_some,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 59, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 59, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 59, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode_latin1") < 0)) __PYX_ERR(15, 59, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_data = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode_latin1", 0, 1, 3, __pyx_nargs); __PYX_ERR(15, 59, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode_latin1", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_4decode_latin1(__pyx_self, __pyx_v_data, __pyx_v_maxdepth, __pyx_v_some);

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_4decode_latin1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
unsigned int __pyx_t_6;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode_latin1", 1);

/* "src/_exports.pyx":88
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     return decode_buffer(data, maxdepth, bool(some), 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_decode_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 88, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(15, 88, __pyx_L1_error)
__pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_4)) __PYX_ERR(15, 88, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_t_5 = NULL;
__pyx_t_6 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_5)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_5);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_6 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[5] = {__pyx_t_5, __pyx_v_data, __pyx_v_maxdepth, __pyx_t_4, __pyx_int_1};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 88, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_exports.pyx":59
 * 
 * 
 * def decode_latin1(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_AddTraceback("pyjson5.decode_latin1", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":91
 * 
 * 
 * def decode_utf8(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_7decode_utf8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_6decode_utf8, "decode_utf8(data, maxdepth=None, some=False)\n\n    Decodes JSON5 serialized data from a :class:`bytes` object.\n\n    .. code:: python\n\n        decode_utf8(b'[\"H\\xe2\\x82\\xacllo\", \"w\\xc3\\xb6rld!\"]') == ['H\342\202\254llo', 'w\303\266rld!']\n\n    Parameters\n    ----------\n    data : bytes\n        JSON5 serialized data, encoded as UTF-8 or ASCII.\n    maxdepth : Optional[int]\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    some : bool\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_7decode_utf8 = {"decode_utf8", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_7decode_utf8, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_6decode_utf8};
static PyObject *__pyx_pw_7pyjson5_7decode_utf8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[3] = {0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode_utf8 (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_maxdepth,&__pyx_n_s_some,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 91, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 91, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 91, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode_utf8") < 0)) __PYX_ERR(15, 91, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_data = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode_utf8", 0, 1, 3, __pyx_nargs); __PYX_ERR(15, 91, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_6decode_utf8(__pyx_self, __pyx_v_data, __pyx_v_maxdepth, __pyx_v_some);

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_6decode_utf8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
int __pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
unsigned int __pyx_t_6;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode_utf8", 1);

/* "src/_exports.pyx":120
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     return decode_buffer(data, maxdepth, bool(some), 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_decode_buffer); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 120, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(15, 120, __pyx_L1_error)
__pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_4)) __PYX_ERR(15, 120, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__pyx_t_5 = NULL;
__pyx_t_6 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_5)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_5);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_6 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[5] = {__pyx_t_5, __pyx_v_data, __pyx_v_maxdepth, __pyx_t_4, __pyx_int_0};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 4+__pyx_t_6);
__Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
__Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 120, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_exports.pyx":91
 * 
 * 
 * def decode_utf8(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_AddTraceback("pyjson5.decode_utf8", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":123
 * 
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                   object wordlength=None):
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_9decode_buffer(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_8decode_buffer, "decode_buffer(obj, maxdepth=None, some=False, wordlength=None)\n\n    Decodes JSON5 serialized data from an object that supports the buffer protocol,\n    e.g. :class:`bytearray`.\n\n    .. code:: python\n\n        obj = memoryview(b'[\"Hello\", \"world!\"]')\n\n        decode_buffer(obj) == ['Hello', 'world!']\n\n    Parameters\n    ----------\n    data : object\n        JSON5 serialized data.\n        The argument must support Python's buffer protocol, i.e.\n        :class:`memoryview(\342\200\246) <memoryview>` must work. The buffer must be contigious.\n    maxdepth : Optional[int]\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    some : bool\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    wordlength : Optional[int]\n        Must be 0, 1, 2, 4 to denote UTF-8, UCS1, USC2 or USC4 data, resp.\n        Surrogates are not supported. Decode the data to an :class:`str` if need be.\n        If ``None`` is supplied, then the buffer's ``itemsize`` is used.\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n    ValueError\n        The value of ``wordlength`` was invalid.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_9decode_buffer = {"decode_buffer", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_9decode_buffer, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_8decode_buffer};
static PyObject *__pyx_pw_7pyjson5_9decode_buffer(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_obj = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
PyObject *__pyx_v_wordlength = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[4] = {0,0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode_buffer (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_maxdepth,&__pyx_n_s_some,&__pyx_n_s_wordlength,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));

/* "src/_exports.pyx":124
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,
 *                   object wordlength=None):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from an object that supports the buffer protocol,
 */
values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
CYTHON_FALLTHROUGH;
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 123, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 123, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 123, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  3:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wordlength);
if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 123, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode_buffer") < 0)) __PYX_ERR(15, 123, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
CYTHON_FALLTHROUGH;
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_obj = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
__pyx_v_wordlength = values[3];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode_buffer", 0, 1, 4, __pyx_nargs); __PYX_ERR(15, 123, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_8decode_buffer(__pyx_self, __pyx_v_obj, __pyx_v_maxdepth, __pyx_v_some, __pyx_v_wordlength);

/* "src/_exports.pyx":123
 * 
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                   object wordlength=None):
 *     '''
 */

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_8decode_buffer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some, PyObject *__pyx_v_wordlength) {
Py_buffer __pyx_v_view;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
PyObject *__pyx_t_2 = NULL;
int __pyx_t_3;
std::int32_t __pyx_t_4;
Py_ssize_t __pyx_t_5;
int __pyx_t_6;
char const *__pyx_t_7;
PyObject *__pyx_t_8 = NULL;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode_buffer", 0);
__Pyx_INCREF(__pyx_v_maxdepth);
__Pyx_INCREF(__pyx_v_wordlength);

/* "src/_exports.pyx":166
 *     cdef Py_buffer view
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
__pyx_t_1 = (__pyx_v_maxdepth == Py_None);
if (__pyx_t_1) {

/* "src/_exports.pyx":167
 * 
 *     if maxdepth is None:
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL             # <<<<<<<<<<<<<<
 * 
 *     PyObject_GetBuffer(obj, &view, PyBUF_CONTIG_RO)
 */
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 167, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF_SET(__pyx_v_maxdepth, __pyx_t_2);
__pyx_t_2 = 0;

/* "src/_exports.pyx":166
 *     cdef Py_buffer view
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
}

/* "src/_exports.pyx":169
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     PyObject_GetBuffer(obj, &view, PyBUF_CONTIG_RO)             # <<<<<<<<<<<<<<
 *     try:
 *         if wordlength is None:
 */
__pyx_t_3 = PyObject_GetBuffer(__pyx_v_obj, (&__pyx_v_view), PyBUF_CONTIG_RO); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(15, 169, __pyx_L1_error)

/* "src/_exports.pyx":170
 * 
 *     PyObject_GetBuffer(obj, &view, PyBUF_CONTIG_RO)
 *     try:             # <<<<<<<<<<<<<<
 *         if wordlength is None:
 *             wordlength = view.itemsize
 */
/*try:*/ {

/* "src/_exports.pyx":171
 *     PyObject_GetBuffer(obj, &view, PyBUF_CONTIG_RO)
 *     try:
 *         if wordlength is None:             # <<<<<<<<<<<<<<
 *             wordlength = view.itemsize
 *         return _decode_buffer(view, wordlength, maxdepth, bool(some))
 */
__pyx_t_1 = (__pyx_v_wordlength == Py_None);
if (__pyx_t_1) {

/* "src/_exports.pyx":172
 *     try:
 *         if wordlength is None:
 *             wordlength = view.itemsize             # <<<<<<<<<<<<<<
 *         return _decode_buffer(view, wordlength, maxdepth, bool(some))
 *     finally:
 */
__pyx_t_2 = PyInt_FromSsize_t(__pyx_v_view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 172, __pyx_L5_error)
__Pyx_GOTREF(__pyx_t_2);
__Pyx_DECREF_SET(__pyx_v_wordlength, __pyx_t_2);
__pyx_t_2 = 0;

/* "src/_exports.pyx":171
 *     PyObject_GetBuffer(obj, &view, PyBUF_CONTIG_RO)
 *     try:
 *         if wordlength is None:             # <<<<<<<<<<<<<<
 *             wordlength = view.itemsize
 *         return _decode_buffer(view, wordlength, maxdepth, bool(some))
 */
}

/* "src/_exports.pyx":173
 *         if wordlength is None:
 *             wordlength = view.itemsize
 *         return _decode_buffer(view, wordlength, maxdepth, bool(some))             # <<<<<<<<<<<<<<
 *     finally:
 *         PyBuffer_Release(&view)
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __Pyx_PyInt_As_std_3a__3a_int32_t(__pyx_v_wordlength); if (unlikely((__pyx_t_4 == ((std::int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(15, 173, __pyx_L5_error)
__pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_maxdepth); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(15, 173, __pyx_L5_error)
__pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(15, 173, __pyx_L5_error)
__pyx_t_2 = __pyx_f_7pyjson5__decode_buffer(__pyx_v_view, __pyx_t_4, __pyx_t_5, (!(!__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 173, __pyx_L5_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_r = __pyx_t_2;
__pyx_t_2 = 0;
goto __pyx_L4_return;
}

/* "src/_exports.pyx":175
 *         return _decode_buffer(view, wordlength, maxdepth, bool(some))
 *     finally:
 *         PyBuffer_Release(&view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
/*finally:*/ {
__pyx_L5_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_8);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__pyx_t_3 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
{
PyBuffer_Release((&__pyx_v_view));
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
}
__Pyx_XGIVEREF(__pyx_t_8);
__Pyx_XGIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
__pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
__pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
goto __pyx_L1_error;
}
__pyx_L4_return: {
__pyx_t_13 = __pyx_r;
__pyx_r = 0;
PyBuffer_Release((&__pyx_v_view));
__pyx_r = __pyx_t_13;
__pyx_t_13 = 0;
goto __pyx_L0;
}
}

/* "src/_exports.pyx":123
 * 
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                   object wordlength=None):
 *     '''
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_AddTraceback("pyjson5.decode_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_maxdepth);
__Pyx_XDECREF(__pyx_v_wordlength);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":178
 * 
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                     object args=None):
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_11decode_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_10decode_callback, "decode_callback(cb, maxdepth=None, some=False, args=None)\n\n    Decodes JSON5 serialized data by invoking a callback.\n\n    .. code:: python\n\n        cb = iter('[\"Hello\",\"world!\"]').__next__\n\n        decode_callback(cb) == ['Hello', 'world!']\n\n    Parameters\n    ----------\n    cb : Callable[Any, Union[str|bytes|bytearray|int|None]]\n        A function to get values from.\n        The functions is called like ``cb(*args)``, and it returns:\n\n        * **str, bytes, bytearray:**             ``len(\342\200\246) == 0`` denotes exhausted input.             ``len(\342\200\246) == 1`` is the next character.\n        * **int:**             ``< 0`` denotes exhausted input.            ``>= 0`` is the ordinal value of the next character.\n        * **None:**             input exhausted\n    maxdepth : Optional[int]\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    some : bool\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    args : Optional[Iterable[Any]]\n        Arguments to call ``cb`` with.\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_11decode_callback = {"decode_callback", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_11decode_callback, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_10decode_callback};
static PyObject *__pyx_pw_7pyjson5_11decode_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_cb = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
PyObject *__pyx_v_args = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[4] = {0,0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode_callback (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cb,&__pyx_n_s_maxdepth,&__pyx_n_s_some,&__pyx_n_s_args,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));

/* "src/_exports.pyx":179
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,
 *                     object args=None):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data by invoking a callback.
 */
values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
CYTHON_FALLTHROUGH;
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cb)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 178, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 178, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 178, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  3:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_args);
if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 178, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode_callback") < 0)) __PYX_ERR(15, 178, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
CYTHON_FALLTHROUGH;
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_cb = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
__pyx_v_args = values[3];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode_callback", 0, 1, 4, __pyx_nargs); __PYX_ERR(15, 178, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_10decode_callback(__pyx_self, __pyx_v_cb, __pyx_v_maxdepth, __pyx_v_some, __pyx_v_args);

/* "src/_exports.pyx":178
 * 
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                     object args=None):
 *     '''
 */

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_10decode_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cb, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some, PyObject *__pyx_v_args) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
PyObject *__pyx_t_3 = NULL;
Py_ssize_t __pyx_t_4;
Py_UCS4 __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode_callback", 0);
__Pyx_INCREF(__pyx_v_maxdepth);
__Pyx_INCREF(__pyx_v_args);

/* "src/_exports.pyx":222
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not callable(cb):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
__pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_cb); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(15, 222, __pyx_L1_error)
__pyx_t_2 = (!__pyx_t_1);
if (unlikely(__pyx_t_2)) {

/* "src/_exports.pyx":223
 *     '''
 *     if not callable(cb):
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')             # <<<<<<<<<<<<<<
 * 
 *     if maxdepth is None:
 */
__pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 223, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_t_4 = 0;
__pyx_t_5 = 127;
__Pyx_INCREF(__pyx_kp_u_type_cb);
__pyx_t_4 += 10;
__Pyx_GIVEREF(__pyx_kp_u_type_cb);
PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_type_cb);
__pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_cb); if (unlikely(!__pyx_t_6)) __PYX_ERR(15, 223, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 223, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
__pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_7);
PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
__pyx_t_7 = 0;
__Pyx_INCREF(__pyx_kp_u_is_not_callable);
__pyx_t_4 += 16;
__Pyx_GIVEREF(__pyx_kp_u_is_not_callable);
PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_is_not_callable);
__pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 223, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 223, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_Raise(__pyx_t_3, 0, 0, 0);
__Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
__PYX_ERR(15, 223, __pyx_L1_error)

/* "src/_exports.pyx":222
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not callable(cb):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 */
}

/* "src/_exports.pyx":225
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
__pyx_t_2 = (__pyx_v_maxdepth == Py_None);
if (__pyx_t_2) {

/* "src/_exports.pyx":226
 * 
 *     if maxdepth is None:
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL             # <<<<<<<<<<<<<<
 * 
 *     if args:
 */
__Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 226, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF_SET(__pyx_v_maxdepth, __pyx_t_3);
__pyx_t_3 = 0;

/* "src/_exports.pyx":225
 *         raise TypeError(f'type(cb)=={type(cb)!r} is not callable')
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
}

/* "src/_exports.pyx":228
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     if args:             # <<<<<<<<<<<<<<
 *         args = tuple(args)
 *     else:
 */
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_args); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 228, __pyx_L1_error)
if (__pyx_t_2) {

/* "src/_exports.pyx":229
 * 
 *     if args:
 *         args = tuple(args)             # <<<<<<<<<<<<<<
 *     else:
 *         args = ()
 */
__pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 229, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__Pyx_DECREF_SET(__pyx_v_args, __pyx_t_3);
__pyx_t_3 = 0;

/* "src/_exports.pyx":228
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     if args:             # <<<<<<<<<<<<<<
 *         args = tuple(args)
 *     else:
 */
goto __pyx_L5;
}

/* "src/_exports.pyx":231
 *         args = tuple(args)
 *     else:
 *         args = ()             # <<<<<<<<<<<<<<
 * 
 *     return _decode_callback(cb, args, maxdepth, bool(some))
 */
/*else*/ {
__Pyx_INCREF(__pyx_empty_tuple);
__Pyx_DECREF_SET(__pyx_v_args, __pyx_empty_tuple);
}
__pyx_L5:;

/* "src/_exports.pyx":233
 *         args = ()
 * 
 *     return _decode_callback(cb, args, maxdepth, bool(some))             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_maxdepth); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(15, 233, __pyx_L1_error)
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 233, __pyx_L1_error)
__pyx_t_3 = __pyx_f_7pyjson5__decode_callback(__pyx_v_cb, __pyx_v_args, __pyx_t_4, (!(!__pyx_t_2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 233, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_3);
__pyx_r = __pyx_t_3;
__pyx_t_3 = 0;
goto __pyx_L0;

/* "src/_exports.pyx":178
 * 
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                     object args=None):
 *     '''
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5.decode_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_maxdepth);
__Pyx_XDECREF(__pyx_v_args);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":236
 * 
 * 
 * def decode_io(object fp, object maxdepth=None, object some=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_13decode_io(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_12decode_io, "decode_io(fp, maxdepth=None, some=True)\n\n    Decodes JSON5 serialized data from a file-like object.\n\n    .. code:: python\n\n        fp = io.StringIO(\"\"\"\n            ['Hello', /* TODO look into specs whom to greet */]\n            'Wolrd' // FIXME: look for typos\n        \"\"\")\n\n        decode_io(fp) == ['Hello']\n        decode_io(fp) == 'Wolrd'\n\n        fp.seek(0)\n\n        decode_io(fp, some=False)\n        # raises Json5ExtraData('Extra data U+0027 near 56', ['Hello'], \"'\")\n\n    Parameters\n    ----------\n    fp : IOBase\n        A file-like object to parse from.\n    maxdepth : Optional[int] = None\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    some : bool\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n\n    Raises\n    ------\n    Json5DecoderException\n        An exception occured while decoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_13decode_io = {"decode_io", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_13decode_io, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_12decode_io};
static PyObject *__pyx_pw_7pyjson5_13decode_io(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_fp = 0;
PyObject *__pyx_v_maxdepth = 0;
PyObject *__pyx_v_some = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[3] = {0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("decode_io (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fp,&__pyx_n_s_maxdepth,&__pyx_n_s_some,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fp)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 236, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdepth);
if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 236, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_some);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 236, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "decode_io") < 0)) __PYX_ERR(15, 236, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_fp = values[0];
__pyx_v_maxdepth = values[1];
__pyx_v_some = values[2];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("decode_io", 0, 1, 3, __pyx_nargs); __PYX_ERR(15, 236, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_AddTraceback("pyjson5.decode_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_12decode_io(__pyx_self, __pyx_v_fp, __pyx_v_maxdepth, __pyx_v_some);

/* function exit code */
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_12decode_io(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, PyObject *__pyx_v_maxdepth, PyObject *__pyx_v_some) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
Py_ssize_t __pyx_t_4;
Py_UCS4 __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
unsigned int __pyx_t_8;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("decode_io", 0);
__Pyx_INCREF(__pyx_v_maxdepth);

/* "src/_exports.pyx":276
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not isinstance(fp, IOBase):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():
 */
__pyx_t_1 = ((PyObject *)__pyx_v_7pyjson5_IOBase);
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = PyObject_IsInstance(__pyx_v_fp, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(15, 276, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_3 = (!__pyx_t_2);
if (unlikely(__pyx_t_3)) {

/* "src/_exports.pyx":277
 *     '''
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')             # <<<<<<<<<<<<<<
 *     elif not fp.readable():
 *         raise TypeError(f'fp is not readable')
 */
__pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_4 = 0;
__pyx_t_5 = 127;
__Pyx_INCREF(__pyx_kp_u_type_fp);
__pyx_t_4 += 10;
__Pyx_GIVEREF(__pyx_kp_u_type_fp);
PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_type_fp);
__pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_fp); if (unlikely(!__pyx_t_6)) __PYX_ERR(15, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
__pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_7);
PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
__pyx_t_7 = 0;
__Pyx_INCREF(__pyx_kp_u_is_not_IOBase_compatible);
__pyx_t_4 += 25;
__Pyx_GIVEREF(__pyx_kp_u_is_not_IOBase_compatible);
PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_not_IOBase_compatible);
__pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 277, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 277, __pyx_L1_error)

/* "src/_exports.pyx":276
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not isinstance(fp, IOBase):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():
 */
}

/* "src/_exports.pyx":278
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:
 */
__pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_readable); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 278, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__pyx_t_6 = NULL;
__pyx_t_8 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_7))) {
__pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
if (likely(__pyx_t_6)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_7, function);
__pyx_t_8 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 278, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
}
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(15, 278, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_2 = (!__pyx_t_3);
if (unlikely(__pyx_t_2)) {

/* "src/_exports.pyx":279
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():
 *         raise TypeError(f'fp is not readable')             # <<<<<<<<<<<<<<
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')
 */
__pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 279, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 279, __pyx_L1_error)

/* "src/_exports.pyx":278
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:
 */
}

/* "src/_exports.pyx":280
 *     elif not fp.readable():
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is closed')
 * 
 */
__pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_closed); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 280, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 280, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
if (unlikely(__pyx_t_2)) {

/* "src/_exports.pyx":281
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')             # <<<<<<<<<<<<<<
 * 
 *     if maxdepth is None:
 */
__pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 281, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 281, __pyx_L1_error)

/* "src/_exports.pyx":280
 *     elif not fp.readable():
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is closed')
 * 
 */
}

/* "src/_exports.pyx":283
 *         raise TypeError(f'fp is closed')
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
__pyx_t_2 = (__pyx_v_maxdepth == Py_None);
if (__pyx_t_2) {

/* "src/_exports.pyx":284
 * 
 *     if maxdepth is None:
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL             # <<<<<<<<<<<<<<
 * 
 *     return _decode_callback(fp.read, (1,), maxdepth, bool(some))
 */
__Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 284, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF_SET(__pyx_v_maxdepth, __pyx_t_1);
__pyx_t_1 = 0;

/* "src/_exports.pyx":283
 *         raise TypeError(f'fp is closed')
 * 
 *     if maxdepth is None:             # <<<<<<<<<<<<<<
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 */
}

/* "src/_exports.pyx":286
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     return _decode_callback(fp.read, (1,), maxdepth, bool(some))             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 286, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_maxdepth); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(15, 286, __pyx_L1_error)
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_some); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 286, __pyx_L1_error)
__pyx_t_7 = __pyx_f_7pyjson5__decode_callback(__pyx_t_1, __pyx_tuple__11, __pyx_t_4, (!(!__pyx_t_2))); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 286, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_r = __pyx_t_7;
__pyx_t_7 = 0;
goto __pyx_L0;

/* "src/_exports.pyx":236
 * 
 * 
 * def decode_io(object fp, object maxdepth=None, object some=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5.decode_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_maxdepth);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":289
 * 
 * 
 * def encode(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object as a JSON5 compatible string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_15encode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_14encode, "encode(data, *, options=None, **options_kw)\n\n    Serializes a Python object as a JSON5 compatible string.\n\n    .. code:: python\n\n        encode(['Hello', 'world!']) == '[\"Hello\",\"world!\"]'\n\n    Parameters\n    ----------\n    data : object\n        Python object to serialize.\n    options : Optional[Options]\n        Extra options for the encoder.\n        If ``options`` **and** ``options_kw`` are specified, then ``options.update(**options_kw)`` is used.\n    options_kw\n        See Option's arguments.\n\n    Raises\n    ------\n    Json5EncoderException\n        An exception occured while encoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    str\n        Unless ``float('inf')`` or ``float('nan')`` is encountered, the result\n        will be valid JSON data (as of RFC8259).\n\n        The result is always ASCII. All characters outside of the ASCII range\n        are escaped.\n\n        The result safe to use in an HTML template, e.g.\n        ``<a onclick='alert({{ encode(url) }})'>show message</a>``.\n        Apostrophes ``\"'\"`` are encoded as ``\"\\u0027\"``, less-than,\n        greater-than, and ampersand likewise.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_15encode = {"encode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_15encode, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_14encode};
static PyObject *__pyx_pw_7pyjson5_15encode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_options = 0;
PyObject *__pyx_v_options_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[2] = {0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("encode (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_options_kw = PyDict_New(); if (unlikely(!__pyx_v_options_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_options_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_options,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 289, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (kw_args == 1) {
const Py_ssize_t index = 1;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 289, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_options_kw, values + 0, kwd_pos_args, "encode") < 0)) __PYX_ERR(15, 289, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_data = values[0];
__pyx_v_options = values[1];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("encode", 1, 1, 1, __pyx_nargs); __PYX_ERR(15, 289, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_options_kw); __pyx_v_options_kw = 0;
__Pyx_AddTraceback("pyjson5.encode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_14encode(__pyx_self, __pyx_v_data, __pyx_v_options, __pyx_v_options_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_options_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_14encode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw) {
void *__pyx_v_temp;
PyObject *__pyx_v_result = 0;
Py_ssize_t __pyx_v_start;
Py_ssize_t __pyx_v_length;
PyObject *__pyx_v_opts = 0;
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_v_writer;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_t_2;
struct __pyx_t_7pyjson5_Writer __pyx_t_3;
int __pyx_t_4;
int __pyx_t_5;
JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
int __pyx_t_7;
char const *__pyx_t_8;
PyObject *__pyx_t_9 = NULL;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("encode", 1);

/* "src/_exports.pyx":331
 *     cdef object result
 *     cdef Py_ssize_t start = (
 *         <Py_ssize_t> <void*> &(<AsciiObject*> NULL).data[0]             # <<<<<<<<<<<<<<
 *     )
 *     cdef Py_ssize_t length
 */
__pyx_v_start = ((Py_ssize_t)((void *)(&(((__pyx_t_7pyjson5_AsciiObject *)NULL)->data[0]))));

/* "src/_exports.pyx":334
 *     )
 *     cdef Py_ssize_t length
 *     cdef object opts = _to_options(options, options_kw)             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable writer = WriterReallocatable(
 *         Writer(
 */
if (!(likely(((__pyx_v_options) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_options, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 334, __pyx_L1_error)
__pyx_t_1 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_options), __pyx_v_options_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 334, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_opts = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":337
 *     cdef WriterReallocatable writer = WriterReallocatable(
 *         Writer(
 *             _WriterReallocatable_reserve,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 */
__pyx_t_3.reserve = __pyx_f_7pyjson5__WriterReallocatable_reserve;

/* "src/_exports.pyx":338
 *         Writer(
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_s,
 *             <PyObject*> opts,
 */
__pyx_t_3.append_c = __pyx_f_7pyjson5__WriterReallocatable_append_c;

/* "src/_exports.pyx":339
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,             # <<<<<<<<<<<<<<
 *             <PyObject*> opts,
 *         ),
 */
__pyx_t_3.append_s = __pyx_f_7pyjson5__WriterReallocatable_append_s;

/* "src/_exports.pyx":340
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 *             <PyObject*> opts,             # <<<<<<<<<<<<<<
 *         ),
 *         start, 0, NULL,
 */
__pyx_t_3.options = ((PyObject *)__pyx_v_opts);
__pyx_t_2.base = __pyx_t_3;

/* "src/_exports.pyx":342
 *             <PyObject*> opts,
 *         ),
 *         start, 0, NULL,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
__pyx_t_2.position = __pyx_v_start;
__pyx_t_2.length = 0;
__pyx_t_2.obj = NULL;
__pyx_v_writer = __pyx_t_2;

/* "src/_exports.pyx":345
 *     )
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if expect(_encode(writer.base, data) < 0, False):
 *             exception_thrown()
 */
/*try:*/ {

/* "src/_exports.pyx":346
 * 
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):             # <<<<<<<<<<<<<<
 *             exception_thrown()
 * 
 */
__pyx_t_4 = __pyx_f_7pyjson5__encode(__pyx_v_writer.base, __pyx_v_data); if (unlikely(__pyx_t_4 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(15, 346, __pyx_L4_error)
__pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_t_4 < 0), 0) != 0);
if (__pyx_t_5) {

/* "src/_exports.pyx":347
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):
 *             exception_thrown()             # <<<<<<<<<<<<<<
 * 
 *         length = writer.position - start
 */
__pyx_t_6 = JSON5EncoderCpp::exception_thrown(); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(15, 347, __pyx_L4_error)

/* "src/_exports.pyx":346
 * 
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):             # <<<<<<<<<<<<<<
 *             exception_thrown()
 * 
 */
}

/* "src/_exports.pyx":349
 *             exception_thrown()
 * 
 *         length = writer.position - start             # <<<<<<<<<<<<<<
 *         if length <= 0:
 *             # impossible
 */
__pyx_v_length = (__pyx_v_writer.position - __pyx_v_start);

/* "src/_exports.pyx":350
 * 
 *         length = writer.position - start
 *         if length <= 0:             # <<<<<<<<<<<<<<
 *             # impossible
 *             return u''
 */
__pyx_t_5 = (__pyx_v_length <= 0);
if (__pyx_t_5) {

/* "src/_exports.pyx":352
 *         if length <= 0:
 *             # impossible
 *             return u''             # <<<<<<<<<<<<<<
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_kp_u__5);
__pyx_r = __pyx_kp_u__5;
goto __pyx_L3_return;

/* "src/_exports.pyx":350
 * 
 *         length = writer.position - start
 *         if length <= 0:             # <<<<<<<<<<<<<<
 *             # impossible
 *             return u''
 */
}

/* "src/_exports.pyx":354
 *             return u''
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)             # <<<<<<<<<<<<<<
 *         if temp is not NULL:
 *             writer.obj = temp
 */
__pyx_v_temp = PyObject_Realloc(__pyx_v_writer.obj, (__pyx_v_writer.position + 1));

/* "src/_exports.pyx":355
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:             # <<<<<<<<<<<<<<
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0
 */
__pyx_t_5 = (__pyx_v_temp != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":356
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:
 *             writer.obj = temp             # <<<<<<<<<<<<<<
 *         (<char*> writer.obj)[writer.position] = 0
 * 
 */
__pyx_v_writer.obj = __pyx_v_temp;

/* "src/_exports.pyx":355
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:             # <<<<<<<<<<<<<<
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0
 */
}

/* "src/_exports.pyx":357
 *         if temp is not NULL:
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0             # <<<<<<<<<<<<<<
 * 
 *         result = ObjectInit(<PyObject*> writer.obj, unicode)
 */
(((char *)__pyx_v_writer.obj)[__pyx_v_writer.position]) = 0;

/* "src/_exports.pyx":359
 *         (<char*> writer.obj)[writer.position] = 0
 * 
 *         result = ObjectInit(<PyObject*> writer.obj, unicode)             # <<<<<<<<<<<<<<
 *         writer.obj = NULL
 * 
 */
__pyx_t_1 = PyObject_INIT(((PyObject *)__pyx_v_writer.obj), ((PyTypeObject *)(&PyUnicode_Type))); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 359, __pyx_L4_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_result = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":360
 * 
 *         result = ObjectInit(<PyObject*> writer.obj, unicode)
 *         writer.obj = NULL             # <<<<<<<<<<<<<<
 * 
 *         (<PyASCIIObject*> result).length = length
 */
__pyx_v_writer.obj = NULL;

/* "src/_exports.pyx":362
 *         writer.obj = NULL
 * 
 *         (<PyASCIIObject*> result).length = length             # <<<<<<<<<<<<<<
 *         reset_hash(<PyASCIIObject*> result)
 *         reset_wstr(<PyASCIIObject*> result)
 */
((PyASCIIObject *)__pyx_v_result)->length = __pyx_v_length;

/* "src/_exports.pyx":363
 * 
 *         (<PyASCIIObject*> result).length = length
 *         reset_hash(<PyASCIIObject*> result)             # <<<<<<<<<<<<<<
 *         reset_wstr(<PyASCIIObject*> result)
 *         (<PyASCIIObject*> result).state.interned = SSTATE_NOT_INTERNED
 */
JSON5EncoderCpp::reset_hash<PyASCIIObject>(((PyASCIIObject *)__pyx_v_result));

/* "src/_exports.pyx":364
 *         (<PyASCIIObject*> result).length = length
 *         reset_hash(<PyASCIIObject*> result)
 *         reset_wstr(<PyASCIIObject*> result)             # <<<<<<<<<<<<<<
 *         (<PyASCIIObject*> result).state.interned = SSTATE_NOT_INTERNED
 *         (<PyASCIIObject*> result).state.kind = PyUnicode_1BYTE_KIND
 */
JSON5EncoderCpp::reset_wstr<PyASCIIObject>(((PyASCIIObject *)__pyx_v_result));

/* "src/_exports.pyx":365
 *         reset_hash(<PyASCIIObject*> result)
 *         reset_wstr(<PyASCIIObject*> result)
 *         (<PyASCIIObject*> result).state.interned = SSTATE_NOT_INTERNED             # <<<<<<<<<<<<<<
 *         (<PyASCIIObject*> result).state.kind = PyUnicode_1BYTE_KIND
 *         (<PyASCIIObject*> result).state.compact = True
 */
((PyASCIIObject *)__pyx_v_result)->state.interned = SSTATE_NOT_INTERNED;

/* "src/_exports.pyx":366
 *         reset_wstr(<PyASCIIObject*> result)
 *         (<PyASCIIObject*> result).state.interned = SSTATE_NOT_INTERNED
 *         (<PyASCIIObject*> result).state.kind = PyUnicode_1BYTE_KIND             # <<<<<<<<<<<<<<
 *         (<PyASCIIObject*> result).state.compact = True
 *         set_ready(<PyASCIIObject*> result)
 */
((PyASCIIObject *)__pyx_v_result)->state.kind = PyUnicode_1BYTE_KIND;

/* "src/_exports.pyx":367
 *         (<PyASCIIObject*> result).state.interned = SSTATE_NOT_INTERNED
 *         (<PyASCIIObject*> result).state.kind = PyUnicode_1BYTE_KIND
 *         (<PyASCIIObject*> result).state.compact = True             # <<<<<<<<<<<<<<
 *         set_ready(<PyASCIIObject*> result)
 *         (<PyASCIIObject*> result).state.ascii = True
 */
((PyASCIIObject *)__pyx_v_result)->state.compact = 1;

/* "src/_exports.pyx":368
 *         (<PyASCIIObject*> result).state.kind = PyUnicode_1BYTE_KIND
 *         (<PyASCIIObject*> result).state.compact = True
 *         set_ready(<PyASCIIObject*> result)             # <<<<<<<<<<<<<<
 *         (<PyASCIIObject*> result).state.ascii = True
 * 
 */
JSON5EncoderCpp::set_ready<PyASCIIObject>(((PyASCIIObject *)__pyx_v_result));

/* "src/_exports.pyx":369
 *         (<PyASCIIObject*> result).state.compact = True
 *         set_ready(<PyASCIIObject*> result)
 *         (<PyASCIIObject*> result).state.ascii = True             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
((PyASCIIObject *)__pyx_v_result)->state.ascii = 1;

/* "src/_exports.pyx":371
 *         (<PyASCIIObject*> result).state.ascii = True
 * 
 *         return result             # <<<<<<<<<<<<<<
 *     finally:
 *         if writer.obj is not NULL:
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L3_return;
}

/* "src/_exports.pyx":373
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
/*finally:*/ {
__pyx_L4_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_9);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__pyx_t_4 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
{
__pyx_t_5 = (__pyx_v_writer.obj != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":374
 *     finally:
 *         if writer.obj is not NULL:
 *             ObjectFree(writer.obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
PyObject_Free(__pyx_v_writer.obj);

/* "src/_exports.pyx":373
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
}
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
}
__Pyx_XGIVEREF(__pyx_t_9);
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
__pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
__pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_8;
goto __pyx_L1_error;
}
__pyx_L3_return: {
__pyx_t_14 = __pyx_r;
__pyx_r = 0;
__pyx_t_5 = (__pyx_v_writer.obj != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":374
 *     finally:
 *         if writer.obj is not NULL:
 *             ObjectFree(writer.obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
PyObject_Free(__pyx_v_writer.obj);

/* "src/_exports.pyx":373
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
}
__pyx_r = __pyx_t_14;
__pyx_t_14 = 0;
goto __pyx_L0;
}
}

/* "src/_exports.pyx":289
 * 
 * 
 * def encode(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object as a JSON5 compatible string.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5.encode", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_opts);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":377
 * 
 * 
 * def encode_bytes(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible bytes string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_17encode_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_16encode_bytes, "encode_bytes(data, *, options=None, **options_kw)\n\n    Serializes a Python object to a JSON5 compatible bytes string.\n\n    .. code:: python\n\n        encode_bytes(['Hello', 'world!']) == b'[\"Hello\",\"world!\"]'\n\n    Parameters\n    ----------\n    data : object\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options : Optional[Options]\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options_kw\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n\n    Raises\n    ------\n    Json5EncoderException\n        An exception occured while encoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    bytes\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_17encode_bytes = {"encode_bytes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_17encode_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_16encode_bytes};
static PyObject *__pyx_pw_7pyjson5_17encode_bytes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_options = 0;
PyObject *__pyx_v_options_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[2] = {0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("encode_bytes (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_options_kw = PyDict_New(); if (unlikely(!__pyx_v_options_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_options_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_options,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 377, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (kw_args == 1) {
const Py_ssize_t index = 1;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 377, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_options_kw, values + 0, kwd_pos_args, "encode_bytes") < 0)) __PYX_ERR(15, 377, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_data = values[0];
__pyx_v_options = values[1];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("encode_bytes", 1, 1, 1, __pyx_nargs); __PYX_ERR(15, 377, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_options_kw); __pyx_v_options_kw = 0;
__Pyx_AddTraceback("pyjson5.encode_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_16encode_bytes(__pyx_self, __pyx_v_data, __pyx_v_options, __pyx_v_options_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_options_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_16encode_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw) {
void *__pyx_v_temp;
PyObject *__pyx_v_result = 0;
Py_ssize_t __pyx_v_start;
Py_ssize_t __pyx_v_length;
PyObject *__pyx_v_opts = 0;
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_v_writer;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
struct __pyx_t_7pyjson5_WriterReallocatable __pyx_t_2;
struct __pyx_t_7pyjson5_Writer __pyx_t_3;
int __pyx_t_4;
int __pyx_t_5;
JSON5EncoderCpp::AlwaysTrue __pyx_t_6;
PyObject *__pyx_t_7;
int __pyx_t_8;
char const *__pyx_t_9;
PyObject *__pyx_t_10 = NULL;
PyObject *__pyx_t_11 = NULL;
PyObject *__pyx_t_12 = NULL;
PyObject *__pyx_t_13 = NULL;
PyObject *__pyx_t_14 = NULL;
PyObject *__pyx_t_15 = NULL;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("encode_bytes", 1);

/* "src/_exports.pyx":409
 *     cdef object result
 *     cdef Py_ssize_t start = (
 *         <Py_ssize_t> <void*> &(<PyBytesObject*> NULL).ob_sval[0]             # <<<<<<<<<<<<<<
 *     )
 *     cdef Py_ssize_t length
 */
__pyx_v_start = ((Py_ssize_t)((void *)(&(((PyBytesObject *)NULL)->ob_sval[0]))));

/* "src/_exports.pyx":412
 *     )
 *     cdef Py_ssize_t length
 *     cdef object opts = _to_options(options, options_kw)             # <<<<<<<<<<<<<<
 *     cdef WriterReallocatable writer = WriterReallocatable(
 *         Writer(
 */
if (!(likely(((__pyx_v_options) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_options, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 412, __pyx_L1_error)
__pyx_t_1 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_options), __pyx_v_options_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 412, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_opts = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":415
 *     cdef WriterReallocatable writer = WriterReallocatable(
 *         Writer(
 *             _WriterReallocatable_reserve,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 */
__pyx_t_3.reserve = __pyx_f_7pyjson5__WriterReallocatable_reserve;

/* "src/_exports.pyx":416
 *         Writer(
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,             # <<<<<<<<<<<<<<
 *             _WriterReallocatable_append_s,
 *             <PyObject*> opts,
 */
__pyx_t_3.append_c = __pyx_f_7pyjson5__WriterReallocatable_append_c;

/* "src/_exports.pyx":417
 *             _WriterReallocatable_reserve,
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,             # <<<<<<<<<<<<<<
 *             <PyObject*> opts,
 *         ),
 */
__pyx_t_3.append_s = __pyx_f_7pyjson5__WriterReallocatable_append_s;

/* "src/_exports.pyx":418
 *             _WriterReallocatable_append_c,
 *             _WriterReallocatable_append_s,
 *             <PyObject*> opts,             # <<<<<<<<<<<<<<
 *         ),
 *         start, 0, NULL,
 */
__pyx_t_3.options = ((PyObject *)__pyx_v_opts);
__pyx_t_2.base = __pyx_t_3;

/* "src/_exports.pyx":420
 *             <PyObject*> opts,
 *         ),
 *         start, 0, NULL,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
__pyx_t_2.position = __pyx_v_start;
__pyx_t_2.length = 0;
__pyx_t_2.obj = NULL;
__pyx_v_writer = __pyx_t_2;

/* "src/_exports.pyx":423
 *     )
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if expect(_encode(writer.base, data) < 0, False):
 *             exception_thrown()
 */
/*try:*/ {

/* "src/_exports.pyx":424
 * 
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):             # <<<<<<<<<<<<<<
 *             exception_thrown()
 * 
 */
__pyx_t_4 = __pyx_f_7pyjson5__encode(__pyx_v_writer.base, __pyx_v_data); if (unlikely(__pyx_t_4 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(15, 424, __pyx_L4_error)
__pyx_t_5 = (JSON5EncoderCpp_expect((__pyx_t_4 < 0), 0) != 0);
if (__pyx_t_5) {

/* "src/_exports.pyx":425
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):
 *             exception_thrown()             # <<<<<<<<<<<<<<
 * 
 *         length = writer.position - start
 */
__pyx_t_6 = JSON5EncoderCpp::exception_thrown(); if (unlikely(__pyx_t_6 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(15, 425, __pyx_L4_error)

/* "src/_exports.pyx":424
 * 
 *     try:
 *         if expect(_encode(writer.base, data) < 0, False):             # <<<<<<<<<<<<<<
 *             exception_thrown()
 * 
 */
}

/* "src/_exports.pyx":427
 *             exception_thrown()
 * 
 *         length = writer.position - start             # <<<<<<<<<<<<<<
 *         if length <= 0:
 *             # impossible
 */
__pyx_v_length = (__pyx_v_writer.position - __pyx_v_start);

/* "src/_exports.pyx":428
 * 
 *         length = writer.position - start
 *         if length <= 0:             # <<<<<<<<<<<<<<
 *             # impossible
 *             return b''
 */
__pyx_t_5 = (__pyx_v_length <= 0);
if (__pyx_t_5) {

/* "src/_exports.pyx":430
 *         if length <= 0:
 *             # impossible
 *             return b''             # <<<<<<<<<<<<<<
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_kp_b__5);
__pyx_r = __pyx_kp_b__5;
goto __pyx_L3_return;

/* "src/_exports.pyx":428
 * 
 *         length = writer.position - start
 *         if length <= 0:             # <<<<<<<<<<<<<<
 *             # impossible
 *             return b''
 */
}

/* "src/_exports.pyx":432
 *             return b''
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)             # <<<<<<<<<<<<<<
 *         if temp is not NULL:
 *             writer.obj = temp
 */
__pyx_v_temp = PyObject_Realloc(__pyx_v_writer.obj, (__pyx_v_writer.position + 1));

/* "src/_exports.pyx":433
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:             # <<<<<<<<<<<<<<
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0
 */
__pyx_t_5 = (__pyx_v_temp != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":434
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:
 *             writer.obj = temp             # <<<<<<<<<<<<<<
 *         (<char*> writer.obj)[writer.position] = 0
 * 
 */
__pyx_v_writer.obj = __pyx_v_temp;

/* "src/_exports.pyx":433
 * 
 *         temp = ObjectRealloc(writer.obj, writer.position + 1)
 *         if temp is not NULL:             # <<<<<<<<<<<<<<
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0
 */
}

/* "src/_exports.pyx":435
 *         if temp is not NULL:
 *             writer.obj = temp
 *         (<char*> writer.obj)[writer.position] = 0             # <<<<<<<<<<<<<<
 * 
 *         result = <object> <PyObject*> ObjectInitVar(
 */
(((char *)__pyx_v_writer.obj)[__pyx_v_writer.position]) = 0;

/* "src/_exports.pyx":437
 *         (<char*> writer.obj)[writer.position] = 0
 * 
 *         result = <object> <PyObject*> ObjectInitVar(             # <<<<<<<<<<<<<<
 *             (<PyVarObject*> writer.obj), bytes, length,
 *         )
 */
__pyx_t_7 = ((PyObject *)PyObject_InitVar(((PyVarObject *)__pyx_v_writer.obj), ((PyTypeObject *)(&PyBytes_Type)), __pyx_v_length));
__pyx_t_1 = ((PyObject *)__pyx_t_7);
__Pyx_INCREF(__pyx_t_1);
__pyx_v_result = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":440
 *             (<PyVarObject*> writer.obj), bytes, length,
 *         )
 *         writer.obj = NULL             # <<<<<<<<<<<<<<
 * 
 *         reset_hash(<PyBytesObject*> result)
 */
__pyx_v_writer.obj = NULL;

/* "src/_exports.pyx":442
 *         writer.obj = NULL
 * 
 *         reset_hash(<PyBytesObject*> result)             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
JSON5EncoderCpp::reset_hash<PyBytesObject>(((PyBytesObject *)__pyx_v_result));

/* "src/_exports.pyx":444
 *         reset_hash(<PyBytesObject*> result)
 * 
 *         return result             # <<<<<<<<<<<<<<
 *     finally:
 *         if writer.obj is not NULL:
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_result);
__pyx_r = __pyx_v_result;
goto __pyx_L3_return;
}

/* "src/_exports.pyx":446
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
/*finally:*/ {
__pyx_L4_error:;
/*exception exit:*/{
__Pyx_PyThreadState_declare
__Pyx_PyThreadState_assign
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_10);
__Pyx_XGOTREF(__pyx_t_11);
__Pyx_XGOTREF(__pyx_t_12);
__Pyx_XGOTREF(__pyx_t_13);
__Pyx_XGOTREF(__pyx_t_14);
__Pyx_XGOTREF(__pyx_t_15);
__pyx_t_4 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
{
__pyx_t_5 = (__pyx_v_writer.obj != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":447
 *     finally:
 *         if writer.obj is not NULL:
 *             ObjectFree(writer.obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
PyObject_Free(__pyx_v_writer.obj);

/* "src/_exports.pyx":446
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
}
}
if (PY_MAJOR_VERSION >= 3) {
__Pyx_XGIVEREF(__pyx_t_13);
__Pyx_XGIVEREF(__pyx_t_14);
__Pyx_XGIVEREF(__pyx_t_15);
__Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
}
__Pyx_XGIVEREF(__pyx_t_10);
__Pyx_XGIVEREF(__pyx_t_11);
__Pyx_XGIVEREF(__pyx_t_12);
__Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
__pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
__pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
goto __pyx_L1_error;
}
__pyx_L3_return: {
__pyx_t_15 = __pyx_r;
__pyx_r = 0;
__pyx_t_5 = (__pyx_v_writer.obj != NULL);
if (__pyx_t_5) {

/* "src/_exports.pyx":447
 *     finally:
 *         if writer.obj is not NULL:
 *             ObjectFree(writer.obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
PyObject_Free(__pyx_v_writer.obj);

/* "src/_exports.pyx":446
 *         return result
 *     finally:
 *         if writer.obj is not NULL:             # <<<<<<<<<<<<<<
 *             ObjectFree(writer.obj)
 * 
 */
}
__pyx_r = __pyx_t_15;
__pyx_t_15 = 0;
goto __pyx_L0;
}
}

/* "src/_exports.pyx":377
 * 
 * 
 * def encode_bytes(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible bytes string.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5.encode_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_result);
__Pyx_XDECREF(__pyx_v_opts);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_19encode_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_18encode_callback, "encode_callback(data, cb, supply_bytes=False, *, options=None, **options_kw)\n\n    Serializes a Python object into a callback function.\n\n    The callback function ``cb`` gets called with single characters and strings\n    until the input ``data`` is fully serialized.\n\n    .. code:: python\n\n        encode_callback(['Hello', 'world!'], print)\n        #prints:\n        # [\n        # \"\n        # Hello\n        # \"\n        # ,\n        # \"\n        # world!\n        # \"\n        \" ]\n\n    Parameters\n    ----------\n    data : object\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    cb : Callable[[Union[bytes|str]], None]\n        A callback function.\n        Depending on the truthyness of ``supply_bytes`` either :class:`bytes` or\n        :class:`str` is supplied.\n    supply_bytes : bool\n        Call ``cb(\342\200\246)`` with a :class:`bytes` argument if true,\n        otherwise :class:`str`.\n    options : Optional[Options]\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options_kw\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n\n    Raises\n    ------\n    Json5EncoderException\n        An exception occured while encoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    Callable[[Union[bytes|str]], None]\n        The supplied argument ``cb``.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_19encode_callback = {"encode_callback", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_19encode_callback, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_18encode_callback};
static PyObject *__pyx_pw_7pyjson5_19encode_callback(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_cb = 0;
PyObject *__pyx_v_supply_bytes = 0;
PyObject *__pyx_v_options = 0;
PyObject *__pyx_v_options_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[4] = {0,0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("encode_callback (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_options_kw = PyDict_New(); if (unlikely(!__pyx_v_options_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_options_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_cb,&__pyx_n_s_supply_bytes,&__pyx_n_s_options,0};
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_False)));

/* "src/_exports.pyx":451
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,
 *                     options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object into a callback function.
 */
values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 450, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cb)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 450, __pyx_L3_error)
else {
__Pyx_RaiseArgtupleInvalid("encode_callback", 0, 2, 3, 1); __PYX_ERR(15, 450, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_supply_bytes);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 450, __pyx_L3_error)
}
}
if (kw_args == 1) {
const Py_ssize_t index = 3;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 450, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_options_kw, values + 0, kwd_pos_args, "encode_callback") < 0)) __PYX_ERR(15, 450, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_data = values[0];
__pyx_v_cb = values[1];
__pyx_v_supply_bytes = values[2];
__pyx_v_options = values[3];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("encode_callback", 0, 2, 3, __pyx_nargs); __PYX_ERR(15, 450, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_options_kw); __pyx_v_options_kw = 0;
__Pyx_AddTraceback("pyjson5.encode_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_18encode_callback(__pyx_self, __pyx_v_data, __pyx_v_cb, __pyx_v_supply_bytes, __pyx_v_options, __pyx_v_options_kw);

/* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */

/* function exit code */
__Pyx_DECREF(__pyx_v_options_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_18encode_callback(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_cb, PyObject *__pyx_v_supply_bytes, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw) {
int (*__pyx_v_encoder)(PyObject *, PyObject *, PyObject *);
struct __pyx_obj_7pyjson5_Options *__pyx_v_opts = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("encode_callback", 1);

/* "src/_exports.pyx":501
 *     '''
 *     cdef int (*encoder)(object obj, object cb, object options) except -1
 *     cdef Options opts = _to_options(options, options_kw)             # <<<<<<<<<<<<<<
 * 
 *     if supply_bytes:
 */
if (!(likely(((__pyx_v_options) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_options, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 501, __pyx_L1_error)
__pyx_t_1 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_options), __pyx_v_options_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 501, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 501, __pyx_L1_error)
__pyx_v_opts = ((struct __pyx_obj_7pyjson5_Options *)__pyx_t_1);
__pyx_t_1 = 0;

/* "src/_exports.pyx":503
 *     cdef Options opts = _to_options(options, options_kw)
 * 
 *     if supply_bytes:             # <<<<<<<<<<<<<<
 *         encoder = _encode_callback_bytes
 *     else:
 */
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supply_bytes); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 503, __pyx_L1_error)
if (__pyx_t_2) {

/* "src/_exports.pyx":504
 * 
 *     if supply_bytes:
 *         encoder = _encode_callback_bytes             # <<<<<<<<<<<<<<
 *     else:
 *         encoder = _encode_callback_str
 */
__pyx_v_encoder = __pyx_f_7pyjson5__encode_callback_bytes;

/* "src/_exports.pyx":503
 *     cdef Options opts = _to_options(options, options_kw)
 * 
 *     if supply_bytes:             # <<<<<<<<<<<<<<
 *         encoder = _encode_callback_bytes
 *     else:
 */
goto __pyx_L3;
}

/* "src/_exports.pyx":506
 *         encoder = _encode_callback_bytes
 *     else:
 *         encoder = _encode_callback_str             # <<<<<<<<<<<<<<
 * 
 *     encoder(data, cb, options=opts)
 */
/*else*/ {
__pyx_v_encoder = __pyx_f_7pyjson5__encode_callback_str;
}
__pyx_L3:;

/* "src/_exports.pyx":508
 *         encoder = _encode_callback_str
 * 
 *     encoder(data, cb, options=opts)             # <<<<<<<<<<<<<<
 * 
 *     return cb
 */
__pyx_t_3 = __pyx_v_encoder(__pyx_v_data, __pyx_v_cb, ((PyObject *)__pyx_v_opts)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(15, 508, __pyx_L1_error)

/* "src/_exports.pyx":510
 *     encoder(data, cb, options=opts)
 * 
 *     return cb             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_cb);
__pyx_r = __pyx_v_cb;
goto __pyx_L0;

/* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5.encode_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF((PyObject *)__pyx_v_opts);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_21encode_io(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_20encode_io, "encode_io(data, fp, supply_bytes=True, *, options=None, **options_kw)\n\n    Serializes a Python object into a file-object.\n\n    The return value of :meth:`fp.write(\342\200\246) <io.BufferedWriter.write>` is not checked.\n    If ``fp`` is unbuffered, then the result will be garbage!\n\n    Parameters\n    ----------\n    data : object\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    fp : IOBase\n        A file-like object to serialize into.\n    supply_bytes : bool\n        Call :meth:`fp.write(\342\200\246) <io.BufferedWriter.write>` with a :class:`bytes` argument if true,\n        otherwise :class:`str`.\n    options : Optional[Options]\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options_kw\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n\n    Raises\n    ------\n    Json5EncoderException\n        An exception occured while encoding.\n    TypeError\n        An argument had a wrong type.\n\n    Returns\n    -------\n    IOBase\n        The supplied argument ``fp``.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_21encode_io = {"encode_io", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_21encode_io, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_20encode_io};
static PyObject *__pyx_pw_7pyjson5_21encode_io(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_fp = 0;
PyObject *__pyx_v_supply_bytes = 0;
PyObject *__pyx_v_options = 0;
PyObject *__pyx_v_options_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[4] = {0,0,0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("encode_io (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_options_kw = PyDict_New(); if (unlikely(!__pyx_v_options_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_options_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_fp,&__pyx_n_s_supply_bytes,&__pyx_n_s_options,0};
values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)Py_True)));

/* "src/_exports.pyx":514
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,
 *               options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object into a file-object.
 */
values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 513, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fp)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 513, __pyx_L3_error)
else {
__Pyx_RaiseArgtupleInvalid("encode_io", 0, 2, 3, 1); __PYX_ERR(15, 513, __pyx_L3_error)
}
CYTHON_FALLTHROUGH;
case  2:
if (kw_args > 0) {
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_supply_bytes);
if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 513, __pyx_L3_error)
}
}
if (kw_args == 1) {
const Py_ssize_t index = 3;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 513, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_options_kw, values + 0, kwd_pos_args, "encode_io") < 0)) __PYX_ERR(15, 513, __pyx_L3_error)
}
} else {
switch (__pyx_nargs) {
case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
CYTHON_FALLTHROUGH;
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
break;
default: goto __pyx_L5_argtuple_error;
}
}
__pyx_v_data = values[0];
__pyx_v_fp = values[1];
__pyx_v_supply_bytes = values[2];
__pyx_v_options = values[3];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("encode_io", 0, 2, 3, __pyx_nargs); __PYX_ERR(15, 513, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_options_kw); __pyx_v_options_kw = 0;
__Pyx_AddTraceback("pyjson5.encode_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_20encode_io(__pyx_self, __pyx_v_data, __pyx_v_fp, __pyx_v_supply_bytes, __pyx_v_options, __pyx_v_options_kw);

/* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */

/* function exit code */
__Pyx_DECREF(__pyx_v_options_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_20encode_io(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_fp, PyObject *__pyx_v_supply_bytes, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw) {
int (*__pyx_v_encoder)(PyObject *, PyObject *, PyObject *);
PyObject *__pyx_v_opts = 0;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
int __pyx_t_2;
int __pyx_t_3;
Py_ssize_t __pyx_t_4;
Py_UCS4 __pyx_t_5;
PyObject *__pyx_t_6 = NULL;
PyObject *__pyx_t_7 = NULL;
unsigned int __pyx_t_8;
int __pyx_t_9;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("encode_io", 1);

/* "src/_exports.pyx":548
 *     '''
 *     cdef int (*encoder)(object obj, object cb, object options) except -1
 *     cdef object opts = _to_options(options, options_kw)             # <<<<<<<<<<<<<<
 * 
 *     if not isinstance(fp, IOBase):
 */
if (!(likely(((__pyx_v_options) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_options, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 548, __pyx_L1_error)
__pyx_t_1 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_options), __pyx_v_options_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 548, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_opts = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":550
 *     cdef object opts = _to_options(options, options_kw)
 * 
 *     if not isinstance(fp, IOBase):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():
 */
__pyx_t_1 = ((PyObject *)__pyx_v_7pyjson5_IOBase);
__Pyx_INCREF(__pyx_t_1);
__pyx_t_2 = PyObject_IsInstance(__pyx_v_fp, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(15, 550, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_3 = (!__pyx_t_2);
if (unlikely(__pyx_t_3)) {

/* "src/_exports.pyx":551
 * 
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')             # <<<<<<<<<<<<<<
 *     elif not fp.writable():
 *         raise TypeError(f'fp is not writable')
 */
__pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_4 = 0;
__pyx_t_5 = 127;
__Pyx_INCREF(__pyx_kp_u_type_fp);
__pyx_t_4 += 10;
__Pyx_GIVEREF(__pyx_kp_u_type_fp);
PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_type_fp);
__pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_fp); if (unlikely(!__pyx_t_6)) __PYX_ERR(15, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_6);
__pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
__pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
__pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
__Pyx_GIVEREF(__pyx_t_7);
PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
__pyx_t_7 = 0;
__Pyx_INCREF(__pyx_kp_u_is_not_IOBase_compatible);
__pyx_t_4 += 25;
__Pyx_GIVEREF(__pyx_kp_u_is_not_IOBase_compatible);
PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_not_IOBase_compatible);
__pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 551, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 551, __pyx_L1_error)

/* "src/_exports.pyx":550
 *     cdef object opts = _to_options(options, options_kw)
 * 
 *     if not isinstance(fp, IOBase):             # <<<<<<<<<<<<<<
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():
 */
}

/* "src/_exports.pyx":552
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is not writable')
 *     elif fp.closed:
 */
__pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_writable); if (unlikely(!__pyx_t_7)) __PYX_ERR(15, 552, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_7);
__pyx_t_6 = NULL;
__pyx_t_8 = 0;
#if CYTHON_UNPACK_METHODS
if (likely(PyMethod_Check(__pyx_t_7))) {
__pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
if (likely(__pyx_t_6)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
__Pyx_INCREF(__pyx_t_6);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_7, function);
__pyx_t_8 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 552, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
}
__pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(15, 552, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__pyx_t_2 = (!__pyx_t_3);
if (unlikely(__pyx_t_2)) {

/* "src/_exports.pyx":553
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():
 *         raise TypeError(f'fp is not writable')             # <<<<<<<<<<<<<<
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')
 */
__pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 553, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 553, __pyx_L1_error)

/* "src/_exports.pyx":552
 *     if not isinstance(fp, IOBase):
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is not writable')
 *     elif fp.closed:
 */
}

/* "src/_exports.pyx":554
 *     elif not fp.writable():
 *         raise TypeError(f'fp is not writable')
 *     elif fp.closed:             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is closed')
 * 
 */
__pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_closed); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 554, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 554, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
if (unlikely(__pyx_t_2)) {

/* "src/_exports.pyx":555
 *         raise TypeError(f'fp is not writable')
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')             # <<<<<<<<<<<<<<
 * 
 *     if supply_bytes:
 */
__pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 555, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_Raise(__pyx_t_1, 0, 0, 0);
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
__PYX_ERR(15, 555, __pyx_L1_error)

/* "src/_exports.pyx":554
 *     elif not fp.writable():
 *         raise TypeError(f'fp is not writable')
 *     elif fp.closed:             # <<<<<<<<<<<<<<
 *         raise TypeError(f'fp is closed')
 * 
 */
}

/* "src/_exports.pyx":557
 *         raise TypeError(f'fp is closed')
 * 
 *     if supply_bytes:             # <<<<<<<<<<<<<<
 *         encoder = _encode_callback_bytes
 *     else:
 */
__pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_supply_bytes); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(15, 557, __pyx_L1_error)
if (__pyx_t_2) {

/* "src/_exports.pyx":558
 * 
 *     if supply_bytes:
 *         encoder = _encode_callback_bytes             # <<<<<<<<<<<<<<
 *     else:
 *         encoder = _encode_callback_str
 */
__pyx_v_encoder = __pyx_f_7pyjson5__encode_callback_bytes;

/* "src/_exports.pyx":557
 *         raise TypeError(f'fp is closed')
 * 
 *     if supply_bytes:             # <<<<<<<<<<<<<<
 *         encoder = _encode_callback_bytes
 *     else:
 */
goto __pyx_L4;
}

/* "src/_exports.pyx":560
 *         encoder = _encode_callback_bytes
 *     else:
 *         encoder = _encode_callback_str             # <<<<<<<<<<<<<<
 * 
 *     encoder(data, fp.write, options=opts)
 */
/*else*/ {
__pyx_v_encoder = __pyx_f_7pyjson5__encode_callback_str;
}
__pyx_L4:;

/* "src/_exports.pyx":562
 *         encoder = _encode_callback_str
 * 
 *     encoder(data, fp.write, options=opts)             # <<<<<<<<<<<<<<
 * 
 *     return fp
 */
__pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 562, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_t_9 = __pyx_v_encoder(__pyx_v_data, __pyx_t_1, __pyx_v_opts); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(15, 562, __pyx_L1_error)
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_exports.pyx":564
 *     encoder(data, fp.write, options=opts)
 * 
 *     return fp             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(__pyx_v_fp);
__pyx_r = __pyx_v_fp;
goto __pyx_L0;

/* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_XDECREF(__pyx_t_7);
__Pyx_AddTraceback("pyjson5.encode_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_opts);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_exports.pyx":567
 * 
 * 
 * def encode_noop(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Test if the input is serializable.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_23encode_noop(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_22encode_noop, "encode_noop(data, *, options=None, **options_kw)\n\n    Test if the input is serializable.\n\n    Most likely you want to serialize ``data`` directly, and catch exceptions\n    instead of using this function!\n\n    .. code:: python\n\n        encode_noop({47: 11}) == True\n        encode_noop({47: object()}) == False\n\n    Parameters\n    ----------\n    data : object\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options : Optional[Options]\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    options_kw\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n\n    Returns\n    -------\n    bool\n        ``True`` iff ``data`` is serializable.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_23encode_noop = {"encode_noop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_23encode_noop, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_22encode_noop};
static PyObject *__pyx_pw_7pyjson5_23encode_noop(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_data = 0;
PyObject *__pyx_v_options = 0;
PyObject *__pyx_v_options_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[2] = {0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("encode_noop (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_options_kw = PyDict_New(); if (unlikely(!__pyx_v_options_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_options_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_options,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 567, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (kw_args == 1) {
const Py_ssize_t index = 1;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(15, 567, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_options_kw, values + 0, kwd_pos_args, "encode_noop") < 0)) __PYX_ERR(15, 567, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_data = values[0];
__pyx_v_options = values[1];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("encode_noop", 1, 1, 1, __pyx_nargs); __PYX_ERR(15, 567, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_options_kw); __pyx_v_options_kw = 0;
__Pyx_AddTraceback("pyjson5.encode_noop", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_22encode_noop(__pyx_self, __pyx_v_data, __pyx_v_options, __pyx_v_options_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_options_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_22encode_noop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_options, PyObject *__pyx_v_options_kw) {
PyObject *__pyx_v_opts = 0;
struct __pyx_t_7pyjson5_Writer __pyx_v_writer;
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
struct __pyx_t_7pyjson5_Writer __pyx_t_2;
int __pyx_t_3;
int __pyx_t_4;
JSON5EncoderCpp::AlwaysTrue __pyx_t_5;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("encode_noop", 1);

/* "src/_exports.pyx":593
 *         ``True`` iff ``data`` is serializable.
 *     '''
 *     cdef object opts = _to_options(options, options_kw)             # <<<<<<<<<<<<<<
 *     cdef Writer writer = Writer(
 *         _WriterNoop_reserve,
 */
if (!(likely(((__pyx_v_options) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_options, __pyx_ptype_7pyjson5_Options))))) __PYX_ERR(15, 593, __pyx_L1_error)
__pyx_t_1 = __pyx_f_7pyjson5__to_options(((struct __pyx_obj_7pyjson5_Options *)__pyx_v_options), __pyx_v_options_kw); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 593, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__pyx_v_opts = __pyx_t_1;
__pyx_t_1 = 0;

/* "src/_exports.pyx":595
 *     cdef object opts = _to_options(options, options_kw)
 *     cdef Writer writer = Writer(
 *         _WriterNoop_reserve,             # <<<<<<<<<<<<<<
 *         _WriterNoop_append_c,
 *         _WriterNoop_append_s,
 */
__pyx_t_2.reserve = __pyx_f_7pyjson5__WriterNoop_reserve;

/* "src/_exports.pyx":596
 *     cdef Writer writer = Writer(
 *         _WriterNoop_reserve,
 *         _WriterNoop_append_c,             # <<<<<<<<<<<<<<
 *         _WriterNoop_append_s,
 *         <PyObject*> opts,
 */
__pyx_t_2.append_c = __pyx_f_7pyjson5__WriterNoop_append_c;

/* "src/_exports.pyx":597
 *         _WriterNoop_reserve,
 *         _WriterNoop_append_c,
 *         _WriterNoop_append_s,             # <<<<<<<<<<<<<<
 *         <PyObject*> opts,
 *     )
 */
__pyx_t_2.append_s = __pyx_f_7pyjson5__WriterNoop_append_s;

/* "src/_exports.pyx":598
 *         _WriterNoop_append_c,
 *         _WriterNoop_append_s,
 *         <PyObject*> opts,             # <<<<<<<<<<<<<<
 *     )
 * 
 */
__pyx_t_2.options = ((PyObject *)__pyx_v_opts);
__pyx_v_writer = __pyx_t_2;

/* "src/_exports.pyx":601
 *     )
 * 
 *     if expect(_encode(writer, data) < 0, False):             # <<<<<<<<<<<<<<
 *         exception_thrown()
 * 
 */
__pyx_t_3 = __pyx_f_7pyjson5__encode(__pyx_v_writer, __pyx_v_data); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(15, 601, __pyx_L1_error)
__pyx_t_4 = (JSON5EncoderCpp_expect((__pyx_t_3 < 0), 0) != 0);
if (__pyx_t_4) {

/* "src/_exports.pyx":602
 * 
 *     if expect(_encode(writer, data) < 0, False):
 *         exception_thrown()             # <<<<<<<<<<<<<<
 * 
 *     return True
 */
__pyx_t_5 = JSON5EncoderCpp::exception_thrown(); if (unlikely(__pyx_t_5 == ((JSON5EncoderCpp::AlwaysTrue)1))) __PYX_ERR(15, 602, __pyx_L1_error)

/* "src/_exports.pyx":601
 *     )
 * 
 *     if expect(_encode(writer, data) < 0, False):             # <<<<<<<<<<<<<<
 *         exception_thrown()
 * 
 */
}

/* "src/_exports.pyx":604
 *         exception_thrown()
 * 
 *     return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_INCREF(Py_True);
__pyx_r = Py_True;
goto __pyx_L0;

/* "src/_exports.pyx":567
 * 
 * 
 * def encode_noop(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Test if the input is serializable.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_AddTraceback("pyjson5.encode_noop", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_opts);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_legacy.pyx":1
 * def loads(s, *, encoding='UTF-8', **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_25loads(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_24loads, "loads(s, *, encoding=u'UTF-8', **kw)\n\n    Decodes JSON5 serialized data from a string.\n\n    Use :func:`decode(\342\200\246) <pyjson5.decode>` instead!\n\n    .. code:: python\n\n        loads(s) == decode(s)\n\n    Parameters\n    ----------\n    s : object\n        Unless the argument is an ``str``, it gets decoded according to the\n        parameter ``encoding``.\n    encoding : str\n        Codec to use if ``s`` is not an ``str``.\n    kw\n        Silently ignored.\n\n    Returns\n    -------\n    object\n        see :func:`decode(\342\200\246) <pyjson5.decode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_25loads = {"loads", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_25loads, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_24loads};
static PyObject *__pyx_pw_7pyjson5_25loads(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_s = 0;
PyObject *__pyx_v_encoding = 0;
CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[2] = {0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("loads (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_encoding,0};
values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_kp_u_UTF_8)));
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_s)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 1, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (kw_args == 1) {
const Py_ssize_t index = 1;
PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
if (value) { values[index] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 1, __pyx_L3_error)
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kw, values + 0, kwd_pos_args, "loads") < 0)) __PYX_ERR(16, 1, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_s = values[0];
__pyx_v_encoding = values[1];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("loads", 1, 1, 1, __pyx_nargs); __PYX_ERR(16, 1, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
__Pyx_AddTraceback("pyjson5.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_24loads(__pyx_self, __pyx_v_s, __pyx_v_encoding, __pyx_v_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_24loads(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_encoding, CYTHON_UNUSED PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
int __pyx_t_1;
int __pyx_t_2;
char *__pyx_t_3;
PyObject *__pyx_t_4 = NULL;
PyObject *__pyx_t_5 = NULL;
PyObject *__pyx_t_6 = NULL;
unsigned int __pyx_t_7;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("loads", 0);
__Pyx_INCREF(__pyx_v_s);

/* "src/_legacy.pyx":26
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         s = PyUnicode_FromEncodedObject(s, encoding, 'strict')
 *     return decode(s)
 */
__pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
__pyx_t_2 = (!__pyx_t_1);
if (__pyx_t_2) {

/* "src/_legacy.pyx":27
 *     '''
 *     if not isinstance(s, unicode):
 *         s = PyUnicode_FromEncodedObject(s, encoding, 'strict')             # <<<<<<<<<<<<<<
 *     return decode(s)
 * 
 */
__pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_encoding); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(16, 27, __pyx_L1_error)
__pyx_t_4 = PyUnicode_FromEncodedObject(__pyx_v_s, __pyx_t_3, ((char *)"strict")); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 27, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF_SET(__pyx_v_s, __pyx_t_4);
__pyx_t_4 = 0;

/* "src/_legacy.pyx":26
 *         see :func:`decode() <pyjson5.decode>`
 *     '''
 *     if not isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         s = PyUnicode_FromEncodedObject(s, encoding, 'strict')
 *     return decode(s)
 */
}

/* "src/_legacy.pyx":28
 *     if not isinstance(s, unicode):
 *         s = PyUnicode_FromEncodedObject(s, encoding, 'strict')
 *     return decode(s)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_decode); if (unlikely(!__pyx_t_5)) __PYX_ERR(16, 28, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_5);
__pyx_t_6 = NULL;
__pyx_t_7 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_5))) {
__pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
if (likely(__pyx_t_6)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
__Pyx_INCREF(__pyx_t_6);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_5, function);
__pyx_t_7 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_s};
__pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
__Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 28, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_4);
__Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
}
__pyx_r = __pyx_t_4;
__pyx_t_4 = 0;
goto __pyx_L0;

/* "src/_legacy.pyx":1
 * def loads(s, *, encoding='UTF-8', **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a string.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_4);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_AddTraceback("pyjson5.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_s);
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_legacy.pyx":31
 * 
 * 
 * def load(fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_27load(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_26load, "load(fp, **kw)\n\n    Decodes JSON5 serialized data from a file-like object.\n\n    Use :func:`decode_io(\342\200\246) <pyjson5.decode_io>` instead!\n\n    .. code:: python\n\n        load(fp) == decode_io(fp, None, False)\n\n    Parameters\n    ----------\n    fp : IOBase\n        A file-like object to parse from.\n    kw\n        Silently ignored.\n\n    Returns\n    -------\n    object\n        see :func:`decode_io(\342\200\246) <pyjson5.decode_io>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_27load = {"load", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_27load, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_26load};
static PyObject *__pyx_pw_7pyjson5_27load(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_fp = 0;
CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[1] = {0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("load (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fp,0};
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fp)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 31, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kw, values + 0, kwd_pos_args, "load") < 0)) __PYX_ERR(16, 31, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_fp = values[0];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("load", 1, 1, 1, __pyx_nargs); __PYX_ERR(16, 31, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
__Pyx_AddTraceback("pyjson5.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_26load(__pyx_self, __pyx_v_fp, __pyx_v_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_26load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fp, CYTHON_UNUSED PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
unsigned int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("load", 1);

/* "src/_legacy.pyx":53
 *         see :func:`decode_io() <pyjson5.decode_io>`
 *     '''
 *     return decode_io(fp, None, False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_decode_io); if (unlikely(!__pyx_t_2)) __PYX_ERR(16, 53, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = NULL;
__pyx_t_4 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_3)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_3);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_4 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_fp, Py_None, Py_False};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 53, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_legacy.pyx":31
 * 
 * 
 * def load(fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_legacy.pyx":56
 * 
 * 
 * def dumps(obj, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_29dumps(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_28dumps, "dumps(obj, **kw)\n\n    Serializes a Python object to a JSON5 compatible string.\n\n    Use :func:`encode(\342\200\246) <pyjson5.encode>` instead!\n\n    .. code:: python\n\n        dumps(obj) == encode(obj)\n\n    Parameters\n    ----------\n    obj : object\n        Python object to serialize.\n    kw\n        Silently ignored.\n\n    Returns\n    -------\n    str\n        see :func:`encode(\342\200\246) <pyjson5.encode>`\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_29dumps = {"dumps", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_29dumps, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_28dumps};
static PyObject *__pyx_pw_7pyjson5_29dumps(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_obj = 0;
CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[1] = {0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("dumps (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,0};
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 56, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kw, values + 0, kwd_pos_args, "dumps") < 0)) __PYX_ERR(16, 56, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 1)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
}
__pyx_v_obj = values[0];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("dumps", 1, 1, 1, __pyx_nargs); __PYX_ERR(16, 56, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
__Pyx_AddTraceback("pyjson5.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_28dumps(__pyx_self, __pyx_v_obj, __pyx_v_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_28dumps(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, CYTHON_UNUSED PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
unsigned int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("dumps", 1);

/* "src/_legacy.pyx":78
 *         see :func:`encode() <pyjson5.encode>`
 *     '''
 *     return encode(obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
__Pyx_XDECREF(__pyx_r);
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(16, 78, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = NULL;
__pyx_t_4 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_3)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_3);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_4 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_obj};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 78, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__pyx_r = __pyx_t_1;
__pyx_t_1 = 0;
goto __pyx_L0;

/* "src/_legacy.pyx":56
 * 
 * 
 * def dumps(obj, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */

/* function exit code */
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "src/_legacy.pyx":81
 * 
 * 
 * def dump(object obj, object fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyjson5_31dump(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7pyjson5_30dump, "dump(obj, fp, **kw)\n\n    Serializes a Python object to a JSON5 compatible string.\n\n    Use :func:`encode_io(\342\200\246) <pyjson5.encode_io>` instead!\n\n    .. code:: python\n\n        dump(obj, fp) == encode_io(obj, fp)\n\n    Parameters\n    ----------\n    obj : object\n        Python object to serialize.\n    fp : IOBase\n        A file-like object to serialize into.\n    kw\n        Silently ignored.\n    ");
static PyMethodDef __pyx_mdef_7pyjson5_31dump = {"dump", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_31dump, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_30dump};
static PyObject *__pyx_pw_7pyjson5_31dump(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
PyObject *__pyx_v_obj = 0;
PyObject *__pyx_v_fp = 0;
CYTHON_UNUSED PyObject *__pyx_v_kw = 0;
#if !CYTHON_METH_FASTCALL
CYTHON_UNUSED Py_ssize_t __pyx_nargs;
#endif
CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
PyObject* values[2] = {0,0};
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
PyObject *__pyx_r = 0;
__Pyx_RefNannyDeclarations
__Pyx_RefNannySetupContext("dump (wrapper)", 0);
#if !CYTHON_METH_FASTCALL
#if CYTHON_ASSUME_SAFE_MACROS
__pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
#else
__pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
#endif
#endif
__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
__pyx_v_kw = PyDict_New(); if (unlikely(!__pyx_v_kw)) return NULL;
__Pyx_GOTREF(__pyx_v_kw);
{
PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_fp,0};
if (__pyx_kwds) {
Py_ssize_t kw_args;
switch (__pyx_nargs) {
case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
CYTHON_FALLTHROUGH;
case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
CYTHON_FALLTHROUGH;
case  0: break;
default: goto __pyx_L5_argtuple_error;
}
kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
switch (__pyx_nargs) {
case  0:
if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 81, __pyx_L3_error)
else goto __pyx_L5_argtuple_error;
CYTHON_FALLTHROUGH;
case  1:
if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fp)) != 0)) {
(void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
kw_args--;
}
else if (unlikely(PyErr_Occurred())) __PYX_ERR(16, 81, __pyx_L3_error)
else {
__Pyx_RaiseArgtupleInvalid("dump", 1, 2, 2, 1); __PYX_ERR(16, 81, __pyx_L3_error)
}
}
if (unlikely(kw_args > 0)) {
const Py_ssize_t kwd_pos_args = __pyx_nargs;
if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kw, values + 0, kwd_pos_args, "dump") < 0)) __PYX_ERR(16, 81, __pyx_L3_error)
}
} else if (unlikely(__pyx_nargs != 2)) {
goto __pyx_L5_argtuple_error;
} else {
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
}
__pyx_v_obj = values[0];
__pyx_v_fp = values[1];
}
goto __pyx_L6_skip;
__pyx_L5_argtuple_error:;
__Pyx_RaiseArgtupleInvalid("dump", 1, 2, 2, __pyx_nargs); __PYX_ERR(16, 81, __pyx_L3_error)
__pyx_L6_skip:;
goto __pyx_L4_argument_unpacking_done;
__pyx_L3_error:;
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_DECREF(__pyx_v_kw); __pyx_v_kw = 0;
__Pyx_AddTraceback("pyjson5.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
__Pyx_RefNannyFinishContext();
return NULL;
__pyx_L4_argument_unpacking_done:;
__pyx_r = __pyx_pf_7pyjson5_30dump(__pyx_self, __pyx_v_obj, __pyx_v_fp, __pyx_v_kw);

/* function exit code */
__Pyx_DECREF(__pyx_v_kw);
{
Py_ssize_t __pyx_temp;
for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
__Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
}
}
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static PyObject *__pyx_pf_7pyjson5_30dump(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_fp, CYTHON_UNUSED PyObject *__pyx_v_kw) {
PyObject *__pyx_r = NULL;
__Pyx_RefNannyDeclarations
PyObject *__pyx_t_1 = NULL;
PyObject *__pyx_t_2 = NULL;
PyObject *__pyx_t_3 = NULL;
unsigned int __pyx_t_4;
int __pyx_lineno = 0;
const char *__pyx_filename = NULL;
int __pyx_clineno = 0;
__Pyx_RefNannySetupContext("dump", 1);

/* "src/_legacy.pyx":100
 *         Silently ignored.
 *     '''
 *     encode_io(obj, fp)             # <<<<<<<<<<<<<<
 */
__Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_encode_io); if (unlikely(!__pyx_t_2)) __PYX_ERR(16, 100, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_2);
__pyx_t_3 = NULL;
__pyx_t_4 = 0;
#if CYTHON_UNPACK_METHODS
if (unlikely(PyMethod_Check(__pyx_t_2))) {
__pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
if (likely(__pyx_t_3)) {
PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
__Pyx_INCREF(__pyx_t_3);
__Pyx_INCREF(function);
__Pyx_DECREF_SET(__pyx_t_2, function);
__pyx_t_4 = 1;
}
}
#endif
{
PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_obj, __pyx_v_fp};
__pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
__Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 100, __pyx_L1_error)
__Pyx_GOTREF(__pyx_t_1);
__Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
}
__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

/* "src/_legacy.pyx":81
 * 
 * 
 * def dump(object obj, object fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */

/* function exit code */
__pyx_r = Py_None; __Pyx_INCREF(Py_None);
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_1);
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_AddTraceback("pyjson5.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = NULL;
__pyx_L0:;
__Pyx_XGIVEREF(__pyx_r);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

static int __pyx_tp_traverse_7pyjson5_Json5Exception(PyObject *o, visitproc v, void *a) {
int e;
if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse); else { e = (&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse(o,v,a); if (e) return e; }
return 0;
}

static int __pyx_tp_clear_7pyjson5_Json5Exception(PyObject *o) {
if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_clear); else (&((PyTypeObject*)PyExc_Exception)[0])->tp_clear(o);
return 0;
}

static PyObject *__pyx_getprop_7pyjson5_14Json5Exception_message(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_14Json5Exception_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5Exception[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5Exception[] = {
{(char *)"message", __pyx_getprop_7pyjson5_14Json5Exception_message, 0, (char *)PyDoc_STR("Human readable error description"), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5Exception_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5Exception(message=None, *args)\n\n    Base class of any exception thrown by PyJSON5.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5Exception},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5Exception},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_14Json5Exception_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5Exception_spec = {
"pyjson5.Json5Exception",
sizeof(struct __pyx_obj_7pyjson5_Json5Exception),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5Exception_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5Exception = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5Exception", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5Exception), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5Exception(message=None, *args)\n\n    Base class of any exception thrown by PyJSON5.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5Exception, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5Exception, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_14Json5Exception_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_getprop_7pyjson5_21Json5DecoderException_result(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_21Json5DecoderException_6result_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5DecoderException[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5DecoderException[] = {
{(char *)"result", __pyx_getprop_7pyjson5_21Json5DecoderException_result, 0, (char *)PyDoc_STR("Deserialized data up until now."), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5DecoderException_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5DecoderException(message=None, result=None, *args)\n\n    Base class of any exception thrown by the parser.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5DecoderException},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5DecoderException},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_21Json5DecoderException_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5DecoderException_spec = {
"pyjson5.Json5DecoderException",
sizeof(struct __pyx_obj_7pyjson5_Json5DecoderException),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5DecoderException_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5DecoderException = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5DecoderException", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5DecoderException), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5DecoderException(message=None, result=None, *args)\n\n    Base class of any exception thrown by the parser.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5DecoderException, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5DecoderException, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_21Json5DecoderException_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5NestingTooDeep_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("\n    The maximum nesting level on the input data was exceeded.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5NestingTooDeep_spec = {
"pyjson5.Json5NestingTooDeep",
sizeof(struct __pyx_obj_7pyjson5_Json5NestingTooDeep),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5NestingTooDeep_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5NestingTooDeep = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5NestingTooDeep", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5NestingTooDeep), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("\n    The maximum nesting level on the input data was exceeded.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
0, /*tp_methods*/
0, /*tp_members*/
0, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
#if CYTHON_COMPILING_IN_PYPY || 0
__pyx_pw_7pyjson5_21Json5DecoderException_1__init__, /*tp_init*/
#else
0, /*tp_init*/
#endif
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5EOF_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("\n    The input ended prematurely.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5EOF_spec = {
"pyjson5.Json5EOF",
sizeof(struct __pyx_obj_7pyjson5_Json5EOF),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5EOF_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5EOF = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5EOF", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5EOF), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("\n    The input ended prematurely.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
0, /*tp_methods*/
0, /*tp_members*/
0, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
#if CYTHON_COMPILING_IN_PYPY || 0
__pyx_pw_7pyjson5_21Json5DecoderException_1__init__, /*tp_init*/
#else
0, /*tp_init*/
#endif
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_getprop_7pyjson5_21Json5IllegalCharacter_character(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_21Json5IllegalCharacter_9character_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5IllegalCharacter[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5IllegalCharacter[] = {
{(char *)"character", __pyx_getprop_7pyjson5_21Json5IllegalCharacter_character, 0, (char *)PyDoc_STR("\n        Illegal character.\n        "), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5IllegalCharacter_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5IllegalCharacter(message=None, result=None, character=None, *args)\n\n    An unexpected character was encountered.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5IllegalCharacter},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5IllegalCharacter},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_21Json5IllegalCharacter_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5IllegalCharacter_spec = {
"pyjson5.Json5IllegalCharacter",
sizeof(struct __pyx_obj_7pyjson5_Json5IllegalCharacter),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5IllegalCharacter_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5IllegalCharacter = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5IllegalCharacter", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5IllegalCharacter), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5IllegalCharacter(message=None, result=None, character=None, *args)\n\n    An unexpected character was encountered.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5IllegalCharacter, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5IllegalCharacter, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_21Json5IllegalCharacter_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_getprop_7pyjson5_14Json5ExtraData_character(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_14Json5ExtraData_9character_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5ExtraData[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5ExtraData[] = {
{(char *)"character", __pyx_getprop_7pyjson5_14Json5ExtraData_character, 0, (char *)PyDoc_STR("\n        Extranous character.\n        "), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5ExtraData_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5ExtraData(message=None, result=None, character=None, *args)\n\n    The input contained extranous data.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5ExtraData},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5ExtraData},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_14Json5ExtraData_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5ExtraData_spec = {
"pyjson5.Json5ExtraData",
sizeof(struct __pyx_obj_7pyjson5_Json5ExtraData),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5ExtraData_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5ExtraData = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5ExtraData", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5ExtraData), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5ExtraData(message=None, result=None, character=None, *args)\n\n    The input contained extranous data.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5ExtraData, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5ExtraData, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_14Json5ExtraData_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_getprop_7pyjson5_16Json5IllegalType_value(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_16Json5IllegalType_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5IllegalType[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5IllegalType[] = {
{(char *)"value", __pyx_getprop_7pyjson5_16Json5IllegalType_value, 0, (char *)PyDoc_STR("\n        Value that caused the problem.\n        "), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5IllegalType_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5IllegalType(message=None, result=None, value=None, *args)\n\n    The user supplied callback function returned illegal data.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5IllegalType},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5IllegalType},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_16Json5IllegalType_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5IllegalType_spec = {
"pyjson5.Json5IllegalType",
sizeof(struct __pyx_obj_7pyjson5_Json5IllegalType),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5IllegalType_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5IllegalType = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5IllegalType", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5IllegalType), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5IllegalType(message=None, result=None, value=None, *args)\n\n    The user supplied callback function returned illegal data.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5IllegalType, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5IllegalType, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_16Json5IllegalType_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_tp_new_7pyjson5__DecoderException(PyTypeObject *t, PyObject *a, PyObject *k) {
struct __pyx_obj_7pyjson5__DecoderException *p;
PyObject *o = __Pyx_PyType_GetSlot((&((PyTypeObject*)PyExc_Exception)[0]), tp_new, newfunc)(t, a, k);
if (unlikely(!o)) return 0;
p = ((struct __pyx_obj_7pyjson5__DecoderException *)o);
p->cls = Py_None; Py_INCREF(Py_None);
p->msg = Py_None; Py_INCREF(Py_None);
p->extra = Py_None; Py_INCREF(Py_None);
p->result = Py_None; Py_INCREF(Py_None);
if (unlikely(__pyx_pw_7pyjson5_17_DecoderException_1__cinit__(o, a, k) < 0)) goto bad;
return o;
bad:
Py_DECREF(o); o = 0;
return NULL;
}

static void __pyx_tp_dealloc_7pyjson5__DecoderException(PyObject *o) {
struct __pyx_obj_7pyjson5__DecoderException *p = (struct __pyx_obj_7pyjson5__DecoderException *)o;
#if CYTHON_USE_TP_FINALIZE
if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7pyjson5__DecoderException) {
if (PyObject_CallFinalizerFromDealloc(o)) return;
}
}
#endif
PyObject_GC_UnTrack(o);
Py_CLEAR(p->cls);
Py_CLEAR(p->msg);
Py_CLEAR(p->extra);
Py_CLEAR(p->result);
PyObject_GC_Track(o);
__Pyx_PyType_GetSlot((&((PyTypeObject*)PyExc_Exception)[0]), tp_dealloc, destructor)(o);
}

static int __pyx_tp_traverse_7pyjson5__DecoderException(PyObject *o, visitproc v, void *a) {
int e;
struct __pyx_obj_7pyjson5__DecoderException *p = (struct __pyx_obj_7pyjson5__DecoderException *)o;
if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse); else { e = (&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse(o,v,a); if (e) return e; }
if (p->cls) {
e = (*v)(p->cls, a); if (e) return e;
}
if (p->msg) {
e = (*v)(p->msg, a); if (e) return e;
}
if (p->extra) {
e = (*v)(p->extra, a); if (e) return e;
}
if (p->result) {
e = (*v)(p->result, a); if (e) return e;
}
return 0;
}

static int __pyx_tp_clear_7pyjson5__DecoderException(PyObject *o) {
PyObject* tmp;
struct __pyx_obj_7pyjson5__DecoderException *p = (struct __pyx_obj_7pyjson5__DecoderException *)o;
if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_clear); else (&((PyTypeObject*)PyExc_Exception)[0])->tp_clear(o);
tmp = ((PyObject*)p->cls);
p->cls = Py_None; Py_INCREF(Py_None);
Py_XDECREF(tmp);
tmp = ((PyObject*)p->msg);
p->msg = Py_None; Py_INCREF(Py_None);
Py_XDECREF(tmp);
tmp = ((PyObject*)p->extra);
p->extra = Py_None; Py_INCREF(Py_None);
Py_XDECREF(tmp);
tmp = ((PyObject*)p->result);
p->result = Py_None; Py_INCREF(Py_None);
Py_XDECREF(tmp);
return 0;
}

static PyMethodDef __pyx_methods_7pyjson5__DecoderException[] = {
{0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5__DecoderException_slots[] = {
{Py_tp_dealloc, (void *)__pyx_tp_dealloc_7pyjson5__DecoderException},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5__DecoderException},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5__DecoderException},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5__DecoderException},
{Py_tp_new, (void *)__pyx_tp_new_7pyjson5__DecoderException},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5__DecoderException_spec = {
"pyjson5._DecoderException",
sizeof(struct __pyx_obj_7pyjson5__DecoderException),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5__DecoderException_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5__DecoderException = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""_DecoderException", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5__DecoderException), /*tp_basicsize*/
0, /*tp_itemsize*/
__pyx_tp_dealloc_7pyjson5__DecoderException, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
0, /*tp_doc*/
__pyx_tp_traverse_7pyjson5__DecoderException, /*tp_traverse*/
__pyx_tp_clear_7pyjson5__DecoderException, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5__DecoderException, /*tp_methods*/
0, /*tp_members*/
0, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
0, /*tp_init*/
0, /*tp_alloc*/
__pyx_tp_new_7pyjson5__DecoderException, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5EncoderException_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("\n    Base class of any exception thrown by the serializer.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5EncoderException_spec = {
"pyjson5.Json5EncoderException",
sizeof(struct __pyx_obj_7pyjson5_Json5EncoderException),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5EncoderException_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5EncoderException = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5EncoderException", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5EncoderException), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("\n    Base class of any exception thrown by the serializer.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
0, /*tp_methods*/
0, /*tp_members*/
0, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
#if CYTHON_COMPILING_IN_PYPY || 0
__pyx_pw_7pyjson5_14Json5Exception_1__init__, /*tp_init*/
#else
0, /*tp_init*/
#endif
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyObject *__pyx_getprop_7pyjson5_24Json5UnstringifiableType_unstringifiable(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_24Json5UnstringifiableType_15unstringifiable_1__get__(o);
}

static PyMethodDef __pyx_methods_7pyjson5_Json5UnstringifiableType[] = {
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Json5UnstringifiableType[] = {
{(char *)"unstringifiable", __pyx_getprop_7pyjson5_24Json5UnstringifiableType_unstringifiable, 0, (char *)PyDoc_STR("\n        The value that caused the problem.\n        "), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Json5UnstringifiableType_slots[] = {
{Py_tp_doc, (void *)PyDoc_STR("Json5UnstringifiableType(message=None, unstringifiable=None)\n\n    The encoder was not able to stringify the input, or it was told not to by the supplied ``Options``.\n    ")},
{Py_tp_traverse, (void *)__pyx_tp_traverse_7pyjson5_Json5Exception},
{Py_tp_clear, (void *)__pyx_tp_clear_7pyjson5_Json5Exception},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Json5UnstringifiableType},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Json5UnstringifiableType},
{Py_tp_init, (void *)__pyx_pw_7pyjson5_24Json5UnstringifiableType_1__init__},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Json5UnstringifiableType_spec = {
"pyjson5.Json5UnstringifiableType",
sizeof(struct __pyx_obj_7pyjson5_Json5UnstringifiableType),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
__pyx_type_7pyjson5_Json5UnstringifiableType_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Json5UnstringifiableType = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Json5UnstringifiableType", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Json5UnstringifiableType), /*tp_basicsize*/
0, /*tp_itemsize*/
0, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
0, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
0, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
PyDoc_STR("Json5UnstringifiableType(message=None, unstringifiable=None)\n\n    The encoder was not able to stringify the input, or it was told not to by the supplied ``Options``.\n    "), /*tp_doc*/
__pyx_tp_traverse_7pyjson5_Json5Exception, /*tp_traverse*/
__pyx_tp_clear_7pyjson5_Json5Exception, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Json5UnstringifiableType, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Json5UnstringifiableType, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
__pyx_pw_7pyjson5_24Json5UnstringifiableType_1__init__, /*tp_init*/
0, /*tp_alloc*/
0, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_7pyjson5_Options *__pyx_freelist_7pyjson5_Options[8];
static int __pyx_freecount_7pyjson5_Options = 0;
#endif

static PyObject *__pyx_tp_new_7pyjson5_Options(PyTypeObject *t, PyObject *a, PyObject *k) {
struct __pyx_obj_7pyjson5_Options *p;
PyObject *o;
#if CYTHON_COMPILING_IN_LIMITED_API
allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
o = alloc_func(t, 0);
#else
#if CYTHON_USE_FREELISTS
if (likely((int)(__pyx_freecount_7pyjson5_Options > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7pyjson5_Options)))) {
o = (PyObject*)__pyx_freelist_7pyjson5_Options[--__pyx_freecount_7pyjson5_Options];
memset(o, 0, sizeof(struct __pyx_obj_7pyjson5_Options));
(void) PyObject_INIT(o, t);
} else
#endif
{
o = (*t->tp_alloc)(t, 0);
if (unlikely(!o)) return 0;
}
#endif
p = ((struct __pyx_obj_7pyjson5_Options *)o);
p->quotationmark = ((PyObject*)Py_None); Py_INCREF(Py_None);
p->tojson = ((PyObject*)Py_None); Py_INCREF(Py_None);
p->mappingtypes = ((PyObject*)Py_None); Py_INCREF(Py_None);
if (unlikely(__pyx_pw_7pyjson5_7Options_7__cinit__(o, a, k) < 0)) goto bad;
return o;
bad:
Py_DECREF(o); o = 0;
return NULL;
}

static void __pyx_tp_dealloc_7pyjson5_Options(PyObject *o) {
struct __pyx_obj_7pyjson5_Options *p = (struct __pyx_obj_7pyjson5_Options *)o;
Py_CLEAR(p->quotationmark);
Py_CLEAR(p->tojson);
Py_CLEAR(p->mappingtypes);
#if CYTHON_USE_FREELISTS
if (((int)(__pyx_freecount_7pyjson5_Options < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7pyjson5_Options)))) {
__pyx_freelist_7pyjson5_Options[__pyx_freecount_7pyjson5_Options++] = ((struct __pyx_obj_7pyjson5_Options *)o);
} else
#endif
{
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
(*Py_TYPE(o)->tp_free)(o);
#else
{
freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
if (tp_free) tp_free(o);
}
#endif
}
}

static PyObject *__pyx_getprop_7pyjson5_7Options_quotationmark(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_7Options_13quotationmark_1__get__(o);
}

static PyObject *__pyx_getprop_7pyjson5_7Options_tojson(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_7Options_6tojson_1__get__(o);
}

static PyObject *__pyx_getprop_7pyjson5_7Options_mappingtypes(PyObject *o, CYTHON_UNUSED void *x) {
return __pyx_pw_7pyjson5_7Options_12mappingtypes_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_7pyjson5_7Options_3__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
return __pyx_pw_7pyjson5_7Options_3__repr__(self);
}

static PyMethodDef __pyx_methods_7pyjson5_Options[] = {
{"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7pyjson5_7Options_1__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7pyjson5_7Options___reduce__},
{"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_7pyjson5_7Options_3__repr__, METH_NOARGS|METH_COEXIST, 0},
{"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyjson5_7Options_9update, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pyjson5_7Options_8update},
{0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyjson5_Options[] = {
{(char *)"quotationmark", __pyx_getprop_7pyjson5_7Options_quotationmark, 0, (char *)PyDoc_STR("The creation argument ``quotationmark``.\n    "), 0},
{(char *)"tojson", __pyx_getprop_7pyjson5_7Options_tojson, 0, (char *)PyDoc_STR("The creation argument ``tojson``.\n    ``None`` if ``False`` was specified.\n    "), 0},
{(char *)"mappingtypes", __pyx_getprop_7pyjson5_7Options_mappingtypes, 0, (char *)PyDoc_STR("The creation argument ``mappingtypes``.\n    ``()`` if ``False`` was specified.\n    "), 0},
{0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7pyjson5_Options_slots[] = {
{Py_tp_dealloc, (void *)__pyx_tp_dealloc_7pyjson5_Options},
{Py_tp_repr, (void *)__pyx_pw_7pyjson5_7Options_3__repr__},
{Py_tp_str, (void *)__pyx_pw_7pyjson5_7Options_5__str__},
{Py_tp_doc, (void *)PyDoc_STR("\n    Customizations for the :func:`encoder_*(...) <pyjson5.encoder>` function family.\n\n    Immutable. Use :meth:`Options.update(**kw) <pyjson5.Options.update>` to create a **new** Options instance.\n\n    Parameters\n    ----------\n    quotationmark : str|None\n        * **str**: One character string that is used to surround strings.\n        * **None**: Use default: ``'\"'``.\n    tojson : str|False|None\n        * **str:** A special method to call on objects to return a custom JSON encoded string. Must return ASCII data!\n        * **False:** No such member exists. (Default.)\n        * **None:** Use default.\n    mappingtypes : Iterable[type]|False|None\n        * **Iterable[type]:** Classes that should be encoded to objects. Must be iterable over their keys, and implement ``__getitem__``.\n        * **False:** There are no objects. Any object will be encoded as list of keys as in list(obj).\n        * **None:** Use default: ``[collections.abc.Mapping]``.\n    ")},
{Py_tp_methods, (void *)__pyx_methods_7pyjson5_Options},
{Py_tp_getset, (void *)__pyx_getsets_7pyjson5_Options},
{Py_tp_new, (void *)__pyx_tp_new_7pyjson5_Options},
{0, 0},
};
static PyType_Spec __pyx_type_7pyjson5_Options_spec = {
"pyjson5.Options",
sizeof(struct __pyx_obj_7pyjson5_Options),
0,
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER,
__pyx_type_7pyjson5_Options_slots,
};
#else

static PyTypeObject __pyx_type_7pyjson5_Options = {
PyVarObject_HEAD_INIT(0, 0)
"pyjson5.""Options", /*tp_name*/
sizeof(struct __pyx_obj_7pyjson5_Options), /*tp_basicsize*/
0, /*tp_itemsize*/
__pyx_tp_dealloc_7pyjson5_Options, /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
0, /*tp_vectorcall_offset*/
#endif
0, /*tp_getattr*/
0, /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
0, /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
0, /*tp_as_async*/
#endif
__pyx_pw_7pyjson5_7Options_3__repr__, /*tp_repr*/
0, /*tp_as_number*/
0, /*tp_as_sequence*/
0, /*tp_as_mapping*/
0, /*tp_hash*/
0, /*tp_call*/
__pyx_pw_7pyjson5_7Options_5__str__, /*tp_str*/
0, /*tp_getattro*/
0, /*tp_setattro*/
0, /*tp_as_buffer*/
Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
PyDoc_STR("\n    Customizations for the :func:`encoder_*(...) <pyjson5.encoder>` function family.\n\n    Immutable. Use :meth:`Options.update(**kw) <pyjson5.Options.update>` to create a **new** Options instance.\n\n    Parameters\n    ----------\n    quotationmark : str|None\n        * **str**: One character string that is used to surround strings.\n        * **None**: Use default: ``'\"'``.\n    tojson : str|False|None\n        * **str:** A special method to call on objects to return a custom JSON encoded string. Must return ASCII data!\n        * **False:** No such member exists. (Default.)\n        * **None:** Use default.\n    mappingtypes : Iterable[type]|False|None\n        * **Iterable[type]:** Classes that should be encoded to objects. Must be iterable over their keys, and implement ``__getitem__``.\n        * **False:** There are no objects. Any object will be encoded as list of keys as in list(obj).\n        * **None:** Use default: ``[collections.abc.Mapping]``.\n    "), /*tp_doc*/
0, /*tp_traverse*/
0, /*tp_clear*/
0, /*tp_richcompare*/
0, /*tp_weaklistoffset*/
0, /*tp_iter*/
0, /*tp_iternext*/
__pyx_methods_7pyjson5_Options, /*tp_methods*/
0, /*tp_members*/
__pyx_getsets_7pyjson5_Options, /*tp_getset*/
0, /*tp_base*/
0, /*tp_dict*/
0, /*tp_descr_get*/
0, /*tp_descr_set*/
#if !CYTHON_USE_TYPE_SPECS
0, /*tp_dictoffset*/
#endif
0, /*tp_init*/
0, /*tp_alloc*/
__pyx_tp_new_7pyjson5_Options, /*tp_new*/
0, /*tp_free*/
0, /*tp_is_gc*/
0, /*tp_bases*/
0, /*tp_mro*/
0, /*tp_cache*/
0, /*tp_subclasses*/
0, /*tp_weaklist*/
0, /*tp_del*/
0, /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
#if CYTHON_USE_TP_FINALIZE
0, /*tp_finalize*/
#else
NULL, /*tp_finalize*/
#endif
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
0, /*tp_vectorcall*/
#endif
#if __PYX_NEED_TP_PRINT_SLOT == 1
0, /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030C0000
0, /*tp_watched*/
#endif
#if PY_VERSION_HEX >= 0x030d00A4
0, /*tp_versions_used*/
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
0, /*tp_pypy_flags*/
#endif
};
#endif

static PyMethodDef __pyx_methods[] = {
{0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_04X, __pyx_k_04X, sizeof(__pyx_k_04X), 0, 1, 0, 0},
    {&__pyx_kp_u_04x, __pyx_k_04x, sizeof(__pyx_k_04x), 0, 1, 0, 0},
    {&__pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org, __pyx_k_2018_2025_Ren_Kijewski_pypi_org, sizeof(__pyx_k_2018_2025_Ren_Kijewski_pypi_org), 0, 1, 0, 0},
    {&__pyx_kp_u_47_11, __pyx_k_47_11, sizeof(__pyx_k_47_11), 0, 1, 0, 0},
    {&__pyx_kp_u_646, __pyx_k_646, sizeof(__pyx_k_646), 0, 1, 0, 0},
    {&__pyx_kp_u_8859, __pyx_k_8859, sizeof(__pyx_k_8859), 0, 1, 0, 0},
    {&__pyx_n_s_DEFAULT_MAX_NESTING_LEVEL, __pyx_k_DEFAULT_MAX_NESTING_LEVEL, sizeof(__pyx_k_DEFAULT_MAX_NESTING_LEVEL), 0, 0, 1, 1},
    {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
    {&__pyx_n_s_DecoderException, __pyx_k_DecoderException, sizeof(__pyx_k_DecoderException), 0, 0, 1, 1},
    {&__pyx_kp_u_Expected, __pyx_k_Expected, sizeof(__pyx_k_Expected), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_ASCII_data, __pyx_k_Expected_ASCII_data, sizeof(__pyx_k_Expected_ASCII_data), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_U, __pyx_k_Expected_U, sizeof(__pyx_k_Expected_U), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_str_instance_or_False, __pyx_k_Expected_str_instance_or_False, sizeof(__pyx_k_Expected_str_instance_or_False), 0, 1, 0, 0},
    {&__pyx_kp_u_Extra_data_U, __pyx_k_Extra_data_U, sizeof(__pyx_k_Extra_data_U), 0, 1, 0, 0},
    {&__pyx_kp_u_False, __pyx_k_False, sizeof(__pyx_k_False), 0, 1, 0, 0},
    {&__pyx_n_s_IOBase, __pyx_k_IOBase, sizeof(__pyx_k_IOBase), 0, 0, 1, 1},
    {&__pyx_kp_u_Infinity, __pyx_k_Infinity, sizeof(__pyx_k_Infinity), 0, 1, 0, 0},
    {&__pyx_kp_u_Infinity_2, __pyx_k_Infinity_2, sizeof(__pyx_k_Infinity_2), 0, 1, 0, 0},
    {&__pyx_n_s_Json5DecoderException, __pyx_k_Json5DecoderException, sizeof(__pyx_k_Json5DecoderException), 0, 0, 1, 1},
    {&__pyx_n_u_Json5DecoderException, __pyx_k_Json5DecoderException, sizeof(__pyx_k_Json5DecoderException), 0, 1, 0, 1},
    {&__pyx_n_s_Json5EOF, __pyx_k_Json5EOF, sizeof(__pyx_k_Json5EOF), 0, 0, 1, 1},
    {&__pyx_n_u_Json5EOF, __pyx_k_Json5EOF, sizeof(__pyx_k_Json5EOF), 0, 1, 0, 1},
    {&__pyx_n_s_Json5EncoderException, __pyx_k_Json5EncoderException, sizeof(__pyx_k_Json5EncoderException), 0, 0, 1, 1},
    {&__pyx_n_u_Json5EncoderException, __pyx_k_Json5EncoderException, sizeof(__pyx_k_Json5EncoderException), 0, 1, 0, 1},
    {&__pyx_n_s_Json5Exception, __pyx_k_Json5Exception, sizeof(__pyx_k_Json5Exception), 0, 0, 1, 1},
    {&__pyx_n_u_Json5Exception, __pyx_k_Json5Exception, sizeof(__pyx_k_Json5Exception), 0, 1, 0, 1},
    {&__pyx_n_s_Json5ExtraData, __pyx_k_Json5ExtraData, sizeof(__pyx_k_Json5ExtraData), 0, 0, 1, 1},
    {&__pyx_n_u_Json5ExtraData, __pyx_k_Json5ExtraData, sizeof(__pyx_k_Json5ExtraData), 0, 1, 0, 1},
    {&__pyx_n_s_Json5IllegalCharacter, __pyx_k_Json5IllegalCharacter, sizeof(__pyx_k_Json5IllegalCharacter), 0, 0, 1, 1},
    {&__pyx_n_u_Json5IllegalCharacter, __pyx_k_Json5IllegalCharacter, sizeof(__pyx_k_Json5IllegalCharacter), 0, 1, 0, 1},
    {&__pyx_n_s_Json5IllegalType, __pyx_k_Json5IllegalType, sizeof(__pyx_k_Json5IllegalType), 0, 0, 1, 1},
    {&__pyx_n_u_Json5IllegalType, __pyx_k_Json5IllegalType, sizeof(__pyx_k_Json5IllegalType), 0, 1, 0, 1},
    {&__pyx_n_s_Json5NestingTooDeep, __pyx_k_Json5NestingTooDeep, sizeof(__pyx_k_Json5NestingTooDeep), 0, 0, 1, 1},
    {&__pyx_n_u_Json5NestingTooDeep, __pyx_k_Json5NestingTooDeep, sizeof(__pyx_k_Json5NestingTooDeep), 0, 1, 0, 1},
    {&__pyx_n_s_Json5UnstringifiableType, __pyx_k_Json5UnstringifiableType, sizeof(__pyx_k_Json5UnstringifiableType), 0, 0, 1, 1},
    {&__pyx_n_u_Json5UnstringifiableType, __pyx_k_Json5UnstringifiableType, sizeof(__pyx_k_Json5UnstringifiableType), 0, 1, 0, 1},
    {&__pyx_kp_u_Lost_unframed_data_near, __pyx_k_Lost_unframed_data_near, sizeof(__pyx_k_Lost_unframed_data_near), 0, 1, 0, 0},
    {&__pyx_kp_u_MIT_OR_Apache_2_0, __pyx_k_MIT_OR_Apache_2_0, sizeof(__pyx_k_MIT_OR_Apache_2_0), 0, 1, 0, 0},
    {&__pyx_n_s_Mapping, __pyx_k_Mapping, sizeof(__pyx_k_Mapping), 0, 0, 1, 1},
    {&__pyx_kp_u_Maximum_nesting_level_exceeded_n, __pyx_k_Maximum_nesting_level_exceeded_n, sizeof(__pyx_k_Maximum_nesting_level_exceeded_n), 0, 1, 0, 0},
    {&__pyx_kp_u_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 0},
    {&__pyx_kp_u_NaN_2, __pyx_k_NaN_2, sizeof(__pyx_k_NaN_2), 0, 1, 0, 0},
    {&__pyx_kp_u_No_JSON_data_found_near, __pyx_k_No_JSON_data_found_near, sizeof(__pyx_k_No_JSON_data_found_near), 0, 1, 0, 0},
    {&__pyx_kp_u_Options, __pyx_k_Options, sizeof(__pyx_k_Options), 0, 1, 0, 0},
    {&__pyx_n_s_Options_2, __pyx_k_Options_2, sizeof(__pyx_k_Options_2), 0, 0, 1, 1},
    {&__pyx_n_u_Options_2, __pyx_k_Options_2, sizeof(__pyx_k_Options_2), 0, 1, 0, 1},
    {&__pyx_n_s_Options___reduce, __pyx_k_Options___reduce, sizeof(__pyx_k_Options___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_Options_update, __pyx_k_Options_update, sizeof(__pyx_k_Options_update), 0, 0, 1, 1},
    {&__pyx_n_s_RecursionError, __pyx_k_RecursionError, sizeof(__pyx_k_RecursionError), 0, 0, 1, 1},
    {&__pyx_kp_u_Stray, __pyx_k_Stray, sizeof(__pyx_k_Stray), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
    {&__pyx_kp_u_Unclosed, __pyx_k_Unclosed, sizeof(__pyx_k_Unclosed), 0, 1, 0, 0},
    {&__pyx_n_s_UnpickleOptions, __pyx_k_UnpickleOptions, sizeof(__pyx_k_UnpickleOptions), 0, 0, 1, 1},
    {&__pyx_kp_u_Unstringifiable_type_data, __pyx_k_Unstringifiable_type_data, sizeof(__pyx_k_Unstringifiable_type_data), 0, 1, 0, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 1},
    {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
    {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_kp_b__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 0, 0},
    {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_n_s_append_c, __pyx_k_append_c, sizeof(__pyx_k_append_c), 0, 0, 1, 1},
    {&__pyx_n_s_append_s, __pyx_k_append_s, sizeof(__pyx_k_append_s), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
    {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
    {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
    {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
    {&__pyx_n_s_cb, __pyx_k_cb, sizeof(__pyx_k_cb), 0, 0, 1, 1},
    {&__pyx_n_s_character, __pyx_k_character, sizeof(__pyx_k_character), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 1, 1},
    {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
    {&__pyx_n_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
    {&__pyx_n_u_cp819, __pyx_k_cp819, sizeof(__pyx_k_cp819), 0, 1, 0, 1},
    {&__pyx_kp_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 0},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_date, __pyx_k_date, sizeof(__pyx_k_date), 0, 0, 1, 1},
    {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
    {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
    {&__pyx_n_s_decimalformat, __pyx_k_decimalformat, sizeof(__pyx_k_decimalformat), 0, 0, 1, 1},
    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_n_u_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 1, 0, 1},
    {&__pyx_n_s_decode_buffer, __pyx_k_decode_buffer, sizeof(__pyx_k_decode_buffer), 0, 0, 1, 1},
    {&__pyx_n_u_decode_buffer, __pyx_k_decode_buffer, sizeof(__pyx_k_decode_buffer), 0, 1, 0, 1},
    {&__pyx_n_s_decode_callback, __pyx_k_decode_callback, sizeof(__pyx_k_decode_callback), 0, 0, 1, 1},
    {&__pyx_n_u_decode_callback, __pyx_k_decode_callback, sizeof(__pyx_k_decode_callback), 0, 1, 0, 1},
    {&__pyx_n_s_decode_io, __pyx_k_decode_io, sizeof(__pyx_k_decode_io), 0, 0, 1, 1},
    {&__pyx_n_u_decode_io, __pyx_k_decode_io, sizeof(__pyx_k_decode_io), 0, 1, 0, 1},
    {&__pyx_n_s_decode_latin1, __pyx_k_decode_latin1, sizeof(__pyx_k_decode_latin1), 0, 0, 1, 1},
    {&__pyx_n_u_decode_latin1, __pyx_k_decode_latin1, sizeof(__pyx_k_decode_latin1), 0, 1, 0, 1},
    {&__pyx_n_s_decode_utf8, __pyx_k_decode_utf8, sizeof(__pyx_k_decode_utf8), 0, 0, 1, 1},
    {&__pyx_n_u_decode_utf8, __pyx_k_decode_utf8, sizeof(__pyx_k_decode_utf8), 0, 1, 0, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
    {&__pyx_n_u_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 1, 0, 1},
    {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
    {&__pyx_n_u_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 1, 0, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_u_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 1, 0, 1},
    {&__pyx_n_s_encode_bytes, __pyx_k_encode_bytes, sizeof(__pyx_k_encode_bytes), 0, 0, 1, 1},
    {&__pyx_n_u_encode_bytes, __pyx_k_encode_bytes, sizeof(__pyx_k_encode_bytes), 0, 1, 0, 1},
    {&__pyx_n_s_encode_callback, __pyx_k_encode_callback, sizeof(__pyx_k_encode_callback), 0, 0, 1, 1},
    {&__pyx_n_u_encode_callback, __pyx_k_encode_callback, sizeof(__pyx_k_encode_callback), 0, 1, 0, 1},
    {&__pyx_n_s_encode_io, __pyx_k_encode_io, sizeof(__pyx_k_encode_io), 0, 0, 1, 1},
    {&__pyx_n_u_encode_io, __pyx_k_encode_io, sizeof(__pyx_k_encode_io), 0, 1, 0, 1},
    {&__pyx_n_s_encode_noop, __pyx_k_encode_noop, sizeof(__pyx_k_encode_noop), 0, 0, 1, 1},
    {&__pyx_n_u_encode_noop, __pyx_k_encode_noop, sizeof(__pyx_k_encode_noop), 0, 1, 0, 1},
    {&__pyx_n_s_encoder, __pyx_k_encoder, sizeof(__pyx_k_encoder), 0, 0, 1, 1},
    {&__pyx_n_s_encoding, __pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 0, 1, 1},
    {&__pyx_n_s_extra, __pyx_k_extra, sizeof(__pyx_k_extra), 0, 0, 1, 1},
    {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
    {&__pyx_kp_u_found_U, __pyx_k_found_U, sizeof(__pyx_k_found_U), 0, 1, 0, 0},
    {&__pyx_n_s_fp, __pyx_k_fp, sizeof(__pyx_k_fp), 0, 0, 1, 1},
    {&__pyx_kp_u_fp_is_closed, __pyx_k_fp_is_closed, sizeof(__pyx_k_fp_is_closed), 0, 1, 0, 0},
    {&__pyx_kp_u_fp_is_not_readable, __pyx_k_fp_is_not_readable, sizeof(__pyx_k_fp_is_not_readable), 0, 1, 0, 0},
    {&__pyx_kp_u_fp_is_not_writable, __pyx_k_fp_is_not_writable, sizeof(__pyx_k_fp_is_not_writable), 0, 1, 0, 0},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_intformat, __pyx_k_intformat, sizeof(__pyx_k_intformat), 0, 0, 1, 1},
    {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_is_not_IOBase_compatible, __pyx_k_is_not_IOBase_compatible, sizeof(__pyx_k_is_not_IOBase_compatible), 0, 1, 0, 0},
    {&__pyx_kp_u_is_not_callable, __pyx_k_is_not_callable, sizeof(__pyx_k_is_not_callable), 0, 1, 0, 0},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_kp_u_iso8859_1, __pyx_k_iso8859_1, sizeof(__pyx_k_iso8859_1), 0, 1, 0, 0},
    {&__pyx_kp_u_iso_8859_1, __pyx_k_iso_8859_1, sizeof(__pyx_k_iso_8859_1), 0, 1, 0, 0},
    {&__pyx_n_s_isoformat, __pyx_k_isoformat, sizeof(__pyx_k_isoformat), 0, 0, 1, 1},
    {&__pyx_n_s_kw, __pyx_k_kw, sizeof(__pyx_k_kw), 0, 0, 1, 1},
    {&__pyx_n_u_l1, __pyx_k_l1, sizeof(__pyx_k_l1), 0, 1, 0, 1},
    {&__pyx_n_u_latin, __pyx_k_latin, sizeof(__pyx_k_latin), 0, 1, 0, 1},
    {&__pyx_n_u_latin1, __pyx_k_latin1, sizeof(__pyx_k_latin1), 0, 1, 0, 1},
    {&__pyx_n_u_latin_1, __pyx_k_latin_1, sizeof(__pyx_k_latin_1), 0, 1, 0, 1},
    {&__pyx_kp_u_latin_1_2, __pyx_k_latin_1_2, sizeof(__pyx_k_latin_1_2), 0, 1, 0, 0},
    {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
    {&__pyx_n_s_license, __pyx_k_license, sizeof(__pyx_k_license), 0, 0, 1, 1},
    {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
    {&__pyx_n_u_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 1, 0, 1},
    {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
    {&__pyx_n_u_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 1, 0, 1},
    {&__pyx_n_s_lookahead, __pyx_k_lookahead, sizeof(__pyx_k_lookahead), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_mappingtypes, __pyx_k_mappingtypes, sizeof(__pyx_k_mappingtypes), 0, 0, 1, 1},
    {&__pyx_n_u_mappingtypes, __pyx_k_mappingtypes, sizeof(__pyx_k_mappingtypes), 0, 1, 0, 1},
    {&__pyx_kp_u_mappingtypes_must_be_a_sequence, __pyx_k_mappingtypes_must_be_a_sequence, sizeof(__pyx_k_mappingtypes_must_be_a_sequence), 0, 1, 0, 0},
    {&__pyx_n_s_maxdepth, __pyx_k_maxdepth, sizeof(__pyx_k_maxdepth), 0, 0, 1, 1},
    {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
    {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
    {&__pyx_kp_u_near, __pyx_k_near, sizeof(__pyx_k_near), 0, 1, 0, 0},
    {&__pyx_n_s_neginfinity, __pyx_k_neginfinity, sizeof(__pyx_k_neginfinity), 0, 0, 1, 1},
    {&__pyx_kp_u_not_in_int_str_bytes_near, __pyx_k_not_in_int_str_bytes_near, sizeof(__pyx_k_not_in_int_str_bytes_near), 0, 1, 0, 0},
    {&__pyx_kp_u_not_supported, __pyx_k_not_supported, sizeof(__pyx_k_not_supported), 0, 1, 0, 0},
    {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
    {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
    {&__pyx_n_s_options_kw, __pyx_k_options_kw, sizeof(__pyx_k_options_kw), 0, 0, 1, 1},
    {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
    {&__pyx_kp_u_or_U, __pyx_k_or_U, sizeof(__pyx_k_or_U), 0, 1, 0, 0},
    {&__pyx_kp_u_or_the_value_is_not_valid, __pyx_k_or_the_value_is_not_valid, sizeof(__pyx_k_or_the_value_is_not_valid), 0, 1, 0, 0},
    {&__pyx_n_s_posinfinity, __pyx_k_posinfinity, sizeof(__pyx_k_posinfinity), 0, 0, 1, 1},
    {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
    {&__pyx_n_s_pprint, __pyx_k_pprint, sizeof(__pyx_k_pprint), 0, 0, 1, 1},
    {&__pyx_n_s_pyjson5, __pyx_k_pyjson5, sizeof(__pyx_k_pyjson5), 0, 0, 1, 1},
    {&__pyx_n_s_quotationmark, __pyx_k_quotationmark, sizeof(__pyx_k_quotationmark), 0, 0, 1, 1},
    {&__pyx_n_u_quotationmark, __pyx_k_quotationmark, sizeof(__pyx_k_quotationmark), 0, 1, 0, 1},
    {&__pyx_kp_u_quotationmark_must_be_one_ASCII, __pyx_k_quotationmark_must_be_one_ASCII, sizeof(__pyx_k_quotationmark_must_be_one_ASCII), 0, 1, 0, 0},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_readable, __pyx_k_readable, sizeof(__pyx_k_readable), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_remaining, __pyx_k_remaining, sizeof(__pyx_k_remaining), 0, 0, 1, 1},
    {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
    {&__pyx_n_s_reserve, __pyx_k_reserve, sizeof(__pyx_k_reserve), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_kp_u_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 1, 0, 0},
    {&__pyx_n_s_saferepr, __pyx_k_saferepr, sizeof(__pyx_k_saferepr), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_some, __pyx_k_some, sizeof(__pyx_k_some), 0, 0, 1, 1},
    {&__pyx_kp_s_src__encoder_options_pyx, __pyx_k_src__encoder_options_pyx, sizeof(__pyx_k_src__encoder_options_pyx), 0, 0, 1, 0},
    {&__pyx_kp_s_src__exports_pyx, __pyx_k_src__exports_pyx, sizeof(__pyx_k_src__exports_pyx), 0, 0, 1, 0},
    {&__pyx_kp_s_src__legacy_pyx, __pyx_k_src__legacy_pyx, sizeof(__pyx_k_src__legacy_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_kp_u_starting_near, __pyx_k_starting_near, sizeof(__pyx_k_starting_near), 0, 1, 0, 0},
    {&__pyx_n_u_strict, __pyx_k_strict, sizeof(__pyx_k_strict), 0, 1, 0, 1},
    {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_supply_bytes, __pyx_k_supply_bytes, sizeof(__pyx_k_supply_bytes), 0, 0, 1, 1},
    {&__pyx_n_s_temp, __pyx_k_temp, sizeof(__pyx_k_temp), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
    {&__pyx_n_s_tojson, __pyx_k_tojson, sizeof(__pyx_k_tojson), 0, 0, 1, 1},
    {&__pyx_n_u_tojson, __pyx_k_tojson, sizeof(__pyx_k_tojson), 0, 1, 0, 1},
    {&__pyx_kp_u_type_cb, __pyx_k_type_cb, sizeof(__pyx_k_type_cb), 0, 1, 0, 0},
    {&__pyx_kp_u_type_data, __pyx_k_type_data, sizeof(__pyx_k_type_data), 0, 1, 0, 0},
    {&__pyx_kp_u_type_fp, __pyx_k_type_fp, sizeof(__pyx_k_type_fp), 0, 1, 0, 0},
    {&__pyx_kp_u_type_value, __pyx_k_type_value, sizeof(__pyx_k_type_value), 0, 1, 0, 0},
    {&__pyx_n_s_unstringifiable, __pyx_k_unstringifiable, sizeof(__pyx_k_unstringifiable), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_kp_u_us_ascii, __pyx_k_us_ascii, sizeof(__pyx_k_us_ascii), 0, 1, 0, 0},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
    {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
    {&__pyx_n_s_wordlength, __pyx_k_wordlength, sizeof(__pyx_k_wordlength), 0, 0, 1, 1},
    {&__pyx_kp_u_wordlength_must_be_1_2_or_4_not, __pyx_k_wordlength_must_be_1_2_or_4_not, sizeof(__pyx_k_wordlength_must_be_1_2_or_4_not), 0, 1, 0, 0},
    {&__pyx_n_s_writable, __pyx_k_writable, sizeof(__pyx_k_writable), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_writer, __pyx_k_writer, sizeof(__pyx_k_writer), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 7, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 6, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 82, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(3, 14, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(3, 41, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/_encoder_options.pyx":14
 *         datum = unicode(datum, 'UTF-8', 'strict')
 *     elif not PyUnicode_Check(datum):
 *         raise TypeError('Expected str instance or False')             # <<<<<<<<<<<<<<
 * 
 *     PyUnicode_READY(datum)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Expected_str_instance_or_False); if (unlikely(!__pyx_tuple_)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/_encoder_options.pyx":18
 *     PyUnicode_READY(datum)
 *     if expect_ascii and not PyUnicode_IS_ASCII(datum):
 *         raise ValueError('Expected ASCII data')             # <<<<<<<<<<<<<<
 * 
 *     return datum
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Expected_ASCII_data); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "src/_encoder_options.pyx":126
 * 
 *         if self.quotationmark is None or PyUnicode_GET_LENGTH(self.quotationmark) != 1:
 *             raise TypeError('quotationmark must be one ASCII character.')             # <<<<<<<<<<<<<<
 * 
 *         if mappingtypes is False:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_quotationmark_must_be_one_ASCII); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(3, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "src/_encoder_options.pyx":134
 *             for cls in self.mappingtypes:
 *                 if not PyType_Check(cls):
 *                     raise TypeError('mappingtypes must be a sequence of types '             # <<<<<<<<<<<<<<
 *                                     'or False')
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_mappingtypes_must_be_a_sequence); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "src/_exports.pyx":279
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.readable():
 *         raise TypeError(f'fp is not readable')             # <<<<<<<<<<<<<<
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_fp_is_not_readable); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(15, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "src/_exports.pyx":281
 *         raise TypeError(f'fp is not readable')
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')             # <<<<<<<<<<<<<<
 * 
 *     if maxdepth is None:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_fp_is_closed); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(15, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "src/_exports.pyx":286
 *         maxdepth = DEFAULT_MAX_NESTING_LEVEL
 * 
 *     return _decode_callback(fp.read, (1,), maxdepth, bool(some))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(15, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "src/_exports.pyx":553
 *         raise TypeError(f'type(fp)=={type(fp)!r} is not IOBase compatible')
 *     elif not fp.writable():
 *         raise TypeError(f'fp is not writable')             # <<<<<<<<<<<<<<
 *     elif fp.closed:
 *         raise TypeError(f'fp is closed')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_fp_is_not_writable); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(15, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "src/_constants.pyx":11
 * cdef object UCS1_COMPATIBLE_CODECS = frozenset((
 *     # ASCII
 *     'ascii', 646, '646', 'us-ascii',             # <<<<<<<<<<<<<<
 *     # Latin-1
 *     'latin_1', 'latin-1', 'iso-8859-1', 'iso8859-1',
 */
  __pyx_tuple__15 = PyTuple_Pack(14, __pyx_n_u_ascii, __pyx_int_646, __pyx_kp_u_646, __pyx_kp_u_us_ascii, __pyx_n_u_latin_1, __pyx_kp_u_latin_1_2, __pyx_kp_u_iso_8859_1, __pyx_kp_u_iso8859_1, __pyx_int_8859, __pyx_kp_u_8859, __pyx_n_u_cp819, __pyx_n_u_latin, __pyx_n_u_latin1, __pyx_n_u_l1); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(22, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "src/_constants.pyx":17
 * ))
 * 
 * cdef object TEST_DECIMAL = Decimal('47.11')             # <<<<<<<<<<<<<<
 * cdef object TEST_FLOAT = 47.11
 * cdef object TEST_INT = 4711
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_47_11); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(22, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "src/_encoder_options.pyx":83
 *     '''
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_args); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(3, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__encoder_options_pyx, __pyx_n_s_reduce, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(3, 83, __pyx_L1_error)

  /* "src/_encoder_options.pyx":137
 *                                     'or False')
 * 
 *     def update(self, *args, **kw):             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a new Options instance by modifying some members.
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kw); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__encoder_options_pyx, __pyx_n_s_update, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(3, 137, __pyx_L1_error)

  /* "src/_encoder_options.pyx":150
 * 
 * 
 * def _UnpickleOptions(*args):             # <<<<<<<<<<<<<<
 *     if args:
 *         return _to_options(None, dict(args))
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_args); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__encoder_options_pyx, __pyx_n_s_UnpickleOptions, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(3, 150, __pyx_L1_error)

  /* "src/_exports.pyx":14
 * 
 * 
 * def decode(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from an :class:`str` object.
 */
  __pyx_tuple__24 = PyTuple_Pack(3, __pyx_n_s_data, __pyx_n_s_maxdepth, __pyx_n_s_some); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(15, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(15, 14, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(2, Py_None, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(15, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "src/_exports.pyx":59
 * 
 * 
 * def decode_latin1(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode_latin1, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(15, 59, __pyx_L1_error)

  /* "src/_exports.pyx":91
 * 
 * 
 * def decode_utf8(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode_utf8, 91, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(15, 91, __pyx_L1_error)

  /* "src/_exports.pyx":123
 * 
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                   object wordlength=None):
 *     '''
 */
  __pyx_tuple__29 = PyTuple_Pack(5, __pyx_n_s_obj, __pyx_n_s_maxdepth, __pyx_n_s_some, __pyx_n_s_wordlength, __pyx_n_s_view); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(15, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode_buffer, 123, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(15, 123, __pyx_L1_error)
  __pyx_tuple__31 = PyTuple_Pack(3, Py_None, ((PyObject *)Py_False), Py_None); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(15, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "src/_exports.pyx":178
 * 
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                     object args=None):
 *     '''
 */
  __pyx_tuple__32 = PyTuple_Pack(4, __pyx_n_s_cb, __pyx_n_s_maxdepth, __pyx_n_s_some, __pyx_n_s_args); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(15, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode_callback, 178, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(15, 178, __pyx_L1_error)

  /* "src/_exports.pyx":236
 * 
 * 
 * def decode_io(object fp, object maxdepth=None, object some=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_n_s_fp, __pyx_n_s_maxdepth, __pyx_n_s_some); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(15, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_decode_io, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(15, 236, __pyx_L1_error)
  __pyx_tuple__36 = PyTuple_Pack(2, Py_None, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(15, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "src/_exports.pyx":289
 * 
 * 
 * def encode(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object as a JSON5 compatible string.
 */
  __pyx_tuple__37 = PyTuple_Pack(9, __pyx_n_s_data, __pyx_n_s_options, __pyx_n_s_options_kw, __pyx_n_s_temp, __pyx_n_s_result, __pyx_n_s_start, __pyx_n_s_length, __pyx_n_s_opts, __pyx_n_s_writer); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(15, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_encode, 289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(15, 289, __pyx_L1_error)

  /* "src/_exports.pyx":377
 * 
 * 
 * def encode_bytes(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible bytes string.
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_encode_bytes, 377, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(15, 377, __pyx_L1_error)

  /* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */
  __pyx_tuple__40 = PyTuple_Pack(7, __pyx_n_s_data, __pyx_n_s_cb, __pyx_n_s_supply_bytes, __pyx_n_s_options, __pyx_n_s_options_kw, __pyx_n_s_encoder, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(15, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 1, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_encode_callback, 450, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(15, 450, __pyx_L1_error)
  __pyx_tuple__42 = PyTuple_Pack(1, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(15, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */
  __pyx_tuple__43 = PyTuple_Pack(7, __pyx_n_s_data, __pyx_n_s_fp, __pyx_n_s_supply_bytes, __pyx_n_s_options, __pyx_n_s_options_kw, __pyx_n_s_encoder, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(15, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(3, 0, 1, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_encode_io, 513, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(15, 513, __pyx_L1_error)
  __pyx_tuple__45 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(15, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "src/_exports.pyx":567
 * 
 * 
 * def encode_noop(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Test if the input is serializable.
 */
  __pyx_tuple__46 = PyTuple_Pack(5, __pyx_n_s_data, __pyx_n_s_options, __pyx_n_s_options_kw, __pyx_n_s_opts, __pyx_n_s_writer); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(15, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__exports_pyx, __pyx_n_s_encode_noop, 567, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(15, 567, __pyx_L1_error)

  /* "src/_exports.pyx":609
 * __all__ = (
 *     # DECODE
 *     'decode', 'decode_utf8', 'decode_latin1', 'decode_buffer', 'decode_callback', 'decode_io',             # <<<<<<<<<<<<<<
 *     # ENCODE
 *     'encode', 'encode_bytes', 'encode_callback', 'encode_io', 'encode_noop', 'Options',
 */
  __pyx_tuple__48 = PyTuple_Pack(25, __pyx_n_u_decode, __pyx_n_u_decode_utf8, __pyx_n_u_decode_latin1, __pyx_n_u_decode_buffer, __pyx_n_u_decode_callback, __pyx_n_u_decode_io, __pyx_n_u_encode, __pyx_n_u_encode_bytes, __pyx_n_u_encode_callback, __pyx_n_u_encode_io, __pyx_n_u_encode_noop, __pyx_n_u_Options_2, __pyx_n_u_loads, __pyx_n_u_load, __pyx_n_u_dumps, __pyx_n_u_dump, __pyx_n_u_Json5Exception, __pyx_n_u_Json5EncoderException, __pyx_n_u_Json5UnstringifiableType, __pyx_n_u_Json5DecoderException, __pyx_n_u_Json5NestingTooDeep, __pyx_n_u_Json5EOF, __pyx_n_u_Json5IllegalCharacter, __pyx_n_u_Json5ExtraData, __pyx_n_u_Json5IllegalType); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(15, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "src/_legacy.pyx":1
 * def loads(s, *, encoding='UTF-8', **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a string.
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_n_s_s, __pyx_n_s_encoding, __pyx_n_s_kw); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__legacy_pyx, __pyx_n_s_loads, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(16, 1, __pyx_L1_error)

  /* "src/_legacy.pyx":31
 * 
 * 
 * def load(fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_fp, __pyx_n_s_kw); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(16, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__legacy_pyx, __pyx_n_s_load, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(16, 31, __pyx_L1_error)

  /* "src/_legacy.pyx":56
 * 
 * 
 * def dumps(obj, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_obj, __pyx_n_s_kw); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(16, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__legacy_pyx, __pyx_n_s_dumps, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(16, 56, __pyx_L1_error)

  /* "src/_legacy.pyx":81
 * 
 * 
 * def dump(object obj, object fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */
  __pyx_tuple__55 = PyTuple_Pack(3, __pyx_n_s_obj, __pyx_n_s_fp, __pyx_n_s_kw); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(16, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src__legacy_pyx, __pyx_n_s_dump, 81, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(16, 81, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(17, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_float_47_11 = PyFloat_FromDouble(47.11); if (unlikely(!__pyx_float_47_11)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_646 = PyInt_FromLong(646); if (unlikely(!__pyx_int_646)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_4711 = PyInt_FromLong(4711); if (unlikely(!__pyx_int_4711)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_8859 = PyInt_FromLong(8859); if (unlikely(!__pyx_int_8859)) __PYX_ERR(17, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_7pyjson5_datetime = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_date = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_time = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_Decimal = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_Mapping = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_IOBase = ((PyTypeObject *)Py_None); Py_INCREF(Py_None);
  __pyx_v_7pyjson5_saferepr = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_CONST_POS_NAN = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_CONST_POS_INF = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_CONST_NEG_NAN = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_CONST_NEG_INF = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DATETIME_CLASSES = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_ORD_CLASSES = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_UCS1_COMPATIBLE_CODECS = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_TEST_DECIMAL = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_TEST_FLOAT = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_TEST_INT = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_TOJSON = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_INTFORMAT = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_DECIMALFORMAT = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK = Py_None; Py_INCREF(Py_None);
  __pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT = ((struct __pyx_obj_7pyjson5_Options *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5Exception = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5Exception_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5Exception)) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5Exception_spec, __pyx_ptype_7pyjson5_Json5Exception) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5Exception = &__pyx_type_7pyjson5_Json5Exception;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5Exception) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base((&((PyTypeObject*)PyExc_Exception)[0])) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5Exception->tp_dealloc = (&((PyTypeObject*)PyExc_Exception)[0])->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5Exception->tp_base = (&((PyTypeObject*)PyExc_Exception)[0]);
  __pyx_ptype_7pyjson5_Json5Exception->tp_new = (&((PyTypeObject*)PyExc_Exception)[0])->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5Exception) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5Exception->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5Exception->tp_dictoffset && __pyx_ptype_7pyjson5_Json5Exception->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5Exception->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5Exception, (PyObject *) __pyx_ptype_7pyjson5_Json5Exception) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5Exception); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5DecoderException = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5DecoderException_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5DecoderException)) __PYX_ERR(5, 2, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5DecoderException_spec, __pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 2, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5DecoderException = &__pyx_type_7pyjson5_Json5DecoderException;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5DecoderException) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5Exception) < 0) __PYX_ERR(5, 2, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc = __pyx_ptype_7pyjson5_Json5Exception->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5DecoderException->tp_base = __pyx_ptype_7pyjson5_Json5Exception;
  __pyx_ptype_7pyjson5_Json5DecoderException->tp_new = __pyx_ptype_7pyjson5_Json5Exception->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 2, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5DecoderException->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5DecoderException->tp_dictoffset && __pyx_ptype_7pyjson5_Json5DecoderException->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5DecoderException->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5DecoderException, (PyObject *) __pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 2, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5NestingTooDeep = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5NestingTooDeep_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5NestingTooDeep)) __PYX_ERR(5, 17, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5NestingTooDeep_spec, __pyx_ptype_7pyjson5_Json5NestingTooDeep) < 0) __PYX_ERR(5, 17, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5NestingTooDeep = &__pyx_type_7pyjson5_Json5NestingTooDeep;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5NestingTooDeep) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 17, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_dealloc = __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_base = __pyx_ptype_7pyjson5_Json5DecoderException;
  __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_new = __pyx_ptype_7pyjson5_Json5DecoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5NestingTooDeep) < 0) __PYX_ERR(5, 17, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_dictoffset && __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5NestingTooDeep->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5NestingTooDeep, (PyObject *) __pyx_ptype_7pyjson5_Json5NestingTooDeep) < 0) __PYX_ERR(5, 17, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5EOF = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5EOF_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5EOF)) __PYX_ERR(5, 25, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5EOF_spec, __pyx_ptype_7pyjson5_Json5EOF) < 0) __PYX_ERR(5, 25, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5EOF = &__pyx_type_7pyjson5_Json5EOF;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5EOF) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 25, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5EOF->tp_dealloc = __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5EOF->tp_base = __pyx_ptype_7pyjson5_Json5DecoderException;
  __pyx_ptype_7pyjson5_Json5EOF->tp_new = __pyx_ptype_7pyjson5_Json5DecoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5EOF) < 0) __PYX_ERR(5, 25, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5EOF->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5EOF->tp_dictoffset && __pyx_ptype_7pyjson5_Json5EOF->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5EOF->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5EOF, (PyObject *) __pyx_ptype_7pyjson5_Json5EOF) < 0) __PYX_ERR(5, 25, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5IllegalCharacter = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5IllegalCharacter_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5IllegalCharacter)) __PYX_ERR(5, 33, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5IllegalCharacter_spec, __pyx_ptype_7pyjson5_Json5IllegalCharacter) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5IllegalCharacter = &__pyx_type_7pyjson5_Json5IllegalCharacter;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5IllegalCharacter) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_dealloc = __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_base = __pyx_ptype_7pyjson5_Json5DecoderException;
  __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_new = __pyx_ptype_7pyjson5_Json5DecoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5IllegalCharacter) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_dictoffset && __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5IllegalCharacter->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5IllegalCharacter, (PyObject *) __pyx_ptype_7pyjson5_Json5IllegalCharacter) < 0) __PYX_ERR(5, 33, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5ExtraData = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5ExtraData_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5ExtraData)) __PYX_ERR(5, 50, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5ExtraData_spec, __pyx_ptype_7pyjson5_Json5ExtraData) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5ExtraData = &__pyx_type_7pyjson5_Json5ExtraData;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5ExtraData) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5ExtraData->tp_dealloc = __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5ExtraData->tp_base = __pyx_ptype_7pyjson5_Json5DecoderException;
  __pyx_ptype_7pyjson5_Json5ExtraData->tp_new = __pyx_ptype_7pyjson5_Json5DecoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5ExtraData) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5ExtraData->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5ExtraData->tp_dictoffset && __pyx_ptype_7pyjson5_Json5ExtraData->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5ExtraData->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5ExtraData, (PyObject *) __pyx_ptype_7pyjson5_Json5ExtraData) < 0) __PYX_ERR(5, 50, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5DecoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5IllegalType = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5IllegalType_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5IllegalType)) __PYX_ERR(5, 67, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5IllegalType_spec, __pyx_ptype_7pyjson5_Json5IllegalType) < 0) __PYX_ERR(5, 67, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5IllegalType = &__pyx_type_7pyjson5_Json5IllegalType;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5IllegalType) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5DecoderException) < 0) __PYX_ERR(5, 67, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5IllegalType->tp_dealloc = __pyx_ptype_7pyjson5_Json5DecoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5IllegalType->tp_base = __pyx_ptype_7pyjson5_Json5DecoderException;
  __pyx_ptype_7pyjson5_Json5IllegalType->tp_new = __pyx_ptype_7pyjson5_Json5DecoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5IllegalType) < 0) __PYX_ERR(5, 67, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5IllegalType->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5IllegalType->tp_dictoffset && __pyx_ptype_7pyjson5_Json5IllegalType->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5IllegalType->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5IllegalType, (PyObject *) __pyx_ptype_7pyjson5_Json5IllegalType) < 0) __PYX_ERR(5, 67, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5__DecoderException = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5__DecoderException_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5__DecoderException)) __PYX_ERR(5, 84, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5__DecoderException_spec, __pyx_ptype_7pyjson5__DecoderException) < 0) __PYX_ERR(5, 84, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5__DecoderException = &__pyx_type_7pyjson5__DecoderException;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5__DecoderException) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base((&((PyTypeObject*)PyExc_Exception)[0])) < 0) __PYX_ERR(5, 84, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5__DecoderException->tp_base = (&((PyTypeObject*)PyExc_Exception)[0]);
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5__DecoderException) < 0) __PYX_ERR(5, 84, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5__DecoderException->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5__DecoderException->tp_dictoffset && __pyx_ptype_7pyjson5__DecoderException->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5__DecoderException->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DecoderException, (PyObject *) __pyx_ptype_7pyjson5__DecoderException) < 0) __PYX_ERR(5, 84, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5Exception); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5EncoderException = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5EncoderException_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5EncoderException)) __PYX_ERR(6, 2, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5EncoderException_spec, __pyx_ptype_7pyjson5_Json5EncoderException) < 0) __PYX_ERR(6, 2, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5EncoderException = &__pyx_type_7pyjson5_Json5EncoderException;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5EncoderException) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5Exception) < 0) __PYX_ERR(6, 2, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5EncoderException->tp_dealloc = __pyx_ptype_7pyjson5_Json5Exception->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5EncoderException->tp_base = __pyx_ptype_7pyjson5_Json5Exception;
  __pyx_ptype_7pyjson5_Json5EncoderException->tp_new = __pyx_ptype_7pyjson5_Json5Exception->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5EncoderException) < 0) __PYX_ERR(6, 2, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5EncoderException->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5EncoderException->tp_dictoffset && __pyx_ptype_7pyjson5_Json5EncoderException->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5EncoderException->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5EncoderException, (PyObject *) __pyx_ptype_7pyjson5_Json5EncoderException) < 0) __PYX_ERR(6, 2, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7pyjson5_Json5EncoderException); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyjson5_Json5UnstringifiableType = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Json5UnstringifiableType_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7pyjson5_Json5UnstringifiableType)) __PYX_ERR(6, 9, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Json5UnstringifiableType_spec, __pyx_ptype_7pyjson5_Json5UnstringifiableType) < 0) __PYX_ERR(6, 9, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Json5UnstringifiableType = &__pyx_type_7pyjson5_Json5UnstringifiableType;
  #endif
  if (sizeof(struct __pyx_obj_7pyjson5_Json5UnstringifiableType) != sizeof(PyBaseExceptionObject)) {
    if (__Pyx_validate_extern_base(__pyx_ptype_7pyjson5_Json5EncoderException) < 0) __PYX_ERR(6, 9, __pyx_L1_error)
  }
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_dealloc = __pyx_ptype_7pyjson5_Json5EncoderException->tp_dealloc;
  __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_base = __pyx_ptype_7pyjson5_Json5EncoderException;
  __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_new = __pyx_ptype_7pyjson5_Json5EncoderException->tp_new;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Json5UnstringifiableType) < 0) __PYX_ERR(6, 9, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_dictoffset && __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Json5UnstringifiableType->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Json5UnstringifiableType, (PyObject *) __pyx_ptype_7pyjson5_Json5UnstringifiableType) < 0) __PYX_ERR(6, 9, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7pyjson5_Options = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7pyjson5_Options_spec, NULL); if (unlikely(!__pyx_ptype_7pyjson5_Options)) __PYX_ERR(3, 51, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7pyjson5_Options_spec, __pyx_ptype_7pyjson5_Options) < 0) __PYX_ERR(3, 51, __pyx_L1_error)
  #else
  __pyx_ptype_7pyjson5_Options = &__pyx_type_7pyjson5_Options;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7pyjson5_Options) < 0) __PYX_ERR(3, 51, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7pyjson5_Options->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7pyjson5_Options->tp_dictoffset && __pyx_ptype_7pyjson5_Options->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7pyjson5_Options->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Options_2, (PyObject *) __pyx_ptype_7pyjson5_Options) < 0) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(18, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(18, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(19, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(19, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(20, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(20, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pyjson5(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pyjson5},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "pyjson5",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpyjson5(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpyjson5(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pyjson5(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pyjson5(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pyjson5(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pyjson5' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pyjson5", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(17, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(17, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "pyjson5" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(17, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(17, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(17, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pyjson5(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(17, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyjson5) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(17, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyjson5")) {
      if (unlikely((PyDict_SetItemString(modules, "pyjson5", __pyx_m) < 0))) __PYX_ERR(17, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(17, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(17, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif

  /* "src/_imports.pyx":220
 * cdef object saferepr
 * 
 * from collections.abc import Mapping             # <<<<<<<<<<<<<<
 * from datetime import datetime, date, time
 * from decimal import Decimal
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Mapping);
  __Pyx_GIVEREF(__pyx_n_s_Mapping);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Mapping)) __PYX_ERR(21, 220, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections_abc, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Mapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 220, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_Mapping);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_Mapping, ((PyTypeObject *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_imports.pyx":221
 * 
 * from collections.abc import Mapping
 * from datetime import datetime, date, time             # <<<<<<<<<<<<<<
 * from decimal import Decimal
 * from io import IOBase
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_datetime);
  __Pyx_GIVEREF(__pyx_n_s_datetime);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_datetime)) __PYX_ERR(21, 221, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_date);
  __Pyx_GIVEREF(__pyx_n_s_date);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_date)) __PYX_ERR(21, 221, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_time);
  __Pyx_GIVEREF(__pyx_n_s_time);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_time)) __PYX_ERR(21, 221, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_datetime, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_datetime);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_datetime, ((PyTypeObject *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_date); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_date);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_date, ((PyTypeObject *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 221, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_time);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_time, ((PyTypeObject *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_imports.pyx":222
 * from collections.abc import Mapping
 * from datetime import datetime, date, time
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * from io import IOBase
 * from pprint import saferepr
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Decimal)) __PYX_ERR(21, 222, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 222, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_Decimal);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_Decimal, ((PyTypeObject *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_imports.pyx":223
 * from datetime import datetime, date, time
 * from decimal import Decimal
 * from io import IOBase             # <<<<<<<<<<<<<<
 * from pprint import saferepr
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_IOBase);
  __Pyx_GIVEREF(__pyx_n_s_IOBase);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IOBase)) __PYX_ERR(21, 223, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_io, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IOBase); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7cpython_4type_type))))) __PYX_ERR(21, 223, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_IOBase);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_IOBase, ((PyTypeObject *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_imports.pyx":224
 * from decimal import Decimal
 * from io import IOBase
 * from pprint import saferepr             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_saferepr);
  __Pyx_GIVEREF(__pyx_n_s_saferepr);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_saferepr)) __PYX_ERR(21, 224, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pprint, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(21, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_saferepr); if (unlikely(!__pyx_t_2)) __PYX_ERR(21, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_saferepr);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_saferepr, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_constants.pyx":1
 * cdef object CONST_POS_NAN = float('+NaN')             # <<<<<<<<<<<<<<
 * cdef object CONST_POS_INF = float('+Infinity')
 * cdef object CONST_NEG_NAN = float('-NaN')
 */
  __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_kp_u_NaN); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(22, 1, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_CONST_POS_NAN);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_CONST_POS_NAN, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":2
 * cdef object CONST_POS_NAN = float('+NaN')
 * cdef object CONST_POS_INF = float('+Infinity')             # <<<<<<<<<<<<<<
 * cdef object CONST_NEG_NAN = float('-NaN')
 * cdef object CONST_NEG_INF = float('-Infinity')
 */
  __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_kp_u_Infinity); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(22, 2, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_CONST_POS_INF);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_CONST_POS_INF, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":3
 * cdef object CONST_POS_NAN = float('+NaN')
 * cdef object CONST_POS_INF = float('+Infinity')
 * cdef object CONST_NEG_NAN = float('-NaN')             # <<<<<<<<<<<<<<
 * cdef object CONST_NEG_INF = float('-Infinity')
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_kp_u_NaN_2); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(22, 3, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_CONST_NEG_NAN);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_CONST_NEG_NAN, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":4
 * cdef object CONST_POS_INF = float('+Infinity')
 * cdef object CONST_NEG_NAN = float('-NaN')
 * cdef object CONST_NEG_INF = float('-Infinity')             # <<<<<<<<<<<<<<
 * 
 * cdef object DATETIME_CLASSES = (date, time,)  # issubclass(datetime, date) == True
 */
  __pyx_t_4 = __Pyx_PyUnicode_AsDouble(__pyx_kp_u_Infinity_2); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(22, 4, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_CONST_NEG_INF);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_CONST_NEG_INF, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":6
 * cdef object CONST_NEG_INF = float('-Infinity')
 * 
 * cdef object DATETIME_CLASSES = (date, time,)  # issubclass(datetime, date) == True             # <<<<<<<<<<<<<<
 * cdef object ORD_CLASSES = (unicode, bytes, bytearray,)
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_7pyjson5_date);
  __Pyx_GIVEREF((PyObject *)__pyx_v_7pyjson5_date);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_7pyjson5_date))) __PYX_ERR(22, 6, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_7pyjson5_time);
  __Pyx_GIVEREF((PyObject *)__pyx_v_7pyjson5_time);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_7pyjson5_time))) __PYX_ERR(22, 6, __pyx_L1_error);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DATETIME_CLASSES);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DATETIME_CLASSES, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":7
 * 
 * cdef object DATETIME_CLASSES = (date, time,)  # issubclass(datetime, date) == True
 * cdef object ORD_CLASSES = (unicode, bytes, bytearray,)             # <<<<<<<<<<<<<<
 * 
 * cdef object UCS1_COMPATIBLE_CODECS = frozenset((
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)(&PyUnicode_Type));
  __Pyx_GIVEREF((PyObject *)(&PyUnicode_Type));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyUnicode_Type)))) __PYX_ERR(22, 7, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)(&PyBytes_Type));
  __Pyx_GIVEREF((PyObject *)(&PyBytes_Type));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)(&PyBytes_Type)))) __PYX_ERR(22, 7, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)(&PyByteArray_Type));
  __Pyx_GIVEREF((PyObject *)(&PyByteArray_Type));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)(&PyByteArray_Type)))) __PYX_ERR(22, 7, __pyx_L1_error);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_ORD_CLASSES);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_ORD_CLASSES, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":9
 * cdef object ORD_CLASSES = (unicode, bytes, bytearray,)
 * 
 * cdef object UCS1_COMPATIBLE_CODECS = frozenset((             # <<<<<<<<<<<<<<
 *     # ASCII
 *     'ascii', 646, '646', 'us-ascii',
 */
  __pyx_t_3 = __Pyx_PyFrozenSet_New(__pyx_tuple__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_UCS1_COMPATIBLE_CODECS);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_UCS1_COMPATIBLE_CODECS, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":17
 * ))
 * 
 * cdef object TEST_DECIMAL = Decimal('47.11')             # <<<<<<<<<<<<<<
 * cdef object TEST_FLOAT = 47.11
 * cdef object TEST_INT = 4711
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_7pyjson5_Decimal), __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(22, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_TEST_DECIMAL);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_TEST_DECIMAL, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_constants.pyx":18
 * 
 * cdef object TEST_DECIMAL = Decimal('47.11')
 * cdef object TEST_FLOAT = 47.11             # <<<<<<<<<<<<<<
 * cdef object TEST_INT = 4711
 */
  __Pyx_INCREF(__pyx_float_47_11);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_TEST_FLOAT);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_TEST_FLOAT, __pyx_float_47_11);
  __Pyx_GIVEREF(__pyx_float_47_11);

  /* "src/_constants.pyx":19
 * cdef object TEST_DECIMAL = Decimal('47.11')
 * cdef object TEST_FLOAT = 47.11
 * cdef object TEST_INT = 4711             # <<<<<<<<<<<<<<
 */
  __Pyx_INCREF(__pyx_int_4711);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_TEST_INT);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_TEST_INT, __pyx_int_4711);
  __Pyx_GIVEREF(__pyx_int_4711);

  /* "src/_encoder_options.pyx":1
 * cdef object DEFAULT_TOJSON = False             # <<<<<<<<<<<<<<
 * cdef object DEFAULT_INTFORMAT = '%d'
 * cdef object DEFAULT_DECIMALFORMAT = '%s'
 */
  __Pyx_INCREF(Py_False);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DEFAULT_TOJSON);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_TOJSON, Py_False);
  __Pyx_GIVEREF(Py_False);

  /* "src/_encoder_options.pyx":2
 * cdef object DEFAULT_TOJSON = False
 * cdef object DEFAULT_INTFORMAT = '%d'             # <<<<<<<<<<<<<<
 * cdef object DEFAULT_DECIMALFORMAT = '%s'
 * cdef object DEFAULT_MAPPINGTYPES = (Mapping,)
 */
  __Pyx_INCREF(__pyx_kp_u_d);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DEFAULT_INTFORMAT);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_INTFORMAT, __pyx_kp_u_d);
  __Pyx_GIVEREF(__pyx_kp_u_d);

  /* "src/_encoder_options.pyx":3
 * cdef object DEFAULT_TOJSON = False
 * cdef object DEFAULT_INTFORMAT = '%d'
 * cdef object DEFAULT_DECIMALFORMAT = '%s'             # <<<<<<<<<<<<<<
 * cdef object DEFAULT_MAPPINGTYPES = (Mapping,)
 * cdef object DEFAULT_QUOTATIONMARK = '"'
 */
  __Pyx_INCREF(__pyx_kp_u_s_2);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DEFAULT_DECIMALFORMAT);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_DECIMALFORMAT, __pyx_kp_u_s_2);
  __Pyx_GIVEREF(__pyx_kp_u_s_2);

  /* "src/_encoder_options.pyx":4
 * cdef object DEFAULT_INTFORMAT = '%d'
 * cdef object DEFAULT_DECIMALFORMAT = '%s'
 * cdef object DEFAULT_MAPPINGTYPES = (Mapping,)             # <<<<<<<<<<<<<<
 * cdef object DEFAULT_QUOTATIONMARK = '"'
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_7pyjson5_Mapping);
  __Pyx_GIVEREF((PyObject *)__pyx_v_7pyjson5_Mapping);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_7pyjson5_Mapping))) __PYX_ERR(3, 4, __pyx_L1_error);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_MAPPINGTYPES, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_encoder_options.pyx":5
 * cdef object DEFAULT_DECIMALFORMAT = '%s'
 * cdef object DEFAULT_MAPPINGTYPES = (Mapping,)
 * cdef object DEFAULT_QUOTATIONMARK = '"'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_kp_u__17);
  __Pyx_XGOTREF(__pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_QUOTATIONMARK, __pyx_kp_u__17);
  __Pyx_GIVEREF(__pyx_kp_u__17);

  /* "src/_encoder_options.pyx":83
 *     '''
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         cdef object args = tuple(filter(bool, (
 *             _options_reduce_arg('quotationmark', self.quotationmark, DEFAULT_QUOTATIONMARK),
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_7Options_1__reduce__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Options___reduce, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7pyjson5_Options, __pyx_n_s_reduce, __pyx_t_3) < 0) __PYX_ERR(3, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7pyjson5_Options);

  /* "src/_encoder_options.pyx":137
 *                                     'or False')
 * 
 *     def update(self, *args, **kw):             # <<<<<<<<<<<<<<
 *         '''
 *         Creates a new Options instance by modifying some members.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_7Options_9update, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Options_update, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_7pyjson5_Options, __pyx_n_s_update, __pyx_t_3) < 0) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7pyjson5_Options);

  /* "src/_encoder_options.pyx":147
 * 
 * 
 * cdef Options DEFAULT_OPTIONS_OBJECT = Options()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7pyjson5_Options)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF((PyObject *)__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT);
  __Pyx_DECREF_SET(__pyx_v_7pyjson5_DEFAULT_OPTIONS_OBJECT, ((struct __pyx_obj_7pyjson5_Options *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/_encoder_options.pyx":150
 * 
 * 
 * def _UnpickleOptions(*args):             # <<<<<<<<<<<<<<
 *     if args:
 *         return _to_options(None, dict(args))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_1_UnpickleOptions, 0, __pyx_n_s_UnpickleOptions, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UnpickleOptions, __pyx_t_3) < 0) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":3
 * global DEFAULT_MAX_NESTING_LEVEL, __all__, __author__, __doc__, __license__, __version__
 * 
 * DEFAULT_MAX_NESTING_LEVEL = 32             # <<<<<<<<<<<<<<
 * '''
 * Maximum nesting level of data to decode if no ``maxdepth`` argument is specified.
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_MAX_NESTING_LEVEL, __pyx_int_32) < 0) __PYX_ERR(15, 3, __pyx_L1_error)

  /* "src/_exports.pyx":8
 * '''
 * 
 * __version__ = PyUnicode_FromKindAndData(PyUnicode_1BYTE_KIND, VERSION, VERSION_LENGTH)             # <<<<<<<<<<<<<<
 * '''
 * Current library version.
 */
  __pyx_t_3 = PyUnicode_FromKindAndData(PyUnicode_1BYTE_KIND, JSON5EncoderCpp::VERSION, JSON5EncoderCpp::VERSION_LENGTH); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_3) < 0) __PYX_ERR(15, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":14
 * 
 * 
 * def decode(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from an :class:`str` object.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_3decode, 0, __pyx_n_s_decode, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__26);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode, __pyx_t_3) < 0) __PYX_ERR(15, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":59
 * 
 * 
 * def decode_latin1(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_5decode_latin1, 0, __pyx_n_s_decode_latin1, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__26);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_latin1, __pyx_t_3) < 0) __PYX_ERR(15, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":91
 * 
 * 
 * def decode_utf8(object data, object maxdepth=None, object some=False):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a :class:`bytes` object.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_7decode_utf8, 0, __pyx_n_s_decode_utf8, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__26);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_utf8, __pyx_t_3) < 0) __PYX_ERR(15, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":123
 * 
 * 
 * def decode_buffer(object obj, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                   object wordlength=None):
 *     '''
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_9decode_buffer, 0, __pyx_n_s_decode_buffer, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__31);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_buffer, __pyx_t_3) < 0) __PYX_ERR(15, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":178
 * 
 * 
 * def decode_callback(object cb, object maxdepth=None, object some=False,             # <<<<<<<<<<<<<<
 *                     object args=None):
 *     '''
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_11decode_callback, 0, __pyx_n_s_decode_callback, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__31);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_callback, __pyx_t_3) < 0) __PYX_ERR(15, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":236
 * 
 * 
 * def decode_io(object fp, object maxdepth=None, object some=True):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_13decode_io, 0, __pyx_n_s_decode_io, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__36);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_io, __pyx_t_3) < 0) __PYX_ERR(15, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":289
 * 
 * 
 * def encode(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object as a JSON5 compatible string.
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_options, Py_None) < 0) __PYX_ERR(15, 289, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_15encode, 0, __pyx_n_s_encode, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode, __pyx_t_2) < 0) __PYX_ERR(15, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exports.pyx":377
 * 
 * 
 * def encode_bytes(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible bytes string.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_options, Py_None) < 0) __PYX_ERR(15, 377, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_17encode_bytes, 0, __pyx_n_s_encode_bytes, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode_bytes, __pyx_t_3) < 0) __PYX_ERR(15, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "src/_exports.pyx":451
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,
 *                     options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object into a callback function.
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_options, Py_None) < 0) __PYX_ERR(15, 450, __pyx_L1_error)

  /* "src/_exports.pyx":450
 * 
 * 
 * def encode_callback(object data, object cb, object supply_bytes=False, *,             # <<<<<<<<<<<<<<
 *                     options=None, **options_kw):
 *     '''
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_19encode_callback, 0, __pyx_n_s_encode_callback, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__42);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode_callback, __pyx_t_2) < 0) __PYX_ERR(15, 450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/_exports.pyx":514
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,
 *               options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object into a file-object.
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_options, Py_None) < 0) __PYX_ERR(15, 513, __pyx_L1_error)

  /* "src/_exports.pyx":513
 * 
 * 
 * def encode_io(object data, object fp, object supply_bytes=True, *,             # <<<<<<<<<<<<<<
 *               options=None, **options_kw):
 *     '''
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_21encode_io, 0, __pyx_n_s_encode_io, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__45);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode_io, __pyx_t_3) < 0) __PYX_ERR(15, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_exports.pyx":567
 * 
 * 
 * def encode_noop(object data, *, options=None, **options_kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Test if the input is serializable.
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(15, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_options, Py_None) < 0) __PYX_ERR(15, 567, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_23encode_noop, 0, __pyx_n_s_encode_noop, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode_noop, __pyx_t_2) < 0) __PYX_ERR(15, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exports.pyx":609
 * __all__ = (
 *     # DECODE
 *     'decode', 'decode_utf8', 'decode_latin1', 'decode_buffer', 'decode_callback', 'decode_io',             # <<<<<<<<<<<<<<
 *     # ENCODE
 *     'encode', 'encode_bytes', 'encode_callback', 'encode_io', 'encode_noop', 'Options',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_tuple__48) < 0) __PYX_ERR(15, 607, __pyx_L1_error)

  /* "src/_exports.pyx":620
 * )
 * 
 * __doc__ = PyUnicode_FromKindAndData(PyUnicode_1BYTE_KIND, LONGDESCRIPTION, LONGDESCRIPTION_LENGTH)             # <<<<<<<<<<<<<<
 * 
 * __license__ = 'MIT OR Apache-2.0'
 */
  __pyx_t_2 = PyUnicode_FromKindAndData(PyUnicode_1BYTE_KIND, JSON5EncoderCpp::LONGDESCRIPTION, JSON5EncoderCpp::LONGDESCRIPTION_LENGTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_doc, __pyx_t_2) < 0) __PYX_ERR(15, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/_exports.pyx":622
 * __doc__ = PyUnicode_FromKindAndData(PyUnicode_1BYTE_KIND, LONGDESCRIPTION, LONGDESCRIPTION_LENGTH)
 * 
 * __license__ = 'MIT OR Apache-2.0'             # <<<<<<<<<<<<<<
 * 
 * __author__ = '2018-2025 Ren Kijewski <pypi.org@k6i.de>'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_kp_u_MIT_OR_Apache_2_0) < 0) __PYX_ERR(15, 622, __pyx_L1_error)

  /* "src/_exports.pyx":624
 * __license__ = 'MIT OR Apache-2.0'
 * 
 * __author__ = '2018-2025 Ren Kijewski <pypi.org@k6i.de>'             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_u_2018_2025_Ren_Kijewski_pypi_org) < 0) __PYX_ERR(15, 624, __pyx_L1_error)

  /* "src/_legacy.pyx":1
 * def loads(s, *, encoding='UTF-8', **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a string.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_encoding, ((PyObject*)__pyx_kp_u_UTF_8)) < 0) __PYX_ERR(16, 1, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_25loads, 0, __pyx_n_s_loads, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_loads, __pyx_t_3) < 0) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_legacy.pyx":31
 * 
 * 
 * def load(fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Decodes JSON5 serialized data from a file-like object.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_27load, 0, __pyx_n_s_load, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_load, __pyx_t_3) < 0) __PYX_ERR(16, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_legacy.pyx":56
 * 
 * 
 * def dumps(obj, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_29dumps, 0, __pyx_n_s_dumps, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dumps, __pyx_t_3) < 0) __PYX_ERR(16, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/_legacy.pyx":81
 * 
 * 
 * def dump(object obj, object fp, **kw):             # <<<<<<<<<<<<<<
 *     '''
 *     Serializes a Python object to a JSON5 compatible string.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7pyjson5_31dump, 0, __pyx_n_s_dump, NULL, __pyx_n_s_pyjson5, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dump, __pyx_t_3) < 0) __PYX_ERR(16, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyjson5.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: embedsignature = True, language_level = 3, warn.undeclared = True, warn.unreachable = True, warn.maybe_uninitialized = True
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(17, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pyjson5", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyjson5");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        __Pyx_TypeName c_type_name = __Pyx_PyType_GetName(Py_TYPE(c));
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but " __Pyx_FMT_TYPENAME " found",
            c_type_name);
        __Pyx_DECREF_TypeName(c_type_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__13);
    }
    return name;
}
#endif

/* ValidateExternBase */
static int __Pyx_validate_extern_base(PyTypeObject *base) {
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_itemsize;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
    itemsize = ((PyTypeObject *)base)->tp_itemsize;
#else
    py_itemsize = PyObject_GetAttrString((PyObject*)base, "__itemsize__");
    if (!py_itemsize)
        return -1;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        return -1;
#endif
    if (itemsize) {
        __Pyx_TypeName b_name = __Pyx_PyType_GetName(base);
        PyErr_Format(PyExc_TypeError,
                "inheritance from PyVarObject types like '" __Pyx_FMT_TYPENAME "' not currently supported", b_name);
        __Pyx_DECREF_TypeName(b_name);
        return -1;
    }
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__14);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
#if CYTHON_ASSUME_SAFE_MACROS
        double value = PyFloat_AS_DOUBLE(float_value);
#else
        double value = PyFloat_AsDouble(float_value);
#endif
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_std_3a__3a_uint32_t(std::uint32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const std::uint32_t neg_one = (std::uint32_t) -1, const_zero = (std::uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(std::uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(std::uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(std::uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(std::uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(std::uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(std::uint32_t),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(std::uint32_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_std_3a__3a_int32_t(std::int32_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const std::int32_t neg_one = (std::int32_t) -1, const_zero = (std::int32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(std::int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(std::int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(std::int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(std::int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(std::int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(std::int32_t),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(std::int32_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* BytesContains */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character) {
    const Py_ssize_t length = PyBytes_GET_SIZE(bytes);
    char* char_start = PyBytes_AS_STRING(bytes);
    return memchr(char_start, (unsigned char)character, (size_t)length) != NULL;
}

/* CIntFromPy */
static CYTHON_INLINE std::uint32_t __Pyx_PyInt_As_std_3a__3a_uint32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const std::uint32_t neg_one = (std::uint32_t) -1, const_zero = (std::uint32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(std::uint32_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(std::uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (std::uint32_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        std::uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (std::uint32_t) -1;
        val = __Pyx_PyInt_As_std_3a__3a_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(std::uint32_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(std::uint32_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) >= 2 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((((std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(std::uint32_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) >= 3 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((((((std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(std::uint32_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) >= 4 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((((((((std::uint32_t)digits[3]) << PyLong_SHIFT) | (std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (std::uint32_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(std::uint32_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(std::uint32_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(std::uint32_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(std::uint32_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((std::uint32_t)-1)*(((((std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(std::uint32_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (std::uint32_t) ((((((std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(std::uint32_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((std::uint32_t)-1)*(((((((std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(std::uint32_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (std::uint32_t) ((((((((std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(std::uint32_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (std::uint32_t) (((std::uint32_t)-1)*(((((((((std::uint32_t)digits[3]) << PyLong_SHIFT) | (std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(std::uint32_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::uint32_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (std::uint32_t) ((((((((((std::uint32_t)digits[3]) << PyLong_SHIFT) | (std::uint32_t)digits[2]) << PyLong_SHIFT) | (std::uint32_t)digits[1]) << PyLong_SHIFT) | (std::uint32_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(std::uint32_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(std::uint32_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        std::uint32_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (std::uint32_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (std::uint32_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (std::uint32_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (std::uint32_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(std::uint32_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((std::uint32_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(std::uint32_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((std::uint32_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((std::uint32_t) 1) << (sizeof(std::uint32_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (std::uint32_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to std::uint32_t");
    return (std::uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to std::uint32_t");
    return (std::uint32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT)) {
                            return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT)) {
                            return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT)) {
                            return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned char) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned char) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned char) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned char) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned char val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned char) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned char) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned char) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned char) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned char) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned char) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned char) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned char) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned char) 1) << (sizeof(unsigned char) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned char) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (char) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(char) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(char) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        char val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (char) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (char) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (char) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (char) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((char) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((char) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (char) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
static CYTHON_INLINE std::int32_t __Pyx_PyInt_As_std_3a__3a_int32_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const std::int32_t neg_one = (std::int32_t) -1, const_zero = (std::int32_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(std::int32_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(std::int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (std::int32_t) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        std::int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (std::int32_t) -1;
        val = __Pyx_PyInt_As_std_3a__3a_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(std::int32_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(std::int32_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) >= 2 * PyLong_SHIFT)) {
                            return (std::int32_t) (((((std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(std::int32_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) >= 3 * PyLong_SHIFT)) {
                            return (std::int32_t) (((((((std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(std::int32_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) >= 4 * PyLong_SHIFT)) {
                            return (std::int32_t) (((((((((std::int32_t)digits[3]) << PyLong_SHIFT) | (std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (std::int32_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(std::int32_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(std::int32_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(std::int32_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(std::int32_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (std::int32_t) (((std::int32_t)-1)*(((((std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(std::int32_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (std::int32_t) ((((((std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(std::int32_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (std::int32_t) (((std::int32_t)-1)*(((((((std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(std::int32_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (std::int32_t) ((((((((std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(std::int32_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (std::int32_t) (((std::int32_t)-1)*(((((((((std::int32_t)digits[3]) << PyLong_SHIFT) | (std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(std::int32_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(std::int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(std::int32_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (std::int32_t) ((((((((((std::int32_t)digits[3]) << PyLong_SHIFT) | (std::int32_t)digits[2]) << PyLong_SHIFT) | (std::int32_t)digits[1]) << PyLong_SHIFT) | (std::int32_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(std::int32_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(std::int32_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(std::int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        std::int32_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (std::int32_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (std::int32_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (std::int32_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (std::int32_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(std::int32_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((std::int32_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(std::int32_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((std::int32_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((std::int32_t) 1) << (sizeof(std::int32_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (std::int32_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to std::int32_t");
    return (std::int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to std::int32_t");
    return (std::int32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
